
stepperMeasurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000424  0800c000  0800c000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f4  0800c428  0800c428  00001428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08011e1c  08011e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012094  08012094  000070d0  2**0
                  CONTENTS
  4 .ARM          00000008  08012094  08012094  00007094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801209c  0801209c  000070d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801209c  0801209c  0000709c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080120a0  080120a0  000070a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  200000c0  080120a4  000070c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014348  200000d0  080120b4  000070d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014418  080120b4  00007418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022ef6  00000000  00000000  00007100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053d8  00000000  00000000  00029ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000fcbf  00000000  00000000  0002f3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001620  00000000  00000000  0003f090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001378  00000000  00000000  000406b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002883c  00000000  00000000  00041a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002bf86  00000000  00000000  0006a264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef5d2  00000000  00000000  000961ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001857bc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e80  00000000  00000000  00185800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  00189680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c428 <__do_global_dtors_aux>:
 800c428:	b510      	push	{r4, lr}
 800c42a:	4c05      	ldr	r4, [pc, #20]	@ (800c440 <__do_global_dtors_aux+0x18>)
 800c42c:	7823      	ldrb	r3, [r4, #0]
 800c42e:	b933      	cbnz	r3, 800c43e <__do_global_dtors_aux+0x16>
 800c430:	4b04      	ldr	r3, [pc, #16]	@ (800c444 <__do_global_dtors_aux+0x1c>)
 800c432:	b113      	cbz	r3, 800c43a <__do_global_dtors_aux+0x12>
 800c434:	4804      	ldr	r0, [pc, #16]	@ (800c448 <__do_global_dtors_aux+0x20>)
 800c436:	f3af 8000 	nop.w
 800c43a:	2301      	movs	r3, #1
 800c43c:	7023      	strb	r3, [r4, #0]
 800c43e:	bd10      	pop	{r4, pc}
 800c440:	200000d0 	.word	0x200000d0
 800c444:	00000000 	.word	0x00000000
 800c448:	08011e04 	.word	0x08011e04

0800c44c <frame_dummy>:
 800c44c:	b508      	push	{r3, lr}
 800c44e:	4b03      	ldr	r3, [pc, #12]	@ (800c45c <frame_dummy+0x10>)
 800c450:	b11b      	cbz	r3, 800c45a <frame_dummy+0xe>
 800c452:	4903      	ldr	r1, [pc, #12]	@ (800c460 <frame_dummy+0x14>)
 800c454:	4803      	ldr	r0, [pc, #12]	@ (800c464 <frame_dummy+0x18>)
 800c456:	f3af 8000 	nop.w
 800c45a:	bd08      	pop	{r3, pc}
 800c45c:	00000000 	.word	0x00000000
 800c460:	200000d4 	.word	0x200000d4
 800c464:	08011e04 	.word	0x08011e04

0800c468 <__aeabi_dmul>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800c46e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800c472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c476:	bf1d      	ittte	ne
 800c478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c47c:	ea94 0f0c 	teqne	r4, ip
 800c480:	ea95 0f0c 	teqne	r5, ip
 800c484:	f000 f8de 	bleq	800c644 <__aeabi_dmul+0x1dc>
 800c488:	442c      	add	r4, r5
 800c48a:	ea81 0603 	eor.w	r6, r1, r3
 800c48e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c49a:	bf18      	it	ne
 800c49c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c4a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c4a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4a8:	d038      	beq.n	800c51c <__aeabi_dmul+0xb4>
 800c4aa:	fba0 ce02 	umull	ip, lr, r0, r2
 800c4ae:	f04f 0500 	mov.w	r5, #0
 800c4b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c4b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800c4ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c4be:	f04f 0600 	mov.w	r6, #0
 800c4c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c4c6:	f09c 0f00 	teq	ip, #0
 800c4ca:	bf18      	it	ne
 800c4cc:	f04e 0e01 	orrne.w	lr, lr, #1
 800c4d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800c4d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800c4d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800c4dc:	d204      	bcs.n	800c4e8 <__aeabi_dmul+0x80>
 800c4de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c4e2:	416d      	adcs	r5, r5
 800c4e4:	eb46 0606 	adc.w	r6, r6, r6
 800c4e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c4ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c4f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c4f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c4f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c4fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800c500:	bf88      	it	hi
 800c502:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800c506:	d81e      	bhi.n	800c546 <__aeabi_dmul+0xde>
 800c508:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800c50c:	bf08      	it	eq
 800c50e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c512:	f150 0000 	adcs.w	r0, r0, #0
 800c516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800c520:	ea46 0101 	orr.w	r1, r6, r1
 800c524:	ea40 0002 	orr.w	r0, r0, r2
 800c528:	ea81 0103 	eor.w	r1, r1, r3
 800c52c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c530:	bfc2      	ittt	gt
 800c532:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c53a:	bd70      	popgt	{r4, r5, r6, pc}
 800c53c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c540:	f04f 0e00 	mov.w	lr, #0
 800c544:	3c01      	subs	r4, #1
 800c546:	f300 80ab 	bgt.w	800c6a0 <__aeabi_dmul+0x238>
 800c54a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800c54e:	bfde      	ittt	le
 800c550:	2000      	movle	r0, #0
 800c552:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800c556:	bd70      	pople	{r4, r5, r6, pc}
 800c558:	f1c4 0400 	rsb	r4, r4, #0
 800c55c:	3c20      	subs	r4, #32
 800c55e:	da35      	bge.n	800c5cc <__aeabi_dmul+0x164>
 800c560:	340c      	adds	r4, #12
 800c562:	dc1b      	bgt.n	800c59c <__aeabi_dmul+0x134>
 800c564:	f104 0414 	add.w	r4, r4, #20
 800c568:	f1c4 0520 	rsb	r5, r4, #32
 800c56c:	fa00 f305 	lsl.w	r3, r0, r5
 800c570:	fa20 f004 	lsr.w	r0, r0, r4
 800c574:	fa01 f205 	lsl.w	r2, r1, r5
 800c578:	ea40 0002 	orr.w	r0, r0, r2
 800c57c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800c580:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c588:	fa21 f604 	lsr.w	r6, r1, r4
 800c58c:	eb42 0106 	adc.w	r1, r2, r6
 800c590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c594:	bf08      	it	eq
 800c596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c59a:	bd70      	pop	{r4, r5, r6, pc}
 800c59c:	f1c4 040c 	rsb	r4, r4, #12
 800c5a0:	f1c4 0520 	rsb	r5, r4, #32
 800c5a4:	fa00 f304 	lsl.w	r3, r0, r4
 800c5a8:	fa20 f005 	lsr.w	r0, r0, r5
 800c5ac:	fa01 f204 	lsl.w	r2, r1, r4
 800c5b0:	ea40 0002 	orr.w	r0, r0, r2
 800c5b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c5b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c5bc:	f141 0100 	adc.w	r1, r1, #0
 800c5c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5c4:	bf08      	it	eq
 800c5c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c5ca:	bd70      	pop	{r4, r5, r6, pc}
 800c5cc:	f1c4 0520 	rsb	r5, r4, #32
 800c5d0:	fa00 f205 	lsl.w	r2, r0, r5
 800c5d4:	ea4e 0e02 	orr.w	lr, lr, r2
 800c5d8:	fa20 f304 	lsr.w	r3, r0, r4
 800c5dc:	fa01 f205 	lsl.w	r2, r1, r5
 800c5e0:	ea43 0302 	orr.w	r3, r3, r2
 800c5e4:	fa21 f004 	lsr.w	r0, r1, r4
 800c5e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c5ec:	fa21 f204 	lsr.w	r2, r1, r4
 800c5f0:	ea20 0002 	bic.w	r0, r0, r2
 800c5f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5fc:	bf08      	it	eq
 800c5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c602:	bd70      	pop	{r4, r5, r6, pc}
 800c604:	f094 0f00 	teq	r4, #0
 800c608:	d10f      	bne.n	800c62a <__aeabi_dmul+0x1c2>
 800c60a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800c60e:	0040      	lsls	r0, r0, #1
 800c610:	eb41 0101 	adc.w	r1, r1, r1
 800c614:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800c618:	bf08      	it	eq
 800c61a:	3c01      	subeq	r4, #1
 800c61c:	d0f7      	beq.n	800c60e <__aeabi_dmul+0x1a6>
 800c61e:	ea41 0106 	orr.w	r1, r1, r6
 800c622:	f095 0f00 	teq	r5, #0
 800c626:	bf18      	it	ne
 800c628:	4770      	bxne	lr
 800c62a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800c62e:	0052      	lsls	r2, r2, #1
 800c630:	eb43 0303 	adc.w	r3, r3, r3
 800c634:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800c638:	bf08      	it	eq
 800c63a:	3d01      	subeq	r5, #1
 800c63c:	d0f7      	beq.n	800c62e <__aeabi_dmul+0x1c6>
 800c63e:	ea43 0306 	orr.w	r3, r3, r6
 800c642:	4770      	bx	lr
 800c644:	ea94 0f0c 	teq	r4, ip
 800c648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c64c:	bf18      	it	ne
 800c64e:	ea95 0f0c 	teqne	r5, ip
 800c652:	d00c      	beq.n	800c66e <__aeabi_dmul+0x206>
 800c654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c658:	bf18      	it	ne
 800c65a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c65e:	d1d1      	bne.n	800c604 <__aeabi_dmul+0x19c>
 800c660:	ea81 0103 	eor.w	r1, r1, r3
 800c664:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c668:	f04f 0000 	mov.w	r0, #0
 800c66c:	bd70      	pop	{r4, r5, r6, pc}
 800c66e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c672:	bf06      	itte	eq
 800c674:	4610      	moveq	r0, r2
 800c676:	4619      	moveq	r1, r3
 800c678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c67c:	d019      	beq.n	800c6b2 <__aeabi_dmul+0x24a>
 800c67e:	ea94 0f0c 	teq	r4, ip
 800c682:	d102      	bne.n	800c68a <__aeabi_dmul+0x222>
 800c684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c688:	d113      	bne.n	800c6b2 <__aeabi_dmul+0x24a>
 800c68a:	ea95 0f0c 	teq	r5, ip
 800c68e:	d105      	bne.n	800c69c <__aeabi_dmul+0x234>
 800c690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c694:	bf1c      	itt	ne
 800c696:	4610      	movne	r0, r2
 800c698:	4619      	movne	r1, r3
 800c69a:	d10a      	bne.n	800c6b2 <__aeabi_dmul+0x24a>
 800c69c:	ea81 0103 	eor.w	r1, r1, r3
 800c6a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c6a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800c6a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c6ac:	f04f 0000 	mov.w	r0, #0
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
 800c6b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800c6b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}

0800c6bc <__aeabi_drsub>:
 800c6bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800c6c0:	e002      	b.n	800c6c8 <__adddf3>
 800c6c2:	bf00      	nop

0800c6c4 <__aeabi_dsub>:
 800c6c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800c6c8 <__adddf3>:
 800c6c8:	b530      	push	{r4, r5, lr}
 800c6ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c6ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c6d2:	ea94 0f05 	teq	r4, r5
 800c6d6:	bf08      	it	eq
 800c6d8:	ea90 0f02 	teqeq	r0, r2
 800c6dc:	bf1f      	itttt	ne
 800c6de:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c6e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c6e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c6ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c6ee:	f000 80e2 	beq.w	800c8b6 <__adddf3+0x1ee>
 800c6f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c6f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c6fa:	bfb8      	it	lt
 800c6fc:	426d      	neglt	r5, r5
 800c6fe:	dd0c      	ble.n	800c71a <__adddf3+0x52>
 800c700:	442c      	add	r4, r5
 800c702:	ea80 0202 	eor.w	r2, r0, r2
 800c706:	ea81 0303 	eor.w	r3, r1, r3
 800c70a:	ea82 0000 	eor.w	r0, r2, r0
 800c70e:	ea83 0101 	eor.w	r1, r3, r1
 800c712:	ea80 0202 	eor.w	r2, r0, r2
 800c716:	ea81 0303 	eor.w	r3, r1, r3
 800c71a:	2d36      	cmp	r5, #54	@ 0x36
 800c71c:	bf88      	it	hi
 800c71e:	bd30      	pophi	{r4, r5, pc}
 800c720:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800c724:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c728:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800c72c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c730:	d002      	beq.n	800c738 <__adddf3+0x70>
 800c732:	4240      	negs	r0, r0
 800c734:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c738:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800c73c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c740:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c744:	d002      	beq.n	800c74c <__adddf3+0x84>
 800c746:	4252      	negs	r2, r2
 800c748:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c74c:	ea94 0f05 	teq	r4, r5
 800c750:	f000 80a7 	beq.w	800c8a2 <__adddf3+0x1da>
 800c754:	f1a4 0401 	sub.w	r4, r4, #1
 800c758:	f1d5 0e20 	rsbs	lr, r5, #32
 800c75c:	db0d      	blt.n	800c77a <__adddf3+0xb2>
 800c75e:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c762:	fa22 f205 	lsr.w	r2, r2, r5
 800c766:	1880      	adds	r0, r0, r2
 800c768:	f141 0100 	adc.w	r1, r1, #0
 800c76c:	fa03 f20e 	lsl.w	r2, r3, lr
 800c770:	1880      	adds	r0, r0, r2
 800c772:	fa43 f305 	asr.w	r3, r3, r5
 800c776:	4159      	adcs	r1, r3
 800c778:	e00e      	b.n	800c798 <__adddf3+0xd0>
 800c77a:	f1a5 0520 	sub.w	r5, r5, #32
 800c77e:	f10e 0e20 	add.w	lr, lr, #32
 800c782:	2a01      	cmp	r2, #1
 800c784:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c788:	bf28      	it	cs
 800c78a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c78e:	fa43 f305 	asr.w	r3, r3, r5
 800c792:	18c0      	adds	r0, r0, r3
 800c794:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c798:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c79c:	d507      	bpl.n	800c7ae <__adddf3+0xe6>
 800c79e:	f04f 0e00 	mov.w	lr, #0
 800c7a2:	f1dc 0c00 	rsbs	ip, ip, #0
 800c7a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c7aa:	eb6e 0101 	sbc.w	r1, lr, r1
 800c7ae:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800c7b2:	d31b      	bcc.n	800c7ec <__adddf3+0x124>
 800c7b4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800c7b8:	d30c      	bcc.n	800c7d4 <__adddf3+0x10c>
 800c7ba:	0849      	lsrs	r1, r1, #1
 800c7bc:	ea5f 0030 	movs.w	r0, r0, rrx
 800c7c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c7c4:	f104 0401 	add.w	r4, r4, #1
 800c7c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c7cc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800c7d0:	f080 809a 	bcs.w	800c908 <__adddf3+0x240>
 800c7d4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800c7d8:	bf08      	it	eq
 800c7da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c7de:	f150 0000 	adcs.w	r0, r0, #0
 800c7e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c7e6:	ea41 0105 	orr.w	r1, r1, r5
 800c7ea:	bd30      	pop	{r4, r5, pc}
 800c7ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c7f0:	4140      	adcs	r0, r0
 800c7f2:	eb41 0101 	adc.w	r1, r1, r1
 800c7f6:	3c01      	subs	r4, #1
 800c7f8:	bf28      	it	cs
 800c7fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800c7fe:	d2e9      	bcs.n	800c7d4 <__adddf3+0x10c>
 800c800:	f091 0f00 	teq	r1, #0
 800c804:	bf04      	itt	eq
 800c806:	4601      	moveq	r1, r0
 800c808:	2000      	moveq	r0, #0
 800c80a:	fab1 f381 	clz	r3, r1
 800c80e:	bf08      	it	eq
 800c810:	3320      	addeq	r3, #32
 800c812:	f1a3 030b 	sub.w	r3, r3, #11
 800c816:	f1b3 0220 	subs.w	r2, r3, #32
 800c81a:	da0c      	bge.n	800c836 <__adddf3+0x16e>
 800c81c:	320c      	adds	r2, #12
 800c81e:	dd08      	ble.n	800c832 <__adddf3+0x16a>
 800c820:	f102 0c14 	add.w	ip, r2, #20
 800c824:	f1c2 020c 	rsb	r2, r2, #12
 800c828:	fa01 f00c 	lsl.w	r0, r1, ip
 800c82c:	fa21 f102 	lsr.w	r1, r1, r2
 800c830:	e00c      	b.n	800c84c <__adddf3+0x184>
 800c832:	f102 0214 	add.w	r2, r2, #20
 800c836:	bfd8      	it	le
 800c838:	f1c2 0c20 	rsble	ip, r2, #32
 800c83c:	fa01 f102 	lsl.w	r1, r1, r2
 800c840:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c844:	bfdc      	itt	le
 800c846:	ea41 010c 	orrle.w	r1, r1, ip
 800c84a:	4090      	lslle	r0, r2
 800c84c:	1ae4      	subs	r4, r4, r3
 800c84e:	bfa2      	ittt	ge
 800c850:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c854:	4329      	orrge	r1, r5
 800c856:	bd30      	popge	{r4, r5, pc}
 800c858:	ea6f 0404 	mvn.w	r4, r4
 800c85c:	3c1f      	subs	r4, #31
 800c85e:	da1c      	bge.n	800c89a <__adddf3+0x1d2>
 800c860:	340c      	adds	r4, #12
 800c862:	dc0e      	bgt.n	800c882 <__adddf3+0x1ba>
 800c864:	f104 0414 	add.w	r4, r4, #20
 800c868:	f1c4 0220 	rsb	r2, r4, #32
 800c86c:	fa20 f004 	lsr.w	r0, r0, r4
 800c870:	fa01 f302 	lsl.w	r3, r1, r2
 800c874:	ea40 0003 	orr.w	r0, r0, r3
 800c878:	fa21 f304 	lsr.w	r3, r1, r4
 800c87c:	ea45 0103 	orr.w	r1, r5, r3
 800c880:	bd30      	pop	{r4, r5, pc}
 800c882:	f1c4 040c 	rsb	r4, r4, #12
 800c886:	f1c4 0220 	rsb	r2, r4, #32
 800c88a:	fa20 f002 	lsr.w	r0, r0, r2
 800c88e:	fa01 f304 	lsl.w	r3, r1, r4
 800c892:	ea40 0003 	orr.w	r0, r0, r3
 800c896:	4629      	mov	r1, r5
 800c898:	bd30      	pop	{r4, r5, pc}
 800c89a:	fa21 f004 	lsr.w	r0, r1, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	bd30      	pop	{r4, r5, pc}
 800c8a2:	f094 0f00 	teq	r4, #0
 800c8a6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800c8aa:	bf06      	itte	eq
 800c8ac:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800c8b0:	3401      	addeq	r4, #1
 800c8b2:	3d01      	subne	r5, #1
 800c8b4:	e74e      	b.n	800c754 <__adddf3+0x8c>
 800c8b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c8ba:	bf18      	it	ne
 800c8bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c8c0:	d029      	beq.n	800c916 <__adddf3+0x24e>
 800c8c2:	ea94 0f05 	teq	r4, r5
 800c8c6:	bf08      	it	eq
 800c8c8:	ea90 0f02 	teqeq	r0, r2
 800c8cc:	d005      	beq.n	800c8da <__adddf3+0x212>
 800c8ce:	ea54 0c00 	orrs.w	ip, r4, r0
 800c8d2:	bf04      	itt	eq
 800c8d4:	4619      	moveq	r1, r3
 800c8d6:	4610      	moveq	r0, r2
 800c8d8:	bd30      	pop	{r4, r5, pc}
 800c8da:	ea91 0f03 	teq	r1, r3
 800c8de:	bf1e      	ittt	ne
 800c8e0:	2100      	movne	r1, #0
 800c8e2:	2000      	movne	r0, #0
 800c8e4:	bd30      	popne	{r4, r5, pc}
 800c8e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c8ea:	d105      	bne.n	800c8f8 <__adddf3+0x230>
 800c8ec:	0040      	lsls	r0, r0, #1
 800c8ee:	4149      	adcs	r1, r1
 800c8f0:	bf28      	it	cs
 800c8f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800c8f6:	bd30      	pop	{r4, r5, pc}
 800c8f8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800c8fc:	bf3c      	itt	cc
 800c8fe:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800c902:	bd30      	popcc	{r4, r5, pc}
 800c904:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c908:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800c90c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c910:	f04f 0000 	mov.w	r0, #0
 800c914:	bd30      	pop	{r4, r5, pc}
 800c916:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c91a:	bf1a      	itte	ne
 800c91c:	4619      	movne	r1, r3
 800c91e:	4610      	movne	r0, r2
 800c920:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c924:	bf1c      	itt	ne
 800c926:	460b      	movne	r3, r1
 800c928:	4602      	movne	r2, r0
 800c92a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c92e:	bf06      	itte	eq
 800c930:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c934:	ea91 0f03 	teqeq	r1, r3
 800c938:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800c93c:	bd30      	pop	{r4, r5, pc}
 800c93e:	bf00      	nop

0800c940 <__aeabi_ui2d>:
 800c940:	f090 0f00 	teq	r0, #0
 800c944:	bf04      	itt	eq
 800c946:	2100      	moveq	r1, #0
 800c948:	4770      	bxeq	lr
 800c94a:	b530      	push	{r4, r5, lr}
 800c94c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c950:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c954:	f04f 0500 	mov.w	r5, #0
 800c958:	f04f 0100 	mov.w	r1, #0
 800c95c:	e750      	b.n	800c800 <__adddf3+0x138>
 800c95e:	bf00      	nop

0800c960 <__aeabi_i2d>:
 800c960:	f090 0f00 	teq	r0, #0
 800c964:	bf04      	itt	eq
 800c966:	2100      	moveq	r1, #0
 800c968:	4770      	bxeq	lr
 800c96a:	b530      	push	{r4, r5, lr}
 800c96c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c970:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c974:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800c978:	bf48      	it	mi
 800c97a:	4240      	negmi	r0, r0
 800c97c:	f04f 0100 	mov.w	r1, #0
 800c980:	e73e      	b.n	800c800 <__adddf3+0x138>
 800c982:	bf00      	nop

0800c984 <__aeabi_f2d>:
 800c984:	0042      	lsls	r2, r0, #1
 800c986:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c98a:	ea4f 0131 	mov.w	r1, r1, rrx
 800c98e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c992:	bf1f      	itttt	ne
 800c994:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800c998:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800c99c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800c9a0:	4770      	bxne	lr
 800c9a2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c9a6:	bf08      	it	eq
 800c9a8:	4770      	bxeq	lr
 800c9aa:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800c9ae:	bf04      	itt	eq
 800c9b0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800c9b4:	4770      	bxeq	lr
 800c9b6:	b530      	push	{r4, r5, lr}
 800c9b8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800c9bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c9c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c9c4:	e71c      	b.n	800c800 <__adddf3+0x138>
 800c9c6:	bf00      	nop

0800c9c8 <__aeabi_ul2d>:
 800c9c8:	ea50 0201 	orrs.w	r2, r0, r1
 800c9cc:	bf08      	it	eq
 800c9ce:	4770      	bxeq	lr
 800c9d0:	b530      	push	{r4, r5, lr}
 800c9d2:	f04f 0500 	mov.w	r5, #0
 800c9d6:	e00a      	b.n	800c9ee <__aeabi_l2d+0x16>

0800c9d8 <__aeabi_l2d>:
 800c9d8:	ea50 0201 	orrs.w	r2, r0, r1
 800c9dc:	bf08      	it	eq
 800c9de:	4770      	bxeq	lr
 800c9e0:	b530      	push	{r4, r5, lr}
 800c9e2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800c9e6:	d502      	bpl.n	800c9ee <__aeabi_l2d+0x16>
 800c9e8:	4240      	negs	r0, r0
 800c9ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c9ee:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c9f2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c9f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c9fa:	f43f aed8 	beq.w	800c7ae <__adddf3+0xe6>
 800c9fe:	f04f 0203 	mov.w	r2, #3
 800ca02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ca06:	bf18      	it	ne
 800ca08:	3203      	addne	r2, #3
 800ca0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ca0e:	bf18      	it	ne
 800ca10:	3203      	addne	r2, #3
 800ca12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800ca16:	f1c2 0320 	rsb	r3, r2, #32
 800ca1a:	fa00 fc03 	lsl.w	ip, r0, r3
 800ca1e:	fa20 f002 	lsr.w	r0, r0, r2
 800ca22:	fa01 fe03 	lsl.w	lr, r1, r3
 800ca26:	ea40 000e 	orr.w	r0, r0, lr
 800ca2a:	fa21 f102 	lsr.w	r1, r1, r2
 800ca2e:	4414      	add	r4, r2
 800ca30:	e6bd      	b.n	800c7ae <__adddf3+0xe6>
 800ca32:	bf00      	nop

0800ca34 <__aeabi_d2iz>:
 800ca34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ca38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800ca3c:	d215      	bcs.n	800ca6a <__aeabi_d2iz+0x36>
 800ca3e:	d511      	bpl.n	800ca64 <__aeabi_d2iz+0x30>
 800ca40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800ca44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ca48:	d912      	bls.n	800ca70 <__aeabi_d2iz+0x3c>
 800ca4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ca4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ca52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ca56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800ca5a:	fa23 f002 	lsr.w	r0, r3, r2
 800ca5e:	bf18      	it	ne
 800ca60:	4240      	negne	r0, r0
 800ca62:	4770      	bx	lr
 800ca64:	f04f 0000 	mov.w	r0, #0
 800ca68:	4770      	bx	lr
 800ca6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ca6e:	d105      	bne.n	800ca7c <__aeabi_d2iz+0x48>
 800ca70:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800ca74:	bf08      	it	eq
 800ca76:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800ca7a:	4770      	bx	lr
 800ca7c:	f04f 0000 	mov.w	r0, #0
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop

0800ca84 <__aeabi_uldivmod>:
 800ca84:	b953      	cbnz	r3, 800ca9c <__aeabi_uldivmod+0x18>
 800ca86:	b94a      	cbnz	r2, 800ca9c <__aeabi_uldivmod+0x18>
 800ca88:	2900      	cmp	r1, #0
 800ca8a:	bf08      	it	eq
 800ca8c:	2800      	cmpeq	r0, #0
 800ca8e:	bf1c      	itt	ne
 800ca90:	f04f 31ff 	movne.w	r1, #4294967295
 800ca94:	f04f 30ff 	movne.w	r0, #4294967295
 800ca98:	f000 b96a 	b.w	800cd70 <__aeabi_idiv0>
 800ca9c:	f1ad 0c08 	sub.w	ip, sp, #8
 800caa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800caa4:	f000 f806 	bl	800cab4 <__udivmoddi4>
 800caa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800caac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cab0:	b004      	add	sp, #16
 800cab2:	4770      	bx	lr

0800cab4 <__udivmoddi4>:
 800cab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab8:	9d08      	ldr	r5, [sp, #32]
 800caba:	460c      	mov	r4, r1
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d14e      	bne.n	800cb5e <__udivmoddi4+0xaa>
 800cac0:	4694      	mov	ip, r2
 800cac2:	458c      	cmp	ip, r1
 800cac4:	4686      	mov	lr, r0
 800cac6:	fab2 f282 	clz	r2, r2
 800caca:	d962      	bls.n	800cb92 <__udivmoddi4+0xde>
 800cacc:	b14a      	cbz	r2, 800cae2 <__udivmoddi4+0x2e>
 800cace:	f1c2 0320 	rsb	r3, r2, #32
 800cad2:	4091      	lsls	r1, r2
 800cad4:	fa20 f303 	lsr.w	r3, r0, r3
 800cad8:	fa0c fc02 	lsl.w	ip, ip, r2
 800cadc:	4319      	orrs	r1, r3
 800cade:	fa00 fe02 	lsl.w	lr, r0, r2
 800cae2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800cae6:	fa1f f68c 	uxth.w	r6, ip
 800caea:	fbb1 f4f7 	udiv	r4, r1, r7
 800caee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800caf2:	fb07 1114 	mls	r1, r7, r4, r1
 800caf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cafa:	fb04 f106 	mul.w	r1, r4, r6
 800cafe:	4299      	cmp	r1, r3
 800cb00:	d90a      	bls.n	800cb18 <__udivmoddi4+0x64>
 800cb02:	eb1c 0303 	adds.w	r3, ip, r3
 800cb06:	f104 30ff 	add.w	r0, r4, #4294967295
 800cb0a:	f080 8112 	bcs.w	800cd32 <__udivmoddi4+0x27e>
 800cb0e:	4299      	cmp	r1, r3
 800cb10:	f240 810f 	bls.w	800cd32 <__udivmoddi4+0x27e>
 800cb14:	3c02      	subs	r4, #2
 800cb16:	4463      	add	r3, ip
 800cb18:	1a59      	subs	r1, r3, r1
 800cb1a:	fa1f f38e 	uxth.w	r3, lr
 800cb1e:	fbb1 f0f7 	udiv	r0, r1, r7
 800cb22:	fb07 1110 	mls	r1, r7, r0, r1
 800cb26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cb2a:	fb00 f606 	mul.w	r6, r0, r6
 800cb2e:	429e      	cmp	r6, r3
 800cb30:	d90a      	bls.n	800cb48 <__udivmoddi4+0x94>
 800cb32:	eb1c 0303 	adds.w	r3, ip, r3
 800cb36:	f100 31ff 	add.w	r1, r0, #4294967295
 800cb3a:	f080 80fc 	bcs.w	800cd36 <__udivmoddi4+0x282>
 800cb3e:	429e      	cmp	r6, r3
 800cb40:	f240 80f9 	bls.w	800cd36 <__udivmoddi4+0x282>
 800cb44:	4463      	add	r3, ip
 800cb46:	3802      	subs	r0, #2
 800cb48:	1b9b      	subs	r3, r3, r6
 800cb4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800cb4e:	2100      	movs	r1, #0
 800cb50:	b11d      	cbz	r5, 800cb5a <__udivmoddi4+0xa6>
 800cb52:	40d3      	lsrs	r3, r2
 800cb54:	2200      	movs	r2, #0
 800cb56:	e9c5 3200 	strd	r3, r2, [r5]
 800cb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb5e:	428b      	cmp	r3, r1
 800cb60:	d905      	bls.n	800cb6e <__udivmoddi4+0xba>
 800cb62:	b10d      	cbz	r5, 800cb68 <__udivmoddi4+0xb4>
 800cb64:	e9c5 0100 	strd	r0, r1, [r5]
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4608      	mov	r0, r1
 800cb6c:	e7f5      	b.n	800cb5a <__udivmoddi4+0xa6>
 800cb6e:	fab3 f183 	clz	r1, r3
 800cb72:	2900      	cmp	r1, #0
 800cb74:	d146      	bne.n	800cc04 <__udivmoddi4+0x150>
 800cb76:	42a3      	cmp	r3, r4
 800cb78:	d302      	bcc.n	800cb80 <__udivmoddi4+0xcc>
 800cb7a:	4290      	cmp	r0, r2
 800cb7c:	f0c0 80f0 	bcc.w	800cd60 <__udivmoddi4+0x2ac>
 800cb80:	1a86      	subs	r6, r0, r2
 800cb82:	eb64 0303 	sbc.w	r3, r4, r3
 800cb86:	2001      	movs	r0, #1
 800cb88:	2d00      	cmp	r5, #0
 800cb8a:	d0e6      	beq.n	800cb5a <__udivmoddi4+0xa6>
 800cb8c:	e9c5 6300 	strd	r6, r3, [r5]
 800cb90:	e7e3      	b.n	800cb5a <__udivmoddi4+0xa6>
 800cb92:	2a00      	cmp	r2, #0
 800cb94:	f040 8090 	bne.w	800ccb8 <__udivmoddi4+0x204>
 800cb98:	eba1 040c 	sub.w	r4, r1, ip
 800cb9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800cba0:	fa1f f78c 	uxth.w	r7, ip
 800cba4:	2101      	movs	r1, #1
 800cba6:	fbb4 f6f8 	udiv	r6, r4, r8
 800cbaa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800cbae:	fb08 4416 	mls	r4, r8, r6, r4
 800cbb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cbb6:	fb07 f006 	mul.w	r0, r7, r6
 800cbba:	4298      	cmp	r0, r3
 800cbbc:	d908      	bls.n	800cbd0 <__udivmoddi4+0x11c>
 800cbbe:	eb1c 0303 	adds.w	r3, ip, r3
 800cbc2:	f106 34ff 	add.w	r4, r6, #4294967295
 800cbc6:	d202      	bcs.n	800cbce <__udivmoddi4+0x11a>
 800cbc8:	4298      	cmp	r0, r3
 800cbca:	f200 80cd 	bhi.w	800cd68 <__udivmoddi4+0x2b4>
 800cbce:	4626      	mov	r6, r4
 800cbd0:	1a1c      	subs	r4, r3, r0
 800cbd2:	fa1f f38e 	uxth.w	r3, lr
 800cbd6:	fbb4 f0f8 	udiv	r0, r4, r8
 800cbda:	fb08 4410 	mls	r4, r8, r0, r4
 800cbde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cbe2:	fb00 f707 	mul.w	r7, r0, r7
 800cbe6:	429f      	cmp	r7, r3
 800cbe8:	d908      	bls.n	800cbfc <__udivmoddi4+0x148>
 800cbea:	eb1c 0303 	adds.w	r3, ip, r3
 800cbee:	f100 34ff 	add.w	r4, r0, #4294967295
 800cbf2:	d202      	bcs.n	800cbfa <__udivmoddi4+0x146>
 800cbf4:	429f      	cmp	r7, r3
 800cbf6:	f200 80b0 	bhi.w	800cd5a <__udivmoddi4+0x2a6>
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	1bdb      	subs	r3, r3, r7
 800cbfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800cc02:	e7a5      	b.n	800cb50 <__udivmoddi4+0x9c>
 800cc04:	f1c1 0620 	rsb	r6, r1, #32
 800cc08:	408b      	lsls	r3, r1
 800cc0a:	fa22 f706 	lsr.w	r7, r2, r6
 800cc0e:	431f      	orrs	r7, r3
 800cc10:	fa20 fc06 	lsr.w	ip, r0, r6
 800cc14:	fa04 f301 	lsl.w	r3, r4, r1
 800cc18:	ea43 030c 	orr.w	r3, r3, ip
 800cc1c:	40f4      	lsrs	r4, r6
 800cc1e:	fa00 f801 	lsl.w	r8, r0, r1
 800cc22:	0c38      	lsrs	r0, r7, #16
 800cc24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800cc28:	fbb4 fef0 	udiv	lr, r4, r0
 800cc2c:	fa1f fc87 	uxth.w	ip, r7
 800cc30:	fb00 441e 	mls	r4, r0, lr, r4
 800cc34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800cc38:	fb0e f90c 	mul.w	r9, lr, ip
 800cc3c:	45a1      	cmp	r9, r4
 800cc3e:	fa02 f201 	lsl.w	r2, r2, r1
 800cc42:	d90a      	bls.n	800cc5a <__udivmoddi4+0x1a6>
 800cc44:	193c      	adds	r4, r7, r4
 800cc46:	f10e 3aff 	add.w	sl, lr, #4294967295
 800cc4a:	f080 8084 	bcs.w	800cd56 <__udivmoddi4+0x2a2>
 800cc4e:	45a1      	cmp	r9, r4
 800cc50:	f240 8081 	bls.w	800cd56 <__udivmoddi4+0x2a2>
 800cc54:	f1ae 0e02 	sub.w	lr, lr, #2
 800cc58:	443c      	add	r4, r7
 800cc5a:	eba4 0409 	sub.w	r4, r4, r9
 800cc5e:	fa1f f983 	uxth.w	r9, r3
 800cc62:	fbb4 f3f0 	udiv	r3, r4, r0
 800cc66:	fb00 4413 	mls	r4, r0, r3, r4
 800cc6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800cc6e:	fb03 fc0c 	mul.w	ip, r3, ip
 800cc72:	45a4      	cmp	ip, r4
 800cc74:	d907      	bls.n	800cc86 <__udivmoddi4+0x1d2>
 800cc76:	193c      	adds	r4, r7, r4
 800cc78:	f103 30ff 	add.w	r0, r3, #4294967295
 800cc7c:	d267      	bcs.n	800cd4e <__udivmoddi4+0x29a>
 800cc7e:	45a4      	cmp	ip, r4
 800cc80:	d965      	bls.n	800cd4e <__udivmoddi4+0x29a>
 800cc82:	3b02      	subs	r3, #2
 800cc84:	443c      	add	r4, r7
 800cc86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800cc8a:	fba0 9302 	umull	r9, r3, r0, r2
 800cc8e:	eba4 040c 	sub.w	r4, r4, ip
 800cc92:	429c      	cmp	r4, r3
 800cc94:	46ce      	mov	lr, r9
 800cc96:	469c      	mov	ip, r3
 800cc98:	d351      	bcc.n	800cd3e <__udivmoddi4+0x28a>
 800cc9a:	d04e      	beq.n	800cd3a <__udivmoddi4+0x286>
 800cc9c:	b155      	cbz	r5, 800ccb4 <__udivmoddi4+0x200>
 800cc9e:	ebb8 030e 	subs.w	r3, r8, lr
 800cca2:	eb64 040c 	sbc.w	r4, r4, ip
 800cca6:	fa04 f606 	lsl.w	r6, r4, r6
 800ccaa:	40cb      	lsrs	r3, r1
 800ccac:	431e      	orrs	r6, r3
 800ccae:	40cc      	lsrs	r4, r1
 800ccb0:	e9c5 6400 	strd	r6, r4, [r5]
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	e750      	b.n	800cb5a <__udivmoddi4+0xa6>
 800ccb8:	f1c2 0320 	rsb	r3, r2, #32
 800ccbc:	fa20 f103 	lsr.w	r1, r0, r3
 800ccc0:	fa0c fc02 	lsl.w	ip, ip, r2
 800ccc4:	fa24 f303 	lsr.w	r3, r4, r3
 800ccc8:	4094      	lsls	r4, r2
 800ccca:	430c      	orrs	r4, r1
 800cccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800ccd0:	fa00 fe02 	lsl.w	lr, r0, r2
 800ccd4:	fa1f f78c 	uxth.w	r7, ip
 800ccd8:	fbb3 f0f8 	udiv	r0, r3, r8
 800ccdc:	fb08 3110 	mls	r1, r8, r0, r3
 800cce0:	0c23      	lsrs	r3, r4, #16
 800cce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cce6:	fb00 f107 	mul.w	r1, r0, r7
 800ccea:	4299      	cmp	r1, r3
 800ccec:	d908      	bls.n	800cd00 <__udivmoddi4+0x24c>
 800ccee:	eb1c 0303 	adds.w	r3, ip, r3
 800ccf2:	f100 36ff 	add.w	r6, r0, #4294967295
 800ccf6:	d22c      	bcs.n	800cd52 <__udivmoddi4+0x29e>
 800ccf8:	4299      	cmp	r1, r3
 800ccfa:	d92a      	bls.n	800cd52 <__udivmoddi4+0x29e>
 800ccfc:	3802      	subs	r0, #2
 800ccfe:	4463      	add	r3, ip
 800cd00:	1a5b      	subs	r3, r3, r1
 800cd02:	b2a4      	uxth	r4, r4
 800cd04:	fbb3 f1f8 	udiv	r1, r3, r8
 800cd08:	fb08 3311 	mls	r3, r8, r1, r3
 800cd0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800cd10:	fb01 f307 	mul.w	r3, r1, r7
 800cd14:	42a3      	cmp	r3, r4
 800cd16:	d908      	bls.n	800cd2a <__udivmoddi4+0x276>
 800cd18:	eb1c 0404 	adds.w	r4, ip, r4
 800cd1c:	f101 36ff 	add.w	r6, r1, #4294967295
 800cd20:	d213      	bcs.n	800cd4a <__udivmoddi4+0x296>
 800cd22:	42a3      	cmp	r3, r4
 800cd24:	d911      	bls.n	800cd4a <__udivmoddi4+0x296>
 800cd26:	3902      	subs	r1, #2
 800cd28:	4464      	add	r4, ip
 800cd2a:	1ae4      	subs	r4, r4, r3
 800cd2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd30:	e739      	b.n	800cba6 <__udivmoddi4+0xf2>
 800cd32:	4604      	mov	r4, r0
 800cd34:	e6f0      	b.n	800cb18 <__udivmoddi4+0x64>
 800cd36:	4608      	mov	r0, r1
 800cd38:	e706      	b.n	800cb48 <__udivmoddi4+0x94>
 800cd3a:	45c8      	cmp	r8, r9
 800cd3c:	d2ae      	bcs.n	800cc9c <__udivmoddi4+0x1e8>
 800cd3e:	ebb9 0e02 	subs.w	lr, r9, r2
 800cd42:	eb63 0c07 	sbc.w	ip, r3, r7
 800cd46:	3801      	subs	r0, #1
 800cd48:	e7a8      	b.n	800cc9c <__udivmoddi4+0x1e8>
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	e7ed      	b.n	800cd2a <__udivmoddi4+0x276>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	e799      	b.n	800cc86 <__udivmoddi4+0x1d2>
 800cd52:	4630      	mov	r0, r6
 800cd54:	e7d4      	b.n	800cd00 <__udivmoddi4+0x24c>
 800cd56:	46d6      	mov	lr, sl
 800cd58:	e77f      	b.n	800cc5a <__udivmoddi4+0x1a6>
 800cd5a:	4463      	add	r3, ip
 800cd5c:	3802      	subs	r0, #2
 800cd5e:	e74d      	b.n	800cbfc <__udivmoddi4+0x148>
 800cd60:	4606      	mov	r6, r0
 800cd62:	4623      	mov	r3, r4
 800cd64:	4608      	mov	r0, r1
 800cd66:	e70f      	b.n	800cb88 <__udivmoddi4+0xd4>
 800cd68:	3e02      	subs	r6, #2
 800cd6a:	4463      	add	r3, ip
 800cd6c:	e730      	b.n	800cbd0 <__udivmoddi4+0x11c>
 800cd6e:	bf00      	nop

0800cd70 <__aeabi_idiv0>:
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop

0800cd74 <Config_AppInit>:
  Status_t ret = STATUS_OK;

  UNUSED(ca);

  return ret;
}
 800cd74:	2000      	movs	r0, #0
 800cd76:	4770      	bx	lr

0800cd78 <Config_Callback>:

    default:
      break;
  }
  return ret;
}
 800cd78:	2000      	movs	r0, #0
 800cd7a:	4770      	bx	lr

0800cd7c <Config_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/


Status_t Config_Init(void)
{
 800cd7c:	b508      	push	{r3, lr}
  {
    Error_Handler();
  }

  /* Use factory default after every power on */
  RegMap_RestoreFactoryValues();
 800cd7e:	f000 fb1b 	bl	800d3b8 <RegMap_RestoreFactoryValues>

  /* Initialize application-specific stuff */
  Config_AppInit();
 800cd82:	f7ff fff7 	bl	800cd74 <Config_AppInit>

  return ret;
}
 800cd86:	2000      	movs	r0, #0
 800cd88:	bd08      	pop	{r3, pc}

0800cd8a <Config_ApplyConfig>:



Status_t Config_ApplyConfig(uint32_t id)
{
 800cd8a:	b510      	push	{r4, lr}
 800cd8c:	4604      	mov	r4, r0
  Status_t ret = STATUS_OK;

  /* Application-specific callback */
  Config_Callback(id);
 800cd8e:	f7ff fff3 	bl	800cd78 <Config_Callback>

  /* If this value should be stored in Flash, notify flash task */
  if ((id & 0x070) == 0x070)
 800cd92:	f004 0470 	and.w	r4, r4, #112	@ 0x70
 800cd96:	2c70      	cmp	r4, #112	@ 0x70
 800cd98:	d001      	beq.n	800cd9e <Config_ApplyConfig+0x14>
  {
    FlashApp_RequestConfStorage();
  }

  return ret;
}
 800cd9a:	2000      	movs	r0, #0
 800cd9c:	bd10      	pop	{r4, pc}
    FlashApp_RequestConfStorage();
 800cd9e:	f000 f947 	bl	800d030 <FlashApp_RequestConfStorage>
 800cda2:	e7fa      	b.n	800cd9a <Config_ApplyConfig+0x10>

0800cda4 <Config_ReadStream>:


Status_t Config_ReadStream(uint8_t *data, uint32_t length)
{
 800cda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  /* First entry must be CONF_SYS_REGMAP_VERSION with major part equal to our factory set value */
  id = *((uint32_t *) (data));
  value = *((uint32_t *) (data + 4));

  if ((id != CONF_SYS_REGMAP_VERSION) || (value & 0xFFFF0000) != (CONF_INT(CONF_SYS_REGMAP_VERSION) & 0xFFFF0000) )
 800cda8:	6802      	ldr	r2, [r0, #0]
 800cdaa:	f244 1332 	movw	r3, #16690	@ 0x4132
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d003      	beq.n	800cdba <Config_ReadStream+0x16>
  {
    ret = STATUS_ERROR;
 800cdb2:	2401      	movs	r4, #1

      reqIdx += sizeReg;
    }
  }
  return ret;
}
 800cdb4:	4620      	mov	r0, r4
 800cdb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdba:	4606      	mov	r6, r0
 800cdbc:	460f      	mov	r7, r1
  if ((id != CONF_SYS_REGMAP_VERSION) || (value & 0xFFFF0000) != (CONF_INT(CONF_SYS_REGMAP_VERSION) & 0xFFFF0000) )
 800cdbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ce28 <Config_ReadStream+0x84>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	6842      	ldr	r2, [r0, #4]
 800cdc6:	4053      	eors	r3, r2
 800cdc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdcc:	d227      	bcs.n	800ce1e <Config_ReadStream+0x7a>
    while ((reqIdx < length))
 800cdce:	b341      	cbz	r1, 800ce22 <Config_ReadStream+0x7e>
  uint32_t reqIdx = 0;
 800cdd0:	2500      	movs	r5, #0
      sizeReg = CONF_BYTE_LEN_ID(id);
 800cdd2:	f8df 905c 	ldr.w	r9, [pc, #92]	@ 800ce30 <Config_ReadStream+0x8c>
        memcpy(CONF_PTR(id), data + reqIdx, sizeReg);
 800cdd6:	f8df a050 	ldr.w	sl, [pc, #80]	@ 800ce28 <Config_ReadStream+0x84>
 800cdda:	e00c      	b.n	800cdf6 <Config_ReadStream+0x52>
 800cddc:	0e03      	lsrs	r3, r0, #24
 800cdde:	f3c0 300b 	ubfx	r0, r0, #12, #12
 800cde2:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 800cde6:	4642      	mov	r2, r8
 800cde8:	1971      	adds	r1, r6, r5
 800cdea:	4418      	add	r0, r3
 800cdec:	f004 fe7e 	bl	8011aec <memcpy>
      reqIdx += sizeReg;
 800cdf0:	4445      	add	r5, r8
    while ((reqIdx < length))
 800cdf2:	42af      	cmp	r7, r5
 800cdf4:	d9de      	bls.n	800cdb4 <Config_ReadStream+0x10>
      memcpy(&id, data + reqIdx, sizeof(id));
 800cdf6:	5970      	ldr	r0, [r6, r5]
      reqIdx += sizeof(uint32_t);
 800cdf8:	3504      	adds	r5, #4
      sizeReg = CONF_BYTE_LEN_ID(id);
 800cdfa:	f000 030f 	and.w	r3, r0, #15
 800cdfe:	f859 8023 	ldr.w	r8, [r9, r3, lsl #2]
      for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 800ce02:	4b0a      	ldr	r3, [pc, #40]	@ (800ce2c <Config_ReadStream+0x88>)
 800ce04:	f103 0114 	add.w	r1, r3, #20
      ret = STATUS_ERROR;
 800ce08:	2401      	movs	r4, #1
        if (CONF_REG_FLASH[i] == id)
 800ce0a:	f853 2b04 	ldr.w	r2, [r3], #4
          ret = STATUS_OK;
 800ce0e:	4282      	cmp	r2, r0
 800ce10:	bf08      	it	eq
 800ce12:	2400      	moveq	r4, #0
      for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 800ce14:	428b      	cmp	r3, r1
 800ce16:	d1f8      	bne.n	800ce0a <Config_ReadStream+0x66>
      if (ret == STATUS_OK)
 800ce18:	2c00      	cmp	r4, #0
 800ce1a:	d1e9      	bne.n	800cdf0 <Config_ReadStream+0x4c>
 800ce1c:	e7de      	b.n	800cddc <Config_ReadStream+0x38>
    ret = STATUS_ERROR;
 800ce1e:	2401      	movs	r4, #1
 800ce20:	e7c8      	b.n	800cdb4 <Config_ReadStream+0x10>
  Status_t ret = STATUS_OK;
 800ce22:	2400      	movs	r4, #0
 800ce24:	e7c6      	b.n	800cdb4 <Config_ReadStream+0x10>
 800ce26:	bf00      	nop
 800ce28:	08011e74 	.word	0x08011e74
 800ce2c:	08011e60 	.word	0x08011e60
 800ce30:	08011e1c 	.word	0x08011e1c

0800ce34 <Config_FillStream>:

Status_t Config_FillStream(uint8_t *data, uint32_t *length, uint32_t maxLength)
{
 800ce34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce38:	b083      	sub	sp, #12
 800ce3a:	4607      	mov	r7, r0
 800ce3c:	9101      	str	r1, [sp, #4]
 800ce3e:	4616      	mov	r6, r2
  uint32_t id;
  uint32_t sizeReg;
  uint32_t i;

  /* Go through all the known config ID that need to be stored in flash */
  for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 800ce40:	4c14      	ldr	r4, [pc, #80]	@ (800ce94 <Config_FillStream+0x60>)
 800ce42:	f104 0914 	add.w	r9, r4, #20
  uint32_t reqIdx = 0;
 800ce46:	2300      	movs	r3, #0
  Status_t ret = STATUS_OK;
 800ce48:	469a      	mov	sl, r3
  {
    /* Take next ID from the list of known IDs */
    id = CONF_REG_FLASH[i];
    sizeReg = CONF_BYTE_LEN_ID(id);
 800ce4a:	f8df 804c 	ldr.w	r8, [pc, #76]	@ 800ce98 <Config_FillStream+0x64>
      /* Store ID into config stream */
      memcpy(data + reqIdx, &id, sizeof(id));
      reqIdx += sizeof(uint32_t);

      /* Store config value into stream */
      memcpy(data + reqIdx, CONF_PTR(id), sizeReg);
 800ce4e:	f8df b04c 	ldr.w	fp, [pc, #76]	@ 800ce9c <Config_FillStream+0x68>
 800ce52:	e00c      	b.n	800ce6e <Config_FillStream+0x3a>
      memcpy(data + reqIdx, &id, sizeof(id));
 800ce54:	50f9      	str	r1, [r7, r3]
      memcpy(data + reqIdx, CONF_PTR(id), sizeReg);
 800ce56:	0e0b      	lsrs	r3, r1, #24
 800ce58:	f3c1 310b 	ubfx	r1, r1, #12, #12
 800ce5c:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
 800ce60:	4419      	add	r1, r3
 800ce62:	4438      	add	r0, r7
 800ce64:	f004 fe42 	bl	8011aec <memcpy>
      reqIdx += sizeReg;
 800ce68:	462b      	mov	r3, r5
  for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 800ce6a:	454c      	cmp	r4, r9
 800ce6c:	d00c      	beq.n	800ce88 <Config_FillStream+0x54>
    id = CONF_REG_FLASH[i];
 800ce6e:	f854 1b04 	ldr.w	r1, [r4], #4
    sizeReg = CONF_BYTE_LEN_ID(id);
 800ce72:	f001 020f 	and.w	r2, r1, #15
 800ce76:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
    if (reqIdx + 4 + sizeReg <= maxLength)
 800ce7a:	1d18      	adds	r0, r3, #4
 800ce7c:	1815      	adds	r5, r2, r0
 800ce7e:	42b5      	cmp	r5, r6
 800ce80:	d9e8      	bls.n	800ce54 <Config_FillStream+0x20>
    }
    else
    {
      ret = STATUS_ERROR;
 800ce82:	f04f 0a01 	mov.w	sl, #1
 800ce86:	e7f0      	b.n	800ce6a <Config_FillStream+0x36>
    }
  }

  *length = reqIdx;
 800ce88:	9a01      	ldr	r2, [sp, #4]
 800ce8a:	6013      	str	r3, [r2, #0]

  return ret;
}
 800ce8c:	4650      	mov	r0, sl
 800ce8e:	b003      	add	sp, #12
 800ce90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce94:	08011e60 	.word	0x08011e60
 800ce98:	08011e1c 	.word	0x08011e1c
 800ce9c:	08011e74 	.word	0x08011e74

0800cea0 <Control_Init>:

Status_t Control_Init(void) {
	Status_t ret = STATUS_OK;

	return ret;
}
 800cea0:	2000      	movs	r0, #0
 800cea2:	4770      	bx	lr

0800cea4 <Control_Handle>:

Status_t Control_Handle(void) {
 800cea4:	b508      	push	{r3, lr}
	Status_t ret = STATUS_OK;

	/* Handle Reset commands */
	if (conf.sys.command == CONTROL_RESET) {
 800cea6:	4b36      	ldr	r3, [pc, #216]	@ (800cf80 <Control_Handle+0xdc>)
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	f242 62ad 	movw	r2, #9901	@ 0x26ad
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d042      	beq.n	800cf38 <Control_Handle+0x94>
		//Led_RedOff();
		System_Delay(1000);
		System_Reset();
	}
	/* Handle factory reset command */
	else if (conf.sys.command == CONTROL_FACTORY) {
 800ceb2:	f242 2261 	movw	r2, #8801	@ 0x2261
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d050      	beq.n	800cf5c <Control_Handle+0xb8>
		FlashApp_RequestFactorySettings();
	} else if (conf.sys.command == CONTROL_WDG_LATCH) {
 800ceba:	f241 527d 	movw	r2, #5501	@ 0x157d
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d04f      	beq.n	800cf62 <Control_Handle+0xbe>
		/* The delay below should cause IWDG to restart device */
		System_Delay(4000);
	}
	/* Handle set error command */
	else if (conf.sys.command > CONTROL_ERROR
			&& conf.sys.command < (CONTROL_ERROR + 100)) {
 800cec2:	f5a3 52ce 	sub.w	r2, r3, #6592	@ 0x19c0
 800cec6:	3a09      	subs	r2, #9
	else if (conf.sys.command > CONTROL_ERROR
 800cec8:	2a62      	cmp	r2, #98	@ 0x62
 800ceca:	d84f      	bhi.n	800cf6c <Control_Handle+0xc8>
		cntrl.localError = conf.sys.command - CONTROL_ERROR;
 800cecc:	f5a3 53ce 	sub.w	r3, r3, #6592	@ 0x19c0
 800ced0:	3b08      	subs	r3, #8
 800ced2:	b29b      	uxth	r3, r3
	}
	/* Handle clear error command */
	else if (conf.sys.command == CONTROL_ERROR) {
		cntrl.localError = 0;
 800ced4:	4a2b      	ldr	r2, [pc, #172]	@ (800cf84 <Control_Handle+0xe0>)
 800ced6:	8053      	strh	r3, [r2, #2]
	}
	/* Testing mode disables setting of modbus address from DIP */
	if (conf.sys.command == CONTROL_TESTING) {
		SET_BIT(conf.sys.status, STAT_BIT_TESTING);
	} else {
		CLEAR_BIT(conf.sys.status, STAT_BIT_TESTING);
 800ced8:	4a29      	ldr	r2, [pc, #164]	@ (800cf80 <Control_Handle+0xdc>)
 800ceda:	6893      	ldr	r3, [r2, #8]
 800cedc:	f023 0302 	bic.w	r3, r3, #2
 800cee0:	6093      	str	r3, [r2, #8]
		conf.com.mb_address = (conf.sys.io_input & 0x1F) + MODBUS_BASE_ADDRESS;
 800cee2:	8a93      	ldrh	r3, [r2, #20]
 800cee4:	f003 031f 	and.w	r3, r3, #31
 800cee8:	3320      	adds	r3, #32
 800ceea:	8793      	strh	r3, [r2, #60]	@ 0x3c
	}

	/* Error flag of status register */
	if (cntrl.localError != 0 || (conf.sys.status & (0x300F0)) != 0) {
 800ceec:	4b25      	ldr	r3, [pc, #148]	@ (800cf84 <Control_Handle+0xe0>)
 800ceee:	885b      	ldrh	r3, [r3, #2]
 800cef0:	b92b      	cbnz	r3, 800cefe <Control_Handle+0x5a>
 800cef2:	4b23      	ldr	r3, [pc, #140]	@ (800cf80 <Control_Handle+0xdc>)
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	4a24      	ldr	r2, [pc, #144]	@ (800cf88 <Control_Handle+0xe4>)
 800cef8:	401a      	ands	r2, r3
 800cefa:	2a00      	cmp	r2, #0
 800cefc:	d03c      	beq.n	800cf78 <Control_Handle+0xd4>
		SET_BIT(conf.sys.status, STAT_BIT_ERROR);
 800cefe:	4b20      	ldr	r3, [pc, #128]	@ (800cf80 <Control_Handle+0xdc>)
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	f043 0301 	orr.w	r3, r3, #1
 800cf06:	4a1e      	ldr	r2, [pc, #120]	@ (800cf80 <Control_Handle+0xdc>)
 800cf08:	6093      	str	r3, [r2, #8]
	} else if (cntrl.count % LED_PERIOD == LED_BLINK) {
		//Led_GreenOff();
		//Led_RedOff();
	}

	if (HAL_GetTick() > cntrl.prevTick) {
 800cf0a:	f001 fdeb 	bl	800eae4 <HAL_GetTick>
 800cf0e:	4b1d      	ldr	r3, [pc, #116]	@ (800cf84 <Control_Handle+0xe0>)
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	4298      	cmp	r0, r3
 800cf14:	d907      	bls.n	800cf26 <Control_Handle+0x82>
		cntrl.prevTick += 1000;
 800cf16:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800cf1a:	4a1a      	ldr	r2, [pc, #104]	@ (800cf84 <Control_Handle+0xe0>)
 800cf1c:	6053      	str	r3, [r2, #4]
		conf.sys.uptime += 1;
 800cf1e:	4a18      	ldr	r2, [pc, #96]	@ (800cf80 <Control_Handle+0xdc>)
 800cf20:	6813      	ldr	r3, [r2, #0]
 800cf22:	3301      	adds	r3, #1
 800cf24:	6013      	str	r3, [r2, #0]
	}

	/* Store previous command */
	cntrl.prevCmd = conf.sys.command;
 800cf26:	4b17      	ldr	r3, [pc, #92]	@ (800cf84 <Control_Handle+0xe0>)
 800cf28:	4a15      	ldr	r2, [pc, #84]	@ (800cf80 <Control_Handle+0xdc>)
 800cf2a:	68d2      	ldr	r2, [r2, #12]
 800cf2c:	801a      	strh	r2, [r3, #0]
	cntrl.count++;
 800cf2e:	689a      	ldr	r2, [r3, #8]
 800cf30:	3201      	adds	r2, #1
 800cf32:	609a      	str	r2, [r3, #8]

	return ret;
}
 800cf34:	2000      	movs	r0, #0
 800cf36:	bd08      	pop	{r3, pc}
		System_Delay(1000);
 800cf38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800cf3c:	f000 fab6 	bl	800d4ac <System_Delay>
		System_Reset();
 800cf40:	f000 faba 	bl	800d4b8 <System_Reset>
	if (conf.sys.command == CONTROL_TESTING) {
 800cf44:	4b0e      	ldr	r3, [pc, #56]	@ (800cf80 <Control_Handle+0xdc>)
 800cf46:	68da      	ldr	r2, [r3, #12]
 800cf48:	f641 6315 	movw	r3, #7701	@ 0x1e15
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d1c3      	bne.n	800ced8 <Control_Handle+0x34>
		SET_BIT(conf.sys.status, STAT_BIT_TESTING);
 800cf50:	4a0b      	ldr	r2, [pc, #44]	@ (800cf80 <Control_Handle+0xdc>)
 800cf52:	6893      	ldr	r3, [r2, #8]
 800cf54:	f043 0302 	orr.w	r3, r3, #2
 800cf58:	6093      	str	r3, [r2, #8]
 800cf5a:	e7c7      	b.n	800ceec <Control_Handle+0x48>
		FlashApp_RequestFactorySettings();
 800cf5c:	f000 f876 	bl	800d04c <FlashApp_RequestFactorySettings>
 800cf60:	e7f0      	b.n	800cf44 <Control_Handle+0xa0>
		System_Delay(4000);
 800cf62:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800cf66:	f000 faa1 	bl	800d4ac <System_Delay>
 800cf6a:	e7eb      	b.n	800cf44 <Control_Handle+0xa0>
	else if (conf.sys.command == CONTROL_ERROR) {
 800cf6c:	f641 12c8 	movw	r2, #6600	@ 0x19c8
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d1e7      	bne.n	800cf44 <Control_Handle+0xa0>
 800cf74:	2300      	movs	r3, #0
 800cf76:	e7ad      	b.n	800ced4 <Control_Handle+0x30>
		CLEAR_BIT(conf.sys.status, STAT_BIT_ERROR);
 800cf78:	f023 0301 	bic.w	r3, r3, #1
 800cf7c:	e7c3      	b.n	800cf06 <Control_Handle+0x62>
 800cf7e:	bf00      	nop
 800cf80:	2000053c 	.word	0x2000053c
 800cf84:	200000ec 	.word	0x200000ec
 800cf88:	000300f0 	.word	0x000300f0

0800cf8c <FlashApp_Init>:
/* Private variables ---------------------------------------------------------*/
/* Public variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/

Status_t FlashApp_Init(void) {
 800cf8c:	b508      	push	{r3, lr}
	Status_t ret = STATUS_OK;

	/* Initialize flash configuration */
	FlashConf_Init();
 800cf8e:	f000 f865 	bl	800d05c <FlashConf_Init>

	/* Read configuration - first attempt */
	ret = FlashConf_Load();
 800cf92:	f000 f967 	bl	800d264 <FlashConf_Load>

	if (ret == STATUS_OK) {
 800cf96:	b900      	cbnz	r0, 800cf9a <FlashApp_Init+0xe>
	}

	/* FIXME: temporary disabled calibration */
//  Calib_Init();
	return ret;
}
 800cf98:	bd08      	pop	{r3, pc}
		ret = FlashConf_Store();
 800cf9a:	f000 f9dd 	bl	800d358 <FlashConf_Store>
 800cf9e:	e7fb      	b.n	800cf98 <FlashApp_Init+0xc>

0800cfa0 <FlashApp_Handle>:

Status_t FlashApp_Handle(void) {
 800cfa0:	b538      	push	{r3, r4, r5, lr}
	Status_t ret = STATUS_OK;

	/* Configuration requested, set dead time */
	if (flashApp.config) {
 800cfa2:	4b22      	ldr	r3, [pc, #136]	@ (800d02c <FlashApp_Handle+0x8c>)
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	b94b      	cbnz	r3, 800cfbc <FlashApp_Handle+0x1c>
		flashApp.tick = HAL_GetTick() + CONFIG_DEAD_TIME;
		flashApp.tick = (flashApp.tick == 0) ? (UINT32_MAX) : (flashApp.tick);
	}

	/* If factory reset was requested */
	if (flashApp.reset == FACTORY_CONFIG) {
 800cfa8:	4b20      	ldr	r3, [pc, #128]	@ (800d02c <FlashApp_Handle+0x8c>)
 800cfaa:	785b      	ldrb	r3, [r3, #1]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d013      	beq.n	800cfd8 <FlashApp_Handle+0x38>
		flashApp.tick = HAL_GetTick();
		flashApp.tick = (flashApp.tick == 0) ? (UINT32_MAX) : (flashApp.tick);
	}

	/* Wait on tick expire */
	if (flashApp.tick != 0 && TICK_EXPIRED(flashApp.tick)) {
 800cfb0:	4b1e      	ldr	r3, [pc, #120]	@ (800d02c <FlashApp_Handle+0x8c>)
 800cfb2:	685b      	ldr	r3, [r3, #4]
 800cfb4:	b9f3      	cbnz	r3, 800cff4 <FlashApp_Handle+0x54>
	Status_t ret = STATUS_OK;
 800cfb6:	2400      	movs	r4, #0
	}

	/* FIXME: temporary disabled calibration */
//  Calib_Write();
	return ret;
}
 800cfb8:	4620      	mov	r0, r4
 800cfba:	bd38      	pop	{r3, r4, r5, pc}
		flashApp.config = 0;
 800cfbc:	4b1b      	ldr	r3, [pc, #108]	@ (800d02c <FlashApp_Handle+0x8c>)
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	701a      	strb	r2, [r3, #0]
		flashApp.tick = HAL_GetTick() + CONFIG_DEAD_TIME;
 800cfc2:	f001 fd8f 	bl	800eae4 <HAL_GetTick>
 800cfc6:	f200 50dc 	addw	r0, r0, #1500	@ 0x5dc
		flashApp.tick = (flashApp.tick == 0) ? (UINT32_MAX) : (flashApp.tick);
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	bf08      	it	eq
 800cfce:	f04f 30ff 	moveq.w	r0, #4294967295
 800cfd2:	4b16      	ldr	r3, [pc, #88]	@ (800d02c <FlashApp_Handle+0x8c>)
 800cfd4:	6058      	str	r0, [r3, #4]
 800cfd6:	e7e7      	b.n	800cfa8 <FlashApp_Handle+0x8>
		RegMap_RestoreFactoryValues();
 800cfd8:	f000 f9ee 	bl	800d3b8 <RegMap_RestoreFactoryValues>
		flashApp.reset = FACTORY_RESET;
 800cfdc:	4b13      	ldr	r3, [pc, #76]	@ (800d02c <FlashApp_Handle+0x8c>)
 800cfde:	2202      	movs	r2, #2
 800cfe0:	705a      	strb	r2, [r3, #1]
		flashApp.tick = HAL_GetTick();
 800cfe2:	f001 fd7f 	bl	800eae4 <HAL_GetTick>
		flashApp.tick = (flashApp.tick == 0) ? (UINT32_MAX) : (flashApp.tick);
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	bf08      	it	eq
 800cfea:	f04f 30ff 	moveq.w	r0, #4294967295
 800cfee:	4b0f      	ldr	r3, [pc, #60]	@ (800d02c <FlashApp_Handle+0x8c>)
 800cff0:	6058      	str	r0, [r3, #4]
 800cff2:	e7dd      	b.n	800cfb0 <FlashApp_Handle+0x10>
	if (flashApp.tick != 0 && TICK_EXPIRED(flashApp.tick)) {
 800cff4:	f001 fd76 	bl	800eae4 <HAL_GetTick>
 800cff8:	4b0c      	ldr	r3, [pc, #48]	@ (800d02c <FlashApp_Handle+0x8c>)
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	1ac0      	subs	r0, r0, r3
 800cffe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d002:	4298      	cmp	r0, r3
 800d004:	d301      	bcc.n	800d00a <FlashApp_Handle+0x6a>
	Status_t ret = STATUS_OK;
 800d006:	2400      	movs	r4, #0
 800d008:	e7d6      	b.n	800cfb8 <FlashApp_Handle+0x18>
		flashApp.tick = 0;
 800d00a:	4d08      	ldr	r5, [pc, #32]	@ (800d02c <FlashApp_Handle+0x8c>)
 800d00c:	2300      	movs	r3, #0
 800d00e:	606b      	str	r3, [r5, #4]
		ret = FlashConf_Store();
 800d010:	f000 f9a2 	bl	800d358 <FlashConf_Store>
 800d014:	4604      	mov	r4, r0
		if (flashApp.reset == FACTORY_RESET) {
 800d016:	786b      	ldrb	r3, [r5, #1]
 800d018:	2b02      	cmp	r3, #2
 800d01a:	d1cd      	bne.n	800cfb8 <FlashApp_Handle+0x18>
			HAL_Delay(1000);
 800d01c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d020:	f001 fd66 	bl	800eaf0 <HAL_Delay>
			System_Reset();
 800d024:	f000 fa48 	bl	800d4b8 <System_Reset>
 800d028:	e7c6      	b.n	800cfb8 <FlashApp_Handle+0x18>
 800d02a:	bf00      	nop
 800d02c:	200000f8 	.word	0x200000f8

0800d030 <FlashApp_RequestConfStorage>:

Status_t FlashApp_RequestConfStorage(void) {
	Status_t ret = STATUS_OK;

	/* Do not store to flash in testing mode */
	if (!(conf.sys.status & STAT_BIT_TESTING)) {
 800d030:	4b04      	ldr	r3, [pc, #16]	@ (800d044 <FlashApp_RequestConfStorage+0x14>)
 800d032:	689b      	ldr	r3, [r3, #8]
 800d034:	f013 0f02 	tst.w	r3, #2
 800d038:	d102      	bne.n	800d040 <FlashApp_RequestConfStorage+0x10>
		flashApp.config = CONFIG_STORE;
 800d03a:	4b03      	ldr	r3, [pc, #12]	@ (800d048 <FlashApp_RequestConfStorage+0x18>)
 800d03c:	2201      	movs	r2, #1
 800d03e:	701a      	strb	r2, [r3, #0]
	}

	return ret;
}
 800d040:	2000      	movs	r0, #0
 800d042:	4770      	bx	lr
 800d044:	2000053c 	.word	0x2000053c
 800d048:	200000f8 	.word	0x200000f8

0800d04c <FlashApp_RequestFactorySettings>:

Status_t FlashApp_RequestFactorySettings(void) {
	Status_t ret = STATUS_OK;

	flashApp.reset = FACTORY_CONFIG;
 800d04c:	4b02      	ldr	r3, [pc, #8]	@ (800d058 <FlashApp_RequestFactorySettings+0xc>)
 800d04e:	2201      	movs	r2, #1
 800d050:	705a      	strb	r2, [r3, #1]

	return ret;
}
 800d052:	2000      	movs	r0, #0
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	200000f8 	.word	0x200000f8

0800d05c <FlashConf_Init>:

Status_t FlashConf_Init(void) {
	Status_t ret = STATUS_OK;

	return ret;
}
 800d05c:	2000      	movs	r0, #0
 800d05e:	4770      	bx	lr

0800d060 <FlashConf_EraseBlock>:
	}

	return ret;
}

Status_t FlashConf_EraseBlock(uint32_t address) {
 800d060:	b508      	push	{r3, lr}
	Status_t ret = STATUS_OK;

	ret = System_FlashErase(address, address + 1);
 800d062:	1c41      	adds	r1, r0, #1
 800d064:	f000 fa6e 	bl	800d544 <System_FlashErase>

	return ret;
}
 800d068:	bd08      	pop	{r3, pc}
	...

0800d06c <FlashConf_FindEntry>:
Status_t FlashConf_FindEntry(void) {
 800d06c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	flCo.data.header.addressNext = FLASH_CONF_ADDR_START;
 800d070:	4f5f      	ldr	r7, [pc, #380]	@ (800d1f0 <FlashConf_FindEntry+0x184>)
 800d072:	4b60      	ldr	r3, [pc, #384]	@ (800d1f4 <FlashConf_FindEntry+0x188>)
 800d074:	609f      	str	r7, [r3, #8]
	flCo.data.header.writes = 1;
 800d076:	2201      	movs	r2, #1
 800d078:	60da      	str	r2, [r3, #12]
	flCo.data.header.completeSize = sizeof(FlashConf_Header_t);
 800d07a:	2210      	movs	r2, #16
 800d07c:	611a      	str	r2, [r3, #16]
	flCo.data.header.reserved = sizeof(FlashConf_Header_t);
 800d07e:	615a      	str	r2, [r3, #20]
	flCo.invalidAddress = -1;
 800d080:	f04f 32ff 	mov.w	r2, #4294967295
 800d084:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
	flCo.configAddr = FLASH_CONF_ADDR_START;
 800d088:	601f      	str	r7, [r3, #0]
	flCo.backupAddr = FLASH_CONF_ADDR_START;
 800d08a:	605f      	str	r7, [r3, #4]
	while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 800d08c:	4d5a      	ldr	r5, [pc, #360]	@ (800d1f8 <FlashConf_FindEntry+0x18c>)
 800d08e:	443d      	add	r5, r7
 800d090:	42af      	cmp	r7, r5
 800d092:	d23a      	bcs.n	800d10a <FlashConf_FindEntry+0x9e>
 800d094:	463c      	mov	r4, r7
		memcpy(&flCo.tempHead, (uint8_t*) address, sizeof(FlashConf_Header_t));
 800d096:	f503 6883 	add.w	r8, r3, #1048	@ 0x418
		if (flCo.tempHead.addressNext == 0 && flCo.tempHead.completeSize == 0
 800d09a:	f5a8 6983 	sub.w	r9, r8, #1048	@ 0x418
				&& flCo.tempHead.reserved != FLASH_KEY) {
 800d09e:	f8df a15c 	ldr.w	sl, [pc, #348]	@ 800d1fc <FlashConf_FindEntry+0x190>
 800d0a2:	e00e      	b.n	800d0c2 <FlashConf_FindEntry+0x56>
			ret = FlashConf_EraseBlock(address);
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f7ff ffdb 	bl	800d060 <FlashConf_EraseBlock>
			address += FLASH_MEM_BLOCK_SIZE;
 800d0aa:	f504 6300 	add.w	r3, r4, #2048	@ 0x800
 800d0ae:	e004      	b.n	800d0ba <FlashConf_FindEntry+0x4e>
		} else if (flCo.tempHead.addressNext != FLASH_EMPTY_VALUE) {
 800d0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b4:	d11a      	bne.n	800d0ec <FlashConf_FindEntry+0x80>
			address += FLASH_MEM_BLOCK_SIZE;
 800d0b6:	f504 6300 	add.w	r3, r4, #2048	@ 0x800
	while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 800d0ba:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 800d0be:	42ab      	cmp	r3, r5
 800d0c0:	d221      	bcs.n	800d106 <FlashConf_FindEntry+0x9a>
		memcpy(&flCo.tempHead, (uint8_t*) address, sizeof(FlashConf_Header_t));
 800d0c2:	4646      	mov	r6, r8
 800d0c4:	6820      	ldr	r0, [r4, #0]
 800d0c6:	6861      	ldr	r1, [r4, #4]
 800d0c8:	68a2      	ldr	r2, [r4, #8]
 800d0ca:	68e3      	ldr	r3, [r4, #12]
 800d0cc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
		if (flCo.tempHead.addressNext == 0 && flCo.tempHead.completeSize == 0
 800d0ce:	f8d9 3418 	ldr.w	r3, [r9, #1048]	@ 0x418
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d1ec      	bne.n	800d0b0 <FlashConf_FindEntry+0x44>
 800d0d6:	f5a6 6385 	sub.w	r3, r6, #1064	@ 0x428
 800d0da:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800d0de:	b92b      	cbnz	r3, 800d0ec <FlashConf_FindEntry+0x80>
				&& flCo.tempHead.reserved != FLASH_KEY) {
 800d0e0:	f5a6 6385 	sub.w	r3, r6, #1064	@ 0x428
 800d0e4:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 800d0e8:	4553      	cmp	r3, sl
 800d0ea:	d1db      	bne.n	800d0a4 <FlashConf_FindEntry+0x38>
	if (address == FLASH_CONF_ADDR_END) {
 800d0ec:	42a5      	cmp	r5, r4
 800d0ee:	d06b      	beq.n	800d1c8 <FlashConf_FindEntry+0x15c>
		ret = STATUS_OK;
 800d0f0:	f04f 0e00 	mov.w	lr, #0
 800d0f4:	46f2      	mov	sl, lr
			memcpy((uint8_t*) &flCo.tempHead, (uint8_t*) address,
 800d0f6:	f8df 8108 	ldr.w	r8, [pc, #264]	@ 800d200 <FlashConf_FindEntry+0x194>
			if (flCo.tempHead.addressNext == FLASH_EMPTY_VALUE) {
 800d0fa:	f5a8 6983 	sub.w	r9, r8, #1048	@ 0x418
				if (flCo.configAddr == FLASH_CONF_ADDR_START
 800d0fe:	464e      	mov	r6, r9
				memcpy(&flCo.header, &flCo.tempHead,
 800d100:	f509 6b85 	add.w	fp, r9, #1064	@ 0x428
 800d104:	e031      	b.n	800d16a <FlashConf_FindEntry+0xfe>
 800d106:	461c      	mov	r4, r3
 800d108:	e7f0      	b.n	800d0ec <FlashConf_FindEntry+0x80>
	address = FLASH_CONF_ADDR_START;
 800d10a:	463c      	mov	r4, r7
 800d10c:	e7f0      	b.n	800d0f0 <FlashConf_FindEntry+0x84>
				if (flCo.configAddr == FLASH_CONF_ADDR_START
 800d10e:	6833      	ldr	r3, [r6, #0]
 800d110:	429f      	cmp	r7, r3
 800d112:	d019      	beq.n	800d148 <FlashConf_FindEntry+0xdc>
				else if ((address % FLASH_MEM_BLOCK_SIZE)
 800d114:	f414 6f80 	tst.w	r4, #1024	@ 0x400
 800d118:	d008      	beq.n	800d12c <FlashConf_FindEntry+0xc0>
					address &= ~(FLASH_MEM_BLOCK_SIZE - 1);
 800d11a:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800d11e:	f024 0407 	bic.w	r4, r4, #7
					address += (FLASH_MEM_BLOCK_SIZE);
 800d122:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
						address = FLASH_CONF_ADDR_START;
 800d126:	42ac      	cmp	r4, r5
 800d128:	bf08      	it	eq
 800d12a:	463c      	moveq	r4, r7
				memcpy((uint8_t*) &flCo.tempHead, (uint8_t*) address,
 800d12c:	46c4      	mov	ip, r8
 800d12e:	6820      	ldr	r0, [r4, #0]
 800d130:	6861      	ldr	r1, [r4, #4]
 800d132:	68a2      	ldr	r2, [r4, #8]
 800d134:	68e3      	ldr	r3, [r4, #12]
 800d136:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
			if (flCo.tempHead.addressNext == FLASH_EMPTY_VALUE) {
 800d13a:	f8d9 3418 	ldr.w	r3, [r9, #1048]	@ 0x418
				lastHeaderFound = 1;
 800d13e:	2201      	movs	r2, #1
			if (flCo.tempHead.addressNext == FLASH_EMPTY_VALUE) {
 800d140:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d144:	d012      	beq.n	800d16c <FlashConf_FindEntry+0x100>
 800d146:	e020      	b.n	800d18a <FlashConf_FindEntry+0x11e>
						&& flCo.backupAddr == FLASH_CONF_ADDR_START) {
 800d148:	6873      	ldr	r3, [r6, #4]
 800d14a:	429f      	cmp	r7, r3
 800d14c:	d1e2      	bne.n	800d114 <FlashConf_FindEntry+0xa8>
					address = FLASH_CONF_ADDR_END - FLASH_MEM_BLOCK_SIZE;
 800d14e:	f5a5 6400 	sub.w	r4, r5, #2048	@ 0x800
 800d152:	e7eb      	b.n	800d12c <FlashConf_FindEntry+0xc0>
				flCo.invalidAddress = address;
 800d154:	f8c6 4438 	str.w	r4, [r6, #1080]	@ 0x438
				address &= ~(FLASH_MEM_BLOCK_SIZE - 1);
 800d158:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800d15c:	f024 0407 	bic.w	r4, r4, #7
				address += (FLASH_MEM_BLOCK_SIZE);
 800d160:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
					address = FLASH_CONF_ADDR_START;
 800d164:	42ac      	cmp	r4, r5
 800d166:	bf08      	it	eq
 800d168:	463c      	moveq	r4, r7
		ret = STATUS_OK;
 800d16a:	4652      	mov	r2, sl
		while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 800d16c:	42ac      	cmp	r4, r5
 800d16e:	d22d      	bcs.n	800d1cc <FlashConf_FindEntry+0x160>
 800d170:	bb62      	cbnz	r2, 800d1cc <FlashConf_FindEntry+0x160>
			memcpy((uint8_t*) &flCo.tempHead, (uint8_t*) address,
 800d172:	46c4      	mov	ip, r8
 800d174:	6820      	ldr	r0, [r4, #0]
 800d176:	6861      	ldr	r1, [r4, #4]
 800d178:	68a2      	ldr	r2, [r4, #8]
 800d17a:	68e3      	ldr	r3, [r4, #12]
 800d17c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
			if (flCo.tempHead.addressNext == FLASH_EMPTY_VALUE) {
 800d180:	f8d9 3418 	ldr.w	r3, [r9, #1048]	@ 0x418
 800d184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d188:	d0c1      	beq.n	800d10e <FlashConf_FindEntry+0xa2>
			else if (flCo.tempHead.addressNext > FLASH_CONF_ADDR_END
 800d18a:	429d      	cmp	r5, r3
 800d18c:	d3e2      	bcc.n	800d154 <FlashConf_FindEntry+0xe8>
					|| (flCo.tempHead.addressNext & (FLASH_MEM_PAGE_SIZE - 1))) {
 800d18e:	f013 0f0f 	tst.w	r3, #15
 800d192:	d1df      	bne.n	800d154 <FlashConf_FindEntry+0xe8>
				memcpy(&flCo.header, &flCo.tempHead,
 800d194:	f506 6383 	add.w	r3, r6, #1048	@ 0x418
 800d198:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d19a:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
				if ((flCo.backupAddr ^ flCo.configAddr)
 800d19e:	6870      	ldr	r0, [r6, #4]
 800d1a0:	6833      	ldr	r3, [r6, #0]
 800d1a2:	ea80 0203 	eor.w	r2, r0, r3
 800d1a6:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 800d1aa:	d303      	bcc.n	800d1b4 <FlashConf_FindEntry+0x148>
						&& (flCo.configAddr - flCo.backupAddr
 800d1ac:	1a1b      	subs	r3, r3, r0
 800d1ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1b2:	d305      	bcc.n	800d1c0 <FlashConf_FindEntry+0x154>
				flCo.backupAddr = flCo.configAddr;
 800d1b4:	6833      	ldr	r3, [r6, #0]
 800d1b6:	6073      	str	r3, [r6, #4]
				flCo.configAddr = address;
 800d1b8:	6034      	str	r4, [r6, #0]
				address = flCo.tempHead.addressNext;
 800d1ba:	f8d6 4418 	ldr.w	r4, [r6, #1048]	@ 0x418
 800d1be:	e7d4      	b.n	800d16a <FlashConf_FindEntry+0xfe>
					ret = FlashConf_EraseBlock(flCo.backupAddr);
 800d1c0:	f7ff ff4e 	bl	800d060 <FlashConf_EraseBlock>
 800d1c4:	4686      	mov	lr, r0
 800d1c6:	e7f5      	b.n	800d1b4 <FlashConf_FindEntry+0x148>
		ret = STATUS_ERROR;
 800d1c8:	f04f 0e01 	mov.w	lr, #1
	if (flCo.invalidAddress != -1
 800d1cc:	4b09      	ldr	r3, [pc, #36]	@ (800d1f4 <FlashConf_FindEntry+0x188>)
 800d1ce:	f8d3 0438 	ldr.w	r0, [r3, #1080]	@ 0x438
 800d1d2:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d1d6:	d004      	beq.n	800d1e2 <FlashConf_FindEntry+0x176>
			&& ((flCo.backupAddr ^ flCo.invalidAddress)
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	4043      	eors	r3, r0
 800d1dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1e0:	d202      	bcs.n	800d1e8 <FlashConf_FindEntry+0x17c>
}
 800d1e2:	4670      	mov	r0, lr
 800d1e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ret = FlashConf_EraseBlock(flCo.invalidAddress);
 800d1e8:	f7ff ff3a 	bl	800d060 <FlashConf_EraseBlock>
 800d1ec:	4686      	mov	lr, r0
 800d1ee:	e7f8      	b.n	800d1e2 <FlashConf_FindEntry+0x176>
 800d1f0:	08008000 	.word	0x08008000
 800d1f4:	20000100 	.word	0x20000100
 800d1f8:	00004000 	.word	0x00004000
 800d1fc:	deadbeef 	.word	0xdeadbeef
 800d200:	20000518 	.word	0x20000518

0800d204 <FlashConf_Read>:

Status_t FlashConf_Read(uint32_t address) {
 800d204:	b538      	push	{r3, r4, r5, lr}
 800d206:	4684      	mov	ip, r0
	Status_t ret = STATUS_OK;
	uint32_t lengthToRead;

	/* Read header */
	memcpy((uint8_t*) &flCo.data.header, (uint8_t*) address,
 800d208:	4d13      	ldr	r5, [pc, #76]	@ (800d258 <FlashConf_Read+0x54>)
 800d20a:	462c      	mov	r4, r5
 800d20c:	6800      	ldr	r0, [r0, #0]
 800d20e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800d212:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800d216:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800d21a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(FlashConf_Header_t));

	lengthToRead = flCo.data.header.completeSize - sizeof(FlashConf_Header_t);
 800d21c:	4615      	mov	r5, r2
 800d21e:	3a10      	subs	r2, #16
	SAT_UP(lengthToRead, FLASH_CONF_SIZE);

	/* Read the rest of configuration data */
	memcpy((uint8_t*) &flCo.data.data,
 800d220:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800d224:	bf28      	it	cs
 800d226:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
 800d22a:	f10c 0110 	add.w	r1, ip, #16
 800d22e:	4620      	mov	r0, r4
 800d230:	f004 fc5c 	bl	8011aec <memcpy>
	}

	/* Check consistency at the end of stream */
	if (memcmp(
			flCo.data.data + flCo.data.header.completeSize
					- sizeof(FlashConf_Header_t) - sizeof(FLASH_KEY),
 800d234:	f1a5 0014 	sub.w	r0, r5, #20
	if (memcmp(
 800d238:	2204      	movs	r2, #4
 800d23a:	4908      	ldr	r1, [pc, #32]	@ (800d25c <FlashConf_Read+0x58>)
 800d23c:	4420      	add	r0, r4
 800d23e:	f004 fc19 	bl	8011a74 <memcmp>
 800d242:	b938      	cbnz	r0, 800d254 <FlashConf_Read+0x50>
	if (flCo.data.header.reserved != FLASH_KEY) {
 800d244:	f1a4 0318 	sub.w	r3, r4, #24
 800d248:	6958      	ldr	r0, [r3, #20]
 800d24a:	4b05      	ldr	r3, [pc, #20]	@ (800d260 <FlashConf_Read+0x5c>)
 800d24c:	1ac0      	subs	r0, r0, r3
 800d24e:	bf18      	it	ne
 800d250:	2001      	movne	r0, #1
			&FLASH_KEY, sizeof(FLASH_KEY)) != 0) {
		ret = STATUS_ERROR;
	}

	return ret;
}
 800d252:	bd38      	pop	{r3, r4, r5, pc}
		ret = STATUS_ERROR;
 800d254:	2001      	movs	r0, #1
 800d256:	e7fc      	b.n	800d252 <FlashConf_Read+0x4e>
 800d258:	20000108 	.word	0x20000108
 800d25c:	08011e5c 	.word	0x08011e5c
 800d260:	deadbeef 	.word	0xdeadbeef

0800d264 <FlashConf_Load>:
Status_t FlashConf_Load(void) {
 800d264:	b510      	push	{r4, lr}
	ret = FlashConf_FindEntry();
 800d266:	f7ff ff01 	bl	800d06c <FlashConf_FindEntry>
	if (ret == STATUS_OK) {
 800d26a:	b130      	cbz	r0, 800d27a <FlashConf_Load+0x16>
		ret = STATUS_ERROR;
 800d26c:	2401      	movs	r4, #1
	conf.dbg.writes_conf = flCo.data.header.writes;
 800d26e:	4b0e      	ldr	r3, [pc, #56]	@ (800d2a8 <FlashConf_Load+0x44>)
 800d270:	68da      	ldr	r2, [r3, #12]
 800d272:	4b0e      	ldr	r3, [pc, #56]	@ (800d2ac <FlashConf_Load+0x48>)
 800d274:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800d276:	4620      	mov	r0, r4
 800d278:	bd10      	pop	{r4, pc}
		ret = FlashConf_Read(flCo.configAddr);
 800d27a:	4b0b      	ldr	r3, [pc, #44]	@ (800d2a8 <FlashConf_Load+0x44>)
 800d27c:	6818      	ldr	r0, [r3, #0]
 800d27e:	f7ff ffc1 	bl	800d204 <FlashConf_Read>
 800d282:	4604      	mov	r4, r0
		if (ret == STATUS_ERROR) {
 800d284:	2801      	cmp	r0, #1
 800d286:	d008      	beq.n	800d29a <FlashConf_Load+0x36>
		if (ret == STATUS_OK) {
 800d288:	2c00      	cmp	r4, #0
 800d28a:	d1f0      	bne.n	800d26e <FlashConf_Load+0xa>
					flCo.data.header.completeSize - sizeof(FlashConf_Header_t)
 800d28c:	4806      	ldr	r0, [pc, #24]	@ (800d2a8 <FlashConf_Load+0x44>)
			Config_ReadStream(flCo.data.data,
 800d28e:	6901      	ldr	r1, [r0, #16]
 800d290:	3914      	subs	r1, #20
 800d292:	3018      	adds	r0, #24
 800d294:	f7ff fd86 	bl	800cda4 <Config_ReadStream>
 800d298:	e7e9      	b.n	800d26e <FlashConf_Load+0xa>
			ret = FlashConf_Read(flCo.backupAddr);
 800d29a:	4b03      	ldr	r3, [pc, #12]	@ (800d2a8 <FlashConf_Load+0x44>)
 800d29c:	6858      	ldr	r0, [r3, #4]
 800d29e:	f7ff ffb1 	bl	800d204 <FlashConf_Read>
 800d2a2:	4604      	mov	r4, r0
 800d2a4:	e7f0      	b.n	800d288 <FlashConf_Load+0x24>
 800d2a6:	bf00      	nop
 800d2a8:	20000100 	.word	0x20000100
 800d2ac:	2000053c 	.word	0x2000053c

0800d2b0 <FlashConf_Write>:

Status_t FlashConf_Write(void) {
 800d2b0:	b570      	push	{r4, r5, r6, lr}
	Status_t ret = STATUS_OK;
	uint32_t address = flCo.data.header.addressNext; // previous address next become current address
 800d2b2:	4b25      	ldr	r3, [pc, #148]	@ (800d348 <FlashConf_Write+0x98>)
 800d2b4:	689c      	ldr	r4, [r3, #8]
	uint32_t endAddress = (address & ~(FLASH_MEM_BLOCK_SIZE - 1))
			+ FLASH_MEM_BLOCK_SIZE; // end addess of current sector

	/* Increment the writes counter */
	flCo.data.header.writes += 1;
 800d2b6:	68da      	ldr	r2, [r3, #12]
 800d2b8:	3201      	adds	r2, #1
 800d2ba:	60da      	str	r2, [r3, #12]

	/* Compute the next address */
	flCo.data.header.addressNext += flCo.data.header.completeSize;
 800d2bc:	691a      	ldr	r2, [r3, #16]
 800d2be:	1913      	adds	r3, r2, r4
	/* Ceil up to whole pages */
	if (flCo.data.header.addressNext & (FLASH_MEM_PAGE_SIZE - 1)) {
 800d2c0:	f013 0f0f 	tst.w	r3, #15
		flCo.data.header.addressNext &= ~(FLASH_MEM_PAGE_SIZE - 1);
 800d2c4:	bf1c      	itt	ne
 800d2c6:	f023 030f 	bicne.w	r3, r3, #15
		flCo.data.header.addressNext += (FLASH_MEM_PAGE_SIZE);
 800d2ca:	3310      	addne	r3, #16
	flCo.data.header.addressNext += flCo.data.header.completeSize;
 800d2cc:	491e      	ldr	r1, [pc, #120]	@ (800d348 <FlashConf_Write+0x98>)
 800d2ce:	608b      	str	r3, [r1, #8]
	}

	if (flCo.data.header.addressNext == FLASH_CONF_ADDR_END) {
 800d2d0:	4d1e      	ldr	r5, [pc, #120]	@ (800d34c <FlashConf_Write+0x9c>)
 800d2d2:	491f      	ldr	r1, [pc, #124]	@ (800d350 <FlashConf_Write+0xa0>)
 800d2d4:	4429      	add	r1, r5
 800d2d6:	428b      	cmp	r3, r1
 800d2d8:	d019      	beq.n	800d30e <FlashConf_Write+0x5e>
	uint32_t endAddress = (address & ~(FLASH_MEM_BLOCK_SIZE - 1))
 800d2da:	f424 60ff 	bic.w	r0, r4, #2040	@ 0x7f8
 800d2de:	f020 0007 	bic.w	r0, r0, #7
 800d2e2:	f500 6000 	add.w	r0, r0, #2048	@ 0x800
		flCo.data.header.addressNext = FLASH_CONF_ADDR_START;
	} else if (flCo.data.header.addressNext > endAddress) {
 800d2e6:	4283      	cmp	r3, r0
 800d2e8:	d913      	bls.n	800d312 <FlashConf_Write+0x62>
		/* Is this the last sector ? */
		if (endAddress == FLASH_CONF_ADDR_END) {
 800d2ea:	4281      	cmp	r1, r0
			/* Go to first sector */
			address = FLASH_CONF_ADDR_START;
		} else {
			/* Go to next sector */
			address += FLASH_MEM_BLOCK_SIZE;
 800d2ec:	bf18      	it	ne
 800d2ee:	f504 6500 	addne.w	r5, r4, #2048	@ 0x800
		}

		/* Reset the address pointer to the beginning of next sector */
		address = address & ~(FLASH_MEM_BLOCK_SIZE - 1);
 800d2f2:	f425 64ff 	bic.w	r4, r5, #2040	@ 0x7f8
 800d2f6:	f024 0407 	bic.w	r4, r4, #7
		/* Increment Next address pointer */
		flCo.data.header.addressNext = address + flCo.data.header.completeSize;
 800d2fa:	1913      	adds	r3, r2, r4
		/* Ceil up to whole pages */
		if (flCo.data.header.addressNext & (FLASH_MEM_PAGE_SIZE - 1)) {
 800d2fc:	f012 0f0f 	tst.w	r2, #15
			flCo.data.header.addressNext &= ~(FLASH_MEM_PAGE_SIZE - 1);
 800d300:	bf1c      	itt	ne
 800d302:	f023 030f 	bicne.w	r3, r3, #15
			flCo.data.header.addressNext += (FLASH_MEM_PAGE_SIZE);
 800d306:	3310      	addne	r3, #16
 800d308:	490f      	ldr	r1, [pc, #60]	@ (800d348 <FlashConf_Write+0x98>)
 800d30a:	608b      	str	r3, [r1, #8]
 800d30c:	e001      	b.n	800d312 <FlashConf_Write+0x62>
		flCo.data.header.addressNext = FLASH_CONF_ADDR_START;
 800d30e:	4b0e      	ldr	r3, [pc, #56]	@ (800d348 <FlashConf_Write+0x98>)
 800d310:	609d      	str	r5, [r3, #8]
		}
	}

	ret = System_FlashProgram(address, (uint8_t*) &flCo.data,
			((flCo.data.header.completeSize + 3) >> 2) * 4);
 800d312:	3203      	adds	r2, #3
	ret = System_FlashProgram(address, (uint8_t*) &flCo.data,
 800d314:	4e0f      	ldr	r6, [pc, #60]	@ (800d354 <FlashConf_Write+0xa4>)
 800d316:	f022 0203 	bic.w	r2, r2, #3
 800d31a:	4631      	mov	r1, r6
 800d31c:	4620      	mov	r0, r4
 800d31e:	f000 f938 	bl	800d592 <System_FlashProgram>
 800d322:	4605      	mov	r5, r0

	/* Shift config pointers and find out if some sector is left useless */
	if ((flCo.backupAddr ^ flCo.configAddr) & ~(FLASH_MEM_BLOCK_SIZE - 1)) {
 800d324:	f856 0c04 	ldr.w	r0, [r6, #-4]
 800d328:	f856 3c08 	ldr.w	r3, [r6, #-8]
 800d32c:	4043      	eors	r3, r0
 800d32e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d332:	d205      	bcs.n	800d340 <FlashConf_Write+0x90>
		/* We can erase sector of backup */
		FlashConf_EraseBlock(flCo.backupAddr);
	}

	flCo.backupAddr = flCo.configAddr;
 800d334:	4b04      	ldr	r3, [pc, #16]	@ (800d348 <FlashConf_Write+0x98>)
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	605a      	str	r2, [r3, #4]
	flCo.configAddr = address;
 800d33a:	601c      	str	r4, [r3, #0]

	return ret;
}
 800d33c:	4628      	mov	r0, r5
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
		FlashConf_EraseBlock(flCo.backupAddr);
 800d340:	f7ff fe8e 	bl	800d060 <FlashConf_EraseBlock>
 800d344:	e7f6      	b.n	800d334 <FlashConf_Write+0x84>
 800d346:	bf00      	nop
 800d348:	20000100 	.word	0x20000100
 800d34c:	08008000 	.word	0x08008000
 800d350:	00004000 	.word	0x00004000
 800d354:	20000108 	.word	0x20000108

0800d358 <FlashConf_Store>:
Status_t FlashConf_Store(void) {
 800d358:	b530      	push	{r4, r5, lr}
 800d35a:	b083      	sub	sp, #12
	uint32_t length = 0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	9301      	str	r3, [sp, #4]
	ret = Config_FillStream(flCo.data.data, &length, FLASH_CONF_SIZE - 4);
 800d360:	4c12      	ldr	r4, [pc, #72]	@ (800d3ac <FlashConf_Store+0x54>)
 800d362:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 800d366:	a901      	add	r1, sp, #4
 800d368:	4620      	mov	r0, r4
 800d36a:	f7ff fd63 	bl	800ce34 <Config_FillStream>
 800d36e:	4605      	mov	r5, r0
	memcpy(flCo.data.data + length, &FLASH_KEY, sizeof(FLASH_KEY));
 800d370:	9b01      	ldr	r3, [sp, #4]
 800d372:	4a0f      	ldr	r2, [pc, #60]	@ (800d3b0 <FlashConf_Store+0x58>)
 800d374:	50e2      	str	r2, [r4, r3]
			+ sizeof(FlashConf_Header_t);
 800d376:	3314      	adds	r3, #20
	flCo.data.header.completeSize = length + sizeof(FLASH_KEY)
 800d378:	f844 3c08 	str.w	r3, [r4, #-8]
	flCo.data.header.reserved = FLASH_KEY;
 800d37c:	f844 2c04 	str.w	r2, [r4, #-4]
	ret += FlashConf_Write();
 800d380:	f7ff ff96 	bl	800d2b0 <FlashConf_Write>
 800d384:	4428      	add	r0, r5
 800d386:	b200      	sxth	r0, r0
	conf.dbg.writes_conf = flCo.data.header.writes;
 800d388:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800d38c:	4b09      	ldr	r3, [pc, #36]	@ (800d3b4 <FlashConf_Store+0x5c>)
 800d38e:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (ret == STATUS_OK) {
 800d390:	b930      	cbnz	r0, 800d3a0 <FlashConf_Store+0x48>
		CLEAR_BIT(conf.sys.status, STAT_BIT_CONFIG_FLASH);
 800d392:	689b      	ldr	r3, [r3, #8]
 800d394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d398:	4a06      	ldr	r2, [pc, #24]	@ (800d3b4 <FlashConf_Store+0x5c>)
 800d39a:	6093      	str	r3, [r2, #8]
}
 800d39c:	b003      	add	sp, #12
 800d39e:	bd30      	pop	{r4, r5, pc}
		SET_BIT(conf.sys.status, STAT_BIT_CONFIG_FLASH);
 800d3a0:	4b04      	ldr	r3, [pc, #16]	@ (800d3b4 <FlashConf_Store+0x5c>)
 800d3a2:	689b      	ldr	r3, [r3, #8]
 800d3a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d3a8:	e7f6      	b.n	800d398 <FlashConf_Store+0x40>
 800d3aa:	bf00      	nop
 800d3ac:	20000118 	.word	0x20000118
 800d3b0:	deadbeef 	.word	0xdeadbeef
 800d3b4:	2000053c 	.word	0x2000053c

0800d3b8 <RegMap_RestoreFactoryValues>:
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/


Status_t RegMap_RestoreFactoryValues(void)
{
 800d3b8:	b430      	push	{r4, r5}
  Status_t ret = STATUS_OK;
  //uint8_t *id = (uint8_t *)0x1FFF7A10;

  /* Copy firmware info */
  memcpy(&conf.firm, CONF_C_APPLICATION_OFFSET + (uint32_t)CONF_FW_INFO_OFFSET, sizeof(conf.firm));
 800d3ba:	4d15      	ldr	r5, [pc, #84]	@ (800d410 <RegMap_RestoreFactoryValues+0x58>)
 800d3bc:	4c15      	ldr	r4, [pc, #84]	@ (800d414 <RegMap_RestoreFactoryValues+0x5c>)
 800d3be:	4a16      	ldr	r2, [pc, #88]	@ (800d418 <RegMap_RestoreFactoryValues+0x60>)
 800d3c0:	18ab      	adds	r3, r5, r2
 800d3c2:	46a4      	mov	ip, r4
 800d3c4:	58a8      	ldr	r0, [r5, r2]
 800d3c6:	6859      	ldr	r1, [r3, #4]
 800d3c8:	689a      	ldr	r2, [r3, #8]
 800d3ca:	68db      	ldr	r3, [r3, #12]
 800d3cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}

  /* Copy Hardware info */
  memcpy(&conf.fact, CONF_C_BOOTLOADER_OFFSET + (uint32_t)CONF_FW_INFO_OFFSET, sizeof(conf.fact));
 800d3d0:	4a12      	ldr	r2, [pc, #72]	@ (800d41c <RegMap_RestoreFactoryValues+0x64>)
 800d3d2:	18ab      	adds	r3, r5, r2
 800d3d4:	f1a4 0c10 	sub.w	ip, r4, #16
 800d3d8:	58a8      	ldr	r0, [r5, r2]
 800d3da:	6859      	ldr	r1, [r3, #4]
 800d3dc:	689a      	ldr	r2, [r3, #8]
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}

  CONF_INT(CONF_SYS_UPTIME)              = 0;
 800d3e4:	2000      	movs	r0, #0
 800d3e6:	f844 0c28 	str.w	r0, [r4, #-40]
  CONF_INT(CONF_SYS_REGMAP_VERSION)      = 1001;
 800d3ea:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d3ee:	f844 2c24 	str.w	r2, [r4, #-36]
  CONF_BYTE(CONF_COM_MB_BAUD_RATE)       = 1;
 800d3f2:	2201      	movs	r2, #1
 800d3f4:	7422      	strb	r2, [r4, #16]
  CONF_BYTE(CONF_COM_MB_PARITY)          = 1;
 800d3f6:	7462      	strb	r2, [r4, #17]
  CONF_BYTE(CONF_COM_MB_STOP_BITS)       = 0;
 800d3f8:	74a0      	strb	r0, [r4, #18]
  CONF_SHORT(CONF_COM_MB_ADDRESS)        = 32;
 800d3fa:	2220      	movs	r2, #32
 800d3fc:	82a2      	strh	r2, [r4, #20]
  CONF_SHORT(CONF_COM_MB_TIMEOUT)        = 10;
 800d3fe:	220a      	movs	r2, #10
 800d400:	8322      	strh	r2, [r4, #24]
  CONF_SHORT(CONF_STPMEAS_NTC_BETA)      = 3977;
 800d402:	f640 7289 	movw	r2, #3977	@ 0xf89
 800d406:	f8a4 2021 	strh.w	r2, [r4, #33]	@ 0x21


  return ret;
}
 800d40a:	bc30      	pop	{r4, r5}
 800d40c:	4770      	bx	lr
 800d40e:	bf00      	nop
 800d410:	00000200 	.word	0x00000200
 800d414:	20000564 	.word	0x20000564
 800d418:	0800c000 	.word	0x0800c000
 800d41c:	08000000 	.word	0x08000000

0800d420 <System_CrcInit>:
//
//  /* Freeze IWDG in stop */
//  __HAL_RCC_DBGMCU_CLK_ENABLE();
//  __HAL_DBGMCU_FREEZE_IWDG();
//}
void System_CrcInit(void) {
 800d420:	b500      	push	{lr}
 800d422:	b083      	sub	sp, #12
	/* Initialize CRC unit */
	hcrc.Instance = CRC;
 800d424:	480e      	ldr	r0, [pc, #56]	@ (800d460 <System_CrcInit+0x40>)
 800d426:	4b0f      	ldr	r3, [pc, #60]	@ (800d464 <System_CrcInit+0x44>)
 800d428:	6003      	str	r3, [r0, #0]

	__HAL_RCC_CRC_CLK_ENABLE();
 800d42a:	2300      	movs	r3, #0
 800d42c:	9301      	str	r3, [sp, #4]
 800d42e:	4b0e      	ldr	r3, [pc, #56]	@ (800d468 <System_CrcInit+0x48>)
 800d430:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d432:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800d436:	631a      	str	r2, [r3, #48]	@ 0x30
 800d438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d43a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d43e:	9301      	str	r3, [sp, #4]
 800d440:	9b01      	ldr	r3, [sp, #4]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800d442:	f001 fe9b 	bl	800f17c <HAL_CRC_Init>
 800d446:	b940      	cbnz	r0, 800d45a <System_CrcInit+0x3a>
		Error_Handler();
	}

	__HAL_CRC_DR_RESET(&hcrc);
 800d448:	4b05      	ldr	r3, [pc, #20]	@ (800d460 <System_CrcInit+0x40>)
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	6893      	ldr	r3, [r2, #8]
 800d44e:	f043 0301 	orr.w	r3, r3, #1
 800d452:	6093      	str	r3, [r2, #8]
}
 800d454:	b003      	add	sp, #12
 800d456:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800d45a:	f001 f8d8 	bl	800e60e <Error_Handler>
 800d45e:	e7f3      	b.n	800d448 <System_CrcInit+0x28>
 800d460:	200005e4 	.word	0x200005e4
 800d464:	40023000 	.word	0x40023000
 800d468:	40023800 	.word	0x40023800

0800d46c <System_ReloadWdg>:

	return ret;
}

Status_t System_ReloadWdg(void)
{
 800d46c:	b508      	push	{r3, lr}
	Status_t ret = STATUS_OK;

	HAL_IWDG_Refresh(&hiwdg);
 800d46e:	4802      	ldr	r0, [pc, #8]	@ (800d478 <System_ReloadWdg+0xc>)
 800d470:	f002 fcd1 	bl	800fe16 <HAL_IWDG_Refresh>

	return ret;
}
 800d474:	2000      	movs	r0, #0
 800d476:	bd08      	pop	{r3, pc}
 800d478:	200005d8 	.word	0x200005d8

0800d47c <System_InitWdg>:
Status_t System_InitWdg(void) {
 800d47c:	b508      	push	{r3, lr}
	hiwdg.Instance = IWDG;
 800d47e:	4809      	ldr	r0, [pc, #36]	@ (800d4a4 <System_InitWdg+0x28>)
 800d480:	4b09      	ldr	r3, [pc, #36]	@ (800d4a8 <System_InitWdg+0x2c>)
 800d482:	6003      	str	r3, [r0, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800d484:	2303      	movs	r3, #3
 800d486:	6043      	str	r3, [r0, #4]
	hiwdg.Init.Reload = 3000;
 800d488:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800d48c:	6083      	str	r3, [r0, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800d48e:	f002 fc8d 	bl	800fdac <HAL_IWDG_Init>
 800d492:	b918      	cbnz	r0, 800d49c <System_InitWdg+0x20>
	System_ReloadWdg();
 800d494:	f7ff ffea 	bl	800d46c <System_ReloadWdg>
}
 800d498:	2000      	movs	r0, #0
 800d49a:	bd08      	pop	{r3, pc}
		Error_Handler();
 800d49c:	f001 f8b7 	bl	800e60e <Error_Handler>
 800d4a0:	e7f8      	b.n	800d494 <System_InitWdg+0x18>
 800d4a2:	bf00      	nop
 800d4a4:	200005d8 	.word	0x200005d8
 800d4a8:	40003000 	.word	0x40003000

0800d4ac <System_Delay>:

uint8_t System_Delay(uint32_t milliseconds) {
 800d4ac:	b508      	push	{r3, lr}
	HAL_Delay(milliseconds);
 800d4ae:	f001 fb1f 	bl	800eaf0 <HAL_Delay>
	return 0;
}
 800d4b2:	2000      	movs	r0, #0
 800d4b4:	bd08      	pop	{r3, pc}
	...

0800d4b8 <System_Reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d4b8:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d4bc:	4905      	ldr	r1, [pc, #20]	@ (800d4d4 <System_Reset+0x1c>)
 800d4be:	68ca      	ldr	r2, [r1, #12]
 800d4c0:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d4c4:	4b04      	ldr	r3, [pc, #16]	@ (800d4d8 <System_Reset+0x20>)
 800d4c6:	4313      	orrs	r3, r2
 800d4c8:	60cb      	str	r3, [r1, #12]
 800d4ca:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d4ce:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800d4d0:	e7fd      	b.n	800d4ce <System_Reset+0x16>
 800d4d2:	bf00      	nop
 800d4d4:	e000ed00 	.word	0xe000ed00
 800d4d8:	05fa0004 	.word	0x05fa0004

0800d4dc <GetSector>:
void System_Reset(void) {
	NVIC_SystemReset();
}

uint32_t GetSector(uint32_t Address) {
	if (Address < 0x08004000)
 800d4dc:	4b17      	ldr	r3, [pc, #92]	@ (800d53c <GetSector+0x60>)
 800d4de:	4298      	cmp	r0, r3
 800d4e0:	d31e      	bcc.n	800d520 <GetSector+0x44>
		return FLASH_SECTOR_0;
	else if (Address < 0x08008000)
 800d4e2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800d4e6:	4298      	cmp	r0, r3
 800d4e8:	d31c      	bcc.n	800d524 <GetSector+0x48>
		return FLASH_SECTOR_1;
	else if (Address < 0x0800C000)
 800d4ea:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800d4ee:	4298      	cmp	r0, r3
 800d4f0:	d31a      	bcc.n	800d528 <GetSector+0x4c>
		return FLASH_SECTOR_2;
	else if (Address < 0x08010000)
 800d4f2:	4b13      	ldr	r3, [pc, #76]	@ (800d540 <GetSector+0x64>)
 800d4f4:	4298      	cmp	r0, r3
 800d4f6:	d919      	bls.n	800d52c <GetSector+0x50>
		return FLASH_SECTOR_3;
	else if (Address < 0x08020000)
 800d4f8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800d4fc:	4298      	cmp	r0, r3
 800d4fe:	d917      	bls.n	800d530 <GetSector+0x54>
		return FLASH_SECTOR_4;
	else if (Address < 0x08040000)
 800d500:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800d504:	4298      	cmp	r0, r3
 800d506:	d915      	bls.n	800d534 <GetSector+0x58>
		return FLASH_SECTOR_5;
	else if (Address < 0x08060000)
 800d508:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800d50c:	4298      	cmp	r0, r3
 800d50e:	d913      	bls.n	800d538 <GetSector+0x5c>
		return FLASH_SECTOR_6;
	else if (Address < 0x08080000)
		return FLASH_SECTOR_7;
 800d510:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800d514:	4298      	cmp	r0, r3
 800d516:	bf8c      	ite	hi
 800d518:	f04f 30ff 	movhi.w	r0, #4294967295
 800d51c:	2007      	movls	r0, #7
 800d51e:	4770      	bx	lr
		return FLASH_SECTOR_0;
 800d520:	2000      	movs	r0, #0
 800d522:	4770      	bx	lr
		return FLASH_SECTOR_1;
 800d524:	2001      	movs	r0, #1
 800d526:	4770      	bx	lr
		return FLASH_SECTOR_2;
 800d528:	2002      	movs	r0, #2
 800d52a:	4770      	bx	lr
		return FLASH_SECTOR_3;
 800d52c:	2003      	movs	r0, #3
 800d52e:	4770      	bx	lr
		return FLASH_SECTOR_4;
 800d530:	2004      	movs	r0, #4
 800d532:	4770      	bx	lr
		return FLASH_SECTOR_5;
 800d534:	2005      	movs	r0, #5
 800d536:	4770      	bx	lr
		return FLASH_SECTOR_6;
 800d538:	2006      	movs	r0, #6
	else
		return UINT32_MAX;
}
 800d53a:	4770      	bx	lr
 800d53c:	08004000 	.word	0x08004000
 800d540:	0800ffff 	.word	0x0800ffff

0800d544 <System_FlashErase>:

Status_t System_FlashErase(uint32_t startAddress, uint32_t endAddress)
{
 800d544:	b530      	push	{r4, r5, lr}
 800d546:	b087      	sub	sp, #28
 800d548:	4604      	mov	r4, r0
 800d54a:	460d      	mov	r5, r1
	FLASH_EraseInitTypeDef erase;
	uint32_t pageError;
	uint32_t startSector, endSector;

	/* Unlock Flash memory */
	ret = HAL_FLASH_Unlock();
 800d54c:	f002 f8fe 	bl	800f74c <HAL_FLASH_Unlock>

	/* Erase the given flash pages */
	startSector = GetSector(startAddress);
 800d550:	4620      	mov	r0, r4
 800d552:	f7ff ffc3 	bl	800d4dc <GetSector>
 800d556:	4604      	mov	r4, r0
	endSector = GetSector(endAddress);
 800d558:	4628      	mov	r0, r5
 800d55a:	f7ff ffbf 	bl	800d4dc <GetSector>
	if (startSector >= UINT32_MAX || endSector >= UINT32_MAX)
 800d55e:	f1b4 3fff 	cmp.w	r4, #4294967295
 800d562:	d012      	beq.n	800d58a <System_FlashErase+0x46>
 800d564:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d568:	d00f      	beq.n	800d58a <System_FlashErase+0x46>
		HAL_FLASH_Lock();
		return HAL_ERROR;
	}

	// Nastavení struktury pro vymazání
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;  // Vymazání sektorů
 800d56a:	2300      	movs	r3, #0
 800d56c:	9301      	str	r3, [sp, #4]
	erase.Sector = startSector;                 // Nastavení počátečního sektoru
 800d56e:	9403      	str	r4, [sp, #12]
	erase.NbSectors = (endSector - startSector) + 1; // Počet sektorů k vymazání
 800d570:	1c43      	adds	r3, r0, #1
 800d572:	1b1b      	subs	r3, r3, r4
 800d574:	9304      	str	r3, [sp, #16]

	// Vymazání Flash paměti
	ret = HAL_FLASHEx_Erase(&erase, &pageError);
 800d576:	4669      	mov	r1, sp
 800d578:	a801      	add	r0, sp, #4
 800d57a:	f002 f9e7 	bl	800f94c <HAL_FLASHEx_Erase>
 800d57e:	b204      	sxth	r4, r0

	// Lock Flash memory po operaci
	HAL_FLASH_Lock();
 800d580:	f002 f8f8 	bl	800f774 <HAL_FLASH_Lock>

	return ret;
}
 800d584:	4620      	mov	r0, r4
 800d586:	b007      	add	sp, #28
 800d588:	bd30      	pop	{r4, r5, pc}
		HAL_FLASH_Lock();
 800d58a:	f002 f8f3 	bl	800f774 <HAL_FLASH_Lock>
		return HAL_ERROR;
 800d58e:	2401      	movs	r4, #1
 800d590:	e7f8      	b.n	800d584 <System_FlashErase+0x40>

0800d592 <System_FlashProgram>:

Status_t System_FlashProgram(uint32_t addressOffset, uint8_t *data,
		uint32_t length) {
 800d592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d596:	4605      	mov	r5, r0
 800d598:	460e      	mov	r6, r1
 800d59a:	4617      	mov	r7, r2
	Status_t ret = STATUS_OK;
	uint32_t bytesWritten = 0;
	uint32_t value;

	/* Unlock Flash memory */
	ret = HAL_FLASH_Unlock();
 800d59c:	f002 f8d6 	bl	800f74c <HAL_FLASH_Unlock>

	/* Address and data length must be multiple of 4 */
	if (((uint32_t) addressOffset % 4) || (length % 4)) {
 800d5a0:	ea45 0307 	orr.w	r3, r5, r7
 800d5a4:	f013 0f03 	tst.w	r3, #3
 800d5a8:	d006      	beq.n	800d5b8 <System_FlashProgram+0x26>
		ret = STATUS_ERROR;
 800d5aa:	f04f 0801 	mov.w	r8, #1
		addressOffset += 4;
		data += 4;
	}

	/* Lock Flash memory */
	HAL_FLASH_Lock();
 800d5ae:	f002 f8e1 	bl	800f774 <HAL_FLASH_Lock>

	return ret;
}
 800d5b2:	4640      	mov	r0, r8
 800d5b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b8:	fa0f f880 	sxth.w	r8, r0
	while (ret == STATUS_OK && bytesWritten < length) {
 800d5bc:	f1b8 0f00 	cmp.w	r8, #0
 800d5c0:	d1f5      	bne.n	800d5ae <System_FlashProgram+0x1c>
 800d5c2:	2f00      	cmp	r7, #0
 800d5c4:	d0f3      	beq.n	800d5ae <System_FlashProgram+0x1c>
 800d5c6:	1d34      	adds	r4, r6, #4
 800d5c8:	1bad      	subs	r5, r5, r6
 800d5ca:	3d04      	subs	r5, #4
 800d5cc:	f1c6 26ff 	rsb	r6, r6, #4278255360	@ 0xff00ff00
 800d5d0:	f506 067f 	add.w	r6, r6, #16711680	@ 0xff0000
 800d5d4:	36fc      	adds	r6, #252	@ 0xfc
		value = data[0] + ((uint32_t) data[1] << 8) + ((uint32_t) data[2] << 16)
 800d5d6:	f814 2c03 	ldrb.w	r2, [r4, #-3]
 800d5da:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 800d5de:	041b      	lsls	r3, r3, #16
 800d5e0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d5e4:	f814 2c04 	ldrb.w	r2, [r4, #-4]
 800d5e8:	4413      	add	r3, r2
				+ ((uint32_t) data[3] << 24);
 800d5ea:	f814 2c01 	ldrb.w	r2, [r4, #-1]
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 800d5ee:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	1961      	adds	r1, r4, r5
 800d5f6:	2002      	movs	r0, #2
 800d5f8:	f002 f8f8 	bl	800f7ec <HAL_FLASH_Program>
 800d5fc:	fa0f f880 	sxth.w	r8, r0
	while (ret == STATUS_OK && bytesWritten < length) {
 800d600:	f1b8 0f00 	cmp.w	r8, #0
 800d604:	d1d3      	bne.n	800d5ae <System_FlashProgram+0x1c>
 800d606:	3404      	adds	r4, #4
 800d608:	1933      	adds	r3, r6, r4
 800d60a:	42bb      	cmp	r3, r7
 800d60c:	d3e3      	bcc.n	800d5d6 <System_FlashProgram+0x44>
 800d60e:	e7ce      	b.n	800d5ae <System_FlashProgram+0x1c>

0800d610 <System_RemapApplicationVector>:
	}

	return ret;
}

void System_RemapApplicationVector(void) {
 800d610:	b082      	sub	sp, #8
	volatile uint32_t *VectorTable = (volatile uint32_t*) 0x20000000;

	/* Copy reset vector from flash into RAM */
	for (int i = 0; i < 48; i++) {
 800d612:	492a      	ldr	r1, [pc, #168]	@ (800d6bc <System_RemapApplicationVector+0xac>)
 800d614:	f101 00c0 	add.w	r0, r1, #192	@ 0xc0
void System_RemapApplicationVector(void) {
 800d618:	460b      	mov	r3, r1
		VectorTable[i] =
 800d61a:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
				*(volatile uint32_t*) ((uint32_t) CONF_C_APPLICATION_OFFSET
 800d61e:	681a      	ldr	r2, [r3, #0]
		VectorTable[i] =
 800d620:	50ca      	str	r2, [r1, r3]
	for (int i = 0; i < 48; i++) {
 800d622:	3304      	adds	r3, #4
 800d624:	4283      	cmp	r3, r0
 800d626:	d1fa      	bne.n	800d61e <System_RemapApplicationVector+0xe>
						+ (i << 2));
	}

	/* Remap vector from flash into RAM */
	//__HAL_RCC_AHB_FORCE_RESET();
	__HAL_RCC_GPIOA_FORCE_RESET();
 800d628:	4b25      	ldr	r3, [pc, #148]	@ (800d6c0 <System_RemapApplicationVector+0xb0>)
 800d62a:	691a      	ldr	r2, [r3, #16]
 800d62c:	f042 0201 	orr.w	r2, r2, #1
 800d630:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_FORCE_RESET();
 800d632:	691a      	ldr	r2, [r3, #16]
 800d634:	f042 0202 	orr.w	r2, r2, #2
 800d638:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_FORCE_RESET();
 800d63a:	691a      	ldr	r2, [r3, #16]
 800d63c:	f042 0204 	orr.w	r2, r2, #4
 800d640:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOH_FORCE_RESET();
 800d642:	691a      	ldr	r2, [r3, #16]
 800d644:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d648:	611a      	str	r2, [r3, #16]
	__HAL_RCC_DMA1_FORCE_RESET();
 800d64a:	691a      	ldr	r2, [r3, #16]
 800d64c:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 800d650:	611a      	str	r2, [r3, #16]
	__HAL_RCC_DMA2_FORCE_RESET();
 800d652:	691a      	ldr	r2, [r3, #16]
 800d654:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800d658:	611a      	str	r2, [r3, #16]

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800d65a:	2100      	movs	r1, #0
 800d65c:	9101      	str	r1, [sp, #4]
 800d65e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d660:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d664:	645a      	str	r2, [r3, #68]	@ 0x44
 800d666:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d668:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800d66c:	9201      	str	r2, [sp, #4]
 800d66e:	9a01      	ldr	r2, [sp, #4]
	//__HAL_RCC_AHB_RELEASE_RESET();
	__HAL_RCC_AHB1_RELEASE_RESET();
 800d670:	6119      	str	r1, [r3, #16]
	__HAL_RCC_GPIOA_RELEASE_RESET();
 800d672:	691a      	ldr	r2, [r3, #16]
 800d674:	f022 0201 	bic.w	r2, r2, #1
 800d678:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOB_RELEASE_RESET();
 800d67a:	691a      	ldr	r2, [r3, #16]
 800d67c:	f022 0202 	bic.w	r2, r2, #2
 800d680:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_RELEASE_RESET();
 800d682:	691a      	ldr	r2, [r3, #16]
 800d684:	f022 0204 	bic.w	r2, r2, #4
 800d688:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOH_RELEASE_RESET();
 800d68a:	691a      	ldr	r2, [r3, #16]
 800d68c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d690:	611a      	str	r2, [r3, #16]
	__HAL_RCC_DMA1_RELEASE_RESET();
 800d692:	691a      	ldr	r2, [r3, #16]
 800d694:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
 800d698:	611a      	str	r2, [r3, #16]
	__HAL_RCC_DMA2_RELEASE_RESET();
 800d69a:	691a      	ldr	r2, [r3, #16]
 800d69c:	f422 0280 	bic.w	r2, r2, #4194304	@ 0x400000
 800d6a0:	611a      	str	r2, [r3, #16]

	__HAL_SYSCFG_REMAPMEMORY_SRAM();
 800d6a2:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 800d6a6:	681a      	ldr	r2, [r3, #0]
 800d6a8:	f022 0207 	bic.w	r2, r2, #7
 800d6ac:	601a      	str	r2, [r3, #0]
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	f042 0203 	orr.w	r2, r2, #3
 800d6b4:	601a      	str	r2, [r3, #0]
}
 800d6b6:	b002      	add	sp, #8
 800d6b8:	4770      	bx	lr
 800d6ba:	bf00      	nop
 800d6bc:	0800c000 	.word	0x0800c000
 800d6c0:	40023800 	.word	0x40023800

0800d6c4 <MbRtu_ReadInputRegCallback>:
{
  Status_t ret = STATUS_OK;

  UNUSED(mb);

  switch (address)
 800d6c4:	2818      	cmp	r0, #24
 800d6c6:	f200 808d 	bhi.w	800d7e4 <MbRtu_ReadInputRegCallback+0x120>
 800d6ca:	e8df f000 	tbb	[pc, r0]
 800d6ce:	140d      	.short	0x140d
 800d6d0:	28231e19 	.word	0x28231e19
 800d6d4:	3b36312d 	.word	0x3b36312d
 800d6d8:	4f4a4540 	.word	0x4f4a4540
 800d6dc:	635e5954 	.word	0x635e5954
 800d6e0:	77726d68 	.word	0x77726d68
 800d6e4:	817c      	.short	0x817c
 800d6e6:	86          	.byte	0x86
 800d6e7:	00          	.byte	0x00
  {

    case MB_INPUT_SYS_UPTIME_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_UPTIME) + 0);
 800d6e8:	4b40      	ldr	r3, [pc, #256]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	881b      	ldrh	r3, [r3, #0]
  Status_t ret = STATUS_OK;
 800d6ee:	2000      	movs	r0, #0
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800d6f0:	ba5b      	rev16	r3, r3
      ret = STATUS_ERROR;
      break;
  }

  /* Reverse byte order */
  *value = __REV16(*value);
 800d6f2:	800b      	strh	r3, [r1, #0]

  return ret;
}
 800d6f4:	4770      	bx	lr
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_UPTIME) + 1);
 800d6f6:	4b3d      	ldr	r3, [pc, #244]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	885b      	ldrh	r3, [r3, #2]
  Status_t ret = STATUS_OK;
 800d6fc:	2000      	movs	r0, #0
      break;
 800d6fe:	e7f7      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_REGMAP_VERSION) + 0);
 800d700:	4b3a      	ldr	r3, [pc, #232]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	889b      	ldrh	r3, [r3, #4]
  Status_t ret = STATUS_OK;
 800d706:	2000      	movs	r0, #0
      break;
 800d708:	e7f2      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_REGMAP_VERSION) + 1);
 800d70a:	4b38      	ldr	r3, [pc, #224]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	88db      	ldrh	r3, [r3, #6]
  Status_t ret = STATUS_OK;
 800d710:	2000      	movs	r0, #0
      break;
 800d712:	e7ed      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_STATUS) + 0);
 800d714:	4b35      	ldr	r3, [pc, #212]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	891b      	ldrh	r3, [r3, #8]
  Status_t ret = STATUS_OK;
 800d71a:	2000      	movs	r0, #0
      break;
 800d71c:	e7e8      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_STATUS) + 1);
 800d71e:	4b33      	ldr	r3, [pc, #204]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	895b      	ldrh	r3, [r3, #10]
  Status_t ret = STATUS_OK;
 800d724:	2000      	movs	r0, #0
      break;
 800d726:	e7e3      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = conf.sys.io_input;
 800d728:	4b31      	ldr	r3, [pc, #196]	@ (800d7f0 <MbRtu_ReadInputRegCallback+0x12c>)
 800d72a:	8a9b      	ldrh	r3, [r3, #20]
  Status_t ret = STATUS_OK;
 800d72c:	2000      	movs	r0, #0
      break;
 800d72e:	e7df      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_SERIAL_NUMBER) + 0);
 800d730:	4b2e      	ldr	r3, [pc, #184]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d732:	685b      	ldr	r3, [r3, #4]
 800d734:	881b      	ldrh	r3, [r3, #0]
  Status_t ret = STATUS_OK;
 800d736:	2000      	movs	r0, #0
      break;
 800d738:	e7da      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_SERIAL_NUMBER) + 1);
 800d73a:	4b2c      	ldr	r3, [pc, #176]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d73c:	685b      	ldr	r3, [r3, #4]
 800d73e:	885b      	ldrh	r3, [r3, #2]
  Status_t ret = STATUS_OK;
 800d740:	2000      	movs	r0, #0
      break;
 800d742:	e7d5      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_DEVICE_ID) + 0);
 800d744:	4b29      	ldr	r3, [pc, #164]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d746:	685b      	ldr	r3, [r3, #4]
 800d748:	889b      	ldrh	r3, [r3, #4]
  Status_t ret = STATUS_OK;
 800d74a:	2000      	movs	r0, #0
      break;
 800d74c:	e7d0      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_DEVICE_ID) + 1);
 800d74e:	4b27      	ldr	r3, [pc, #156]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	88db      	ldrh	r3, [r3, #6]
  Status_t ret = STATUS_OK;
 800d754:	2000      	movs	r0, #0
      break;
 800d756:	e7cb      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_HW_REVISION) + 0);
 800d758:	4b24      	ldr	r3, [pc, #144]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	891b      	ldrh	r3, [r3, #8]
  Status_t ret = STATUS_OK;
 800d75e:	2000      	movs	r0, #0
      break;
 800d760:	e7c6      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_HW_REVISION) + 1);
 800d762:	4b22      	ldr	r3, [pc, #136]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	895b      	ldrh	r3, [r3, #10]
  Status_t ret = STATUS_OK;
 800d768:	2000      	movs	r0, #0
      break;
 800d76a:	e7c1      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_BOOT_REVISION) + 0);
 800d76c:	4b1f      	ldr	r3, [pc, #124]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d76e:	685b      	ldr	r3, [r3, #4]
 800d770:	899b      	ldrh	r3, [r3, #12]
  Status_t ret = STATUS_OK;
 800d772:	2000      	movs	r0, #0
      break;
 800d774:	e7bc      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_BOOT_REVISION) + 1);
 800d776:	4b1d      	ldr	r3, [pc, #116]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	89db      	ldrh	r3, [r3, #14]
  Status_t ret = STATUS_OK;
 800d77c:	2000      	movs	r0, #0
      break;
 800d77e:	e7b7      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_REVISION) + 0);
 800d780:	4b1a      	ldr	r3, [pc, #104]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d782:	689b      	ldr	r3, [r3, #8]
 800d784:	881b      	ldrh	r3, [r3, #0]
  Status_t ret = STATUS_OK;
 800d786:	2000      	movs	r0, #0
      break;
 800d788:	e7b2      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_REVISION) + 1);
 800d78a:	4b18      	ldr	r3, [pc, #96]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d78c:	689b      	ldr	r3, [r3, #8]
 800d78e:	885b      	ldrh	r3, [r3, #2]
  Status_t ret = STATUS_OK;
 800d790:	2000      	movs	r0, #0
      break;
 800d792:	e7ad      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_ASSEMBLY_INFO) + 0);
 800d794:	4b15      	ldr	r3, [pc, #84]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	889b      	ldrh	r3, [r3, #4]
  Status_t ret = STATUS_OK;
 800d79a:	2000      	movs	r0, #0
      break;
 800d79c:	e7a8      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_ASSEMBLY_INFO) + 1);
 800d79e:	4b13      	ldr	r3, [pc, #76]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	88db      	ldrh	r3, [r3, #6]
  Status_t ret = STATUS_OK;
 800d7a4:	2000      	movs	r0, #0
      break;
 800d7a6:	e7a3      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_CHECKSUM) + 0);
 800d7a8:	4b10      	ldr	r3, [pc, #64]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	891b      	ldrh	r3, [r3, #8]
  Status_t ret = STATUS_OK;
 800d7ae:	2000      	movs	r0, #0
      break;
 800d7b0:	e79e      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_CHECKSUM) + 1);
 800d7b2:	4b0e      	ldr	r3, [pc, #56]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d7b4:	689b      	ldr	r3, [r3, #8]
 800d7b6:	895b      	ldrh	r3, [r3, #10]
  Status_t ret = STATUS_OK;
 800d7b8:	2000      	movs	r0, #0
      break;
 800d7ba:	e799      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_SIZE) + 0);
 800d7bc:	4b0b      	ldr	r3, [pc, #44]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d7be:	689b      	ldr	r3, [r3, #8]
 800d7c0:	899b      	ldrh	r3, [r3, #12]
  Status_t ret = STATUS_OK;
 800d7c2:	2000      	movs	r0, #0
      break;
 800d7c4:	e794      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_SIZE) + 1);
 800d7c6:	4b09      	ldr	r3, [pc, #36]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d7c8:	689b      	ldr	r3, [r3, #8]
 800d7ca:	89db      	ldrh	r3, [r3, #14]
  Status_t ret = STATUS_OK;
 800d7cc:	2000      	movs	r0, #0
      break;
 800d7ce:	e78f      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_DBG_WRITES_CONF) + 0);
 800d7d0:	4b06      	ldr	r3, [pc, #24]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d7d2:	699b      	ldr	r3, [r3, #24]
 800d7d4:	881b      	ldrh	r3, [r3, #0]
  Status_t ret = STATUS_OK;
 800d7d6:	2000      	movs	r0, #0
      break;
 800d7d8:	e78a      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
      *value = *((uint16_t *)CONF_PTR(CONF_DBG_WRITES_CONF) + 1);
 800d7da:	4b04      	ldr	r3, [pc, #16]	@ (800d7ec <MbRtu_ReadInputRegCallback+0x128>)
 800d7dc:	699b      	ldr	r3, [r3, #24]
 800d7de:	885b      	ldrh	r3, [r3, #2]
  Status_t ret = STATUS_OK;
 800d7e0:	2000      	movs	r0, #0
      break;
 800d7e2:	e785      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
  switch (address)
 800d7e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d7e8:	2001      	movs	r0, #1
 800d7ea:	e781      	b.n	800d6f0 <MbRtu_ReadInputRegCallback+0x2c>
 800d7ec:	08011e74 	.word	0x08011e74
 800d7f0:	2000053c 	.word	0x2000053c

0800d7f4 <MbRtu_ReadHoldingRegCallback>:

Status_t MbRtu_ReadHoldingRegCallback(uint16_t address, uint16_t *value)
{
  Status_t ret = STATUS_OK;

  switch (address)
 800d7f4:	2808      	cmp	r0, #8
 800d7f6:	d808      	bhi.n	800d80a <MbRtu_ReadHoldingRegCallback+0x16>
 800d7f8:	2808      	cmp	r0, #8
 800d7fa:	d846      	bhi.n	800d88a <MbRtu_ReadHoldingRegCallback+0x96>
 800d7fc:	e8df f000 	tbb	[pc, r0]
 800d800:	231e1912 	.word	0x231e1912
 800d804:	37322d28 	.word	0x37322d28
 800d808:	3b          	.byte	0x3b
 800d809:	00          	.byte	0x00
 800d80a:	2864      	cmp	r0, #100	@ 0x64
 800d80c:	d038      	beq.n	800d880 <MbRtu_ReadHoldingRegCallback+0x8c>
 800d80e:	2865      	cmp	r0, #101	@ 0x65
 800d810:	d104      	bne.n	800d81c <MbRtu_ReadHoldingRegCallback+0x28>
      break;
    case MB_HOLD_STPMEAS_MODE:
      *value = conf.stpmeas.mode;
      break;
    case MB_HOLD_STPMEAS_NTC_BETA:
      *value = conf.stpmeas.ntc_beta;
 800d812:	4b20      	ldr	r3, [pc, #128]	@ (800d894 <MbRtu_ReadHoldingRegCallback+0xa0>)
 800d814:	f8b3 3049 	ldrh.w	r3, [r3, #73]	@ 0x49
  Status_t ret = STATUS_OK;
 800d818:	2000      	movs	r0, #0
      break;
 800d81a:	e007      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
  switch (address)
 800d81c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d820:	2001      	movs	r0, #1
 800d822:	e003      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 0);
 800d824:	4b1c      	ldr	r3, [pc, #112]	@ (800d898 <MbRtu_ReadHoldingRegCallback+0xa4>)
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	899b      	ldrh	r3, [r3, #12]
  Status_t ret = STATUS_OK;
 800d82a:	2000      	movs	r0, #0
 800d82c:	ba5b      	rev16	r3, r3
      ret = STATUS_ERROR;
      break;
  }

  /* Reverse byte order */
  *value = __REV16(*value);
 800d82e:	800b      	strh	r3, [r1, #0]

  return ret;
}
 800d830:	4770      	bx	lr
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 1);
 800d832:	4b19      	ldr	r3, [pc, #100]	@ (800d898 <MbRtu_ReadHoldingRegCallback+0xa4>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	89db      	ldrh	r3, [r3, #14]
  Status_t ret = STATUS_OK;
 800d838:	2000      	movs	r0, #0
      break;
 800d83a:	e7f7      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 0);
 800d83c:	4b16      	ldr	r3, [pc, #88]	@ (800d898 <MbRtu_ReadHoldingRegCallback+0xa4>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	8a1b      	ldrh	r3, [r3, #16]
  Status_t ret = STATUS_OK;
 800d842:	2000      	movs	r0, #0
      break;
 800d844:	e7f2      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 1);
 800d846:	4b14      	ldr	r3, [pc, #80]	@ (800d898 <MbRtu_ReadHoldingRegCallback+0xa4>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	8a5b      	ldrh	r3, [r3, #18]
  Status_t ret = STATUS_OK;
 800d84c:	2000      	movs	r0, #0
      break;
 800d84e:	e7ed      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
      *value = conf.com.mb_baud_rate;
 800d850:	4b10      	ldr	r3, [pc, #64]	@ (800d894 <MbRtu_ReadHoldingRegCallback+0xa0>)
 800d852:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
  Status_t ret = STATUS_OK;
 800d856:	2000      	movs	r0, #0
      break;
 800d858:	e7e8      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
      *value = conf.com.mb_parity;
 800d85a:	4b0e      	ldr	r3, [pc, #56]	@ (800d894 <MbRtu_ReadHoldingRegCallback+0xa0>)
 800d85c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
  Status_t ret = STATUS_OK;
 800d860:	2000      	movs	r0, #0
      break;
 800d862:	e7e3      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
      *value = conf.com.mb_stop_bits;
 800d864:	4b0b      	ldr	r3, [pc, #44]	@ (800d894 <MbRtu_ReadHoldingRegCallback+0xa0>)
 800d866:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
  Status_t ret = STATUS_OK;
 800d86a:	2000      	movs	r0, #0
      break;
 800d86c:	e7de      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
      *value = conf.com.mb_apply;
 800d86e:	4b09      	ldr	r3, [pc, #36]	@ (800d894 <MbRtu_ReadHoldingRegCallback+0xa0>)
 800d870:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
  Status_t ret = STATUS_OK;
 800d872:	2000      	movs	r0, #0
      break;
 800d874:	e7da      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
      *value = conf.com.mb_timeout;
 800d876:	4b07      	ldr	r3, [pc, #28]	@ (800d894 <MbRtu_ReadHoldingRegCallback+0xa0>)
 800d878:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
  Status_t ret = STATUS_OK;
 800d87c:	2000      	movs	r0, #0
      break;
 800d87e:	e7d5      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
      *value = conf.stpmeas.mode;
 800d880:	4b04      	ldr	r3, [pc, #16]	@ (800d894 <MbRtu_ReadHoldingRegCallback+0xa0>)
 800d882:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
  Status_t ret = STATUS_OK;
 800d886:	2000      	movs	r0, #0
      break;
 800d888:	e7d0      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
  switch (address)
 800d88a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d88e:	2001      	movs	r0, #1
 800d890:	e7cc      	b.n	800d82c <MbRtu_ReadHoldingRegCallback+0x38>
 800d892:	bf00      	nop
 800d894:	2000053c 	.word	0x2000053c
 800d898:	08011e74 	.word	0x08011e74

0800d89c <MbRtu_WriteHoldingRegCallback>:




Status_t MbRtu_WriteHoldingRegCallback(uint16_t address, uint16_t value)
{
 800d89c:	b508      	push	{r3, lr}
  Status_t ret = STATUS_OK;
  uint32_t id = 0;

  switch (address)
 800d89e:	2808      	cmp	r0, #8
 800d8a0:	d808      	bhi.n	800d8b4 <MbRtu_WriteHoldingRegCallback+0x18>
 800d8a2:	2808      	cmp	r0, #8
 800d8a4:	d846      	bhi.n	800d934 <MbRtu_WriteHoldingRegCallback+0x98>
 800d8a6:	e8df f000 	tbb	[pc, r0]
 800d8aa:	1510      	.short	0x1510
 800d8ac:	2d28231e 	.word	0x2d28231e
 800d8b0:	3732      	.short	0x3732
 800d8b2:	3b          	.byte	0x3b
 800d8b3:	00          	.byte	0x00
 800d8b4:	2864      	cmp	r0, #100	@ 0x64
 800d8b6:	d038      	beq.n	800d92a <MbRtu_WriteHoldingRegCallback+0x8e>
 800d8b8:	2865      	cmp	r0, #101	@ 0x65
 800d8ba:	bf18      	it	ne
 800d8bc:	2001      	movne	r0, #1
 800d8be:	d111      	bne.n	800d8e4 <MbRtu_WriteHoldingRegCallback+0x48>
    case MB_HOLD_STPMEAS_MODE:
      conf.stpmeas.mode = (stpmeas_mode_t)value;
      id = CONF_STPMEAS_MODE;
      break;
    case MB_HOLD_STPMEAS_NTC_BETA:
      conf.stpmeas.ntc_beta = value;
 800d8c0:	4b1d      	ldr	r3, [pc, #116]	@ (800d938 <MbRtu_WriteHoldingRegCallback+0x9c>)
 800d8c2:	f8a3 1049 	strh.w	r1, [r3, #73]	@ 0x49
      id = CONF_STPMEAS_NTC_BETA;
 800d8c6:	481d      	ldr	r0, [pc, #116]	@ (800d93c <MbRtu_WriteHoldingRegCallback+0xa0>)
 800d8c8:	e009      	b.n	800d8de <MbRtu_WriteHoldingRegCallback+0x42>
      *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 0) = value;
 800d8ca:	4b1d      	ldr	r3, [pc, #116]	@ (800d940 <MbRtu_WriteHoldingRegCallback+0xa4>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	8199      	strh	r1, [r3, #12]
  Status_t ret = STATUS_OK;
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	e007      	b.n	800d8e4 <MbRtu_WriteHoldingRegCallback+0x48>
      *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 1) = value;
 800d8d4:	4b1a      	ldr	r3, [pc, #104]	@ (800d940 <MbRtu_WriteHoldingRegCallback+0xa4>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	81d9      	strh	r1, [r3, #14]
      id = CONF_SYS_COMMAND;
 800d8da:	f24c 1052 	movw	r0, #49490	@ 0xc152
      break;
  }

  if (id != 0)
  {
    Config_ApplyConfig(id);
 800d8de:	f7ff fa54 	bl	800cd8a <Config_ApplyConfig>
 800d8e2:	2000      	movs	r0, #0
  }

  return ret;
}
 800d8e4:	bd08      	pop	{r3, pc}
      *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 0) = value;
 800d8e6:	4b16      	ldr	r3, [pc, #88]	@ (800d940 <MbRtu_WriteHoldingRegCallback+0xa4>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	8219      	strh	r1, [r3, #16]
  Status_t ret = STATUS_OK;
 800d8ec:	2000      	movs	r0, #0
 800d8ee:	e7f9      	b.n	800d8e4 <MbRtu_WriteHoldingRegCallback+0x48>
      *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 1) = value;
 800d8f0:	4b13      	ldr	r3, [pc, #76]	@ (800d940 <MbRtu_WriteHoldingRegCallback+0xa4>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	8259      	strh	r1, [r3, #18]
      id = CONF_SYS_TEST;
 800d8f6:	4813      	ldr	r0, [pc, #76]	@ (800d944 <MbRtu_WriteHoldingRegCallback+0xa8>)
 800d8f8:	e7f1      	b.n	800d8de <MbRtu_WriteHoldingRegCallback+0x42>
      conf.com.mb_baud_rate = (com_mb_baud_rate_t)value;
 800d8fa:	4b0f      	ldr	r3, [pc, #60]	@ (800d938 <MbRtu_WriteHoldingRegCallback+0x9c>)
 800d8fc:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
      id = CONF_COM_MB_BAUD_RATE;
 800d900:	4811      	ldr	r0, [pc, #68]	@ (800d948 <MbRtu_WriteHoldingRegCallback+0xac>)
 800d902:	e7ec      	b.n	800d8de <MbRtu_WriteHoldingRegCallback+0x42>
      conf.com.mb_parity = (com_mb_parity_t)value;
 800d904:	4b0c      	ldr	r3, [pc, #48]	@ (800d938 <MbRtu_WriteHoldingRegCallback+0x9c>)
 800d906:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
      id = CONF_COM_MB_PARITY;
 800d90a:	4810      	ldr	r0, [pc, #64]	@ (800d94c <MbRtu_WriteHoldingRegCallback+0xb0>)
 800d90c:	e7e7      	b.n	800d8de <MbRtu_WriteHoldingRegCallback+0x42>
      conf.com.mb_stop_bits = (com_mb_stop_bits_t)value;
 800d90e:	4b0a      	ldr	r3, [pc, #40]	@ (800d938 <MbRtu_WriteHoldingRegCallback+0x9c>)
 800d910:	f883 103a 	strb.w	r1, [r3, #58]	@ 0x3a
      id = CONF_COM_MB_STOP_BITS;
 800d914:	480e      	ldr	r0, [pc, #56]	@ (800d950 <MbRtu_WriteHoldingRegCallback+0xb4>)
 800d916:	e7e2      	b.n	800d8de <MbRtu_WriteHoldingRegCallback+0x42>
      conf.com.mb_apply = value;
 800d918:	4b07      	ldr	r3, [pc, #28]	@ (800d938 <MbRtu_WriteHoldingRegCallback+0x9c>)
 800d91a:	87d9      	strh	r1, [r3, #62]	@ 0x3e
      id = CONF_COM_MB_APPLY;
 800d91c:	480d      	ldr	r0, [pc, #52]	@ (800d954 <MbRtu_WriteHoldingRegCallback+0xb8>)
 800d91e:	e7de      	b.n	800d8de <MbRtu_WriteHoldingRegCallback+0x42>
      conf.com.mb_timeout = value;
 800d920:	4b05      	ldr	r3, [pc, #20]	@ (800d938 <MbRtu_WriteHoldingRegCallback+0x9c>)
 800d922:	f8a3 1040 	strh.w	r1, [r3, #64]	@ 0x40
      id = CONF_COM_MB_TIMEOUT;
 800d926:	480c      	ldr	r0, [pc, #48]	@ (800d958 <MbRtu_WriteHoldingRegCallback+0xbc>)
 800d928:	e7d9      	b.n	800d8de <MbRtu_WriteHoldingRegCallback+0x42>
      conf.stpmeas.mode = (stpmeas_mode_t)value;
 800d92a:	4b03      	ldr	r3, [pc, #12]	@ (800d938 <MbRtu_WriteHoldingRegCallback+0x9c>)
 800d92c:	f883 1048 	strb.w	r1, [r3, #72]	@ 0x48
      id = CONF_STPMEAS_MODE;
 800d930:	480a      	ldr	r0, [pc, #40]	@ (800d95c <MbRtu_WriteHoldingRegCallback+0xc0>)
 800d932:	e7d4      	b.n	800d8de <MbRtu_WriteHoldingRegCallback+0x42>
  switch (address)
 800d934:	2001      	movs	r0, #1
 800d936:	e7d5      	b.n	800d8e4 <MbRtu_WriteHoldingRegCallback+0x48>
 800d938:	2000053c 	.word	0x2000053c
 800d93c:	05001151 	.word	0x05001151
 800d940:	08011e74 	.word	0x08011e74
 800d944:	00010152 	.word	0x00010152
 800d948:	03000570 	.word	0x03000570
 800d94c:	03001570 	.word	0x03001570
 800d950:	03002570 	.word	0x03002570
 800d954:	03006151 	.word	0x03006151
 800d958:	03008171 	.word	0x03008171
 800d95c:	05000550 	.word	0x05000550

0800d960 <MbUpgr_Init>:
Status_t MbUpgr_Init(void)
{
  Status_t ret = STATUS_OK;

  /* Set status ready */
  mbu.status = MB_UPGR_STATUS_BUSY;
 800d960:	4b03      	ldr	r3, [pc, #12]	@ (800d970 <MbUpgr_Init+0x10>)
 800d962:	2000      	movs	r0, #0
 800d964:	f8a3 004e 	strh.w	r0, [r3, #78]	@ 0x4e
  mbu.writeDone = 0;
 800d968:	f8a3 0050 	strh.w	r0, [r3, #80]	@ 0x50

  return ret;
}
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop
 800d970:	200005ec 	.word	0x200005ec

0800d974 <MbUpgr_WriteRegisters>:
  return ret;
}


Status_t MbUpgr_WriteRegisters(uint16_t offset, uint16_t length, uint8_t* data)
{
 800d974:	b530      	push	{r4, r5, lr}
  Status_t ret = STATUS_OK;
  uint8_t *storage = (uint8_t*)&mbu + (offset - MB_UPGR_BASE_ADDRESS) * 2;
 800d976:	f5a0 747a 	sub.w	r4, r0, #1000	@ 0x3e8
 800d97a:	4b0e      	ldr	r3, [pc, #56]	@ (800d9b4 <MbUpgr_WriteRegisters+0x40>)
 800d97c:	eb03 0c44 	add.w	ip, r3, r4, lsl #1

  /* Copy and byte reverse */
  for (int i = 0; i < length; i++)
 800d980:	b179      	cbz	r1, 800d9a2 <MbUpgr_WriteRegisters+0x2e>
 800d982:	468e      	mov	lr, r1
 800d984:	2300      	movs	r3, #0
  {
    storage[i * 2 + 1] = data[i * 2 + 0];
 800d986:	f10c 0501 	add.w	r5, ip, #1
    storage[i * 2 + 0] = data[i * 2 + 1];
 800d98a:	1c54      	adds	r4, r2, #1
    storage[i * 2 + 1] = data[i * 2 + 0];
 800d98c:	f812 1013 	ldrb.w	r1, [r2, r3, lsl #1]
 800d990:	f805 1013 	strb.w	r1, [r5, r3, lsl #1]
    storage[i * 2 + 0] = data[i * 2 + 1];
 800d994:	f814 1013 	ldrb.w	r1, [r4, r3, lsl #1]
 800d998:	f80c 1013 	strb.w	r1, [ip, r3, lsl #1]
  for (int i = 0; i < length; i++)
 800d99c:	3301      	adds	r3, #1
 800d99e:	4573      	cmp	r3, lr
 800d9a0:	d1f4      	bne.n	800d98c <MbUpgr_WriteRegisters+0x18>
  }

  /* Write into starting registers */
  if ((offset - MB_UPGR_BASE_ADDRESS) < 4)
 800d9a2:	f5b0 7f7b 	cmp.w	r0, #1004	@ 0x3ec
 800d9a6:	d203      	bcs.n	800d9b0 <MbUpgr_WriteRegisters+0x3c>
  {
    mbu.startClb = 1;
 800d9a8:	4b02      	ldr	r3, [pc, #8]	@ (800d9b4 <MbUpgr_WriteRegisters+0x40>)
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  }

  return ret;
}
 800d9b0:	2000      	movs	r0, #0
 800d9b2:	bd30      	pop	{r4, r5, pc}
 800d9b4:	200005ec 	.word	0x200005ec

0800d9b8 <MbUpgr_ReadRegisters>:


Status_t MbUpgr_ReadRegisters(uint16_t offset, uint16_t length, uint8_t* data)
{
  Status_t ret = STATUS_OK;
  uint8_t *storage = (uint8_t*)&mbu + (offset - MB_UPGR_BASE_ADDRESS) * 2;
 800d9b8:	f5a0 737a 	sub.w	r3, r0, #1000	@ 0x3e8
 800d9bc:	480c      	ldr	r0, [pc, #48]	@ (800d9f0 <MbUpgr_ReadRegisters+0x38>)
 800d9be:	eb00 0043 	add.w	r0, r0, r3, lsl #1

  /* Copy and byte reverse */
  for (int i = 0; i < length; i++)
 800d9c2:	b191      	cbz	r1, 800d9ea <MbUpgr_ReadRegisters+0x32>
{
 800d9c4:	b510      	push	{r4, lr}
 800d9c6:	468c      	mov	ip, r1
  for (int i = 0; i < length; i++)
 800d9c8:	2300      	movs	r3, #0
  {
    data[i * 2 + 1] = storage[i * 2 + 0];
 800d9ca:	1c54      	adds	r4, r2, #1
    data[i * 2 + 0] = storage[i * 2 + 1];
 800d9cc:	f100 0e01 	add.w	lr, r0, #1
    data[i * 2 + 1] = storage[i * 2 + 0];
 800d9d0:	f810 1013 	ldrb.w	r1, [r0, r3, lsl #1]
 800d9d4:	f804 1013 	strb.w	r1, [r4, r3, lsl #1]
    data[i * 2 + 0] = storage[i * 2 + 1];
 800d9d8:	f81e 1013 	ldrb.w	r1, [lr, r3, lsl #1]
 800d9dc:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < length; i++)
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	4563      	cmp	r3, ip
 800d9e4:	d1f4      	bne.n	800d9d0 <MbUpgr_ReadRegisters+0x18>
  }

  return ret;
}
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	bd10      	pop	{r4, pc}
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	4770      	bx	lr
 800d9ee:	bf00      	nop
 800d9f0:	200005ec 	.word	0x200005ec

0800d9f4 <MbUpgr_HeaderClb>:
    default:
      break;
  }

  return ret;
}
 800d9f4:	2000      	movs	r0, #0
 800d9f6:	4770      	bx	lr

0800d9f8 <MbUpgr_WritePageClb>:
  Status_t ret = STATUS_OK;

//  ret = System_FlashProgram((uint32_t)CONF_C_APP_BUFFER_OFFSET + offset, data, length);

  return ret;
}
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	4770      	bx	lr

0800d9fc <MbUpgr_WriteDoneClb>:

  /* The very last packet, verify image */
//  ret = System_VerifyImage((uint32_t*) CONF_C_APP_BUFFER_OFFSET);

  return ret;
}
 800d9fc:	2000      	movs	r0, #0
 800d9fe:	4770      	bx	lr

0800da00 <MbUpgr_Handle>:
{
 800da00:	b510      	push	{r4, lr}
  if (mbu.startClb != 0)
 800da02:	4b23      	ldr	r3, [pc, #140]	@ (800da90 <MbUpgr_Handle+0x90>)
 800da04:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800da08:	b92b      	cbnz	r3, 800da16 <MbUpgr_Handle+0x16>
  if (mbu.writeDone != 0)
 800da0a:	4b21      	ldr	r3, [pc, #132]	@ (800da90 <MbUpgr_Handle+0x90>)
 800da0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da10:	b9a3      	cbnz	r3, 800da3c <MbUpgr_Handle+0x3c>
  Status_t ret = STATUS_OK;
 800da12:	2000      	movs	r0, #0
}
 800da14:	bd10      	pop	{r4, pc}
    mbu.startClb = 0;
 800da16:	4c1e      	ldr	r4, [pc, #120]	@ (800da90 <MbUpgr_Handle+0x90>)
 800da18:	2300      	movs	r3, #0
 800da1a:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
    ret = MbUpgr_HeaderClb(mbu.type, mbu.mode, mbu.size);
 800da1e:	6862      	ldr	r2, [r4, #4]
 800da20:	8861      	ldrh	r1, [r4, #2]
 800da22:	8820      	ldrh	r0, [r4, #0]
 800da24:	f7ff ffe6 	bl	800d9f4 <MbUpgr_HeaderClb>
    if (mbu.writeDone == 0)
 800da28:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 800da2c:	b933      	cbnz	r3, 800da3c <MbUpgr_Handle+0x3c>
      if (ret == STATUS_OK)
 800da2e:	2800      	cmp	r0, #0
 800da30:	bf0c      	ite	eq
 800da32:	2201      	moveq	r2, #1
 800da34:	2203      	movne	r2, #3
        mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 800da36:	f8a4 204e 	strh.w	r2, [r4, #78]	@ 0x4e
  return ret;
 800da3a:	e7eb      	b.n	800da14 <MbUpgr_Handle+0x14>
    ret = MbUpgr_WritePageClb(mbu.offset, mbu.data, mbu.page_size);
 800da3c:	4b14      	ldr	r3, [pc, #80]	@ (800da90 <MbUpgr_Handle+0x90>)
 800da3e:	891a      	ldrh	r2, [r3, #8]
 800da40:	f103 010e 	add.w	r1, r3, #14
 800da44:	f8d3 000a 	ldr.w	r0, [r3, #10]
 800da48:	f7ff ffd6 	bl	800d9f8 <MbUpgr_WritePageClb>
      mbu.status = MB_UPGR_STATUS_READY;
 800da4c:	2800      	cmp	r0, #0
 800da4e:	bf14      	ite	ne
 800da50:	2203      	movne	r2, #3
 800da52:	2201      	moveq	r2, #1
 800da54:	4b0e      	ldr	r3, [pc, #56]	@ (800da90 <MbUpgr_Handle+0x90>)
 800da56:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    if (mbu.size - mbu.offset <= mbu.page_size)
 800da5a:	6859      	ldr	r1, [r3, #4]
 800da5c:	f8d3 200a 	ldr.w	r2, [r3, #10]
 800da60:	1a8a      	subs	r2, r1, r2
 800da62:	891b      	ldrh	r3, [r3, #8]
 800da64:	429a      	cmp	r2, r3
 800da66:	d904      	bls.n	800da72 <MbUpgr_Handle+0x72>
    mbu.writeDone = 0;
 800da68:	4b09      	ldr	r3, [pc, #36]	@ (800da90 <MbUpgr_Handle+0x90>)
 800da6a:	2200      	movs	r2, #0
 800da6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 800da70:	e7d0      	b.n	800da14 <MbUpgr_Handle+0x14>
      ret = MbUpgr_WriteDoneClb(mbu.size);
 800da72:	4608      	mov	r0, r1
 800da74:	f7ff ffc2 	bl	800d9fc <MbUpgr_WriteDoneClb>
      if (ret == STATUS_OK)
 800da78:	b920      	cbnz	r0, 800da84 <MbUpgr_Handle+0x84>
        mbu.status = MB_UPGR_STATUS_DONE_OK;
 800da7a:	4b05      	ldr	r3, [pc, #20]	@ (800da90 <MbUpgr_Handle+0x90>)
 800da7c:	2202      	movs	r2, #2
 800da7e:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800da82:	e7f1      	b.n	800da68 <MbUpgr_Handle+0x68>
        mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 800da84:	4b02      	ldr	r3, [pc, #8]	@ (800da90 <MbUpgr_Handle+0x90>)
 800da86:	2203      	movs	r2, #3
 800da88:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800da8c:	e7ec      	b.n	800da68 <MbUpgr_Handle+0x68>
 800da8e:	bf00      	nop
 800da90:	200005ec 	.word	0x200005ec

0800da94 <MbSlave_CRC16>:
 * Computation of CRC16 using pre-computed tables.
 *
 * @param frame - data frame
 * @return Status - standard status code (0 - OK)
 */
static Status_t MbSlave_CRC16(MbSlave_Frame_t *frame) {
 800da94:	b530      	push	{r4, r5, lr}
	frame->crc[0] = 0xFF;
	frame->crc[1] = 0xFF;
	uint16_t i;

	/* calculate the CRC */
	index = frame->crc[0] ^ frame->slaveAddr;
 800da96:	7802      	ldrb	r2, [r0, #0]
 800da98:	43d2      	mvns	r2, r2
	frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 800da9a:	b2d2      	uxtb	r2, r2
 800da9c:	4c13      	ldr	r4, [pc, #76]	@ (800daec <MbSlave_CRC16+0x58>)
	frame->crc[1] = tableCrcLo[index];
	index = frame->crc[0] ^ frame->funcCode;
 800da9e:	5ca3      	ldrb	r3, [r4, r2]
 800daa0:	7841      	ldrb	r1, [r0, #1]
 800daa2:	404b      	eors	r3, r1
 800daa4:	43db      	mvns	r3, r3
	frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 800daa6:	b2db      	uxtb	r3, r3
	frame->crc[1] = tableCrcLo[index];
 800daa8:	4911      	ldr	r1, [pc, #68]	@ (800daf0 <MbSlave_CRC16+0x5c>)
	frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 800daaa:	5c8a      	ldrb	r2, [r1, r2]
 800daac:	5ce4      	ldrb	r4, [r4, r3]
 800daae:	4062      	eors	r2, r4
 800dab0:	f880 20fe 	strb.w	r2, [r0, #254]	@ 0xfe
	frame->crc[1] = tableCrcLo[index];
 800dab4:	f811 c003 	ldrb.w	ip, [r1, r3]
 800dab8:	f880 c0ff 	strb.w	ip, [r0, #255]	@ 0xff

	for (i = 0; i < frame->size; i++) {
 800dabc:	f8b0 3100 	ldrh.w	r3, [r0, #256]	@ 0x100
 800dac0:	b193      	cbz	r3, 800dae8 <MbSlave_CRC16+0x54>
 800dac2:	1c41      	adds	r1, r0, #1
 800dac4:	eb01 0e03 	add.w	lr, r1, r3
		index = frame->crc[0] ^ frame->data[i];
		frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 800dac8:	4d08      	ldr	r5, [pc, #32]	@ (800daec <MbSlave_CRC16+0x58>)
		frame->crc[1] = tableCrcLo[index];
 800daca:	4c09      	ldr	r4, [pc, #36]	@ (800daf0 <MbSlave_CRC16+0x5c>)
		index = frame->crc[0] ^ frame->data[i];
 800dacc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 800dad0:	4053      	eors	r3, r2
 800dad2:	5cea      	ldrb	r2, [r5, r3]
 800dad4:	ea8c 0202 	eor.w	r2, ip, r2
		frame->crc[1] = tableCrcLo[index];
 800dad8:	f814 c003 	ldrb.w	ip, [r4, r3]
	for (i = 0; i < frame->size; i++) {
 800dadc:	4571      	cmp	r1, lr
 800dade:	d1f5      	bne.n	800dacc <MbSlave_CRC16+0x38>
 800dae0:	f880 20fe 	strb.w	r2, [r0, #254]	@ 0xfe
 800dae4:	f880 c0ff 	strb.w	ip, [r0, #255]	@ 0xff
	}

	return STATUS_OK;
}
 800dae8:	2000      	movs	r0, #0
 800daea:	bd30      	pop	{r4, r5, pc}
 800daec:	0800c1c4 	.word	0x0800c1c4
 800daf0:	08011f10 	.word	0x08011f10

0800daf4 <MbSlave_UpdateSlaveAddress>:
	SAT_UP(mod.myAddress, MODBUS_MAX_SLAVE_ADDR);
 800daf4:	4b06      	ldr	r3, [pc, #24]	@ (800db10 <MbSlave_UpdateSlaveAddress+0x1c>)
 800daf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	bf38      	it	cc
 800dafe:	2301      	movcc	r3, #1
 800db00:	2bf7      	cmp	r3, #247	@ 0xf7
 800db02:	bf28      	it	cs
 800db04:	23f7      	movcs	r3, #247	@ 0xf7
 800db06:	4a03      	ldr	r2, [pc, #12]	@ (800db14 <MbSlave_UpdateSlaveAddress+0x20>)
 800db08:	f882 3091 	strb.w	r3, [r2, #145]	@ 0x91
}
 800db0c:	2000      	movs	r0, #0
 800db0e:	4770      	bx	lr
 800db10:	2000053c 	.word	0x2000053c
 800db14:	20000848 	.word	0x20000848

0800db18 <MbSlave_BusReset>:
Status_t MbSlave_BusReset(void) {
 800db18:	b510      	push	{r4, lr}
 800db1a:	b082      	sub	sp, #8
	HAL_UART_Abort_IT(&mod.huart);
 800db1c:	4c0c      	ldr	r4, [pc, #48]	@ (800db50 <MbSlave_BusReset+0x38>)
 800db1e:	4620      	mov	r0, r4
 800db20:	f003 f976 	bl	8010e10 <HAL_UART_Abort_IT>
	outFram = mod.huart.Instance->DR;
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	b29b      	uxth	r3, r3
 800db2a:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNUSED(outFram);
 800db2e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
static void MbSlave_Rs485DirTransmit(void) {
	HAL_GPIO_WritePin(MODBUS_UART_DE_PORT, MODBUS_UART_DE_PIN, GPIO_PIN_SET);
}

static void MbSlave_Rs485DirReceive(void) {
	HAL_GPIO_WritePin(MODBUS_UART_DE_PORT, MODBUS_UART_DE_PIN, GPIO_PIN_RESET);
 800db32:	2200      	movs	r2, #0
 800db34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800db38:	4806      	ldr	r0, [pc, #24]	@ (800db54 <MbSlave_BusReset+0x3c>)
 800db3a:	f002 f857 	bl	800fbec <HAL_GPIO_WritePin>
	ret = HAL_UART_Receive_IT(&mod.huart, (uint8_t*) &inFrame,
 800db3e:	22fe      	movs	r2, #254	@ 0xfe
 800db40:	4905      	ldr	r1, [pc, #20]	@ (800db58 <MbSlave_BusReset+0x40>)
 800db42:	4620      	mov	r0, r4
 800db44:	f003 fc9f 	bl	8011486 <HAL_UART_Receive_IT>
}
 800db48:	b200      	sxth	r0, r0
 800db4a:	b002      	add	sp, #8
 800db4c:	bd10      	pop	{r4, pc}
 800db4e:	bf00      	nop
 800db50:	20000848 	.word	0x20000848
 800db54:	40020000 	.word	0x40020000
 800db58:	20000744 	.word	0x20000744

0800db5c <MbSlave_SettingsChanged>:
Status_t MbSlave_SettingsChanged(void) {
 800db5c:	b570      	push	{r4, r5, r6, lr}
 800db5e:	b082      	sub	sp, #8
	HAL_NVIC_DisableIRQ(MODBUS_UART_IRQ_NUMBER);
 800db60:	2025      	movs	r0, #37	@ 0x25
 800db62:	f001 fad7 	bl	800f114 <HAL_NVIC_DisableIRQ>
	if (conf.com.mb_baud_rate < sizeof(tableSpeed) / sizeof(uint32_t)) {
 800db66:	4b3a      	ldr	r3, [pc, #232]	@ (800dc50 <MbSlave_SettingsChanged+0xf4>)
 800db68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800db6c:	2b04      	cmp	r3, #4
		mod.huart.Init.BaudRate = tableSpeed[conf.com.mb_baud_rate];
 800db6e:	bf9c      	itt	ls
 800db70:	4a38      	ldrls	r2, [pc, #224]	@ (800dc54 <MbSlave_SettingsChanged+0xf8>)
 800db72:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
 800db76:	4c38      	ldr	r4, [pc, #224]	@ (800dc58 <MbSlave_SettingsChanged+0xfc>)
 800db78:	6063      	str	r3, [r4, #4]
	mod.huart.Init.StopBits = tableStopBits[conf.com.mb_stop_bits];
 800db7a:	4e35      	ldr	r6, [pc, #212]	@ (800dc50 <MbSlave_SettingsChanged+0xf4>)
 800db7c:	f896 203a 	ldrb.w	r2, [r6, #58]	@ 0x3a
 800db80:	4b36      	ldr	r3, [pc, #216]	@ (800dc5c <MbSlave_SettingsChanged+0x100>)
 800db82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db86:	60e3      	str	r3, [r4, #12]
	mod.huart.Init.Parity = tableParity[conf.com.mb_parity];
 800db88:	f896 3039 	ldrb.w	r3, [r6, #57]	@ 0x39
 800db8c:	4a34      	ldr	r2, [pc, #208]	@ (800dc60 <MbSlave_SettingsChanged+0x104>)
 800db8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800db92:	6122      	str	r2, [r4, #16]
	mod.huart.Init.WordLength = tableLength[conf.com.mb_parity];
 800db94:	4a33      	ldr	r2, [pc, #204]	@ (800dc64 <MbSlave_SettingsChanged+0x108>)
 800db96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db9a:	60a3      	str	r3, [r4, #8]
	mod.huart.Instance = MODBUS_UART_INSTANCE;
 800db9c:	4b32      	ldr	r3, [pc, #200]	@ (800dc68 <MbSlave_SettingsChanged+0x10c>)
 800db9e:	6023      	str	r3, [r4, #0]
	mod.huart.Init.Mode = UART_MODE_TX_RX;
 800dba0:	230c      	movs	r3, #12
 800dba2:	6163      	str	r3, [r4, #20]
	mod.huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dba4:	2500      	movs	r5, #0
 800dba6:	61a5      	str	r5, [r4, #24]
	mod.huart.Init.OverSampling = UART_OVERSAMPLING_16;
 800dba8:	61e5      	str	r5, [r4, #28]
	HAL_UART_Init(&mod.huart);
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f003 f8dc 	bl	8010d68 <HAL_UART_Init>
	MODBUS_TIM_CLK_ENABLE()
 800dbb0:	9501      	str	r5, [sp, #4]
 800dbb2:	4b2e      	ldr	r3, [pc, #184]	@ (800dc6c <MbSlave_SettingsChanged+0x110>)
 800dbb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dbb6:	f042 0202 	orr.w	r2, r2, #2
 800dbba:	641a      	str	r2, [r3, #64]	@ 0x40
 800dbbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbbe:	f003 0302 	and.w	r3, r3, #2
 800dbc2:	9301      	str	r3, [sp, #4]
 800dbc4:	9b01      	ldr	r3, [sp, #4]
	mod.htim.Instance = MODBUS_TIM_INSTANCE;
 800dbc6:	4b2a      	ldr	r3, [pc, #168]	@ (800dc70 <MbSlave_SettingsChanged+0x114>)
 800dbc8:	64a3      	str	r3, [r4, #72]	@ 0x48
			/ mod.huart.Init.BaudRate; /* Timer period in 10 us, considering 8 data, 1 start, 2 stop bits */
 800dbca:	6862      	ldr	r2, [r4, #4]
 800dbcc:	4b29      	ldr	r3, [pc, #164]	@ (800dc74 <MbSlave_SettingsChanged+0x118>)
 800dbce:	fbb3 f3f2 	udiv	r3, r3, r2
	SAT_DOWN(mod.htim.Init.Period, 175);
 800dbd2:	2baf      	cmp	r3, #175	@ 0xaf
 800dbd4:	bf38      	it	cc
 800dbd6:	23af      	movcc	r3, #175	@ 0xaf
 800dbd8:	6563      	str	r3, [r4, #84]	@ 0x54
	mod.htim.Init.Prescaler = (uint32_t) ((HAL_RCC_GetPCLK1Freq()) / 100000)
 800dbda:	f002 fa13 	bl	8010004 <HAL_RCC_GetPCLK1Freq>
 800dbde:	0943      	lsrs	r3, r0, #5
 800dbe0:	4a25      	ldr	r2, [pc, #148]	@ (800dc78 <MbSlave_SettingsChanged+0x11c>)
 800dbe2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe6:	09db      	lsrs	r3, r3, #7
			- 1; /* Timer step 10 us */
 800dbe8:	3b01      	subs	r3, #1
	mod.htim.Init.Prescaler = (uint32_t) ((HAL_RCC_GetPCLK1Freq()) / 100000)
 800dbea:	64e3      	str	r3, [r4, #76]	@ 0x4c
	mod.htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dbec:	6525      	str	r5, [r4, #80]	@ 0x50
	mod.htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dbee:	65a5      	str	r5, [r4, #88]	@ 0x58
	HAL_TIM_Base_Init(&mod.htim);
 800dbf0:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 800dbf4:	f002 fed4 	bl	80109a0 <HAL_TIM_Base_Init>
	HAL_NVIC_SetPriority(MODBUS_UART_IRQ_NUMBER, PRIO_IRQ_MODBUS, 0);
 800dbf8:	462a      	mov	r2, r5
 800dbfa:	2103      	movs	r1, #3
 800dbfc:	2025      	movs	r0, #37	@ 0x25
 800dbfe:	f001 fa45 	bl	800f08c <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(MODBUS_UART_IRQ_NUMBER);
 800dc02:	2025      	movs	r0, #37	@ 0x25
 800dc04:	f001 faac 	bl	800f160 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(MODBUS_UART_IRQ_NUMBER);
 800dc08:	2025      	movs	r0, #37	@ 0x25
 800dc0a:	f001 fa75 	bl	800f0f8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(MODBUS_TIM_IRQ_NUMBER, PRIO_IRQ_MODBUS, 0);
 800dc0e:	462a      	mov	r2, r5
 800dc10:	2103      	movs	r1, #3
 800dc12:	201d      	movs	r0, #29
 800dc14:	f001 fa3a 	bl	800f08c <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(MODBUS_TIM_IRQ_NUMBER);
 800dc18:	201d      	movs	r0, #29
 800dc1a:	f001 faa1 	bl	800f160 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(MODBUS_TIM_IRQ_NUMBER);
 800dc1e:	201d      	movs	r0, #29
 800dc20:	f001 fa6a 	bl	800f0f8 <HAL_NVIC_EnableIRQ>
	MbSlave_UpdateSlaveAddress();
 800dc24:	f7ff ff66 	bl	800daf4 <MbSlave_UpdateSlaveAddress>
	mod.frameOk = 0;
 800dc28:	f884 5090 	strb.w	r5, [r4, #144]	@ 0x90
	MbSlave_BusReset();
 800dc2c:	f7ff ff74 	bl	800db18 <MbSlave_BusReset>
	mod.tick = HAL_GetTick() + conf.com.mb_timeout * 1000;
 800dc30:	f000 ff58 	bl	800eae4 <HAL_GetTick>
 800dc34:	f8b6 3040 	ldrh.w	r3, [r6, #64]	@ 0x40
 800dc38:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800dc3c:	fb02 0003 	mla	r0, r2, r3, r0
 800dc40:	f8c4 0094 	str.w	r0, [r4, #148]	@ 0x94
	MbUpgr_Init();
 800dc44:	f7ff fe8c 	bl	800d960 <MbUpgr_Init>
}
 800dc48:	4628      	mov	r0, r5
 800dc4a:	b002      	add	sp, #8
 800dc4c:	bd70      	pop	{r4, r5, r6, pc}
 800dc4e:	bf00      	nop
 800dc50:	2000053c 	.word	0x2000053c
 800dc54:	08011efc 	.word	0x08011efc
 800dc58:	20000848 	.word	0x20000848
 800dc5c:	08011edc 	.word	0x08011edc
 800dc60:	08011ef0 	.word	0x08011ef0
 800dc64:	08011ee4 	.word	0x08011ee4
 800dc68:	40011000 	.word	0x40011000
 800dc6c:	40023800 	.word	0x40023800
 800dc70:	40000400 	.word	0x40000400
 800dc74:	004b87f0 	.word	0x004b87f0
 800dc78:	0a7c5ac5 	.word	0x0a7c5ac5

0800dc7c <MbSlave_Init>:
Status_t MbSlave_Init(void) {
 800dc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc80:	b086      	sub	sp, #24
	MODBUS_CLK_ENABLE();
 800dc82:	2500      	movs	r5, #0
 800dc84:	9500      	str	r5, [sp, #0]
 800dc86:	4b1e      	ldr	r3, [pc, #120]	@ (800dd00 <MbSlave_Init+0x84>)
 800dc88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc8a:	f042 0210 	orr.w	r2, r2, #16
 800dc8e:	645a      	str	r2, [r3, #68]	@ 0x44
 800dc90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc92:	f003 0310 	and.w	r3, r3, #16
 800dc96:	9300      	str	r3, [sp, #0]
 800dc98:	9b00      	ldr	r3, [sp, #0]
	HAL_GPIO_WritePin(MODBUS_UART_DE_PORT, MODBUS_UART_DE_PIN, GPIO_PIN_RESET);
 800dc9a:	4e1a      	ldr	r6, [pc, #104]	@ (800dd04 <MbSlave_Init+0x88>)
 800dc9c:	462a      	mov	r2, r5
 800dc9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800dca2:	4630      	mov	r0, r6
 800dca4:	f001 ffa2 	bl	800fbec <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = MODBUS_UART_DE_PIN;
 800dca8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dcac:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800dcae:	2701      	movs	r7, #1
 800dcb0:	9702      	str	r7, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dcb2:	9503      	str	r5, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800dcb4:	2402      	movs	r4, #2
 800dcb6:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(MODBUS_UART_DE_PORT, &GPIO_InitStruct);
 800dcb8:	a901      	add	r1, sp, #4
 800dcba:	4630      	mov	r0, r6
 800dcbc:	f001 fe9a 	bl	800f9f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MODBUS_UART_RX_PIN;
 800dcc0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dcc4:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dcc6:	9402      	str	r4, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dcc8:	9703      	str	r7, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800dcca:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Alternate = MODBUS_UART_ALTERNATE;
 800dccc:	f04f 0807 	mov.w	r8, #7
 800dcd0:	f8cd 8014 	str.w	r8, [sp, #20]
	HAL_GPIO_Init(MODBUS_UART_RX_PORT, &GPIO_InitStruct);
 800dcd4:	a901      	add	r1, sp, #4
 800dcd6:	4630      	mov	r0, r6
 800dcd8:	f001 fe8c 	bl	800f9f4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = MODBUS_UART_TX_PIN;
 800dcdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dce0:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dce2:	9402      	str	r4, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dce4:	9703      	str	r7, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800dce6:	9404      	str	r4, [sp, #16]
	GPIO_InitStruct.Alternate = MODBUS_UART_ALTERNATE;
 800dce8:	f8cd 8014 	str.w	r8, [sp, #20]
	HAL_GPIO_Init(MODBUS_UART_TX_PORT, &GPIO_InitStruct);
 800dcec:	a901      	add	r1, sp, #4
 800dcee:	4630      	mov	r0, r6
 800dcf0:	f001 fe80 	bl	800f9f4 <HAL_GPIO_Init>
	MbSlave_SettingsChanged();
 800dcf4:	f7ff ff32 	bl	800db5c <MbSlave_SettingsChanged>
}
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	b006      	add	sp, #24
 800dcfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd00:	40023800 	.word	0x40023800
 800dd04:	40020000 	.word	0x40020000

0800dd08 <MbSlave_Handle>:
Status_t MbSlave_Handle(void) {
 800dd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0c:	b082      	sub	sp, #8
	if (mod.frameOk) {
 800dd0e:	4ba0      	ldr	r3, [pc, #640]	@ (800df90 <MbSlave_Handle+0x288>)
 800dd10:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800dd14:	b9d3      	cbnz	r3, 800dd4c <MbSlave_Handle+0x44>
	if (conf.com.mb_apply != 0 && mod.huart.gState == HAL_UART_STATE_READY) {
 800dd16:	4b9f      	ldr	r3, [pc, #636]	@ (800df94 <MbSlave_Handle+0x28c>)
 800dd18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dd1a:	b133      	cbz	r3, 800dd2a <MbSlave_Handle+0x22>
 800dd1c:	4b9c      	ldr	r3, [pc, #624]	@ (800df90 <MbSlave_Handle+0x288>)
 800dd1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b20      	cmp	r3, #32
 800dd26:	f000 80d1 	beq.w	800decc <MbSlave_Handle+0x1c4>
	if (conf.com.mb_timeout != 0) {
 800dd2a:	4b9a      	ldr	r3, [pc, #616]	@ (800df94 <MbSlave_Handle+0x28c>)
 800dd2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	f040 80d1 	bne.w	800ded8 <MbSlave_Handle+0x1d0>
	if (mod.huart.gState == HAL_UART_STATE_READY) {
 800dd36:	4b96      	ldr	r3, [pc, #600]	@ (800df90 <MbSlave_Handle+0x288>)
 800dd38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b20      	cmp	r3, #32
 800dd40:	f000 80db 	beq.w	800defa <MbSlave_Handle+0x1f2>
}
 800dd44:	2000      	movs	r0, #0
 800dd46:	b002      	add	sp, #8
 800dd48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		mod.frameOk = 0;
 800dd4c:	4b90      	ldr	r3, [pc, #576]	@ (800df90 <MbSlave_Handle+0x288>)
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	outFrame.funcCode = inFrame.funcCode;
 800dd54:	4a90      	ldr	r2, [pc, #576]	@ (800df98 <MbSlave_Handle+0x290>)
 800dd56:	7853      	ldrb	r3, [r2, #1]
 800dd58:	4990      	ldr	r1, [pc, #576]	@ (800df9c <MbSlave_Handle+0x294>)
 800dd5a:	704b      	strb	r3, [r1, #1]
	outFrame.size = 1;
 800dd5c:	2001      	movs	r0, #1
 800dd5e:	f8a1 0100 	strh.w	r0, [r1, #256]	@ 0x100
	addr = inFrame.data[0];
 800dd62:	7891      	ldrb	r1, [r2, #2]
	addr |= inFrame.data[1];
 800dd64:	78d4      	ldrb	r4, [r2, #3]
	count = inFrame.data[2];
 800dd66:	7910      	ldrb	r0, [r2, #4]
	count |= inFrame.data[3];
 800dd68:	7955      	ldrb	r5, [r2, #5]
	switch (inFrame.funcCode) {
 800dd6a:	2b04      	cmp	r3, #4
 800dd6c:	f000 80ce 	beq.w	800df0c <MbSlave_Handle+0x204>
 800dd70:	2b10      	cmp	r3, #16
 800dd72:	d025      	beq.n	800ddc0 <MbSlave_Handle+0xb8>
 800dd74:	2b03      	cmp	r3, #3
 800dd76:	d036      	beq.n	800dde6 <MbSlave_Handle+0xde>
		outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 800dd78:	4e88      	ldr	r6, [pc, #544]	@ (800df9c <MbSlave_Handle+0x294>)
 800dd7a:	f1a3 0280 	sub.w	r2, r3, #128	@ 0x80
 800dd7e:	7072      	strb	r2, [r6, #1]
		outFrame.data[0] = MODBUS_EXCEPT_INVALID_COMMAND; /* invalid function code */
 800dd80:	2701      	movs	r7, #1
 800dd82:	70b7      	strb	r7, [r6, #2]
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK
 800dd84:	f012 0f80 	tst.w	r2, #128	@ 0x80
		size = 0;
 800dd88:	bf08      	it	eq
 800dd8a:	2200      	moveq	r2, #0
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK
 800dd8c:	d019      	beq.n	800ddc2 <MbSlave_Handle+0xba>
		mod.tick = HAL_GetTick() + conf.com.mb_timeout * 1000;
 800dd8e:	f000 fea9 	bl	800eae4 <HAL_GetTick>
 800dd92:	497f      	ldr	r1, [pc, #508]	@ (800df90 <MbSlave_Handle+0x288>)
 800dd94:	4b7f      	ldr	r3, [pc, #508]	@ (800df94 <MbSlave_Handle+0x28c>)
 800dd96:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800dd9a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800dd9e:	fb04 0002 	mla	r0, r4, r2, r0
 800dda2:	f8c1 0094 	str.w	r0, [r1, #148]	@ 0x94
		CLEAR_BIT(conf.sys.status, STAT_BIT_MB_TIMEOUT);
 800dda6:	689a      	ldr	r2, [r3, #8]
 800dda8:	f022 0208 	bic.w	r2, r2, #8
 800ddac:	609a      	str	r2, [r3, #8]
		if (inFrame.slaveAddr == mod.myAddress) {
 800ddae:	f891 3091 	ldrb.w	r3, [r1, #145]	@ 0x91
 800ddb2:	4a79      	ldr	r2, [pc, #484]	@ (800df98 <MbSlave_Handle+0x290>)
 800ddb4:	7812      	ldrb	r2, [r2, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d067      	beq.n	800de8a <MbSlave_Handle+0x182>
			MbSlave_BusReset();
 800ddba:	f7ff fead 	bl	800db18 <MbSlave_BusReset>
 800ddbe:	e7aa      	b.n	800dd16 <MbSlave_Handle+0xe>
	switch (inFrame.funcCode) {
 800ddc0:	2265      	movs	r2, #101	@ 0x65
	count |= inFrame.data[3];
 800ddc2:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
			&& (count < 1 || count > 0x7b)) {
 800ddc6:	1e68      	subs	r0, r5, #1
 800ddc8:	b280      	uxth	r0, r0
 800ddca:	287a      	cmp	r0, #122	@ 0x7a
 800ddcc:	f240 80a5 	bls.w	800df1a <MbSlave_Handle+0x212>
		outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 800ddd0:	f083 0080 	eor.w	r0, r3, #128	@ 0x80
 800ddd4:	4e71      	ldr	r6, [pc, #452]	@ (800df9c <MbSlave_Handle+0x294>)
 800ddd6:	7070      	strb	r0, [r6, #1]
		outFrame.data[0] = MODBUS_EXCEPT_INVALID_SIZE; /* invalid size/value */
 800ddd8:	2703      	movs	r7, #3
 800ddda:	70b7      	strb	r7, [r6, #2]
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK
 800dddc:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800dde0:	f000 809b 	beq.w	800df1a <MbSlave_Handle+0x212>
 800dde4:	e7d3      	b.n	800dd8e <MbSlave_Handle+0x86>
	switch (inFrame.funcCode) {
 800dde6:	2265      	movs	r2, #101	@ 0x65
 800dde8:	e7eb      	b.n	800ddc2 <MbSlave_Handle+0xba>
		if (addr < MB_UPGR_BASE_ADDRESS
 800ddea:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 800ddee:	f0c0 809d 	bcc.w	800df2c <MbSlave_Handle+0x224>
				|| addr + count > MB_UPGR_END_ADDRESS + 1)
 800ddf2:	1929      	adds	r1, r5, r4
 800ddf4:	f240 4212 	movw	r2, #1042	@ 0x412
 800ddf8:	4291      	cmp	r1, r2
 800ddfa:	f340 80a1 	ble.w	800df40 <MbSlave_Handle+0x238>
 800ddfe:	e095      	b.n	800df2c <MbSlave_Handle+0x224>
				MbUpgr_ReadRegisters(addr, count, outFrame.data + 1);
 800de00:	4a67      	ldr	r2, [pc, #412]	@ (800dfa0 <MbSlave_Handle+0x298>)
 800de02:	4629      	mov	r1, r5
 800de04:	4620      	mov	r0, r4
 800de06:	f7ff fdd7 	bl	800d9b8 <MbUpgr_ReadRegisters>
 800de0a:	e7c0      	b.n	800dd8e <MbSlave_Handle+0x86>
			outFrame.data[0] = count * 2;
 800de0c:	006b      	lsls	r3, r5, #1
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	4a62      	ldr	r2, [pc, #392]	@ (800df9c <MbSlave_Handle+0x294>)
 800de12:	7093      	strb	r3, [r2, #2]
			outFrame.size = outFrame.data[0] + 1;
 800de14:	3301      	adds	r3, #1
 800de16:	f8a2 3100 	strh.w	r3, [r2, #256]	@ 0x100
			for (i = 0; i < count; i++) {
 800de1a:	462f      	mov	r7, r5
 800de1c:	2d00      	cmp	r5, #0
 800de1e:	d0b6      	beq.n	800dd8e <MbSlave_Handle+0x86>
 800de20:	1cd6      	adds	r6, r2, #3
 800de22:	2500      	movs	r5, #0
				MbRtu_ReadInputRegCallback(addr + i, &val);
 800de24:	1960      	adds	r0, r4, r5
 800de26:	f10d 0106 	add.w	r1, sp, #6
 800de2a:	b280      	uxth	r0, r0
 800de2c:	f7ff fc4a 	bl	800d6c4 <MbRtu_ReadInputRegCallback>
				memcpy((outFrame.data + i * 2 + 1), &val, 2);
 800de30:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800de34:	f826 3b02 	strh.w	r3, [r6], #2
			for (i = 0; i < count; i++) {
 800de38:	3501      	adds	r5, #1
 800de3a:	42bd      	cmp	r5, r7
 800de3c:	d1f2      	bne.n	800de24 <MbSlave_Handle+0x11c>
 800de3e:	e7a6      	b.n	800dd8e <MbSlave_Handle+0x86>
			if (addr >= MB_UPGR_BASE_ADDRESS) {
 800de40:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 800de44:	d21b      	bcs.n	800de7e <MbSlave_Handle+0x176>
				for (i = 0; i < count; i++) {
 800de46:	46a8      	mov	r8, r5
 800de48:	b175      	cbz	r5, 800de68 <MbSlave_Handle+0x160>
 800de4a:	4f56      	ldr	r7, [pc, #344]	@ (800dfa4 <MbSlave_Handle+0x29c>)
 800de4c:	2600      	movs	r6, #0
					memcpy(&val,
 800de4e:	f837 1b02 	ldrh.w	r1, [r7], #2
 800de52:	f8ad 1006 	strh.w	r1, [sp, #6]
 800de56:	ba49      	rev16	r1, r1
					MbRtu_WriteHoldingRegCallback(addr + i, __REV16(val));
 800de58:	19a0      	adds	r0, r4, r6
 800de5a:	b289      	uxth	r1, r1
 800de5c:	b280      	uxth	r0, r0
 800de5e:	f7ff fd1d 	bl	800d89c <MbRtu_WriteHoldingRegCallback>
				for (i = 0; i < count; i++) {
 800de62:	3601      	adds	r6, #1
 800de64:	4546      	cmp	r6, r8
 800de66:	d1f2      	bne.n	800de4e <MbSlave_Handle+0x146>
			outFrame.data[0] = (addr >> 8) & 0xff;
 800de68:	4b4c      	ldr	r3, [pc, #304]	@ (800df9c <MbSlave_Handle+0x294>)
 800de6a:	0a22      	lsrs	r2, r4, #8
 800de6c:	709a      	strb	r2, [r3, #2]
			outFrame.data[1] = addr & 0xff;
 800de6e:	70dc      	strb	r4, [r3, #3]
			outFrame.data[2] = (count >> 8) & 0xff;
 800de70:	0a2a      	lsrs	r2, r5, #8
 800de72:	711a      	strb	r2, [r3, #4]
			outFrame.data[3] = count & 0xff;
 800de74:	715d      	strb	r5, [r3, #5]
			outFrame.size = 4;
 800de76:	2204      	movs	r2, #4
 800de78:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			break;
 800de7c:	e787      	b.n	800dd8e <MbSlave_Handle+0x86>
				MbUpgr_WriteRegisters(addr, count, inFrame.data + 5);
 800de7e:	4a49      	ldr	r2, [pc, #292]	@ (800dfa4 <MbSlave_Handle+0x29c>)
 800de80:	4629      	mov	r1, r5
 800de82:	4620      	mov	r0, r4
 800de84:	f7ff fd76 	bl	800d974 <MbUpgr_WriteRegisters>
 800de88:	e7ee      	b.n	800de68 <MbSlave_Handle+0x160>
			outFrame.slaveAddr = mod.myAddress;
 800de8a:	4c44      	ldr	r4, [pc, #272]	@ (800df9c <MbSlave_Handle+0x294>)
 800de8c:	7023      	strb	r3, [r4, #0]
			MbSlave_CRC16(&outFrame);
 800de8e:	4620      	mov	r0, r4
 800de90:	f7ff fe00 	bl	800da94 <MbSlave_CRC16>
			outFrame.data[outFrame.size] = outFrame.crc[0];
 800de94:	f8b4 3100 	ldrh.w	r3, [r4, #256]	@ 0x100
 800de98:	4423      	add	r3, r4
 800de9a:	f894 20fe 	ldrb.w	r2, [r4, #254]	@ 0xfe
 800de9e:	709a      	strb	r2, [r3, #2]
			outFrame.data[outFrame.size + 1] = outFrame.crc[1];
 800dea0:	f894 20ff 	ldrb.w	r2, [r4, #255]	@ 0xff
 800dea4:	70da      	strb	r2, [r3, #3]
			HAL_UART_AbortReceive_IT(&mod.huart);
 800dea6:	4d3a      	ldr	r5, [pc, #232]	@ (800df90 <MbSlave_Handle+0x288>)
 800dea8:	4628      	mov	r0, r5
 800deaa:	f003 f86f 	bl	8010f8c <HAL_UART_AbortReceive_IT>
	HAL_GPIO_WritePin(MODBUS_UART_DE_PORT, MODBUS_UART_DE_PIN, GPIO_PIN_SET);
 800deae:	2201      	movs	r2, #1
 800deb0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800deb4:	483c      	ldr	r0, [pc, #240]	@ (800dfa8 <MbSlave_Handle+0x2a0>)
 800deb6:	f001 fe99 	bl	800fbec <HAL_GPIO_WritePin>
			HAL_UART_Transmit_IT(&mod.huart, (uint8_t*) &outFrame,
 800deba:	f8b4 2100 	ldrh.w	r2, [r4, #256]	@ 0x100
 800debe:	3204      	adds	r2, #4
 800dec0:	b292      	uxth	r2, r2
 800dec2:	4621      	mov	r1, r4
 800dec4:	4628      	mov	r0, r5
 800dec6:	f002 ff7f 	bl	8010dc8 <HAL_UART_Transmit_IT>
 800deca:	e724      	b.n	800dd16 <MbSlave_Handle+0xe>
		conf.com.mb_apply = 0;
 800decc:	4b31      	ldr	r3, [pc, #196]	@ (800df94 <MbSlave_Handle+0x28c>)
 800dece:	2200      	movs	r2, #0
 800ded0:	87da      	strh	r2, [r3, #62]	@ 0x3e
		MbSlave_SettingsChanged();
 800ded2:	f7ff fe43 	bl	800db5c <MbSlave_SettingsChanged>
 800ded6:	e728      	b.n	800dd2a <MbSlave_Handle+0x22>
		if (TICK_EXPIRED(mod.tick)) {
 800ded8:	f000 fe04 	bl	800eae4 <HAL_GetTick>
 800dedc:	4b2c      	ldr	r3, [pc, #176]	@ (800df90 <MbSlave_Handle+0x288>)
 800dede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dee2:	1ac0      	subs	r0, r0, r3
 800dee4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800dee8:	4298      	cmp	r0, r3
 800deea:	f4bf af24 	bcs.w	800dd36 <MbSlave_Handle+0x2e>
		SET_BIT(conf.sys.status, STAT_BIT_MB_TIMEOUT);
 800deee:	4a29      	ldr	r2, [pc, #164]	@ (800df94 <MbSlave_Handle+0x28c>)
 800def0:	6893      	ldr	r3, [r2, #8]
 800def2:	f043 0308 	orr.w	r3, r3, #8
 800def6:	6093      	str	r3, [r2, #8]
 800def8:	e71d      	b.n	800dd36 <MbSlave_Handle+0x2e>
		MbUpgr_Handle();
 800defa:	f7ff fd81 	bl	800da00 <MbUpgr_Handle>
	return ret;
 800defe:	e721      	b.n	800dd44 <MbSlave_Handle+0x3c>
		outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 800df00:	4a26      	ldr	r2, [pc, #152]	@ (800df9c <MbSlave_Handle+0x294>)
 800df02:	3b80      	subs	r3, #128	@ 0x80
 800df04:	7053      	strb	r3, [r2, #1]
		outFrame.data[0] = MODBUS_EXCEPT_INVALID_SIZE; /* invalid size/value */
 800df06:	2303      	movs	r3, #3
 800df08:	7093      	strb	r3, [r2, #2]
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK
 800df0a:	e740      	b.n	800dd8e <MbSlave_Handle+0x86>
	count |= inFrame.data[3];
 800df0c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
			&& (count < 1 || count > 0x7b)) {
 800df10:	1e6a      	subs	r2, r5, #1
 800df12:	b292      	uxth	r2, r2
 800df14:	2a7a      	cmp	r2, #122	@ 0x7a
 800df16:	d8f3      	bhi.n	800df00 <MbSlave_Handle+0x1f8>
 800df18:	2218      	movs	r2, #24
	addr |= inFrame.data[1];
 800df1a:	ea44 2401 	orr.w	r4, r4, r1, lsl #8
			&& (addr > (offset + size) || (addr) < offset
 800df1e:	4294      	cmp	r4, r2
 800df20:	f63f af63 	bhi.w	800ddea <MbSlave_Handle+0xe2>
					|| (addr + count) > (offset + size + 1))) {
 800df24:	1929      	adds	r1, r5, r4
 800df26:	3201      	adds	r2, #1
 800df28:	4291      	cmp	r1, r2
 800df2a:	dd09      	ble.n	800df40 <MbSlave_Handle+0x238>
			outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 800df2c:	f083 0280 	eor.w	r2, r3, #128	@ 0x80
 800df30:	491a      	ldr	r1, [pc, #104]	@ (800df9c <MbSlave_Handle+0x294>)
 800df32:	704a      	strb	r2, [r1, #1]
			outFrame.data[0] = MODBUS_EXCEPT_INVALID_ADDRESS; /* invalid address */
 800df34:	2002      	movs	r0, #2
 800df36:	7088      	strb	r0, [r1, #2]
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK) {
 800df38:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800df3c:	f47f af27 	bne.w	800dd8e <MbSlave_Handle+0x86>
		switch (inFrame.funcCode) {
 800df40:	2b04      	cmp	r3, #4
 800df42:	f43f af63 	beq.w	800de0c <MbSlave_Handle+0x104>
 800df46:	2b10      	cmp	r3, #16
 800df48:	f43f af7a 	beq.w	800de40 <MbSlave_Handle+0x138>
 800df4c:	2b03      	cmp	r3, #3
 800df4e:	f47f af1e 	bne.w	800dd8e <MbSlave_Handle+0x86>
			outFrame.data[0] = count * 2;
 800df52:	006b      	lsls	r3, r5, #1
 800df54:	b2db      	uxtb	r3, r3
 800df56:	4a11      	ldr	r2, [pc, #68]	@ (800df9c <MbSlave_Handle+0x294>)
 800df58:	7093      	strb	r3, [r2, #2]
			outFrame.size = outFrame.data[0] + 1;
 800df5a:	3301      	adds	r3, #1
 800df5c:	f8a2 3100 	strh.w	r3, [r2, #256]	@ 0x100
			if (addr >= MB_UPGR_BASE_ADDRESS) {
 800df60:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 800df64:	f4bf af4c 	bcs.w	800de00 <MbSlave_Handle+0xf8>
				for (i = 0; i < count; i++) {
 800df68:	462f      	mov	r7, r5
 800df6a:	2d00      	cmp	r5, #0
 800df6c:	f43f af0f 	beq.w	800dd8e <MbSlave_Handle+0x86>
 800df70:	4e0b      	ldr	r6, [pc, #44]	@ (800dfa0 <MbSlave_Handle+0x298>)
 800df72:	2500      	movs	r5, #0
					MbRtu_ReadHoldingRegCallback(addr + i, &val);
 800df74:	1960      	adds	r0, r4, r5
 800df76:	f10d 0106 	add.w	r1, sp, #6
 800df7a:	b280      	uxth	r0, r0
 800df7c:	f7ff fc3a 	bl	800d7f4 <MbRtu_ReadHoldingRegCallback>
					memcpy((outFrame.data + i * 2 + 1), &val, 2);
 800df80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800df84:	f826 3b02 	strh.w	r3, [r6], #2
				for (i = 0; i < count; i++) {
 800df88:	3501      	adds	r5, #1
 800df8a:	42bd      	cmp	r5, r7
 800df8c:	d1f2      	bne.n	800df74 <MbSlave_Handle+0x26c>
 800df8e:	e6fe      	b.n	800dd8e <MbSlave_Handle+0x86>
 800df90:	20000848 	.word	0x20000848
 800df94:	2000053c 	.word	0x2000053c
 800df98:	20000744 	.word	0x20000744
 800df9c:	20000640 	.word	0x20000640
 800dfa0:	20000643 	.word	0x20000643
 800dfa4:	2000074b 	.word	0x2000074b
 800dfa8:	40020000 	.word	0x40020000

0800dfac <MbSlave_RxCpltCallback>:
void MbSlave_RxCpltCallback(UART_HandleTypeDef *huart) {
 800dfac:	b508      	push	{r3, lr}
	if (huart->Instance == MODBUS_UART_INSTANCE) {
 800dfae:	6802      	ldr	r2, [r0, #0]
 800dfb0:	4b03      	ldr	r3, [pc, #12]	@ (800dfc0 <MbSlave_RxCpltCallback+0x14>)
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d000      	beq.n	800dfb8 <MbSlave_RxCpltCallback+0xc>
}
 800dfb6:	bd08      	pop	{r3, pc}
		MbSlave_BusReset();
 800dfb8:	f7ff fdae 	bl	800db18 <MbSlave_BusReset>
}
 800dfbc:	e7fb      	b.n	800dfb6 <MbSlave_RxCpltCallback+0xa>
 800dfbe:	bf00      	nop
 800dfc0:	40011000 	.word	0x40011000

0800dfc4 <MbSlave_TxCpltCallback>:
void MbSlave_TxCpltCallback(UART_HandleTypeDef *huart) {
 800dfc4:	b508      	push	{r3, lr}
	if (huart->Instance == MODBUS_UART_INSTANCE) {
 800dfc6:	6802      	ldr	r2, [r0, #0]
 800dfc8:	4b03      	ldr	r3, [pc, #12]	@ (800dfd8 <MbSlave_TxCpltCallback+0x14>)
 800dfca:	429a      	cmp	r2, r3
 800dfcc:	d000      	beq.n	800dfd0 <MbSlave_TxCpltCallback+0xc>
}
 800dfce:	bd08      	pop	{r3, pc}
		MbSlave_BusReset();
 800dfd0:	f7ff fda2 	bl	800db18 <MbSlave_BusReset>
}
 800dfd4:	e7fb      	b.n	800dfce <MbSlave_TxCpltCallback+0xa>
 800dfd6:	bf00      	nop
 800dfd8:	40011000 	.word	0x40011000

0800dfdc <MbSlave_ErrorCallback>:
void MbSlave_ErrorCallback(UART_HandleTypeDef *huart) {
 800dfdc:	b508      	push	{r3, lr}
	if (huart->Instance == MODBUS_UART_INSTANCE) {
 800dfde:	6802      	ldr	r2, [r0, #0]
 800dfe0:	4b03      	ldr	r3, [pc, #12]	@ (800dff0 <MbSlave_ErrorCallback+0x14>)
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d000      	beq.n	800dfe8 <MbSlave_ErrorCallback+0xc>
}
 800dfe6:	bd08      	pop	{r3, pc}
		MbSlave_BusReset();
 800dfe8:	f7ff fd96 	bl	800db18 <MbSlave_BusReset>
}
 800dfec:	e7fb      	b.n	800dfe6 <MbSlave_ErrorCallback+0xa>
 800dfee:	bf00      	nop
 800dff0:	40011000 	.word	0x40011000

0800dff4 <USART1_IRQHandler>:
void MODBUS_UART_IRQ_HANDLER(void) {
 800dff4:	b508      	push	{r3, lr}
	if (((mod.huart.Instance->SR & USART_SR_RXNE) != RESET)
 800dff6:	4b0d      	ldr	r3, [pc, #52]	@ (800e02c <USART1_IRQHandler+0x38>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681a      	ldr	r2, [r3, #0]
 800dffc:	f012 0f20 	tst.w	r2, #32
 800e000:	d003      	beq.n	800e00a <USART1_IRQHandler+0x16>
			&& ((mod.huart.Instance->CR1 & USART_CR1_RXNEIE) != RESET)) {
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	f013 0f20 	tst.w	r3, #32
 800e008:	d103      	bne.n	800e012 <USART1_IRQHandler+0x1e>
	HAL_UART_IRQHandler(&mod.huart);
 800e00a:	4808      	ldr	r0, [pc, #32]	@ (800e02c <USART1_IRQHandler+0x38>)
 800e00c:	f003 f898 	bl	8011140 <HAL_UART_IRQHandler>
}
 800e010:	bd08      	pop	{r3, pc}
		mod.htim.Instance->CNT = 0;
 800e012:	4806      	ldr	r0, [pc, #24]	@ (800e02c <USART1_IRQHandler+0x38>)
 800e014:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800e016:	2200      	movs	r2, #0
 800e018:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_CLEAR_IT(&mod.htim, TIM_IT_UPDATE);
 800e01a:	f850 3f48 	ldr.w	r3, [r0, #72]!
 800e01e:	f06f 0201 	mvn.w	r2, #1
 800e022:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&mod.htim);
 800e024:	f002 fb26 	bl	8010674 <HAL_TIM_Base_Start_IT>
 800e028:	e7ef      	b.n	800e00a <USART1_IRQHandler+0x16>
 800e02a:	bf00      	nop
 800e02c:	20000848 	.word	0x20000848

0800e030 <TIM3_IRQHandler>:
	if (__HAL_TIM_GET_FLAG(&mod.htim, TIM_FLAG_UPDATE) != RESET) {
 800e030:	4b36      	ldr	r3, [pc, #216]	@ (800e10c <TIM3_IRQHandler+0xdc>)
 800e032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e034:	691a      	ldr	r2, [r3, #16]
 800e036:	f012 0f01 	tst.w	r2, #1
 800e03a:	d003      	beq.n	800e044 <TIM3_IRQHandler+0x14>
		if (__HAL_TIM_GET_IT_SOURCE(&mod.htim, TIM_IT_UPDATE) != RESET) {
 800e03c:	68da      	ldr	r2, [r3, #12]
 800e03e:	f012 0f01 	tst.w	r2, #1
 800e042:	d100      	bne.n	800e046 <TIM3_IRQHandler+0x16>
 800e044:	4770      	bx	lr
void MODBUS_TIM_IRQ_HANDLER(void) {
 800e046:	b570      	push	{r4, r5, r6, lr}
			__HAL_TIM_CLEAR_IT(&mod.htim, TIM_IT_UPDATE);
 800e048:	f06f 0201 	mvn.w	r2, #1
 800e04c:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Stop_IT(&mod.htim);
 800e04e:	4c30      	ldr	r4, [pc, #192]	@ (800e110 <TIM3_IRQHandler+0xe0>)
 800e050:	4620      	mov	r0, r4
 800e052:	f002 fb53 	bl	80106fc <HAL_TIM_Base_Stop_IT>
	if (inFrame.slaveAddr
 800e056:	4b2f      	ldr	r3, [pc, #188]	@ (800e114 <TIM3_IRQHandler+0xe4>)
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	f894 2049 	ldrb.w	r2, [r4, #73]	@ 0x49
 800e05e:	429a      	cmp	r2, r3
 800e060:	d000      	beq.n	800e064 <TIM3_IRQHandler+0x34>
			== mod.myAddress|| inFrame.slaveAddr == MODBUS_BROADCAST) {
 800e062:	bb7b      	cbnz	r3, 800e0c4 <TIM3_IRQHandler+0x94>
		command = inFrame.funcCode;
 800e064:	4b2b      	ldr	r3, [pc, #172]	@ (800e114 <TIM3_IRQHandler+0xe4>)
 800e066:	785a      	ldrb	r2, [r3, #1]
		if (command >= MB_READ_COILS && command <= MB_WRITE_SINGLE_REG) {
 800e068:	1e53      	subs	r3, r2, #1
 800e06a:	b2db      	uxtb	r3, r3
 800e06c:	2b05      	cmp	r3, #5
 800e06e:	d81a      	bhi.n	800e0a6 <TIM3_IRQHandler+0x76>
		inFrame.size += MODBUS_MIN_PAYLOAD_LENGTH;
 800e070:	2404      	movs	r4, #4
 800e072:	4b28      	ldr	r3, [pc, #160]	@ (800e114 <TIM3_IRQHandler+0xe4>)
 800e074:	f8a3 4100 	strh.w	r4, [r3, #256]	@ 0x100
			supported = 1;
 800e078:	2601      	movs	r6, #1
			MbSlave_CRC16(&inFrame);
 800e07a:	4d26      	ldr	r5, [pc, #152]	@ (800e114 <TIM3_IRQHandler+0xe4>)
 800e07c:	4628      	mov	r0, r5
 800e07e:	f7ff fd09 	bl	800da94 <MbSlave_CRC16>
			if (inFrame.crc[0] == inFrame.data[inFrame.size]
 800e082:	192b      	adds	r3, r5, r4
 800e084:	f895 20fe 	ldrb.w	r2, [r5, #254]	@ 0xfe
 800e088:	789b      	ldrb	r3, [r3, #2]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d11a      	bne.n	800e0c4 <TIM3_IRQHandler+0x94>
					&& inFrame.crc[1] == inFrame.data[inFrame.size + 1]
 800e08e:	442c      	add	r4, r5
 800e090:	f895 20ff 	ldrb.w	r2, [r5, #255]	@ 0xff
 800e094:	78e3      	ldrb	r3, [r4, #3]
 800e096:	429a      	cmp	r2, r3
 800e098:	d114      	bne.n	800e0c4 <TIM3_IRQHandler+0x94>
					&& supported) {
 800e09a:	b19e      	cbz	r6, 800e0c4 <TIM3_IRQHandler+0x94>
				mod.frameOk = 1;
 800e09c:	4b1b      	ldr	r3, [pc, #108]	@ (800e10c <TIM3_IRQHandler+0xdc>)
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
			if (mod.frameOk == 1) {
 800e0a4:	e013      	b.n	800e0ce <TIM3_IRQHandler+0x9e>
				|| command == MB_WRITE_MULTIPLE_COILS) {
 800e0a6:	f1a2 030f 	sub.w	r3, r2, #15
		} else if (command == MB_WRITE_MULTIPLE_REGS
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d90f      	bls.n	800e0d0 <TIM3_IRQHandler+0xa0>
	uint8_t supported = 0;
 800e0b0:	2600      	movs	r6, #0
		inFrame.size += MODBUS_MIN_PAYLOAD_LENGTH;
 800e0b2:	4b18      	ldr	r3, [pc, #96]	@ (800e114 <TIM3_IRQHandler+0xe4>)
 800e0b4:	f8b3 4100 	ldrh.w	r4, [r3, #256]	@ 0x100
 800e0b8:	3404      	adds	r4, #4
 800e0ba:	b2a4      	uxth	r4, r4
 800e0bc:	f8a3 4100 	strh.w	r4, [r3, #256]	@ 0x100
		if (inFrame.size < MODBUS_DATA_LENGTH - 2) // CRC must fit into received data
 800e0c0:	2cf9      	cmp	r4, #249	@ 0xf9
 800e0c2:	d9da      	bls.n	800e07a <TIM3_IRQHandler+0x4a>
			if (mod.frameOk == 1) {
 800e0c4:	4b11      	ldr	r3, [pc, #68]	@ (800e10c <TIM3_IRQHandler+0xdc>)
 800e0c6:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d11a      	bne.n	800e104 <TIM3_IRQHandler+0xd4>
}
 800e0ce:	bd70      	pop	{r4, r5, r6, pc}
			inFrame.size = inFrame.data[2];
 800e0d0:	4b10      	ldr	r3, [pc, #64]	@ (800e114 <TIM3_IRQHandler+0xe4>)
 800e0d2:	7919      	ldrb	r1, [r3, #4]
			inFrame.size |= inFrame.data[3];
 800e0d4:	795b      	ldrb	r3, [r3, #5]
 800e0d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			if (command == MB_WRITE_MULTIPLE_COILS) {
 800e0da:	2a0f      	cmp	r2, #15
 800e0dc:	d006      	beq.n	800e0ec <TIM3_IRQHandler+0xbc>
				inFrame.size = (inFrame.size * 2) + 1; /* registers are 16b, 1 byte for size */
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	4a0c      	ldr	r2, [pc, #48]	@ (800e114 <TIM3_IRQHandler+0xe4>)
 800e0e4:	f8a2 3100 	strh.w	r3, [r2, #256]	@ 0x100
			supported = 1;
 800e0e8:	2601      	movs	r6, #1
 800e0ea:	e7e2      	b.n	800e0b2 <TIM3_IRQHandler+0x82>
				if (inFrame.size % 8) {
 800e0ec:	f013 0f07 	tst.w	r3, #7
					inFrame.size = (inFrame.size / 8) + 2; /* 1 extra byte is for unaligned data, 1 byte for size */
 800e0f0:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800e0f4:	bf14      	ite	ne
 800e0f6:	3302      	addne	r3, #2
					inFrame.size = (inFrame.size / 8) + 1; /* 1 byte for size */
 800e0f8:	3301      	addeq	r3, #1
 800e0fa:	4a06      	ldr	r2, [pc, #24]	@ (800e114 <TIM3_IRQHandler+0xe4>)
 800e0fc:	f8a2 3100 	strh.w	r3, [r2, #256]	@ 0x100
			supported = 1;
 800e100:	2601      	movs	r6, #1
 800e102:	e7d6      	b.n	800e0b2 <TIM3_IRQHandler+0x82>
				MbSlave_BusReset();
 800e104:	f7ff fd08 	bl	800db18 <MbSlave_BusReset>
}
 800e108:	e7e1      	b.n	800e0ce <TIM3_IRQHandler+0x9e>
 800e10a:	bf00      	nop
 800e10c:	20000848 	.word	0x20000848
 800e110:	20000890 	.word	0x20000890
 800e114:	20000744 	.word	0x20000744

0800e118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e118:	b500      	push	{lr}
 800e11a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e11c:	2234      	movs	r2, #52	@ 0x34
 800e11e:	2100      	movs	r1, #0
 800e120:	a807      	add	r0, sp, #28
 800e122:	f003 fcb7 	bl	8011a94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e126:	2300      	movs	r3, #0
 800e128:	9302      	str	r3, [sp, #8]
 800e12a:	9303      	str	r3, [sp, #12]
 800e12c:	9304      	str	r3, [sp, #16]
 800e12e:	9305      	str	r3, [sp, #20]
 800e130:	9306      	str	r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	4a23      	ldr	r2, [pc, #140]	@ (800e1c4 <SystemClock_Config+0xac>)
 800e136:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800e138:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 800e13c:	6411      	str	r1, [r2, #64]	@ 0x40
 800e13e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800e140:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800e144:	9200      	str	r2, [sp, #0]
 800e146:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800e148:	9301      	str	r3, [sp, #4]
 800e14a:	4a1f      	ldr	r2, [pc, #124]	@ (800e1c8 <SystemClock_Config+0xb0>)
 800e14c:	6811      	ldr	r1, [r2, #0]
 800e14e:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800e152:	6011      	str	r1, [r2, #0]
 800e154:	6812      	ldr	r2, [r2, #0]
 800e156:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 800e15a:	9201      	str	r2, [sp, #4]
 800e15c:	9a01      	ldr	r2, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800e15e:	220a      	movs	r2, #10
 800e160:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800e162:	2201      	movs	r2, #1
 800e164:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800e166:	2110      	movs	r1, #16
 800e168:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800e16a:	920c      	str	r2, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e16c:	2202      	movs	r2, #2
 800e16e:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800e170:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800e172:	2308      	movs	r3, #8
 800e174:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800e176:	23b4      	movs	r3, #180	@ 0xb4
 800e178:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800e17a:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800e17c:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800e17e:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e180:	a807      	add	r0, sp, #28
 800e182:	f001 fff3 	bl	801016c <HAL_RCC_OscConfig>
 800e186:	b9b0      	cbnz	r0, 800e1b6 <SystemClock_Config+0x9e>
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800e188:	f001 fe4c 	bl	800fe24 <HAL_PWREx_EnableOverDrive>
 800e18c:	b9a8      	cbnz	r0, 800e1ba <SystemClock_Config+0xa2>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e18e:	230f      	movs	r3, #15
 800e190:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e192:	2302      	movs	r3, #2
 800e194:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800e196:	2300      	movs	r3, #0
 800e198:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800e19a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800e19e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800e1a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e1a4:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800e1a6:	2105      	movs	r1, #5
 800e1a8:	a802      	add	r0, sp, #8
 800e1aa:	f001 fe79 	bl	800fea0 <HAL_RCC_ClockConfig>
 800e1ae:	b930      	cbnz	r0, 800e1be <SystemClock_Config+0xa6>
  {
    Error_Handler();
  }
}
 800e1b0:	b015      	add	sp, #84	@ 0x54
 800e1b2:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800e1b6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800e1b8:	e7fe      	b.n	800e1b8 <SystemClock_Config+0xa0>
 800e1ba:	b672      	cpsid	i
 800e1bc:	e7fe      	b.n	800e1bc <SystemClock_Config+0xa4>
 800e1be:	b672      	cpsid	i
 800e1c0:	e7fe      	b.n	800e1c0 <SystemClock_Config+0xa8>
 800e1c2:	bf00      	nop
 800e1c4:	40023800 	.word	0x40023800
 800e1c8:	40007000 	.word	0x40007000

0800e1cc <main>:
{
 800e1cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1d0:	b08f      	sub	sp, #60	@ 0x3c
    System_RemapApplicationVector();
 800e1d2:	f7ff fa1d 	bl	800d610 <System_RemapApplicationVector>
  __ASM volatile ("cpsie i" : : : "memory");
 800e1d6:	b662      	cpsie	i
  HAL_Init();
 800e1d8:	f000 fc5e 	bl	800ea98 <HAL_Init>
  SystemClock_Config();
 800e1dc:	f7ff ff9c 	bl	800e118 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1e0:	2400      	movs	r4, #0
 800e1e2:	9409      	str	r4, [sp, #36]	@ 0x24
 800e1e4:	940a      	str	r4, [sp, #40]	@ 0x28
 800e1e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e1e8:	940c      	str	r4, [sp, #48]	@ 0x30
 800e1ea:	940d      	str	r4, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e1ec:	9402      	str	r4, [sp, #8]
 800e1ee:	4daa      	ldr	r5, [pc, #680]	@ (800e498 <main+0x2cc>)
 800e1f0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e1f2:	f043 0304 	orr.w	r3, r3, #4
 800e1f6:	632b      	str	r3, [r5, #48]	@ 0x30
 800e1f8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e1fa:	f003 0304 	and.w	r3, r3, #4
 800e1fe:	9302      	str	r3, [sp, #8]
 800e200:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800e202:	9403      	str	r4, [sp, #12]
 800e204:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e20a:	632b      	str	r3, [r5, #48]	@ 0x30
 800e20c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e20e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e212:	9303      	str	r3, [sp, #12]
 800e214:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e216:	9404      	str	r4, [sp, #16]
 800e218:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e21a:	f043 0301 	orr.w	r3, r3, #1
 800e21e:	632b      	str	r3, [r5, #48]	@ 0x30
 800e220:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	9304      	str	r3, [sp, #16]
 800e228:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e22a:	9405      	str	r4, [sp, #20]
 800e22c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e22e:	f043 0302 	orr.w	r3, r3, #2
 800e232:	632b      	str	r3, [r5, #48]	@ 0x30
 800e234:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e236:	f003 0302 	and.w	r3, r3, #2
 800e23a:	9305      	str	r3, [sp, #20]
 800e23c:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e23e:	9406      	str	r4, [sp, #24]
 800e240:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e242:	f043 0308 	orr.w	r3, r3, #8
 800e246:	632b      	str	r3, [r5, #48]	@ 0x30
 800e248:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e24a:	f003 0308 	and.w	r3, r3, #8
 800e24e:	9306      	str	r3, [sp, #24]
 800e250:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800e252:	f8df 9288 	ldr.w	r9, [pc, #648]	@ 800e4dc <main+0x310>
 800e256:	4622      	mov	r2, r4
 800e258:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800e25c:	4648      	mov	r0, r9
 800e25e:	f001 fcc5 	bl	800fbec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 800e262:	4f8e      	ldr	r7, [pc, #568]	@ (800e49c <main+0x2d0>)
 800e264:	2201      	movs	r2, #1
 800e266:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e26a:	4638      	mov	r0, r7
 800e26c:	f001 fcbe 	bl	800fbec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800e270:	f8df 826c 	ldr.w	r8, [pc, #620]	@ 800e4e0 <main+0x314>
 800e274:	4622      	mov	r2, r4
 800e276:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e27a:	4640      	mov	r0, r8
 800e27c:	f001 fcb6 	bl	800fbec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800e280:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800e284:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e286:	2601      	movs	r6, #1
 800e288:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e28a:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e28c:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e28e:	a909      	add	r1, sp, #36	@ 0x24
 800e290:	4648      	mov	r0, r9
 800e292:	f001 fbaf 	bl	800f9f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = led_Pin;
 800e296:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
 800e29a:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e29e:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2a0:	940b      	str	r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2a2:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800e2a4:	a909      	add	r1, sp, #36	@ 0x24
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	f001 fba4 	bl	800f9f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = button_Pin;
 800e2ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e2b0:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800e2b2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800e2b6:	930a      	str	r3, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2b8:	940b      	str	r4, [sp, #44]	@ 0x2c
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800e2ba:	a909      	add	r1, sp, #36	@ 0x24
 800e2bc:	4638      	mov	r0, r7
 800e2be:	f001 fb99 	bl	800f9f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e2c2:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e2c6:	960a      	str	r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e2c8:	960b      	str	r6, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e2ca:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2cc:	a909      	add	r1, sp, #36	@ 0x24
 800e2ce:	4640      	mov	r0, r8
 800e2d0:	f001 fb90 	bl	800f9f4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800e2d4:	4622      	mov	r2, r4
 800e2d6:	4621      	mov	r1, r4
 800e2d8:	2028      	movs	r0, #40	@ 0x28
 800e2da:	f000 fed7 	bl	800f08c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800e2de:	2028      	movs	r0, #40	@ 0x28
 800e2e0:	f000 ff0a 	bl	800f0f8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800e2e4:	9401      	str	r4, [sp, #4]
 800e2e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e2e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e2ec:	632b      	str	r3, [r5, #48]	@ 0x30
 800e2ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800e2f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e2f4:	9301      	str	r3, [sp, #4]
 800e2f6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800e2f8:	4622      	mov	r2, r4
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	2038      	movs	r0, #56	@ 0x38
 800e2fe:	f000 fec5 	bl	800f08c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800e302:	2038      	movs	r0, #56	@ 0x38
 800e304:	f000 fef8 	bl	800f0f8 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 800e308:	4865      	ldr	r0, [pc, #404]	@ (800e4a0 <main+0x2d4>)
 800e30a:	4b66      	ldr	r3, [pc, #408]	@ (800e4a4 <main+0x2d8>)
 800e30c:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800e30e:	4b66      	ldr	r3, [pc, #408]	@ (800e4a8 <main+0x2dc>)
 800e310:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800e312:	6084      	str	r4, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800e314:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800e316:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e31a:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800e31c:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800e31e:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e320:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800e322:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800e324:	f001 fc80 	bl	800fc28 <HAL_I2C_Init>
 800e328:	2800      	cmp	r0, #0
 800e32a:	f040 80fd 	bne.w	800e528 <main+0x35c>
  hspi2.Instance = SPI2;
 800e32e:	485f      	ldr	r0, [pc, #380]	@ (800e4ac <main+0x2e0>)
 800e330:	4b5f      	ldr	r3, [pc, #380]	@ (800e4b0 <main+0x2e4>)
 800e332:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800e334:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800e338:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800e33a:	2300      	movs	r3, #0
 800e33c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800e33e:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800e340:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800e342:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800e344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e348:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e34a:	61c3      	str	r3, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800e34c:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800e34e:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e350:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800e352:	230a      	movs	r3, #10
 800e354:	62c3      	str	r3, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800e356:	f002 f92d 	bl	80105b4 <HAL_SPI_Init>
 800e35a:	2800      	cmp	r0, #0
 800e35c:	f040 80e6 	bne.w	800e52c <main+0x360>
  huart5.Instance = UART5;
 800e360:	4854      	ldr	r0, [pc, #336]	@ (800e4b4 <main+0x2e8>)
 800e362:	4b55      	ldr	r3, [pc, #340]	@ (800e4b8 <main+0x2ec>)
 800e364:	6003      	str	r3, [r0, #0]
  huart5.Init.BaudRate = 115200;
 800e366:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800e36a:	6043      	str	r3, [r0, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800e36c:	2300      	movs	r3, #0
 800e36e:	6083      	str	r3, [r0, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800e370:	60c3      	str	r3, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800e372:	6103      	str	r3, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800e374:	220c      	movs	r2, #12
 800e376:	6142      	str	r2, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e378:	6183      	str	r3, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800e37a:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800e37c:	f002 fcf4 	bl	8010d68 <HAL_UART_Init>
 800e380:	2800      	cmp	r0, #0
 800e382:	f040 80d5 	bne.w	800e530 <main+0x364>
  hcrc.Instance = CRC;
 800e386:	484d      	ldr	r0, [pc, #308]	@ (800e4bc <main+0x2f0>)
 800e388:	4b4d      	ldr	r3, [pc, #308]	@ (800e4c0 <main+0x2f4>)
 800e38a:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800e38c:	f000 fef6 	bl	800f17c <HAL_CRC_Init>
 800e390:	2800      	cmp	r0, #0
 800e392:	f040 80cf 	bne.w	800e534 <main+0x368>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800e396:	2300      	movs	r3, #0
 800e398:	9309      	str	r3, [sp, #36]	@ 0x24
 800e39a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e39c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e39e:	930c      	str	r3, [sp, #48]	@ 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800e3a0:	9307      	str	r3, [sp, #28]
 800e3a2:	9308      	str	r3, [sp, #32]
  htim2.Instance = TIM2;
 800e3a4:	4847      	ldr	r0, [pc, #284]	@ (800e4c4 <main+0x2f8>)
 800e3a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800e3aa:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 45-1;
 800e3ac:	222c      	movs	r2, #44	@ 0x2c
 800e3ae:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e3b0:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 55-1;
 800e3b2:	2236      	movs	r2, #54	@ 0x36
 800e3b4:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e3b6:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800e3b8:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800e3ba:	f002 faf1 	bl	80109a0 <HAL_TIM_Base_Init>
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f040 80ba 	bne.w	800e538 <main+0x36c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800e3c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e3c8:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800e3ca:	a909      	add	r1, sp, #36	@ 0x24
 800e3cc:	483d      	ldr	r0, [pc, #244]	@ (800e4c4 <main+0x2f8>)
 800e3ce:	f002 fb20 	bl	8010a12 <HAL_TIM_ConfigClockSource>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	f040 80b2 	bne.w	800e53c <main+0x370>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800e3dc:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800e3de:	a907      	add	r1, sp, #28
 800e3e0:	4838      	ldr	r0, [pc, #224]	@ (800e4c4 <main+0x2f8>)
 800e3e2:	f002 fbcb 	bl	8010b7c <HAL_TIMEx_MasterConfigSynchronization>
 800e3e6:	2800      	cmp	r0, #0
 800e3e8:	f040 80aa 	bne.w	800e540 <main+0x374>
  hiwdg.Instance = IWDG;
 800e3ec:	4836      	ldr	r0, [pc, #216]	@ (800e4c8 <main+0x2fc>)
 800e3ee:	4b37      	ldr	r3, [pc, #220]	@ (800e4cc <main+0x300>)
 800e3f0:	6003      	str	r3, [r0, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	6043      	str	r3, [r0, #4]
  hiwdg.Init.Reload = 4095;
 800e3f6:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800e3fa:	6083      	str	r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800e3fc:	f001 fcd6 	bl	800fdac <HAL_IWDG_Init>
 800e400:	2800      	cmp	r0, #0
 800e402:	f040 809f 	bne.w	800e544 <main+0x378>
  ADC_ChannelConfTypeDef sConfig = {0};
 800e406:	2300      	movs	r3, #0
 800e408:	9309      	str	r3, [sp, #36]	@ 0x24
 800e40a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e40c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e40e:	930c      	str	r3, [sp, #48]	@ 0x30
  hadc1.Instance = ADC1;
 800e410:	482f      	ldr	r0, [pc, #188]	@ (800e4d0 <main+0x304>)
 800e412:	4a30      	ldr	r2, [pc, #192]	@ (800e4d4 <main+0x308>)
 800e414:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800e416:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800e41a:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e41c:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800e41e:	2201      	movs	r2, #1
 800e420:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e422:	7603      	strb	r3, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e424:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e428:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e42a:	492b      	ldr	r1, [pc, #172]	@ (800e4d8 <main+0x30c>)
 800e42c:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e42e:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 4;
 800e430:	2104      	movs	r1, #4
 800e432:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800e434:	f880 3030 	strb.w	r3, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e438:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e43a:	f000 fb6d 	bl	800eb18 <HAL_ADC_Init>
 800e43e:	2800      	cmp	r0, #0
 800e440:	f040 8082 	bne.w	800e548 <main+0x37c>
  sConfig.Channel = ADC_CHANNEL_5;
 800e444:	2305      	movs	r3, #5
 800e446:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.Rank = 1;
 800e448:	2301      	movs	r3, #1
 800e44a:	930a      	str	r3, [sp, #40]	@ 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e44c:	2300      	movs	r3, #0
 800e44e:	930b      	str	r3, [sp, #44]	@ 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e450:	a909      	add	r1, sp, #36	@ 0x24
 800e452:	481f      	ldr	r0, [pc, #124]	@ (800e4d0 <main+0x304>)
 800e454:	f000 fd32 	bl	800eebc <HAL_ADC_ConfigChannel>
 800e458:	2800      	cmp	r0, #0
 800e45a:	d177      	bne.n	800e54c <main+0x380>
  sConfig.Channel = ADC_CHANNEL_6;
 800e45c:	2306      	movs	r3, #6
 800e45e:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.Rank = 2;
 800e460:	2302      	movs	r3, #2
 800e462:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e464:	a909      	add	r1, sp, #36	@ 0x24
 800e466:	481a      	ldr	r0, [pc, #104]	@ (800e4d0 <main+0x304>)
 800e468:	f000 fd28 	bl	800eebc <HAL_ADC_ConfigChannel>
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d16f      	bne.n	800e550 <main+0x384>
  sConfig.Channel = ADC_CHANNEL_7;
 800e470:	2307      	movs	r3, #7
 800e472:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.Rank = 3;
 800e474:	2303      	movs	r3, #3
 800e476:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e478:	a909      	add	r1, sp, #36	@ 0x24
 800e47a:	4815      	ldr	r0, [pc, #84]	@ (800e4d0 <main+0x304>)
 800e47c:	f000 fd1e 	bl	800eebc <HAL_ADC_ConfigChannel>
 800e480:	2800      	cmp	r0, #0
 800e482:	d167      	bne.n	800e554 <main+0x388>
  sConfig.Channel = ADC_CHANNEL_8;
 800e484:	2308      	movs	r3, #8
 800e486:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfig.Rank = 4;
 800e488:	2304      	movs	r3, #4
 800e48a:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e48c:	a909      	add	r1, sp, #36	@ 0x24
 800e48e:	4810      	ldr	r0, [pc, #64]	@ (800e4d0 <main+0x304>)
 800e490:	f000 fd14 	bl	800eebc <HAL_ADC_ConfigChannel>
 800e494:	e026      	b.n	800e4e4 <main+0x318>
 800e496:	bf00      	nop
 800e498:	40023800 	.word	0x40023800
 800e49c:	40020400 	.word	0x40020400
 800e4a0:	200009dc 	.word	0x200009dc
 800e4a4:	40005400 	.word	0x40005400
 800e4a8:	000186a0 	.word	0x000186a0
 800e4ac:	20000978 	.word	0x20000978
 800e4b0:	40003800 	.word	0x40003800
 800e4b4:	200008e8 	.word	0x200008e8
 800e4b8:	40005000 	.word	0x40005000
 800e4bc:	20000a30 	.word	0x20000a30
 800e4c0:	40023000 	.word	0x40023000
 800e4c4:	20000930 	.word	0x20000930
 800e4c8:	200009d0 	.word	0x200009d0
 800e4cc:	40003000 	.word	0x40003000
 800e4d0:	20000a98 	.word	0x20000a98
 800e4d4:	40012000 	.word	0x40012000
 800e4d8:	0f000001 	.word	0x0f000001
 800e4dc:	40020800 	.word	0x40020800
 800e4e0:	40020000 	.word	0x40020000
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d137      	bne.n	800e558 <main+0x38c>
    Switch_Init();
 800e4e8:	f003 fa5c 	bl	80119a4 <Switch_Init>
    ret |= System_InitWdg();
 800e4ec:	f7fe ffc6 	bl	800d47c <System_InitWdg>
    ret |= System_ReloadWdg();
 800e4f0:	f7fe ffbc 	bl	800d46c <System_ReloadWdg>
    System_CrcInit();
 800e4f4:	f7fe ff94 	bl	800d420 <System_CrcInit>
    ret |= Config_Init();
 800e4f8:	f7fe fc40 	bl	800cd7c <Config_Init>
    ret |= Control_Init();
 800e4fc:	f7fe fcd0 	bl	800cea0 <Control_Init>
    ret |= FlashApp_Init();
 800e500:	f7fe fd44 	bl	800cf8c <FlashApp_Init>
    ret |= MbSlave_Init();
 800e504:	f7ff fbba 	bl	800dc7c <MbSlave_Init>
    Probe_Init();
 800e508:	f002 ffd8 	bl	80114bc <Probe_Init>
    ret |= System_ReloadWdg();
 800e50c:	f7fe ffae 	bl	800d46c <System_ReloadWdg>
    tick_med = HAL_GetTick();
 800e510:	f000 fae8 	bl	800eae4 <HAL_GetTick>
 800e514:	4606      	mov	r6, r0
    tick_slow = HAL_GetTick();
 800e516:	f000 fae5 	bl	800eae4 <HAL_GetTick>
 800e51a:	4604      	mov	r4, r0
        if (TICK_EXPIRED(tick_med))
 800e51c:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
            max_med = MAX(max_med, HAL_GetTick() - start);
 800e520:	4f32      	ldr	r7, [pc, #200]	@ (800e5ec <main+0x420>)
            HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800e522:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e5f8 <main+0x42c>
 800e526:	e03a      	b.n	800e59e <main+0x3d2>
  __ASM volatile ("cpsid i" : : : "memory");
 800e528:	b672      	cpsid	i
    while (1)
 800e52a:	e7fe      	b.n	800e52a <main+0x35e>
 800e52c:	b672      	cpsid	i
 800e52e:	e7fe      	b.n	800e52e <main+0x362>
 800e530:	b672      	cpsid	i
 800e532:	e7fe      	b.n	800e532 <main+0x366>
 800e534:	b672      	cpsid	i
 800e536:	e7fe      	b.n	800e536 <main+0x36a>
 800e538:	b672      	cpsid	i
 800e53a:	e7fe      	b.n	800e53a <main+0x36e>
 800e53c:	b672      	cpsid	i
 800e53e:	e7fe      	b.n	800e53e <main+0x372>
 800e540:	b672      	cpsid	i
 800e542:	e7fe      	b.n	800e542 <main+0x376>
 800e544:	b672      	cpsid	i
 800e546:	e7fe      	b.n	800e546 <main+0x37a>
 800e548:	b672      	cpsid	i
 800e54a:	e7fe      	b.n	800e54a <main+0x37e>
 800e54c:	b672      	cpsid	i
 800e54e:	e7fe      	b.n	800e54e <main+0x382>
 800e550:	b672      	cpsid	i
 800e552:	e7fe      	b.n	800e552 <main+0x386>
 800e554:	b672      	cpsid	i
 800e556:	e7fe      	b.n	800e556 <main+0x38a>
 800e558:	b672      	cpsid	i
 800e55a:	e7fe      	b.n	800e55a <main+0x38e>
            tick_med += PERIOD_HANDLE_MED_PRIO;
 800e55c:	3605      	adds	r6, #5
            start = HAL_GetTick();
 800e55e:	f000 fac1 	bl	800eae4 <HAL_GetTick>
 800e562:	4681      	mov	r9, r0
            max_med = MAX(max_med, HAL_GetTick() - start);
 800e564:	f000 fabe 	bl	800eae4 <HAL_GetTick>
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	eba0 0009 	sub.w	r0, r0, r9
 800e56e:	4298      	cmp	r0, r3
 800e570:	d801      	bhi.n	800e576 <main+0x3aa>
 800e572:	603b      	str	r3, [r7, #0]
 800e574:	e01a      	b.n	800e5ac <main+0x3e0>
 800e576:	f000 fab5 	bl	800eae4 <HAL_GetTick>
 800e57a:	eba0 0309 	sub.w	r3, r0, r9
 800e57e:	e7f8      	b.n	800e572 <main+0x3a6>
            max_low = MAX(max_low, HAL_GetTick() - start);
 800e580:	4a1b      	ldr	r2, [pc, #108]	@ (800e5f0 <main+0x424>)
 800e582:	6013      	str	r3, [r2, #0]
            ret |= System_ReloadWdg();
 800e584:	f7fe ff72 	bl	800d46c <System_ReloadWdg>
            HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800e588:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800e58c:	4640      	mov	r0, r8
 800e58e:	f001 fb33 	bl	800fbf8 <HAL_GPIO_TogglePin>
            conf.sys.io_input = Switch_GetAll();
 800e592:	f003 fa27 	bl	80119e4 <Switch_GetAll>
 800e596:	4b17      	ldr	r3, [pc, #92]	@ (800e5f4 <main+0x428>)
 800e598:	8298      	strh	r0, [r3, #20]
            MbSlave_UpdateSlaveAddress();
 800e59a:	f7ff faab 	bl	800daf4 <MbSlave_UpdateSlaveAddress>
        MbSlave_Handle();
 800e59e:	f7ff fbb3 	bl	800dd08 <MbSlave_Handle>
        if (TICK_EXPIRED(tick_med))
 800e5a2:	f000 fa9f 	bl	800eae4 <HAL_GetTick>
 800e5a6:	1b80      	subs	r0, r0, r6
 800e5a8:	42a8      	cmp	r0, r5
 800e5aa:	d3d7      	bcc.n	800e55c <main+0x390>
        if (TICK_EXPIRED(tick_slow))
 800e5ac:	f000 fa9a 	bl	800eae4 <HAL_GetTick>
 800e5b0:	1b00      	subs	r0, r0, r4
 800e5b2:	42a8      	cmp	r0, r5
 800e5b4:	d2f3      	bcs.n	800e59e <main+0x3d2>
            tick_slow = HAL_GetTick() + PERIOD_HANDLE_LOW_PRIO;
 800e5b6:	f000 fa95 	bl	800eae4 <HAL_GetTick>
 800e5ba:	f100 0432 	add.w	r4, r0, #50	@ 0x32
            start = HAL_GetTick();
 800e5be:	f000 fa91 	bl	800eae4 <HAL_GetTick>
 800e5c2:	4681      	mov	r9, r0
            ret |= Control_Handle();
 800e5c4:	f7fe fc6e 	bl	800cea4 <Control_Handle>
            ret |= MbSlave_UpdateSlaveAddress();
 800e5c8:	f7ff fa94 	bl	800daf4 <MbSlave_UpdateSlaveAddress>
            ret |= FlashApp_Handle();
 800e5cc:	f7fe fce8 	bl	800cfa0 <FlashApp_Handle>
            max_low = MAX(max_low, HAL_GetTick() - start);
 800e5d0:	f000 fa88 	bl	800eae4 <HAL_GetTick>
 800e5d4:	4b06      	ldr	r3, [pc, #24]	@ (800e5f0 <main+0x424>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	eba0 0009 	sub.w	r0, r0, r9
 800e5dc:	4298      	cmp	r0, r3
 800e5de:	d9cf      	bls.n	800e580 <main+0x3b4>
 800e5e0:	f000 fa80 	bl	800eae4 <HAL_GetTick>
 800e5e4:	eba0 0309 	sub.w	r3, r0, r9
 800e5e8:	e7ca      	b.n	800e580 <main+0x3b4>
 800e5ea:	bf00      	nop
 800e5ec:	200008e0 	.word	0x200008e0
 800e5f0:	200008e4 	.word	0x200008e4
 800e5f4:	2000053c 	.word	0x2000053c
 800e5f8:	40020400 	.word	0x40020400

0800e5fc <HAL_TIM_PeriodElapsedCallback>:
{
 800e5fc:	b508      	push	{r3, lr}
    if (htim->Instance == TIM2)
 800e5fe:	6803      	ldr	r3, [r0, #0]
 800e600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e604:	d000      	beq.n	800e608 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 800e606:	bd08      	pop	{r3, pc}
        StartAdcMeasurement();
 800e608:	f002 ff78 	bl	80114fc <StartAdcMeasurement>
}
 800e60c:	e7fb      	b.n	800e606 <HAL_TIM_PeriodElapsedCallback+0xa>

0800e60e <Error_Handler>:
 800e60e:	b672      	cpsid	i
    while (1)
 800e610:	e7fe      	b.n	800e610 <Error_Handler+0x2>
	...

0800e614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e614:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e616:	2100      	movs	r1, #0
 800e618:	9100      	str	r1, [sp, #0]
 800e61a:	4b0b      	ldr	r3, [pc, #44]	@ (800e648 <HAL_MspInit+0x34>)
 800e61c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e61e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e622:	645a      	str	r2, [r3, #68]	@ 0x44
 800e624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e626:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800e62a:	9200      	str	r2, [sp, #0]
 800e62c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e62e:	9101      	str	r1, [sp, #4]
 800e630:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e632:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800e636:	641a      	str	r2, [r3, #64]	@ 0x40
 800e638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e63a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800e63e:	9301      	str	r3, [sp, #4]
 800e640:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e642:	b002      	add	sp, #8
 800e644:	4770      	bx	lr
 800e646:	bf00      	nop
 800e648:	40023800 	.word	0x40023800

0800e64c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800e64c:	b570      	push	{r4, r5, r6, lr}
 800e64e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e650:	2300      	movs	r3, #0
 800e652:	9303      	str	r3, [sp, #12]
 800e654:	9304      	str	r3, [sp, #16]
 800e656:	9305      	str	r3, [sp, #20]
 800e658:	9306      	str	r3, [sp, #24]
 800e65a:	9307      	str	r3, [sp, #28]
  if(hadc->Instance==ADC1)
 800e65c:	6802      	ldr	r2, [r0, #0]
 800e65e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e662:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 800e666:	429a      	cmp	r2, r3
 800e668:	d001      	beq.n	800e66e <HAL_ADC_MspInit+0x22>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800e66a:	b008      	add	sp, #32
 800e66c:	bd70      	pop	{r4, r5, r6, pc}
 800e66e:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e670:	2500      	movs	r5, #0
 800e672:	9500      	str	r5, [sp, #0]
 800e674:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 800e678:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e67a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800e67e:	645a      	str	r2, [r3, #68]	@ 0x44
 800e680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e682:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 800e686:	9200      	str	r2, [sp, #0]
 800e688:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e68a:	9501      	str	r5, [sp, #4]
 800e68c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e68e:	f042 0201 	orr.w	r2, r2, #1
 800e692:	631a      	str	r2, [r3, #48]	@ 0x30
 800e694:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e696:	f002 0201 	and.w	r2, r2, #1
 800e69a:	9201      	str	r2, [sp, #4]
 800e69c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e69e:	9502      	str	r5, [sp, #8]
 800e6a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e6a2:	f042 0202 	orr.w	r2, r2, #2
 800e6a6:	631a      	str	r2, [r3, #48]	@ 0x30
 800e6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6aa:	f003 0302 	and.w	r3, r3, #2
 800e6ae:	9302      	str	r3, [sp, #8]
 800e6b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800e6b2:	23fe      	movs	r3, #254	@ 0xfe
 800e6b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e6b6:	2603      	movs	r6, #3
 800e6b8:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6ba:	a903      	add	r1, sp, #12
 800e6bc:	4813      	ldr	r0, [pc, #76]	@ (800e70c <HAL_ADC_MspInit+0xc0>)
 800e6be:	f001 f999 	bl	800f9f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e6c6:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e6c8:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e6ca:	a903      	add	r1, sp, #12
 800e6cc:	4810      	ldr	r0, [pc, #64]	@ (800e710 <HAL_ADC_MspInit+0xc4>)
 800e6ce:	f001 f991 	bl	800f9f4 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800e6d2:	4810      	ldr	r0, [pc, #64]	@ (800e714 <HAL_ADC_MspInit+0xc8>)
 800e6d4:	4b10      	ldr	r3, [pc, #64]	@ (800e718 <HAL_ADC_MspInit+0xcc>)
 800e6d6:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800e6d8:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e6da:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e6dc:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e6de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e6e2:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e6e4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e6e8:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e6ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800e6ee:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800e6f0:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800e6f2:	6205      	str	r5, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e6f4:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e6f6:	f000 fd71 	bl	800f1dc <HAL_DMA_Init>
 800e6fa:	b918      	cbnz	r0, 800e704 <HAL_ADC_MspInit+0xb8>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800e6fc:	4b05      	ldr	r3, [pc, #20]	@ (800e714 <HAL_ADC_MspInit+0xc8>)
 800e6fe:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e700:	639c      	str	r4, [r3, #56]	@ 0x38
}
 800e702:	e7b2      	b.n	800e66a <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 800e704:	f7ff ff83 	bl	800e60e <Error_Handler>
 800e708:	e7f8      	b.n	800e6fc <HAL_ADC_MspInit+0xb0>
 800e70a:	bf00      	nop
 800e70c:	40020000 	.word	0x40020000
 800e710:	40020400 	.word	0x40020400
 800e714:	20000a38 	.word	0x20000a38
 800e718:	40026410 	.word	0x40026410

0800e71c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800e71c:	6802      	ldr	r2, [r0, #0]
 800e71e:	4b09      	ldr	r3, [pc, #36]	@ (800e744 <HAL_CRC_MspInit+0x28>)
 800e720:	429a      	cmp	r2, r3
 800e722:	d000      	beq.n	800e726 <HAL_CRC_MspInit+0xa>
 800e724:	4770      	bx	lr
{
 800e726:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800e728:	2300      	movs	r3, #0
 800e72a:	9301      	str	r3, [sp, #4]
 800e72c:	4b06      	ldr	r3, [pc, #24]	@ (800e748 <HAL_CRC_MspInit+0x2c>)
 800e72e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e730:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e734:	631a      	str	r2, [r3, #48]	@ 0x30
 800e736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e73c:	9301      	str	r3, [sp, #4]
 800e73e:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800e740:	b002      	add	sp, #8
 800e742:	4770      	bx	lr
 800e744:	40023000 	.word	0x40023000
 800e748:	40023800 	.word	0x40023800

0800e74c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e74c:	b530      	push	{r4, r5, lr}
 800e74e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e750:	2300      	movs	r3, #0
 800e752:	9303      	str	r3, [sp, #12]
 800e754:	9304      	str	r3, [sp, #16]
 800e756:	9305      	str	r3, [sp, #20]
 800e758:	9306      	str	r3, [sp, #24]
 800e75a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 800e75c:	6802      	ldr	r2, [r0, #0]
 800e75e:	4b14      	ldr	r3, [pc, #80]	@ (800e7b0 <HAL_I2C_MspInit+0x64>)
 800e760:	429a      	cmp	r2, r3
 800e762:	d001      	beq.n	800e768 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800e764:	b009      	add	sp, #36	@ 0x24
 800e766:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e768:	2500      	movs	r5, #0
 800e76a:	9501      	str	r5, [sp, #4]
 800e76c:	4c11      	ldr	r4, [pc, #68]	@ (800e7b4 <HAL_I2C_MspInit+0x68>)
 800e76e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e770:	f043 0302 	orr.w	r3, r3, #2
 800e774:	6323      	str	r3, [r4, #48]	@ 0x30
 800e776:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800e778:	f003 0302 	and.w	r3, r3, #2
 800e77c:	9301      	str	r3, [sp, #4]
 800e77e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e780:	23c0      	movs	r3, #192	@ 0xc0
 800e782:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e784:	2312      	movs	r3, #18
 800e786:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e788:	2303      	movs	r3, #3
 800e78a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800e78c:	2304      	movs	r3, #4
 800e78e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e790:	a903      	add	r1, sp, #12
 800e792:	4809      	ldr	r0, [pc, #36]	@ (800e7b8 <HAL_I2C_MspInit+0x6c>)
 800e794:	f001 f92e 	bl	800f9f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e798:	9502      	str	r5, [sp, #8]
 800e79a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e79c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e7a0:	6423      	str	r3, [r4, #64]	@ 0x40
 800e7a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e7a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800e7a8:	9302      	str	r3, [sp, #8]
 800e7aa:	9b02      	ldr	r3, [sp, #8]
}
 800e7ac:	e7da      	b.n	800e764 <HAL_I2C_MspInit+0x18>
 800e7ae:	bf00      	nop
 800e7b0:	40005400 	.word	0x40005400
 800e7b4:	40023800 	.word	0x40023800
 800e7b8:	40020400 	.word	0x40020400

0800e7bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	9303      	str	r3, [sp, #12]
 800e7c6:	9304      	str	r3, [sp, #16]
 800e7c8:	9305      	str	r3, [sp, #20]
 800e7ca:	9306      	str	r3, [sp, #24]
 800e7cc:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 800e7ce:	6802      	ldr	r2, [r0, #0]
 800e7d0:	4b25      	ldr	r3, [pc, #148]	@ (800e868 <HAL_SPI_MspInit+0xac>)
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d002      	beq.n	800e7dc <HAL_SPI_MspInit+0x20>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800e7d6:	b008      	add	sp, #32
 800e7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800e7dc:	2400      	movs	r4, #0
 800e7de:	9400      	str	r4, [sp, #0]
 800e7e0:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
 800e7e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e7e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e7ea:	641a      	str	r2, [r3, #64]	@ 0x40
 800e7ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e7ee:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800e7f2:	9200      	str	r2, [sp, #0]
 800e7f4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e7f6:	9401      	str	r4, [sp, #4]
 800e7f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e7fa:	f042 0204 	orr.w	r2, r2, #4
 800e7fe:	631a      	str	r2, [r3, #48]	@ 0x30
 800e800:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e802:	f002 0204 	and.w	r2, r2, #4
 800e806:	9201      	str	r2, [sp, #4]
 800e808:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e80a:	9402      	str	r4, [sp, #8]
 800e80c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e80e:	f042 0202 	orr.w	r2, r2, #2
 800e812:	631a      	str	r2, [r3, #48]	@ 0x30
 800e814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e816:	f003 0302 	and.w	r3, r3, #2
 800e81a:	9302      	str	r3, [sp, #8]
 800e81c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e81e:	2502      	movs	r5, #2
 800e820:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e822:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e824:	2603      	movs	r6, #3
 800e826:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800e828:	2307      	movs	r3, #7
 800e82a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e82c:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 800e870 <HAL_SPI_MspInit+0xb4>
 800e830:	a903      	add	r1, sp, #12
 800e832:	4640      	mov	r0, r8
 800e834:	f001 f8de 	bl	800f9f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e838:	2304      	movs	r3, #4
 800e83a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e83c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e83e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e840:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e842:	2705      	movs	r7, #5
 800e844:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e846:	a903      	add	r1, sp, #12
 800e848:	4640      	mov	r0, r8
 800e84a:	f001 f8d3 	bl	800f9f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e84e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e852:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e854:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e856:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e858:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800e85a:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e85c:	a903      	add	r1, sp, #12
 800e85e:	4803      	ldr	r0, [pc, #12]	@ (800e86c <HAL_SPI_MspInit+0xb0>)
 800e860:	f001 f8c8 	bl	800f9f4 <HAL_GPIO_Init>
}
 800e864:	e7b7      	b.n	800e7d6 <HAL_SPI_MspInit+0x1a>
 800e866:	bf00      	nop
 800e868:	40003800 	.word	0x40003800
 800e86c:	40020400 	.word	0x40020400
 800e870:	40020800 	.word	0x40020800

0800e874 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM2)
 800e874:	6803      	ldr	r3, [r0, #0]
 800e876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e87a:	d000      	beq.n	800e87e <HAL_TIM_Base_MspInit+0xa>
 800e87c:	4770      	bx	lr
{
 800e87e:	b500      	push	{lr}
 800e880:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800e882:	2100      	movs	r1, #0
 800e884:	9101      	str	r1, [sp, #4]
 800e886:	f503 330e 	add.w	r3, r3, #145408	@ 0x23800
 800e88a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e88c:	f042 0201 	orr.w	r2, r2, #1
 800e890:	641a      	str	r2, [r3, #64]	@ 0x40
 800e892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e894:	f003 0301 	and.w	r3, r3, #1
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	9b01      	ldr	r3, [sp, #4]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800e89c:	460a      	mov	r2, r1
 800e89e:	201c      	movs	r0, #28
 800e8a0:	f000 fbf4 	bl	800f08c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800e8a4:	201c      	movs	r0, #28
 800e8a6:	f000 fc27 	bl	800f0f8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800e8aa:	b003      	add	sp, #12
 800e8ac:	f85d fb04 	ldr.w	pc, [sp], #4

0800e8b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e8b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8b2:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	9303      	str	r3, [sp, #12]
 800e8b8:	9304      	str	r3, [sp, #16]
 800e8ba:	9305      	str	r3, [sp, #20]
 800e8bc:	9306      	str	r3, [sp, #24]
 800e8be:	9307      	str	r3, [sp, #28]
  if(huart->Instance==UART5)
 800e8c0:	6802      	ldr	r2, [r0, #0]
 800e8c2:	4b23      	ldr	r3, [pc, #140]	@ (800e950 <HAL_UART_MspInit+0xa0>)
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d001      	beq.n	800e8cc <HAL_UART_MspInit+0x1c>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 800e8c8:	b009      	add	sp, #36	@ 0x24
 800e8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 800e8cc:	2400      	movs	r4, #0
 800e8ce:	9400      	str	r4, [sp, #0]
 800e8d0:	f503 33f4 	add.w	r3, r3, #124928	@ 0x1e800
 800e8d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e8d6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800e8da:	641a      	str	r2, [r3, #64]	@ 0x40
 800e8dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e8de:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800e8e2:	9200      	str	r2, [sp, #0]
 800e8e4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e8e6:	9401      	str	r4, [sp, #4]
 800e8e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e8ea:	f042 0204 	orr.w	r2, r2, #4
 800e8ee:	631a      	str	r2, [r3, #48]	@ 0x30
 800e8f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e8f2:	f002 0204 	and.w	r2, r2, #4
 800e8f6:	9201      	str	r2, [sp, #4]
 800e8f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e8fa:	9402      	str	r4, [sp, #8]
 800e8fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e8fe:	f042 0208 	orr.w	r2, r2, #8
 800e902:	631a      	str	r2, [r3, #48]	@ 0x30
 800e904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e906:	f003 0308 	and.w	r3, r3, #8
 800e90a:	9302      	str	r3, [sp, #8]
 800e90c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800e90e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e912:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e914:	2702      	movs	r7, #2
 800e916:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e918:	2603      	movs	r6, #3
 800e91a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800e91c:	2508      	movs	r5, #8
 800e91e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e920:	a903      	add	r1, sp, #12
 800e922:	480c      	ldr	r0, [pc, #48]	@ (800e954 <HAL_UART_MspInit+0xa4>)
 800e924:	f001 f866 	bl	800f9f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e928:	2304      	movs	r3, #4
 800e92a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e92c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e92e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e930:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800e932:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e934:	a903      	add	r1, sp, #12
 800e936:	4808      	ldr	r0, [pc, #32]	@ (800e958 <HAL_UART_MspInit+0xa8>)
 800e938:	f001 f85c 	bl	800f9f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800e93c:	4622      	mov	r2, r4
 800e93e:	4621      	mov	r1, r4
 800e940:	2035      	movs	r0, #53	@ 0x35
 800e942:	f000 fba3 	bl	800f08c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800e946:	2035      	movs	r0, #53	@ 0x35
 800e948:	f000 fbd6 	bl	800f0f8 <HAL_NVIC_EnableIRQ>
}
 800e94c:	e7bc      	b.n	800e8c8 <HAL_UART_MspInit+0x18>
 800e94e:	bf00      	nop
 800e950:	40005000 	.word	0x40005000
 800e954:	40020800 	.word	0x40020800
 800e958:	40020c00 	.word	0x40020c00

0800e95c <NMI_Handler>:
void NMI_Handler(void)
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) { }
 800e95c:	e7fe      	b.n	800e95c <NMI_Handler>

0800e95e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e95e:	e7fe      	b.n	800e95e <HardFault_Handler>

0800e960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e960:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* Přesměruj do HardFault pro konzistentní log (většina projektů stejně resetuje). */
  HardFault_Handler();
 800e962:	f7ff fffc 	bl	800e95e <HardFault_Handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e966:	e7fe      	b.n	800e966 <MemManage_Handler+0x6>

0800e968 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e968:	b508      	push	{r3, lr}
  /* USER CODE BEGIN BusFault_IRQn 0 */
  HardFault_Handler();
 800e96a:	f7ff fff8 	bl	800e95e <HardFault_Handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e96e:	e7fe      	b.n	800e96e <BusFault_Handler+0x6>

0800e970 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e970:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  HardFault_Handler();
 800e972:	f7ff fff4 	bl	800e95e <HardFault_Handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e976:	e7fe      	b.n	800e976 <UsageFault_Handler+0x6>

0800e978 <SVC_Handler>:
{
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 800e978:	4770      	bx	lr

0800e97a <DebugMon_Handler>:
{
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e97a:	4770      	bx	lr

0800e97c <PendSV_Handler>:
{
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 800e97c:	4770      	bx	lr

0800e97e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e97e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e980:	f000 f8a4 	bl	800eacc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 800e984:	bd08      	pop	{r3, pc}
	...

0800e988 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800e988:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800e98a:	4802      	ldr	r0, [pc, #8]	@ (800e994 <TIM2_IRQHandler+0xc>)
 800e98c:	f001 fed3 	bl	8010736 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 800e990:	bd08      	pop	{r3, pc}
 800e992:	bf00      	nop
 800e994:	20000930 	.word	0x20000930

0800e998 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800e998:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 800e99a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800e99e:	f001 f935 	bl	800fc0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800e9a2:	bd08      	pop	{r3, pc}

0800e9a4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800e9a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800e9a6:	4802      	ldr	r0, [pc, #8]	@ (800e9b0 <UART5_IRQHandler+0xc>)
 800e9a8:	f002 fbca 	bl	8011140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 800e9ac:	bd08      	pop	{r3, pc}
 800e9ae:	bf00      	nop
 800e9b0:	200008e8 	.word	0x200008e8

0800e9b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800e9b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800e9b6:	4802      	ldr	r0, [pc, #8]	@ (800e9c0 <DMA2_Stream0_IRQHandler+0xc>)
 800e9b8:	f000 fd4a 	bl	800f450 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800e9bc:	bd08      	pop	{r3, pc}
 800e9be:	bf00      	nop
 800e9c0:	20000a38 	.word	0x20000a38

0800e9c4 <HAL_UART_TxCpltCallback>:



/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e9c4:	b508      	push	{r3, lr}
    MbSlave_TxCpltCallback(huart);
 800e9c6:	f7ff fafd 	bl	800dfc4 <MbSlave_TxCpltCallback>
}
 800e9ca:	bd08      	pop	{r3, pc}

0800e9cc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e9cc:	b508      	push	{r3, lr}
    MbSlave_RxCpltCallback(huart);
 800e9ce:	f7ff faed 	bl	800dfac <MbSlave_RxCpltCallback>
}
 800e9d2:	bd08      	pop	{r3, pc}

0800e9d4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e9d4:	b508      	push	{r3, lr}
    MbSlave_ErrorCallback(huart);
 800e9d6:	f7ff fb01 	bl	800dfdc <MbSlave_ErrorCallback>
}
 800e9da:	bd08      	pop	{r3, pc}

0800e9dc <SystemInit>:
 */
void SystemInit(void)
{
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800e9dc:	4b04      	ldr	r3, [pc, #16]	@ (800e9f0 <SystemInit+0x14>)
 800e9de:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e9e2:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800e9e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800e9ea:	4a02      	ldr	r2, [pc, #8]	@ (800e9f4 <SystemInit+0x18>)
 800e9ec:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e9ee:	4770      	bx	lr
 800e9f0:	e000ed00 	.word	0xe000ed00
 800e9f4:	0800c000 	.word	0x0800c000

0800e9f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800e9f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800ea30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800e9fc:	f7ff ffee 	bl	800e9dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800ea00:	480c      	ldr	r0, [pc, #48]	@ (800ea34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ea02:	490d      	ldr	r1, [pc, #52]	@ (800ea38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ea04:	4a0d      	ldr	r2, [pc, #52]	@ (800ea3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ea06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ea08:	e002      	b.n	800ea10 <LoopCopyDataInit>

0800ea0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ea0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ea0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ea0e:	3304      	adds	r3, #4

0800ea10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ea10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ea12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ea14:	d3f9      	bcc.n	800ea0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ea16:	4a0a      	ldr	r2, [pc, #40]	@ (800ea40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ea18:	4c0a      	ldr	r4, [pc, #40]	@ (800ea44 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ea1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ea1c:	e001      	b.n	800ea22 <LoopFillZerobss>

0800ea1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ea1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ea20:	3204      	adds	r2, #4

0800ea22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ea22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ea24:	d3fb      	bcc.n	800ea1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800ea26:	f003 f83d 	bl	8011aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ea2a:	f7ff fbcf 	bl	800e1cc <main>
  bx  lr    
 800ea2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ea30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800ea34:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 800ea38:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800ea3c:	080120a4 	.word	0x080120a4
  ldr r2, =_sbss
 800ea40:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 800ea44:	20014418 	.word	0x20014418

0800ea48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ea48:	e7fe      	b.n	800ea48 <ADC_IRQHandler>
	...

0800ea4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ea4c:	b510      	push	{r4, lr}
 800ea4e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800ea50:	4b0e      	ldr	r3, [pc, #56]	@ (800ea8c <HAL_InitTick+0x40>)
 800ea52:	781a      	ldrb	r2, [r3, #0]
 800ea54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ea58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea5c:	4a0c      	ldr	r2, [pc, #48]	@ (800ea90 <HAL_InitTick+0x44>)
 800ea5e:	6810      	ldr	r0, [r2, #0]
 800ea60:	fbb0 f0f3 	udiv	r0, r0, r3
 800ea64:	f000 fb68 	bl	800f138 <HAL_SYSTICK_Config>
 800ea68:	b968      	cbnz	r0, 800ea86 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ea6a:	2c0f      	cmp	r4, #15
 800ea6c:	d901      	bls.n	800ea72 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800ea6e:	2001      	movs	r0, #1
 800ea70:	e00a      	b.n	800ea88 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ea72:	2200      	movs	r2, #0
 800ea74:	4621      	mov	r1, r4
 800ea76:	f04f 30ff 	mov.w	r0, #4294967295
 800ea7a:	f000 fb07 	bl	800f08c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ea7e:	4b05      	ldr	r3, [pc, #20]	@ (800ea94 <HAL_InitTick+0x48>)
 800ea80:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ea82:	2000      	movs	r0, #0
 800ea84:	e000      	b.n	800ea88 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800ea86:	2001      	movs	r0, #1
}
 800ea88:	bd10      	pop	{r4, pc}
 800ea8a:	bf00      	nop
 800ea8c:	200000c4 	.word	0x200000c4
 800ea90:	200000c0 	.word	0x200000c0
 800ea94:	200000c8 	.word	0x200000c8

0800ea98 <HAL_Init>:
{
 800ea98:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ea9a:	4b0b      	ldr	r3, [pc, #44]	@ (800eac8 <HAL_Init+0x30>)
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800eaa2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800eaaa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800eab2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800eab4:	2003      	movs	r0, #3
 800eab6:	f000 fad7 	bl	800f068 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800eaba:	200f      	movs	r0, #15
 800eabc:	f7ff ffc6 	bl	800ea4c <HAL_InitTick>
  HAL_MspInit();
 800eac0:	f7ff fda8 	bl	800e614 <HAL_MspInit>
}
 800eac4:	2000      	movs	r0, #0
 800eac6:	bd08      	pop	{r3, pc}
 800eac8:	40023c00 	.word	0x40023c00

0800eacc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800eacc:	4a03      	ldr	r2, [pc, #12]	@ (800eadc <HAL_IncTick+0x10>)
 800eace:	6811      	ldr	r1, [r2, #0]
 800ead0:	4b03      	ldr	r3, [pc, #12]	@ (800eae0 <HAL_IncTick+0x14>)
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	440b      	add	r3, r1
 800ead6:	6013      	str	r3, [r2, #0]
}
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	20000ae0 	.word	0x20000ae0
 800eae0:	200000c4 	.word	0x200000c4

0800eae4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800eae4:	4b01      	ldr	r3, [pc, #4]	@ (800eaec <HAL_GetTick+0x8>)
 800eae6:	6818      	ldr	r0, [r3, #0]
}
 800eae8:	4770      	bx	lr
 800eaea:	bf00      	nop
 800eaec:	20000ae0 	.word	0x20000ae0

0800eaf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800eaf0:	b538      	push	{r3, r4, r5, lr}
 800eaf2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800eaf4:	f7ff fff6 	bl	800eae4 <HAL_GetTick>
 800eaf8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800eafa:	f1b4 3fff 	cmp.w	r4, #4294967295
 800eafe:	d002      	beq.n	800eb06 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 800eb00:	4b04      	ldr	r3, [pc, #16]	@ (800eb14 <HAL_Delay+0x24>)
 800eb02:	781b      	ldrb	r3, [r3, #0]
 800eb04:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800eb06:	f7ff ffed 	bl	800eae4 <HAL_GetTick>
 800eb0a:	1b40      	subs	r0, r0, r5
 800eb0c:	42a0      	cmp	r0, r4
 800eb0e:	d3fa      	bcc.n	800eb06 <HAL_Delay+0x16>
  {
  }
}
 800eb10:	bd38      	pop	{r3, r4, r5, pc}
 800eb12:	bf00      	nop
 800eb14:	200000c4 	.word	0x200000c4

0800eb18 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;

  /* Check ADC handle */
  if (hadc == NULL)
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	f000 80b9 	beq.w	800ec90 <HAL_ADC_Init+0x178>
{
 800eb1e:	b510      	push	{r4, lr}
 800eb20:	4604      	mov	r4, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800eb22:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800eb24:	b143      	cbz	r3, 800eb38 <HAL_ADC_Init+0x20>
    hadc->Lock = HAL_UNLOCKED;
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800eb26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb28:	f013 0f10 	tst.w	r3, #16
 800eb2c:	d00b      	beq.n	800eb46 <HAL_ADC_Init+0x2e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800eb2e:	2001      	movs	r0, #1
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800eb30:	2300      	movs	r3, #0
 800eb32:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 800eb36:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 800eb38:	f7ff fd88 	bl	800e64c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 800eb40:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 800eb44:	e7ef      	b.n	800eb26 <HAL_ADC_Init+0xe>
    ADC_STATE_CLR_SET(hadc->State,
 800eb46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800eb4c:	f023 0302 	bic.w	r3, r3, #2
 800eb50:	f043 0302 	orr.w	r3, r3, #2
 800eb54:	6423      	str	r3, [r4, #64]	@ 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800eb56:	4b4f      	ldr	r3, [pc, #316]	@ (800ec94 <HAL_ADC_Init+0x17c>)
 800eb58:	685a      	ldr	r2, [r3, #4]
 800eb5a:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800eb5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800eb60:	685a      	ldr	r2, [r3, #4]
 800eb62:	6861      	ldr	r1, [r4, #4]
 800eb64:	430a      	orrs	r2, r1
 800eb66:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800eb68:	6822      	ldr	r2, [r4, #0]
 800eb6a:	6853      	ldr	r3, [r2, #4]
 800eb6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eb70:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800eb72:	6822      	ldr	r2, [r4, #0]
 800eb74:	6853      	ldr	r3, [r2, #4]
 800eb76:	6921      	ldr	r1, [r4, #16]
 800eb78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800eb7c:	6053      	str	r3, [r2, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800eb7e:	6822      	ldr	r2, [r4, #0]
 800eb80:	6853      	ldr	r3, [r2, #4]
 800eb82:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800eb86:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800eb88:	6822      	ldr	r2, [r4, #0]
 800eb8a:	6853      	ldr	r3, [r2, #4]
 800eb8c:	68a1      	ldr	r1, [r4, #8]
 800eb8e:	430b      	orrs	r3, r1
 800eb90:	6053      	str	r3, [r2, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800eb92:	6822      	ldr	r2, [r4, #0]
 800eb94:	6893      	ldr	r3, [r2, #8]
 800eb96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eb9a:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800eb9c:	6822      	ldr	r2, [r4, #0]
 800eb9e:	6893      	ldr	r3, [r2, #8]
 800eba0:	68e1      	ldr	r1, [r4, #12]
 800eba2:	430b      	orrs	r3, r1
 800eba4:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800eba6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800eba8:	4b3b      	ldr	r3, [pc, #236]	@ (800ec98 <HAL_ADC_Init+0x180>)
 800ebaa:	429a      	cmp	r2, r3
 800ebac:	d05f      	beq.n	800ec6e <HAL_ADC_Init+0x156>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ebae:	6822      	ldr	r2, [r4, #0]
 800ebb0:	6893      	ldr	r3, [r2, #8]
 800ebb2:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800ebb6:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800ebb8:	6822      	ldr	r2, [r4, #0]
 800ebba:	6893      	ldr	r3, [r2, #8]
 800ebbc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800ebbe:	430b      	orrs	r3, r1
 800ebc0:	6093      	str	r3, [r2, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ebc2:	6822      	ldr	r2, [r4, #0]
 800ebc4:	6893      	ldr	r3, [r2, #8]
 800ebc6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800ebca:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800ebcc:	6822      	ldr	r2, [r4, #0]
 800ebce:	6893      	ldr	r3, [r2, #8]
 800ebd0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ebd2:	430b      	orrs	r3, r1
 800ebd4:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800ebd6:	6822      	ldr	r2, [r4, #0]
 800ebd8:	6893      	ldr	r3, [r2, #8]
 800ebda:	f023 0302 	bic.w	r3, r3, #2
 800ebde:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800ebe0:	6822      	ldr	r2, [r4, #0]
 800ebe2:	6893      	ldr	r3, [r2, #8]
 800ebe4:	7e21      	ldrb	r1, [r4, #24]
 800ebe6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800ebea:	6093      	str	r3, [r2, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800ebec:	f894 3020 	ldrb.w	r3, [r4, #32]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d047      	beq.n	800ec84 <HAL_ADC_Init+0x16c>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800ebf4:	6822      	ldr	r2, [r4, #0]
 800ebf6:	6853      	ldr	r3, [r2, #4]
 800ebf8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800ebfc:	6053      	str	r3, [r2, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800ebfe:	6822      	ldr	r2, [r4, #0]
 800ec00:	6853      	ldr	r3, [r2, #4]
 800ec02:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ec06:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800ec08:	6821      	ldr	r1, [r4, #0]
 800ec0a:	684b      	ldr	r3, [r1, #4]
 800ec0c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800ec0e:	3a01      	subs	r2, #1
 800ec10:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 800ec14:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800ec16:	6822      	ldr	r2, [r4, #0]
 800ec18:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ec1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ec1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800ec20:	6821      	ldr	r1, [r4, #0]
 800ec22:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800ec24:	69e2      	ldr	r2, [r4, #28]
 800ec26:	3a01      	subs	r2, #1
 800ec28:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800ec2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800ec2e:	6822      	ldr	r2, [r4, #0]
 800ec30:	6893      	ldr	r3, [r2, #8]
 800ec32:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec36:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800ec38:	6822      	ldr	r2, [r4, #0]
 800ec3a:	6893      	ldr	r3, [r2, #8]
 800ec3c:	f894 1030 	ldrb.w	r1, [r4, #48]	@ 0x30
 800ec40:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 800ec44:	6093      	str	r3, [r2, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800ec46:	6822      	ldr	r2, [r4, #0]
 800ec48:	6893      	ldr	r3, [r2, #8]
 800ec4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec4e:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800ec50:	6822      	ldr	r2, [r4, #0]
 800ec52:	6893      	ldr	r3, [r2, #8]
 800ec54:	6961      	ldr	r1, [r4, #20]
 800ec56:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 800ec5a:	6093      	str	r3, [r2, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800ec5c:	2000      	movs	r0, #0
 800ec5e:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800ec60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec62:	f023 0303 	bic.w	r3, r3, #3
 800ec66:	f043 0301 	orr.w	r3, r3, #1
 800ec6a:	6423      	str	r3, [r4, #64]	@ 0x40
 800ec6c:	e760      	b.n	800eb30 <HAL_ADC_Init+0x18>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800ec6e:	6822      	ldr	r2, [r4, #0]
 800ec70:	6893      	ldr	r3, [r2, #8]
 800ec72:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800ec76:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800ec78:	6822      	ldr	r2, [r4, #0]
 800ec7a:	6893      	ldr	r3, [r2, #8]
 800ec7c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800ec80:	6093      	str	r3, [r2, #8]
 800ec82:	e7a8      	b.n	800ebd6 <HAL_ADC_Init+0xbe>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800ec84:	6822      	ldr	r2, [r4, #0]
 800ec86:	6853      	ldr	r3, [r2, #4]
 800ec88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec8c:	6053      	str	r3, [r2, #4]
 800ec8e:	e7c2      	b.n	800ec16 <HAL_ADC_Init+0xfe>
    return HAL_ERROR;
 800ec90:	2001      	movs	r0, #1
}
 800ec92:	4770      	bx	lr
 800ec94:	40012300 	.word	0x40012300
 800ec98:	0f000001 	.word	0x0f000001

0800ec9c <HAL_ADC_Start_DMA>:
{
 800ec9c:	b510      	push	{r4, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 800eca2:	2200      	movs	r2, #0
 800eca4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800eca6:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800ecaa:	2a01      	cmp	r2, #1
 800ecac:	f000 80a7 	beq.w	800edfe <HAL_ADC_Start_DMA+0x162>
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800ecb8:	6802      	ldr	r2, [r0, #0]
 800ecba:	6890      	ldr	r0, [r2, #8]
 800ecbc:	f010 0f01 	tst.w	r0, #1
 800ecc0:	d114      	bne.n	800ecec <HAL_ADC_Start_DMA+0x50>
    __HAL_ADC_ENABLE(hadc);
 800ecc2:	6890      	ldr	r0, [r2, #8]
 800ecc4:	f040 0001 	orr.w	r0, r0, #1
 800ecc8:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800ecca:	4a4e      	ldr	r2, [pc, #312]	@ (800ee04 <HAL_ADC_Start_DMA+0x168>)
 800eccc:	6810      	ldr	r0, [r2, #0]
 800ecce:	4a4e      	ldr	r2, [pc, #312]	@ (800ee08 <HAL_ADC_Start_DMA+0x16c>)
 800ecd0:	fba2 2000 	umull	r2, r0, r2, r0
 800ecd4:	0c80      	lsrs	r0, r0, #18
 800ecd6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800ecda:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 800ecdc:	9a01      	ldr	r2, [sp, #4]
 800ecde:	b12a      	cbz	r2, 800ecec <HAL_ADC_Start_DMA+0x50>
      counter--;
 800ece0:	9801      	ldr	r0, [sp, #4]
 800ece2:	3801      	subs	r0, #1
 800ece4:	9001      	str	r0, [sp, #4]
    while (counter != 0U)
 800ece6:	9801      	ldr	r0, [sp, #4]
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d1f9      	bne.n	800ece0 <HAL_ADC_Start_DMA+0x44>
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800ecec:	6822      	ldr	r2, [r4, #0]
 800ecee:	6890      	ldr	r0, [r2, #8]
 800ecf0:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800ecf4:	d003      	beq.n	800ecfe <HAL_ADC_Start_DMA+0x62>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800ecf6:	6890      	ldr	r0, [r2, #8]
 800ecf8:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 800ecfc:	6090      	str	r0, [r2, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800ecfe:	6822      	ldr	r2, [r4, #0]
 800ed00:	6890      	ldr	r0, [r2, #8]
 800ed02:	f010 0f01 	tst.w	r0, #1
 800ed06:	d06f      	beq.n	800ede8 <HAL_ADC_Start_DMA+0x14c>
    ADC_STATE_CLR_SET(hadc->State,
 800ed08:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800ed0a:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 800ed0e:	f020 0001 	bic.w	r0, r0, #1
 800ed12:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 800ed16:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800ed18:	6852      	ldr	r2, [r2, #4]
 800ed1a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800ed1e:	d005      	beq.n	800ed2c <HAL_ADC_Start_DMA+0x90>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800ed20:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ed22:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800ed26:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ed2a:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ed2c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800ed2e:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800ed32:	bf1a      	itte	ne
 800ed34:	6c62      	ldrne	r2, [r4, #68]	@ 0x44
 800ed36:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800ed3a:	2200      	moveq	r2, #0
 800ed3c:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);
 800ed3e:	2200      	movs	r2, #0
 800ed40:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ed44:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ed46:	4831      	ldr	r0, [pc, #196]	@ (800ee0c <HAL_ADC_Start_DMA+0x170>)
 800ed48:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ed4a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ed4c:	4830      	ldr	r0, [pc, #192]	@ (800ee10 <HAL_ADC_Start_DMA+0x174>)
 800ed4e:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ed50:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ed52:	4830      	ldr	r0, [pc, #192]	@ (800ee14 <HAL_ADC_Start_DMA+0x178>)
 800ed54:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800ed56:	6822      	ldr	r2, [r4, #0]
 800ed58:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 800ed5c:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ed5e:	6820      	ldr	r0, [r4, #0]
 800ed60:	6842      	ldr	r2, [r0, #4]
 800ed62:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800ed66:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800ed68:	6820      	ldr	r0, [r4, #0]
 800ed6a:	6882      	ldr	r2, [r0, #8]
 800ed6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ed70:	6082      	str	r2, [r0, #8]
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ed72:	6820      	ldr	r0, [r4, #0]
 800ed74:	460a      	mov	r2, r1
 800ed76:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 800ed7a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800ed7c:	f000 fac6 	bl	800f30c <HAL_DMA_Start_IT>
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800ed80:	4b25      	ldr	r3, [pc, #148]	@ (800ee18 <HAL_ADC_Start_DMA+0x17c>)
 800ed82:	685b      	ldr	r3, [r3, #4]
 800ed84:	f013 0f1f 	tst.w	r3, #31
 800ed88:	d120      	bne.n	800edcc <HAL_ADC_Start_DMA+0x130>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	4a23      	ldr	r2, [pc, #140]	@ (800ee1c <HAL_ADC_Start_DMA+0x180>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d013      	beq.n	800edba <HAL_ADC_Start_DMA+0x11e>
 800ed92:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d009      	beq.n	800edae <HAL_ADC_Start_DMA+0x112>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800ed9a:	4a21      	ldr	r2, [pc, #132]	@ (800ee20 <HAL_ADC_Start_DMA+0x184>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d12c      	bne.n	800edfa <HAL_ADC_Start_DMA+0x15e>
 800eda0:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 800eda4:	6852      	ldr	r2, [r2, #4]
 800eda6:	f012 0f10 	tst.w	r2, #16
 800edaa:	d126      	bne.n	800edfa <HAL_ADC_Start_DMA+0x15e>
 800edac:	e005      	b.n	800edba <HAL_ADC_Start_DMA+0x11e>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800edae:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 800edb2:	6852      	ldr	r2, [r2, #4]
 800edb4:	f012 0f1f 	tst.w	r2, #31
 800edb8:	d11f      	bne.n	800edfa <HAL_ADC_Start_DMA+0x15e>
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800edba:	689a      	ldr	r2, [r3, #8]
 800edbc:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800edc0:	d11b      	bne.n	800edfa <HAL_ADC_Start_DMA+0x15e>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800edc2:	689a      	ldr	r2, [r3, #8]
 800edc4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800edc8:	609a      	str	r2, [r3, #8]
 800edca:	e016      	b.n	800edfa <HAL_ADC_Start_DMA+0x15e>
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800edcc:	6822      	ldr	r2, [r4, #0]
 800edce:	4b13      	ldr	r3, [pc, #76]	@ (800ee1c <HAL_ADC_Start_DMA+0x180>)
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d112      	bne.n	800edfa <HAL_ADC_Start_DMA+0x15e>
 800edd4:	689b      	ldr	r3, [r3, #8]
 800edd6:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
 800edda:	d10e      	bne.n	800edfa <HAL_ADC_Start_DMA+0x15e>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800eddc:	4a0f      	ldr	r2, [pc, #60]	@ (800ee1c <HAL_ADC_Start_DMA+0x180>)
 800edde:	6893      	ldr	r3, [r2, #8]
 800ede0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ede4:	6093      	str	r3, [r2, #8]
 800ede6:	e008      	b.n	800edfa <HAL_ADC_Start_DMA+0x15e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ede8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800edea:	f043 0310 	orr.w	r3, r3, #16
 800edee:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800edf0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800edf2:	f043 0301 	orr.w	r3, r3, #1
 800edf6:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800edf8:	2000      	movs	r0, #0
}
 800edfa:	b002      	add	sp, #8
 800edfc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800edfe:	2002      	movs	r0, #2
 800ee00:	e7fb      	b.n	800edfa <HAL_ADC_Start_DMA+0x15e>
 800ee02:	bf00      	nop
 800ee04:	200000c0 	.word	0x200000c0
 800ee08:	431bde83 	.word	0x431bde83
 800ee0c:	0800ee49 	.word	0x0800ee49
 800ee10:	0800ee27 	.word	0x0800ee27
 800ee14:	0800ee33 	.word	0x0800ee33
 800ee18:	40012300 	.word	0x40012300
 800ee1c:	40012000 	.word	0x40012000
 800ee20:	40012200 	.word	0x40012200

0800ee24 <HAL_ADC_ConvHalfCpltCallback>:
}
 800ee24:	4770      	bx	lr

0800ee26 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800ee26:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ee28:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 800ee2a:	f7ff fffb 	bl	800ee24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ee2e:	bd08      	pop	{r3, pc}

0800ee30 <HAL_ADC_ErrorCallback>:
}
 800ee30:	4770      	bx	lr

0800ee32 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee32:	b508      	push	{r3, lr}
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee34:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800ee36:	2340      	movs	r3, #64	@ 0x40
 800ee38:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800ee3a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800ee3c:	f043 0304 	orr.w	r3, r3, #4
 800ee40:	6443      	str	r3, [r0, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800ee42:	f7ff fff5 	bl	800ee30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ee46:	bd08      	pop	{r3, pc}

0800ee48 <ADC_DMAConvCplt>:
{
 800ee48:	b508      	push	{r3, lr}
 800ee4a:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee4c:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800ee4e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800ee50:	f012 0f50 	tst.w	r2, #80	@ 0x50
 800ee54:	d125      	bne.n	800eea2 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ee56:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ee58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ee5c:	6403      	str	r3, [r0, #64]	@ 0x40
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800ee5e:	6803      	ldr	r3, [r0, #0]
 800ee60:	689a      	ldr	r2, [r3, #8]
 800ee62:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 800ee66:	d119      	bne.n	800ee9c <ADC_DMAConvCplt+0x54>
 800ee68:	7e02      	ldrb	r2, [r0, #24]
 800ee6a:	b9ba      	cbnz	r2, 800ee9c <ADC_DMAConvCplt+0x54>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ee6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800ee6e:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 800ee72:	d003      	beq.n	800ee7c <ADC_DMAConvCplt+0x34>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800ee74:	689a      	ldr	r2, [r3, #8]
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800ee76:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 800ee7a:	d10f      	bne.n	800ee9c <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800ee7c:	685a      	ldr	r2, [r3, #4]
 800ee7e:	f022 0220 	bic.w	r2, r2, #32
 800ee82:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ee84:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ee86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ee8a:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800ee8c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ee8e:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 800ee92:	d103      	bne.n	800ee9c <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ee94:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ee96:	f043 0301 	orr.w	r3, r3, #1
 800ee9a:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800ee9c:	f002 fb48 	bl	8011530 <HAL_ADC_ConvCpltCallback>
}
 800eea0:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800eea2:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800eea4:	f012 0f10 	tst.w	r2, #16
 800eea8:	d104      	bne.n	800eeb4 <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800eeaa:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800eeac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800eeae:	4618      	mov	r0, r3
 800eeb0:	4790      	blx	r2
}
 800eeb2:	e7f5      	b.n	800eea0 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 800eeb4:	f7ff ffbc 	bl	800ee30 <HAL_ADC_ErrorCallback>
 800eeb8:	e7f2      	b.n	800eea0 <ADC_DMAConvCplt+0x58>
	...

0800eebc <HAL_ADC_ConfigChannel>:
{
 800eebc:	b430      	push	{r4, r5}
 800eebe:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 800eec0:	2200      	movs	r2, #0
 800eec2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800eec4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800eec8:	2a01      	cmp	r2, #1
 800eeca:	f000 80c1 	beq.w	800f050 <HAL_ADC_ConfigChannel+0x194>
 800eece:	4603      	mov	r3, r0
 800eed0:	2201      	movs	r2, #1
 800eed2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800eed6:	680a      	ldr	r2, [r1, #0]
 800eed8:	2a09      	cmp	r2, #9
 800eeda:	d93a      	bls.n	800ef52 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800eedc:	6804      	ldr	r4, [r0, #0]
 800eede:	68e0      	ldr	r0, [r4, #12]
 800eee0:	b292      	uxth	r2, r2
 800eee2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800eee6:	3a1e      	subs	r2, #30
 800eee8:	f04f 0c07 	mov.w	ip, #7
 800eeec:	fa0c f202 	lsl.w	r2, ip, r2
 800eef0:	ea20 0202 	bic.w	r2, r0, r2
 800eef4:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800eef6:	681c      	ldr	r4, [r3, #0]
 800eef8:	68e5      	ldr	r5, [r4, #12]
 800eefa:	880a      	ldrh	r2, [r1, #0]
 800eefc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ef00:	3a1e      	subs	r2, #30
 800ef02:	6888      	ldr	r0, [r1, #8]
 800ef04:	4090      	lsls	r0, r2
 800ef06:	4328      	orrs	r0, r5
 800ef08:	60e0      	str	r0, [r4, #12]
  if (sConfig->Rank < 7U)
 800ef0a:	684a      	ldr	r2, [r1, #4]
 800ef0c:	2a06      	cmp	r2, #6
 800ef0e:	d836      	bhi.n	800ef7e <HAL_ADC_ConfigChannel+0xc2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ef10:	681c      	ldr	r4, [r3, #0]
 800ef12:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800ef14:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ef18:	3a05      	subs	r2, #5
 800ef1a:	f04f 0c1f 	mov.w	ip, #31
 800ef1e:	fa0c f202 	lsl.w	r2, ip, r2
 800ef22:	ea20 0202 	bic.w	r2, r0, r2
 800ef26:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ef28:	681c      	ldr	r4, [r3, #0]
 800ef2a:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800ef2c:	8808      	ldrh	r0, [r1, #0]
 800ef2e:	684a      	ldr	r2, [r1, #4]
 800ef30:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ef34:	3a05      	subs	r2, #5
 800ef36:	fa00 f202 	lsl.w	r2, r0, r2
 800ef3a:	432a      	orrs	r2, r5
 800ef3c:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800ef3e:	6818      	ldr	r0, [r3, #0]
 800ef40:	4a44      	ldr	r2, [pc, #272]	@ (800f054 <HAL_ADC_ConfigChannel+0x198>)
 800ef42:	4290      	cmp	r0, r2
 800ef44:	d04b      	beq.n	800efde <HAL_ADC_ConfigChannel+0x122>
  __HAL_UNLOCK(hadc);
 800ef46:	2000      	movs	r0, #0
 800ef48:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800ef4c:	b002      	add	sp, #8
 800ef4e:	bc30      	pop	{r4, r5}
 800ef50:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ef52:	6804      	ldr	r4, [r0, #0]
 800ef54:	6920      	ldr	r0, [r4, #16]
 800ef56:	b292      	uxth	r2, r2
 800ef58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800ef5c:	f04f 0c07 	mov.w	ip, #7
 800ef60:	fa0c f202 	lsl.w	r2, ip, r2
 800ef64:	ea20 0202 	bic.w	r2, r0, r2
 800ef68:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800ef6a:	681c      	ldr	r4, [r3, #0]
 800ef6c:	6925      	ldr	r5, [r4, #16]
 800ef6e:	880a      	ldrh	r2, [r1, #0]
 800ef70:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 800ef74:	688a      	ldr	r2, [r1, #8]
 800ef76:	4082      	lsls	r2, r0
 800ef78:	432a      	orrs	r2, r5
 800ef7a:	6122      	str	r2, [r4, #16]
 800ef7c:	e7c5      	b.n	800ef0a <HAL_ADC_ConfigChannel+0x4e>
  else if (sConfig->Rank < 13U)
 800ef7e:	2a0c      	cmp	r2, #12
 800ef80:	d816      	bhi.n	800efb0 <HAL_ADC_ConfigChannel+0xf4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ef82:	681d      	ldr	r5, [r3, #0]
 800ef84:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800ef86:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800ef8a:	3a23      	subs	r2, #35	@ 0x23
 800ef8c:	241f      	movs	r4, #31
 800ef8e:	fa04 f202 	lsl.w	r2, r4, r2
 800ef92:	ea20 0202 	bic.w	r2, r0, r2
 800ef96:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800ef98:	681c      	ldr	r4, [r3, #0]
 800ef9a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800ef9c:	8808      	ldrh	r0, [r1, #0]
 800ef9e:	684a      	ldr	r2, [r1, #4]
 800efa0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800efa4:	3a23      	subs	r2, #35	@ 0x23
 800efa6:	fa00 f202 	lsl.w	r2, r0, r2
 800efaa:	432a      	orrs	r2, r5
 800efac:	6322      	str	r2, [r4, #48]	@ 0x30
 800efae:	e7c6      	b.n	800ef3e <HAL_ADC_ConfigChannel+0x82>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800efb0:	681d      	ldr	r5, [r3, #0]
 800efb2:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800efb4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800efb8:	3a41      	subs	r2, #65	@ 0x41
 800efba:	241f      	movs	r4, #31
 800efbc:	fa04 f202 	lsl.w	r2, r4, r2
 800efc0:	ea20 0202 	bic.w	r2, r0, r2
 800efc4:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800efc6:	681c      	ldr	r4, [r3, #0]
 800efc8:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800efca:	8808      	ldrh	r0, [r1, #0]
 800efcc:	684a      	ldr	r2, [r1, #4]
 800efce:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800efd2:	3a41      	subs	r2, #65	@ 0x41
 800efd4:	fa00 f202 	lsl.w	r2, r0, r2
 800efd8:	432a      	orrs	r2, r5
 800efda:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800efdc:	e7af      	b.n	800ef3e <HAL_ADC_ConfigChannel+0x82>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800efde:	680a      	ldr	r2, [r1, #0]
 800efe0:	2a12      	cmp	r2, #18
 800efe2:	d026      	beq.n	800f032 <HAL_ADC_ConfigChannel+0x176>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800efe4:	680a      	ldr	r2, [r1, #0]
 800efe6:	481c      	ldr	r0, [pc, #112]	@ (800f058 <HAL_ADC_ConfigChannel+0x19c>)
 800efe8:	4282      	cmp	r2, r0
 800efea:	d001      	beq.n	800eff0 <HAL_ADC_ConfigChannel+0x134>
 800efec:	2a11      	cmp	r2, #17
 800efee:	d1aa      	bne.n	800ef46 <HAL_ADC_ConfigChannel+0x8a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800eff0:	4a1a      	ldr	r2, [pc, #104]	@ (800f05c <HAL_ADC_ConfigChannel+0x1a0>)
 800eff2:	6850      	ldr	r0, [r2, #4]
 800eff4:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 800eff8:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800effa:	6850      	ldr	r0, [r2, #4]
 800effc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f000:	6050      	str	r0, [r2, #4]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800f002:	6809      	ldr	r1, [r1, #0]
 800f004:	4a14      	ldr	r2, [pc, #80]	@ (800f058 <HAL_ADC_ConfigChannel+0x19c>)
 800f006:	4291      	cmp	r1, r2
 800f008:	d19d      	bne.n	800ef46 <HAL_ADC_ConfigChannel+0x8a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800f00a:	4a15      	ldr	r2, [pc, #84]	@ (800f060 <HAL_ADC_ConfigChannel+0x1a4>)
 800f00c:	6812      	ldr	r2, [r2, #0]
 800f00e:	4915      	ldr	r1, [pc, #84]	@ (800f064 <HAL_ADC_ConfigChannel+0x1a8>)
 800f010:	fba1 1202 	umull	r1, r2, r1, r2
 800f014:	0c92      	lsrs	r2, r2, #18
 800f016:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800f01a:	0052      	lsls	r2, r2, #1
 800f01c:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 800f01e:	9a01      	ldr	r2, [sp, #4]
 800f020:	2a00      	cmp	r2, #0
 800f022:	d090      	beq.n	800ef46 <HAL_ADC_ConfigChannel+0x8a>
        counter--;
 800f024:	9a01      	ldr	r2, [sp, #4]
 800f026:	3a01      	subs	r2, #1
 800f028:	9201      	str	r2, [sp, #4]
      while (counter != 0U)
 800f02a:	9a01      	ldr	r2, [sp, #4]
 800f02c:	2a00      	cmp	r2, #0
 800f02e:	d1f9      	bne.n	800f024 <HAL_ADC_ConfigChannel+0x168>
 800f030:	e789      	b.n	800ef46 <HAL_ADC_ConfigChannel+0x8a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800f032:	4a0a      	ldr	r2, [pc, #40]	@ (800f05c <HAL_ADC_ConfigChannel+0x1a0>)
 800f034:	6850      	ldr	r0, [r2, #4]
 800f036:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 800f03a:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800f03c:	6850      	ldr	r0, [r2, #4]
 800f03e:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 800f042:	6050      	str	r0, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800f044:	6818      	ldr	r0, [r3, #0]
 800f046:	f5a2 7240 	sub.w	r2, r2, #768	@ 0x300
 800f04a:	4290      	cmp	r0, r2
 800f04c:	d0ca      	beq.n	800efe4 <HAL_ADC_ConfigChannel+0x128>
 800f04e:	e77a      	b.n	800ef46 <HAL_ADC_ConfigChannel+0x8a>
  __HAL_LOCK(hadc);
 800f050:	2002      	movs	r0, #2
 800f052:	e77b      	b.n	800ef4c <HAL_ADC_ConfigChannel+0x90>
 800f054:	40012000 	.word	0x40012000
 800f058:	10000012 	.word	0x10000012
 800f05c:	40012300 	.word	0x40012300
 800f060:	200000c0 	.word	0x200000c0
 800f064:	431bde83 	.word	0x431bde83

0800f068 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f068:	4907      	ldr	r1, [pc, #28]	@ (800f088 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800f06a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f06c:	0203      	lsls	r3, r0, #8
 800f06e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f072:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800f076:	0412      	lsls	r2, r2, #16
 800f078:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f07a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f07c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800f080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800f084:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800f086:	4770      	bx	lr
 800f088:	e000ed00 	.word	0xe000ed00

0800f08c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f08c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f08e:	4b18      	ldr	r3, [pc, #96]	@ (800f0f0 <HAL_NVIC_SetPriority+0x64>)
 800f090:	68db      	ldr	r3, [r3, #12]
 800f092:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f096:	f1c3 0c07 	rsb	ip, r3, #7
 800f09a:	f1bc 0f04 	cmp.w	ip, #4
 800f09e:	bf28      	it	cs
 800f0a0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f0a4:	f103 0e04 	add.w	lr, r3, #4
 800f0a8:	f1be 0f06 	cmp.w	lr, #6
 800f0ac:	bf8c      	ite	hi
 800f0ae:	3b03      	subhi	r3, #3
 800f0b0:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f0b2:	f04f 3eff 	mov.w	lr, #4294967295
 800f0b6:	fa0e fc0c 	lsl.w	ip, lr, ip
 800f0ba:	ea21 010c 	bic.w	r1, r1, ip
 800f0be:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f0c0:	fa0e fe03 	lsl.w	lr, lr, r3
 800f0c4:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f0c8:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	db09      	blt.n	800f0e2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f0ce:	0109      	lsls	r1, r1, #4
 800f0d0:	b2c9      	uxtb	r1, r1
 800f0d2:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800f0d6:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800f0da:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800f0de:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f0e2:	f000 000f 	and.w	r0, r0, #15
 800f0e6:	0109      	lsls	r1, r1, #4
 800f0e8:	b2c9      	uxtb	r1, r1
 800f0ea:	4b02      	ldr	r3, [pc, #8]	@ (800f0f4 <HAL_NVIC_SetPriority+0x68>)
 800f0ec:	5419      	strb	r1, [r3, r0]
 800f0ee:	e7f6      	b.n	800f0de <HAL_NVIC_SetPriority+0x52>
 800f0f0:	e000ed00 	.word	0xe000ed00
 800f0f4:	e000ed14 	.word	0xe000ed14

0800f0f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	db07      	blt.n	800f10c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f0fc:	0941      	lsrs	r1, r0, #5
 800f0fe:	f000 001f 	and.w	r0, r0, #31
 800f102:	2301      	movs	r3, #1
 800f104:	4083      	lsls	r3, r0
 800f106:	4a02      	ldr	r2, [pc, #8]	@ (800f110 <HAL_NVIC_EnableIRQ+0x18>)
 800f108:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop
 800f110:	e000e100 	.word	0xe000e100

0800f114 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800f114:	2800      	cmp	r0, #0
 800f116:	db0c      	blt.n	800f132 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f118:	0943      	lsrs	r3, r0, #5
 800f11a:	f000 001f 	and.w	r0, r0, #31
 800f11e:	2201      	movs	r2, #1
 800f120:	4082      	lsls	r2, r0
 800f122:	3320      	adds	r3, #32
 800f124:	4903      	ldr	r1, [pc, #12]	@ (800f134 <HAL_NVIC_DisableIRQ+0x20>)
 800f126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800f12a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800f12e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800f132:	4770      	bx	lr
 800f134:	e000e100 	.word	0xe000e100

0800f138 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800f138:	3801      	subs	r0, #1
 800f13a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800f13e:	d20b      	bcs.n	800f158 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800f140:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f144:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f146:	4a05      	ldr	r2, [pc, #20]	@ (800f15c <HAL_SYSTICK_Config+0x24>)
 800f148:	21f0      	movs	r1, #240	@ 0xf0
 800f14a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800f14e:	2000      	movs	r0, #0
 800f150:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800f152:	2207      	movs	r2, #7
 800f154:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800f156:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800f158:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800f15a:	4770      	bx	lr
 800f15c:	e000ed00 	.word	0xe000ed00

0800f160 <HAL_NVIC_ClearPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800f160:	2800      	cmp	r0, #0
 800f162:	db08      	blt.n	800f176 <HAL_NVIC_ClearPendingIRQ+0x16>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f164:	0943      	lsrs	r3, r0, #5
 800f166:	f000 001f 	and.w	r0, r0, #31
 800f16a:	2201      	movs	r2, #1
 800f16c:	4082      	lsls	r2, r0
 800f16e:	3360      	adds	r3, #96	@ 0x60
 800f170:	4901      	ldr	r1, [pc, #4]	@ (800f178 <HAL_NVIC_ClearPendingIRQ+0x18>)
 800f172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
}
 800f176:	4770      	bx	lr
 800f178:	e000e100 	.word	0xe000e100

0800f17c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800f17c:	b158      	cbz	r0, 800f196 <HAL_CRC_Init+0x1a>
{
 800f17e:	b510      	push	{r4, lr}
 800f180:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800f182:	7943      	ldrb	r3, [r0, #5]
 800f184:	b11b      	cbz	r3, 800f18e <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800f186:	2301      	movs	r3, #1
 800f188:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800f18a:	2000      	movs	r0, #0
}
 800f18c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800f18e:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 800f190:	f7ff fac4 	bl	800e71c <HAL_CRC_MspInit>
 800f194:	e7f7      	b.n	800f186 <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 800f196:	2001      	movs	r0, #1
}
 800f198:	4770      	bx	lr
	...

0800f19c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800f19c:	b410      	push	{r4}
 800f19e:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800f1a0:	6803      	ldr	r3, [r0, #0]
 800f1a2:	b2d8      	uxtb	r0, r3
 800f1a4:	3810      	subs	r0, #16
 800f1a6:	490b      	ldr	r1, [pc, #44]	@ (800f1d4 <DMA_CalcBaseAndBitshift+0x38>)
 800f1a8:	fba1 4100 	umull	r4, r1, r1, r0
 800f1ac:	0909      	lsrs	r1, r1, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800f1ae:	4c0a      	ldr	r4, [pc, #40]	@ (800f1d8 <DMA_CalcBaseAndBitshift+0x3c>)
 800f1b0:	5c61      	ldrb	r1, [r4, r1]
 800f1b2:	65d1      	str	r1, [r2, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800f1b4:	285f      	cmp	r0, #95	@ 0x5f
 800f1b6:	d908      	bls.n	800f1ca <DMA_CalcBaseAndBitshift+0x2e>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800f1b8:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800f1bc:	f023 0303 	bic.w	r3, r3, #3
 800f1c0:	1d18      	adds	r0, r3, #4
 800f1c2:	6590      	str	r0, [r2, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800f1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f1c8:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800f1ca:	f423 707f 	bic.w	r0, r3, #1020	@ 0x3fc
 800f1ce:	f020 0003 	bic.w	r0, r0, #3
 800f1d2:	e7f6      	b.n	800f1c2 <DMA_CalcBaseAndBitshift+0x26>
 800f1d4:	aaaaaaab 	.word	0xaaaaaaab
 800f1d8:	08012028 	.word	0x08012028

0800f1dc <HAL_DMA_Init>:
{
 800f1dc:	b538      	push	{r3, r4, r5, lr}
 800f1de:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800f1e0:	f7ff fc80 	bl	800eae4 <HAL_GetTick>
  if(hdma == NULL)
 800f1e4:	2c00      	cmp	r4, #0
 800f1e6:	f000 808c 	beq.w	800f302 <HAL_DMA_Init+0x126>
 800f1ea:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800f1ec:	2302      	movs	r3, #2
 800f1ee:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800f1f8:	6822      	ldr	r2, [r4, #0]
 800f1fa:	6813      	ldr	r3, [r2, #0]
 800f1fc:	f023 0301 	bic.w	r3, r3, #1
 800f200:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f202:	6823      	ldr	r3, [r4, #0]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	f012 0f01 	tst.w	r2, #1
 800f20a:	d00a      	beq.n	800f222 <HAL_DMA_Init+0x46>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f20c:	f7ff fc6a 	bl	800eae4 <HAL_GetTick>
 800f210:	1b43      	subs	r3, r0, r5
 800f212:	2b05      	cmp	r3, #5
 800f214:	d9f5      	bls.n	800f202 <HAL_DMA_Init+0x26>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f216:	2320      	movs	r3, #32
 800f218:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f21a:	2003      	movs	r0, #3
 800f21c:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 800f220:	bd38      	pop	{r3, r4, r5, pc}
  tmp = hdma->Instance->CR;
 800f222:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f224:	4938      	ldr	r1, [pc, #224]	@ (800f308 <HAL_DMA_Init+0x12c>)
 800f226:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f228:	6862      	ldr	r2, [r4, #4]
 800f22a:	68a0      	ldr	r0, [r4, #8]
 800f22c:	4302      	orrs	r2, r0
 800f22e:	68e0      	ldr	r0, [r4, #12]
 800f230:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f232:	6920      	ldr	r0, [r4, #16]
 800f234:	4302      	orrs	r2, r0
 800f236:	6960      	ldr	r0, [r4, #20]
 800f238:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f23a:	69a0      	ldr	r0, [r4, #24]
 800f23c:	4302      	orrs	r2, r0
 800f23e:	69e0      	ldr	r0, [r4, #28]
 800f240:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800f242:	6a20      	ldr	r0, [r4, #32]
 800f244:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f246:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f248:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800f24a:	2904      	cmp	r1, #4
 800f24c:	d021      	beq.n	800f292 <HAL_DMA_Init+0xb6>
  hdma->Instance->CR = tmp;  
 800f24e:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800f250:	6821      	ldr	r1, [r4, #0]
 800f252:	694a      	ldr	r2, [r1, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800f254:	f022 0207 	bic.w	r2, r2, #7
  tmp |= hdma->Init.FIFOMode;
 800f258:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800f25a:	431a      	orrs	r2, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f25c:	2b04      	cmp	r3, #4
 800f25e:	d10a      	bne.n	800f276 <HAL_DMA_Init+0x9a>
    tmp |= hdma->Init.FIFOThreshold;
 800f260:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800f262:	4302      	orrs	r2, r0
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800f264:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f266:	b133      	cbz	r3, 800f276 <HAL_DMA_Init+0x9a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800f268:	69a5      	ldr	r5, [r4, #24]
 800f26a:	bb3d      	cbnz	r5, 800f2bc <HAL_DMA_Init+0xe0>
  {
    switch (tmp)
 800f26c:	2801      	cmp	r0, #1
 800f26e:	d01f      	beq.n	800f2b0 <HAL_DMA_Init+0xd4>
 800f270:	f030 0002 	bics.w	r0, r0, #2
 800f274:	d012      	beq.n	800f29c <HAL_DMA_Init+0xc0>
  hdma->Instance->FCR = tmp;
 800f276:	614a      	str	r2, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800f278:	4620      	mov	r0, r4
 800f27a:	f7ff ff8f 	bl	800f19c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f27e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800f280:	233f      	movs	r3, #63	@ 0x3f
 800f282:	4093      	lsls	r3, r2
 800f284:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f286:	2000      	movs	r0, #0
 800f288:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800f28a:	2301      	movs	r3, #1
 800f28c:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800f290:	e7c6      	b.n	800f220 <HAL_DMA_Init+0x44>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f292:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f294:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800f296:	4301      	orrs	r1, r0
 800f298:	430a      	orrs	r2, r1
 800f29a:	e7d8      	b.n	800f24e <HAL_DMA_Init+0x72>
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f29c:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d0e8      	beq.n	800f276 <HAL_DMA_Init+0x9a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800f2a4:	2340      	movs	r3, #64	@ 0x40
 800f2a6:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800f2a8:	2001      	movs	r0, #1
 800f2aa:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 800f2ae:	e7b7      	b.n	800f220 <HAL_DMA_Init+0x44>
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f2b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800f2b4:	bf14      	ite	ne
 800f2b6:	2300      	movne	r3, #0
 800f2b8:	2301      	moveq	r3, #1
 800f2ba:	e7f1      	b.n	800f2a0 <HAL_DMA_Init+0xc4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f2bc:	f5b5 5f00 	cmp.w	r5, #8192	@ 0x2000
 800f2c0:	d008      	beq.n	800f2d4 <HAL_DMA_Init+0xf8>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800f2c2:	2802      	cmp	r0, #2
 800f2c4:	d9ee      	bls.n	800f2a4 <HAL_DMA_Init+0xc8>
 800f2c6:	2803      	cmp	r0, #3
 800f2c8:	d1d5      	bne.n	800f276 <HAL_DMA_Init+0x9a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f2ca:	f3c3 6300 	ubfx	r3, r3, #24, #1
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d0d1      	beq.n	800f276 <HAL_DMA_Init+0x9a>
 800f2d2:	e7e7      	b.n	800f2a4 <HAL_DMA_Init+0xc8>
    switch (tmp)
 800f2d4:	2803      	cmp	r0, #3
 800f2d6:	d8ce      	bhi.n	800f276 <HAL_DMA_Init+0x9a>
 800f2d8:	a501      	add	r5, pc, #4	@ (adr r5, 800f2e0 <HAL_DMA_Init+0x104>)
 800f2da:	f855 f020 	ldr.w	pc, [r5, r0, lsl #2]
 800f2de:	bf00      	nop
 800f2e0:	0800f2a5 	.word	0x0800f2a5
 800f2e4:	0800f2f1 	.word	0x0800f2f1
 800f2e8:	0800f2a5 	.word	0x0800f2a5
 800f2ec:	0800f2f7 	.word	0x0800f2f7
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800f2f0:	f3c3 6300 	ubfx	r3, r3, #24, #1
 800f2f4:	e7eb      	b.n	800f2ce <HAL_DMA_Init+0xf2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800f2f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800f2fa:	bf14      	ite	ne
 800f2fc:	2300      	movne	r3, #0
 800f2fe:	2301      	moveq	r3, #1
 800f300:	e7e5      	b.n	800f2ce <HAL_DMA_Init+0xf2>
    return HAL_ERROR;
 800f302:	2001      	movs	r0, #1
 800f304:	e78c      	b.n	800f220 <HAL_DMA_Init+0x44>
 800f306:	bf00      	nop
 800f308:	f010803f 	.word	0xf010803f

0800f30c <HAL_DMA_Start_IT>:
{
 800f30c:	b470      	push	{r4, r5, r6}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f30e:	6d84      	ldr	r4, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 800f310:	f890 c034 	ldrb.w	ip, [r0, #52]	@ 0x34
 800f314:	f1bc 0f01 	cmp.w	ip, #1
 800f318:	d03f      	beq.n	800f39a <HAL_DMA_Start_IT+0x8e>
 800f31a:	f04f 0c01 	mov.w	ip, #1
 800f31e:	f880 c034 	strb.w	ip, [r0, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800f322:	f890 c035 	ldrb.w	ip, [r0, #53]	@ 0x35
 800f326:	fa5f fc8c 	uxtb.w	ip, ip
 800f32a:	f1bc 0f01 	cmp.w	ip, #1
 800f32e:	d005      	beq.n	800f33c <HAL_DMA_Start_IT+0x30>
    __HAL_UNLOCK(hdma);	  
 800f330:	2300      	movs	r3, #0
 800f332:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
    status = HAL_BUSY;
 800f336:	2002      	movs	r0, #2
}
 800f338:	bc70      	pop	{r4, r5, r6}
 800f33a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800f33c:	2502      	movs	r5, #2
 800f33e:	f880 5035 	strb.w	r5, [r0, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800f342:	2500      	movs	r5, #0
 800f344:	6545      	str	r5, [r0, #84]	@ 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800f346:	6806      	ldr	r6, [r0, #0]
 800f348:	6835      	ldr	r5, [r6, #0]
 800f34a:	f425 2580 	bic.w	r5, r5, #262144	@ 0x40000
 800f34e:	6035      	str	r5, [r6, #0]
  hdma->Instance->NDTR = DataLength;
 800f350:	6805      	ldr	r5, [r0, #0]
 800f352:	606b      	str	r3, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800f354:	6883      	ldr	r3, [r0, #8]
 800f356:	2b40      	cmp	r3, #64	@ 0x40
 800f358:	d01a      	beq.n	800f390 <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 800f35a:	6803      	ldr	r3, [r0, #0]
 800f35c:	6099      	str	r1, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800f35e:	6803      	ldr	r3, [r0, #0]
 800f360:	60da      	str	r2, [r3, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f362:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800f364:	233f      	movs	r3, #63	@ 0x3f
 800f366:	4093      	lsls	r3, r2
 800f368:	60a3      	str	r3, [r4, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800f36a:	6802      	ldr	r2, [r0, #0]
 800f36c:	6813      	ldr	r3, [r2, #0]
 800f36e:	f043 0316 	orr.w	r3, r3, #22
 800f372:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800f374:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800f376:	b123      	cbz	r3, 800f382 <HAL_DMA_Start_IT+0x76>
      hdma->Instance->CR  |= DMA_IT_HT;
 800f378:	6802      	ldr	r2, [r0, #0]
 800f37a:	6813      	ldr	r3, [r2, #0]
 800f37c:	f043 0308 	orr.w	r3, r3, #8
 800f380:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 800f382:	6802      	ldr	r2, [r0, #0]
 800f384:	6813      	ldr	r3, [r2, #0]
 800f386:	f043 0301 	orr.w	r3, r3, #1
 800f38a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f38c:	2000      	movs	r0, #0
 800f38e:	e7d3      	b.n	800f338 <HAL_DMA_Start_IT+0x2c>
    hdma->Instance->PAR = DstAddress;
 800f390:	6803      	ldr	r3, [r0, #0]
 800f392:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800f394:	6803      	ldr	r3, [r0, #0]
 800f396:	60d9      	str	r1, [r3, #12]
 800f398:	e7e3      	b.n	800f362 <HAL_DMA_Start_IT+0x56>
  __HAL_LOCK(hdma);
 800f39a:	2002      	movs	r0, #2
 800f39c:	e7cc      	b.n	800f338 <HAL_DMA_Start_IT+0x2c>

0800f39e <HAL_DMA_Abort>:
{
 800f39e:	b570      	push	{r4, r5, r6, lr}
 800f3a0:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f3a2:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 800f3a4:	f7ff fb9e 	bl	800eae4 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f3a8:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	d006      	beq.n	800f3c0 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f3b2:	2380      	movs	r3, #128	@ 0x80
 800f3b4:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_ERROR;
 800f3b6:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800f3be:	bd70      	pop	{r4, r5, r6, pc}
 800f3c0:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f3c2:	6822      	ldr	r2, [r4, #0]
 800f3c4:	6813      	ldr	r3, [r2, #0]
 800f3c6:	f023 0316 	bic.w	r3, r3, #22
 800f3ca:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f3cc:	6822      	ldr	r2, [r4, #0]
 800f3ce:	6953      	ldr	r3, [r2, #20]
 800f3d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f3d4:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f3d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f3d8:	b1cb      	cbz	r3, 800f40e <HAL_DMA_Abort+0x70>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f3da:	6822      	ldr	r2, [r4, #0]
 800f3dc:	6813      	ldr	r3, [r2, #0]
 800f3de:	f023 0308 	bic.w	r3, r3, #8
 800f3e2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800f3e4:	6822      	ldr	r2, [r4, #0]
 800f3e6:	6813      	ldr	r3, [r2, #0]
 800f3e8:	f023 0301 	bic.w	r3, r3, #1
 800f3ec:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	f013 0f01 	tst.w	r3, #1
 800f3f6:	d00e      	beq.n	800f416 <HAL_DMA_Abort+0x78>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f3f8:	f7ff fb74 	bl	800eae4 <HAL_GetTick>
 800f3fc:	1b43      	subs	r3, r0, r5
 800f3fe:	2b05      	cmp	r3, #5
 800f400:	d9f5      	bls.n	800f3ee <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f402:	2320      	movs	r3, #32
 800f404:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f406:	2003      	movs	r0, #3
 800f408:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_TIMEOUT;
 800f40c:	e7d4      	b.n	800f3b8 <HAL_DMA_Abort+0x1a>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f40e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f410:	2b00      	cmp	r3, #0
 800f412:	d1e2      	bne.n	800f3da <HAL_DMA_Abort+0x3c>
 800f414:	e7e6      	b.n	800f3e4 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f416:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800f418:	233f      	movs	r3, #63	@ 0x3f
 800f41a:	4093      	lsls	r3, r2
 800f41c:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800f41e:	2301      	movs	r3, #1
 800f420:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 800f424:	2000      	movs	r0, #0
 800f426:	e7c7      	b.n	800f3b8 <HAL_DMA_Abort+0x1a>

0800f428 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800f428:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	2b02      	cmp	r3, #2
 800f430:	d003      	beq.n	800f43a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800f432:	2380      	movs	r3, #128	@ 0x80
 800f434:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800f436:	2001      	movs	r0, #1
 800f438:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800f43a:	2305      	movs	r3, #5
 800f43c:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 800f440:	6802      	ldr	r2, [r0, #0]
 800f442:	6813      	ldr	r3, [r2, #0]
 800f444:	f023 0301 	bic.w	r3, r3, #1
 800f448:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800f44a:	2000      	movs	r0, #0
}
 800f44c:	4770      	bx	lr
	...

0800f450 <HAL_DMA_IRQHandler>:
{
 800f450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f452:	b083      	sub	sp, #12
 800f454:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800f456:	2300      	movs	r3, #0
 800f458:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f45a:	4b72      	ldr	r3, [pc, #456]	@ (800f624 <HAL_DMA_IRQHandler+0x1d4>)
 800f45c:	681e      	ldr	r6, [r3, #0]
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800f45e:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 800f460:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800f462:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800f464:	2308      	movs	r3, #8
 800f466:	4093      	lsls	r3, r2
 800f468:	422b      	tst	r3, r5
 800f46a:	d010      	beq.n	800f48e <HAL_DMA_IRQHandler+0x3e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800f46c:	6803      	ldr	r3, [r0, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	f012 0f04 	tst.w	r2, #4
 800f474:	d00b      	beq.n	800f48e <HAL_DMA_IRQHandler+0x3e>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	f022 0204 	bic.w	r2, r2, #4
 800f47c:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800f47e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800f480:	2308      	movs	r3, #8
 800f482:	4093      	lsls	r3, r2
 800f484:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800f486:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800f488:	f043 0301 	orr.w	r3, r3, #1
 800f48c:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800f48e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800f490:	2301      	movs	r3, #1
 800f492:	4093      	lsls	r3, r2
 800f494:	422b      	tst	r3, r5
 800f496:	d009      	beq.n	800f4ac <HAL_DMA_IRQHandler+0x5c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800f498:	6822      	ldr	r2, [r4, #0]
 800f49a:	6952      	ldr	r2, [r2, #20]
 800f49c:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800f4a0:	d004      	beq.n	800f4ac <HAL_DMA_IRQHandler+0x5c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800f4a2:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800f4a4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f4a6:	f043 0302 	orr.w	r3, r3, #2
 800f4aa:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800f4ac:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800f4ae:	2304      	movs	r3, #4
 800f4b0:	4093      	lsls	r3, r2
 800f4b2:	422b      	tst	r3, r5
 800f4b4:	d009      	beq.n	800f4ca <HAL_DMA_IRQHandler+0x7a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800f4b6:	6822      	ldr	r2, [r4, #0]
 800f4b8:	6812      	ldr	r2, [r2, #0]
 800f4ba:	f012 0f02 	tst.w	r2, #2
 800f4be:	d004      	beq.n	800f4ca <HAL_DMA_IRQHandler+0x7a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800f4c0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800f4c2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f4c4:	f043 0304 	orr.w	r3, r3, #4
 800f4c8:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800f4ca:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800f4cc:	2310      	movs	r3, #16
 800f4ce:	4093      	lsls	r3, r2
 800f4d0:	422b      	tst	r3, r5
 800f4d2:	d024      	beq.n	800f51e <HAL_DMA_IRQHandler+0xce>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800f4d4:	6822      	ldr	r2, [r4, #0]
 800f4d6:	6812      	ldr	r2, [r2, #0]
 800f4d8:	f012 0f08 	tst.w	r2, #8
 800f4dc:	d01f      	beq.n	800f51e <HAL_DMA_IRQHandler+0xce>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800f4de:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f4e0:	6823      	ldr	r3, [r4, #0]
 800f4e2:	681a      	ldr	r2, [r3, #0]
 800f4e4:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800f4e8:	d00d      	beq.n	800f506 <HAL_DMA_IRQHandler+0xb6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800f4f0:	d104      	bne.n	800f4fc <HAL_DMA_IRQHandler+0xac>
          if(hdma->XferHalfCpltCallback != NULL)
 800f4f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f4f4:	b19b      	cbz	r3, 800f51e <HAL_DMA_IRQHandler+0xce>
            hdma->XferHalfCpltCallback(hdma);
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	4798      	blx	r3
 800f4fa:	e010      	b.n	800f51e <HAL_DMA_IRQHandler+0xce>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800f4fc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f4fe:	b173      	cbz	r3, 800f51e <HAL_DMA_IRQHandler+0xce>
            hdma->XferM1HalfCpltCallback(hdma);
 800f500:	4620      	mov	r0, r4
 800f502:	4798      	blx	r3
 800f504:	e00b      	b.n	800f51e <HAL_DMA_IRQHandler+0xce>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800f50c:	d103      	bne.n	800f516 <HAL_DMA_IRQHandler+0xc6>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	f022 0208 	bic.w	r2, r2, #8
 800f514:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800f516:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f518:	b10b      	cbz	r3, 800f51e <HAL_DMA_IRQHandler+0xce>
          hdma->XferHalfCpltCallback(hdma);
 800f51a:	4620      	mov	r0, r4
 800f51c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800f51e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800f520:	2320      	movs	r3, #32
 800f522:	4093      	lsls	r3, r2
 800f524:	422b      	tst	r3, r5
 800f526:	d055      	beq.n	800f5d4 <HAL_DMA_IRQHandler+0x184>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800f528:	6822      	ldr	r2, [r4, #0]
 800f52a:	6812      	ldr	r2, [r2, #0]
 800f52c:	f012 0f10 	tst.w	r2, #16
 800f530:	d050      	beq.n	800f5d4 <HAL_DMA_IRQHandler+0x184>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800f532:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800f534:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800f538:	b2db      	uxtb	r3, r3
 800f53a:	2b05      	cmp	r3, #5
 800f53c:	d00e      	beq.n	800f55c <HAL_DMA_IRQHandler+0x10c>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800f53e:	6823      	ldr	r3, [r4, #0]
 800f540:	681a      	ldr	r2, [r3, #0]
 800f542:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 800f546:	d033      	beq.n	800f5b0 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800f54e:	d12a      	bne.n	800f5a6 <HAL_DMA_IRQHandler+0x156>
          if(hdma->XferM1CpltCallback != NULL)
 800f550:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800f552:	2b00      	cmp	r3, #0
 800f554:	d03e      	beq.n	800f5d4 <HAL_DMA_IRQHandler+0x184>
            hdma->XferM1CpltCallback(hdma);
 800f556:	4620      	mov	r0, r4
 800f558:	4798      	blx	r3
 800f55a:	e03b      	b.n	800f5d4 <HAL_DMA_IRQHandler+0x184>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800f55c:	6822      	ldr	r2, [r4, #0]
 800f55e:	6813      	ldr	r3, [r2, #0]
 800f560:	f023 0316 	bic.w	r3, r3, #22
 800f564:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800f566:	6822      	ldr	r2, [r4, #0]
 800f568:	6953      	ldr	r3, [r2, #20]
 800f56a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f56e:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f570:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f572:	b1a3      	cbz	r3, 800f59e <HAL_DMA_IRQHandler+0x14e>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800f574:	6822      	ldr	r2, [r4, #0]
 800f576:	6813      	ldr	r3, [r2, #0]
 800f578:	f023 0308 	bic.w	r3, r3, #8
 800f57c:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800f57e:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800f580:	233f      	movs	r3, #63	@ 0x3f
 800f582:	4093      	lsls	r3, r2
 800f584:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800f586:	2301      	movs	r3, #1
 800f588:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 800f58c:	2300      	movs	r3, #0
 800f58e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800f592:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800f594:	2b00      	cmp	r3, #0
 800f596:	d043      	beq.n	800f620 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 800f598:	4620      	mov	r0, r4
 800f59a:	4798      	blx	r3
 800f59c:	e040      	b.n	800f620 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800f59e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d1e7      	bne.n	800f574 <HAL_DMA_IRQHandler+0x124>
 800f5a4:	e7eb      	b.n	800f57e <HAL_DMA_IRQHandler+0x12e>
          if(hdma->XferCpltCallback != NULL)
 800f5a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f5a8:	b1a3      	cbz	r3, 800f5d4 <HAL_DMA_IRQHandler+0x184>
            hdma->XferCpltCallback(hdma);
 800f5aa:	4620      	mov	r0, r4
 800f5ac:	4798      	blx	r3
 800f5ae:	e011      	b.n	800f5d4 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800f5b0:	681a      	ldr	r2, [r3, #0]
 800f5b2:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800f5b6:	d109      	bne.n	800f5cc <HAL_DMA_IRQHandler+0x17c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800f5b8:	681a      	ldr	r2, [r3, #0]
 800f5ba:	f022 0210 	bic.w	r2, r2, #16
 800f5be:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 800f5cc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f5ce:	b10b      	cbz	r3, 800f5d4 <HAL_DMA_IRQHandler+0x184>
          hdma->XferCpltCallback(hdma);
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800f5d4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f5d6:	b31b      	cbz	r3, 800f620 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800f5d8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f5da:	f013 0f01 	tst.w	r3, #1
 800f5de:	d01b      	beq.n	800f618 <HAL_DMA_IRQHandler+0x1c8>
  uint32_t timeout = SystemCoreClock / 9600U;
 800f5e0:	4b11      	ldr	r3, [pc, #68]	@ (800f628 <HAL_DMA_IRQHandler+0x1d8>)
 800f5e2:	fba3 3606 	umull	r3, r6, r3, r6
 800f5e6:	0ab6      	lsrs	r6, r6, #10
      hdma->State = HAL_DMA_STATE_ABORT;
 800f5e8:	2305      	movs	r3, #5
 800f5ea:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800f5ee:	6822      	ldr	r2, [r4, #0]
 800f5f0:	6813      	ldr	r3, [r2, #0]
 800f5f2:	f023 0301 	bic.w	r3, r3, #1
 800f5f6:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800f5f8:	9b01      	ldr	r3, [sp, #4]
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	9301      	str	r3, [sp, #4]
 800f5fe:	42b3      	cmp	r3, r6
 800f600:	d804      	bhi.n	800f60c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800f602:	6823      	ldr	r3, [r4, #0]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	f013 0f01 	tst.w	r3, #1
 800f60a:	d1f5      	bne.n	800f5f8 <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 800f60c:	2301      	movs	r3, #1
 800f60e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800f612:	2300      	movs	r3, #0
 800f614:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 800f618:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f61a:	b10b      	cbz	r3, 800f620 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 800f61c:	4620      	mov	r0, r4
 800f61e:	4798      	blx	r3
}
 800f620:	b003      	add	sp, #12
 800f622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f624:	200000c0 	.word	0x200000c0
 800f628:	1b4e81b5 	.word	0x1b4e81b5

0800f62c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800f62c:	b410      	push	{r4}
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f62e:	490a      	ldr	r1, [pc, #40]	@ (800f658 <FLASH_Program_DoubleWord+0x2c>)
 800f630:	690c      	ldr	r4, [r1, #16]
 800f632:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
 800f636:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800f638:	690c      	ldr	r4, [r1, #16]
 800f63a:	f444 7440 	orr.w	r4, r4, #768	@ 0x300
 800f63e:	610c      	str	r4, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800f640:	690c      	ldr	r4, [r1, #16]
 800f642:	f044 0401 	orr.w	r4, r4, #1
 800f646:	610c      	str	r4, [r1, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 800f648:	6002      	str	r2, [r0, #0]
 800f64a:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 800f64e:	6043      	str	r3, [r0, #4]
}
 800f650:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f654:	4770      	bx	lr
 800f656:	bf00      	nop
 800f658:	40023c00 	.word	0x40023c00

0800f65c <FLASH_Program_Word>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f65c:	4b07      	ldr	r3, [pc, #28]	@ (800f67c <FLASH_Program_Word+0x20>)
 800f65e:	691a      	ldr	r2, [r3, #16]
 800f660:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800f664:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800f666:	691a      	ldr	r2, [r3, #16]
 800f668:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f66c:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800f66e:	691a      	ldr	r2, [r3, #16]
 800f670:	f042 0201 	orr.w	r2, r2, #1
 800f674:	611a      	str	r2, [r3, #16]

  *(__IO uint32_t *)Address = Data;
 800f676:	6001      	str	r1, [r0, #0]
}
 800f678:	4770      	bx	lr
 800f67a:	bf00      	nop
 800f67c:	40023c00 	.word	0x40023c00

0800f680 <FLASH_Program_HalfWord>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f680:	4b07      	ldr	r3, [pc, #28]	@ (800f6a0 <FLASH_Program_HalfWord+0x20>)
 800f682:	691a      	ldr	r2, [r3, #16]
 800f684:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800f688:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800f68a:	691a      	ldr	r2, [r3, #16]
 800f68c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f690:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800f692:	691a      	ldr	r2, [r3, #16]
 800f694:	f042 0201 	orr.w	r2, r2, #1
 800f698:	611a      	str	r2, [r3, #16]

  *(__IO uint16_t *)Address = Data;
 800f69a:	8001      	strh	r1, [r0, #0]
}
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	40023c00 	.word	0x40023c00

0800f6a4 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800f6a4:	4b27      	ldr	r3, [pc, #156]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	f013 0f10 	tst.w	r3, #16
 800f6ac:	d007      	beq.n	800f6be <FLASH_SetErrorCode+0x1a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800f6ae:	4a26      	ldr	r2, [pc, #152]	@ (800f748 <FLASH_SetErrorCode+0xa4>)
 800f6b0:	69d3      	ldr	r3, [r2, #28]
 800f6b2:	f043 0310 	orr.w	r3, r3, #16
 800f6b6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800f6b8:	4b22      	ldr	r3, [pc, #136]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f6ba:	2210      	movs	r2, #16
 800f6bc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800f6be:	4b21      	ldr	r3, [pc, #132]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	f013 0f20 	tst.w	r3, #32
 800f6c6:	d007      	beq.n	800f6d8 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800f6c8:	4a1f      	ldr	r2, [pc, #124]	@ (800f748 <FLASH_SetErrorCode+0xa4>)
 800f6ca:	69d3      	ldr	r3, [r2, #28]
 800f6cc:	f043 0308 	orr.w	r3, r3, #8
 800f6d0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800f6d2:	4b1c      	ldr	r3, [pc, #112]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f6d4:	2220      	movs	r2, #32
 800f6d6:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800f6d8:	4b1a      	ldr	r3, [pc, #104]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800f6e0:	d007      	beq.n	800f6f2 <FLASH_SetErrorCode+0x4e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800f6e2:	4a19      	ldr	r2, [pc, #100]	@ (800f748 <FLASH_SetErrorCode+0xa4>)
 800f6e4:	69d3      	ldr	r3, [r2, #28]
 800f6e6:	f043 0304 	orr.w	r3, r3, #4
 800f6ea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800f6ec:	4b15      	ldr	r3, [pc, #84]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f6ee:	2240      	movs	r2, #64	@ 0x40
 800f6f0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800f6f2:	4b14      	ldr	r3, [pc, #80]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f6f4:	68db      	ldr	r3, [r3, #12]
 800f6f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f6fa:	d007      	beq.n	800f70c <FLASH_SetErrorCode+0x68>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800f6fc:	4a12      	ldr	r2, [pc, #72]	@ (800f748 <FLASH_SetErrorCode+0xa4>)
 800f6fe:	69d3      	ldr	r3, [r2, #28]
 800f700:	f043 0302 	orr.w	r3, r3, #2
 800f704:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800f706:	4b0f      	ldr	r3, [pc, #60]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f708:	2280      	movs	r2, #128	@ 0x80
 800f70a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800f70c:	4b0d      	ldr	r3, [pc, #52]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f70e:	68db      	ldr	r3, [r3, #12]
 800f710:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800f714:	d008      	beq.n	800f728 <FLASH_SetErrorCode+0x84>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800f716:	4a0c      	ldr	r2, [pc, #48]	@ (800f748 <FLASH_SetErrorCode+0xa4>)
 800f718:	69d3      	ldr	r3, [r2, #28]
 800f71a:	f043 0301 	orr.w	r3, r3, #1
 800f71e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800f720:	4b08      	ldr	r3, [pc, #32]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f722:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f726:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800f728:	4b06      	ldr	r3, [pc, #24]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	f013 0f02 	tst.w	r3, #2
 800f730:	d007      	beq.n	800f742 <FLASH_SetErrorCode+0x9e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800f732:	4a05      	ldr	r2, [pc, #20]	@ (800f748 <FLASH_SetErrorCode+0xa4>)
 800f734:	69d3      	ldr	r3, [r2, #28]
 800f736:	f043 0320 	orr.w	r3, r3, #32
 800f73a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800f73c:	4b01      	ldr	r3, [pc, #4]	@ (800f744 <FLASH_SetErrorCode+0xa0>)
 800f73e:	2202      	movs	r2, #2
 800f740:	60da      	str	r2, [r3, #12]
  }
}
 800f742:	4770      	bx	lr
 800f744:	40023c00 	.word	0x40023c00
 800f748:	20000ae4 	.word	0x20000ae4

0800f74c <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f74c:	4b07      	ldr	r3, [pc, #28]	@ (800f76c <HAL_FLASH_Unlock+0x20>)
 800f74e:	691b      	ldr	r3, [r3, #16]
 800f750:	2b00      	cmp	r3, #0
 800f752:	db01      	blt.n	800f758 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800f754:	2000      	movs	r0, #0
}
 800f756:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800f758:	4b04      	ldr	r3, [pc, #16]	@ (800f76c <HAL_FLASH_Unlock+0x20>)
 800f75a:	4a05      	ldr	r2, [pc, #20]	@ (800f770 <HAL_FLASH_Unlock+0x24>)
 800f75c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800f75e:	f102 3288 	add.w	r2, r2, #2290649224	@ 0x88888888
 800f762:	605a      	str	r2, [r3, #4]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800f764:	6918      	ldr	r0, [r3, #16]
 800f766:	0fc0      	lsrs	r0, r0, #31
 800f768:	4770      	bx	lr
 800f76a:	bf00      	nop
 800f76c:	40023c00 	.word	0x40023c00
 800f770:	45670123 	.word	0x45670123

0800f774 <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800f774:	4a03      	ldr	r2, [pc, #12]	@ (800f784 <HAL_FLASH_Lock+0x10>)
 800f776:	6913      	ldr	r3, [r2, #16]
 800f778:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800f77c:	6113      	str	r3, [r2, #16]
}
 800f77e:	2000      	movs	r0, #0
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	40023c00 	.word	0x40023c00

0800f788 <FLASH_WaitForLastOperation>:
{
 800f788:	b570      	push	{r4, r5, r6, lr}
 800f78a:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800f78c:	4b15      	ldr	r3, [pc, #84]	@ (800f7e4 <FLASH_WaitForLastOperation+0x5c>)
 800f78e:	2200      	movs	r2, #0
 800f790:	61da      	str	r2, [r3, #28]
  tickstart = HAL_GetTick();
 800f792:	f7ff f9a7 	bl	800eae4 <HAL_GetTick>
 800f796:	4606      	mov	r6, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800f798:	4d13      	ldr	r5, [pc, #76]	@ (800f7e8 <FLASH_WaitForLastOperation+0x60>)
 800f79a:	68eb      	ldr	r3, [r5, #12]
 800f79c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800f7a0:	d00a      	beq.n	800f7b8 <FLASH_WaitForLastOperation+0x30>
    if (Timeout != HAL_MAX_DELAY)
 800f7a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f7a6:	d0f8      	beq.n	800f79a <FLASH_WaitForLastOperation+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800f7a8:	b1cc      	cbz	r4, 800f7de <FLASH_WaitForLastOperation+0x56>
 800f7aa:	f7ff f99b 	bl	800eae4 <HAL_GetTick>
 800f7ae:	1b80      	subs	r0, r0, r6
 800f7b0:	42a0      	cmp	r0, r4
 800f7b2:	d9f2      	bls.n	800f79a <FLASH_WaitForLastOperation+0x12>
        return HAL_TIMEOUT;
 800f7b4:	2003      	movs	r0, #3
 800f7b6:	e00d      	b.n	800f7d4 <FLASH_WaitForLastOperation+0x4c>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800f7b8:	4b0b      	ldr	r3, [pc, #44]	@ (800f7e8 <FLASH_WaitForLastOperation+0x60>)
 800f7ba:	68db      	ldr	r3, [r3, #12]
 800f7bc:	f013 0f01 	tst.w	r3, #1
 800f7c0:	d002      	beq.n	800f7c8 <FLASH_WaitForLastOperation+0x40>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800f7c2:	4b09      	ldr	r3, [pc, #36]	@ (800f7e8 <FLASH_WaitForLastOperation+0x60>)
 800f7c4:	2201      	movs	r2, #1
 800f7c6:	60da      	str	r2, [r3, #12]
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800f7c8:	4b07      	ldr	r3, [pc, #28]	@ (800f7e8 <FLASH_WaitForLastOperation+0x60>)
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	f413 7ff9 	tst.w	r3, #498	@ 0x1f2
 800f7d0:	d101      	bne.n	800f7d6 <FLASH_WaitForLastOperation+0x4e>
  return HAL_OK;
 800f7d2:	2000      	movs	r0, #0
}
 800f7d4:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800f7d6:	f7ff ff65 	bl	800f6a4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800f7da:	2001      	movs	r0, #1
 800f7dc:	e7fa      	b.n	800f7d4 <FLASH_WaitForLastOperation+0x4c>
        return HAL_TIMEOUT;
 800f7de:	2003      	movs	r0, #3
 800f7e0:	e7f8      	b.n	800f7d4 <FLASH_WaitForLastOperation+0x4c>
 800f7e2:	bf00      	nop
 800f7e4:	20000ae4 	.word	0x20000ae4
 800f7e8:	40023c00 	.word	0x40023c00

0800f7ec <HAL_FLASH_Program>:
{
 800f7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ee:	4615      	mov	r5, r2
  __HAL_LOCK(&pFlash);
 800f7f0:	4a1f      	ldr	r2, [pc, #124]	@ (800f870 <HAL_FLASH_Program+0x84>)
 800f7f2:	7e12      	ldrb	r2, [r2, #24]
 800f7f4:	2a01      	cmp	r2, #1
 800f7f6:	d039      	beq.n	800f86c <HAL_FLASH_Program+0x80>
 800f7f8:	4604      	mov	r4, r0
 800f7fa:	460e      	mov	r6, r1
 800f7fc:	461f      	mov	r7, r3
 800f7fe:	4b1c      	ldr	r3, [pc, #112]	@ (800f870 <HAL_FLASH_Program+0x84>)
 800f800:	2201      	movs	r2, #1
 800f802:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f804:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800f808:	f7ff ffbe 	bl	800f788 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800f80c:	b990      	cbnz	r0, 800f834 <HAL_FLASH_Program+0x48>
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800f80e:	b1ac      	cbz	r4, 800f83c <HAL_FLASH_Program+0x50>
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800f810:	2c01      	cmp	r4, #1
 800f812:	d021      	beq.n	800f858 <HAL_FLASH_Program+0x6c>
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800f814:	2c02      	cmp	r4, #2
 800f816:	d024      	beq.n	800f862 <HAL_FLASH_Program+0x76>
      FLASH_Program_DoubleWord(Address, Data);
 800f818:	462a      	mov	r2, r5
 800f81a:	463b      	mov	r3, r7
 800f81c:	4630      	mov	r0, r6
 800f81e:	f7ff ff05 	bl	800f62c <FLASH_Program_DoubleWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f822:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800f826:	f7ff ffaf 	bl	800f788 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800f82a:	4a12      	ldr	r2, [pc, #72]	@ (800f874 <HAL_FLASH_Program+0x88>)
 800f82c:	6913      	ldr	r3, [r2, #16]
 800f82e:	f023 0301 	bic.w	r3, r3, #1
 800f832:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800f834:	4b0e      	ldr	r3, [pc, #56]	@ (800f870 <HAL_FLASH_Program+0x84>)
 800f836:	2200      	movs	r2, #0
 800f838:	761a      	strb	r2, [r3, #24]
}
 800f83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800f83c:	b2ed      	uxtb	r5, r5
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f83e:	4b0d      	ldr	r3, [pc, #52]	@ (800f874 <HAL_FLASH_Program+0x88>)
 800f840:	691a      	ldr	r2, [r3, #16]
 800f842:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800f846:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800f848:	691a      	ldr	r2, [r3, #16]
 800f84a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800f84c:	691a      	ldr	r2, [r3, #16]
 800f84e:	f042 0201 	orr.w	r2, r2, #1
 800f852:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t *)Address = Data;
 800f854:	7035      	strb	r5, [r6, #0]
}
 800f856:	e7e4      	b.n	800f822 <HAL_FLASH_Program+0x36>
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800f858:	b2a9      	uxth	r1, r5
 800f85a:	4630      	mov	r0, r6
 800f85c:	f7ff ff10 	bl	800f680 <FLASH_Program_HalfWord>
 800f860:	e7df      	b.n	800f822 <HAL_FLASH_Program+0x36>
      FLASH_Program_Word(Address, (uint32_t) Data);
 800f862:	4629      	mov	r1, r5
 800f864:	4630      	mov	r0, r6
 800f866:	f7ff fef9 	bl	800f65c <FLASH_Program_Word>
 800f86a:	e7da      	b.n	800f822 <HAL_FLASH_Program+0x36>
  __HAL_LOCK(&pFlash);
 800f86c:	2002      	movs	r0, #2
 800f86e:	e7e4      	b.n	800f83a <HAL_FLASH_Program+0x4e>
 800f870:	20000ae4 	.word	0x20000ae4
 800f874:	40023c00 	.word	0x40023c00

0800f878 <FLASH_MassErase>:
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f878:	4b07      	ldr	r3, [pc, #28]	@ (800f898 <FLASH_MassErase+0x20>)
 800f87a:	691a      	ldr	r2, [r3, #16]
 800f87c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800f880:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_MER;
 800f882:	691a      	ldr	r2, [r3, #16]
 800f884:	f042 0204 	orr.w	r2, r2, #4
 800f888:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800f88a:	691a      	ldr	r2, [r3, #16]
 800f88c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800f890:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f894:	611a      	str	r2, [r3, #16]
}
 800f896:	4770      	bx	lr
 800f898:	40023c00 	.word	0x40023c00

0800f89c <FLASH_Erase_Sector>:

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800f89c:	2901      	cmp	r1, #1
 800f89e:	d01d      	beq.n	800f8dc <FLASH_Erase_Sector+0x40>
 800f8a0:	2902      	cmp	r1, #2
 800f8a2:	d01e      	beq.n	800f8e2 <FLASH_Erase_Sector+0x46>
  {
    tmp_psize = FLASH_PSIZE_WORD;
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800f8a4:	2900      	cmp	r1, #0
 800f8a6:	bf0c      	ite	eq
 800f8a8:	2100      	moveq	r1, #0
 800f8aa:	f44f 7140 	movne.w	r1, #768	@ 0x300
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800f8ae:	4b0e      	ldr	r3, [pc, #56]	@ (800f8e8 <FLASH_Erase_Sector+0x4c>)
 800f8b0:	691a      	ldr	r2, [r3, #16]
 800f8b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800f8b6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800f8b8:	691a      	ldr	r2, [r3, #16]
 800f8ba:	430a      	orrs	r2, r1
 800f8bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800f8be:	691a      	ldr	r2, [r3, #16]
 800f8c0:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800f8c4:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800f8c6:	691a      	ldr	r2, [r3, #16]
 800f8c8:	ea42 00c0 	orr.w	r0, r2, r0, lsl #3
 800f8cc:	f040 0002 	orr.w	r0, r0, #2
 800f8d0:	6118      	str	r0, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800f8d2:	691a      	ldr	r2, [r3, #16]
 800f8d4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800f8d8:	611a      	str	r2, [r3, #16]
}
 800f8da:	4770      	bx	lr
{
 800f8dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800f8e0:	e7e5      	b.n	800f8ae <FLASH_Erase_Sector+0x12>
 800f8e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f8e6:	e7e2      	b.n	800f8ae <FLASH_Erase_Sector+0x12>
 800f8e8:	40023c00 	.word	0x40023c00

0800f8ec <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 800f8ec:	4b16      	ldr	r3, [pc, #88]	@ (800f948 <FLASH_FlushCaches+0x5c>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800f8f4:	d010      	beq.n	800f918 <FLASH_FlushCaches+0x2c>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800f8f6:	4b14      	ldr	r3, [pc, #80]	@ (800f948 <FLASH_FlushCaches+0x5c>)
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800f8fe:	601a      	str	r2, [r3, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f906:	601a      	str	r2, [r3, #0]
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800f90e:	601a      	str	r2, [r3, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800f910:	681a      	ldr	r2, [r3, #0]
 800f912:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f916:	601a      	str	r2, [r3, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800f918:	4b0b      	ldr	r3, [pc, #44]	@ (800f948 <FLASH_FlushCaches+0x5c>)
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 800f920:	d010      	beq.n	800f944 <FLASH_FlushCaches+0x58>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800f922:	4b09      	ldr	r3, [pc, #36]	@ (800f948 <FLASH_FlushCaches+0x5c>)
 800f924:	681a      	ldr	r2, [r3, #0]
 800f926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f92a:	601a      	str	r2, [r3, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f932:	601a      	str	r2, [r3, #0]
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f93a:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f942:	601a      	str	r2, [r3, #0]
  }
}
 800f944:	4770      	bx	lr
 800f946:	bf00      	nop
 800f948:	40023c00 	.word	0x40023c00

0800f94c <HAL_FLASHEx_Erase>:
{
 800f94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800f950:	4b26      	ldr	r3, [pc, #152]	@ (800f9ec <HAL_FLASHEx_Erase+0xa0>)
 800f952:	7e1b      	ldrb	r3, [r3, #24]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d045      	beq.n	800f9e4 <HAL_FLASHEx_Erase+0x98>
 800f958:	4604      	mov	r4, r0
 800f95a:	460f      	mov	r7, r1
 800f95c:	4b23      	ldr	r3, [pc, #140]	@ (800f9ec <HAL_FLASHEx_Erase+0xa0>)
 800f95e:	2201      	movs	r2, #1
 800f960:	761a      	strb	r2, [r3, #24]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f962:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800f966:	f7ff ff0f 	bl	800f788 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 800f96a:	4681      	mov	r9, r0
 800f96c:	2800      	cmp	r0, #0
 800f96e:	d133      	bne.n	800f9d8 <HAL_FLASHEx_Erase+0x8c>
    *SectorError = 0xFFFFFFFFU;
 800f970:	f04f 33ff 	mov.w	r3, #4294967295
 800f974:	603b      	str	r3, [r7, #0]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800f976:	6823      	ldr	r3, [r4, #0]
 800f978:	2b01      	cmp	r3, #1
 800f97a:	d01b      	beq.n	800f9b4 <HAL_FLASHEx_Erase+0x68>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f97c:	68a5      	ldr	r5, [r4, #8]
 800f97e:	68e3      	ldr	r3, [r4, #12]
 800f980:	442b      	add	r3, r5
 800f982:	429d      	cmp	r5, r3
 800f984:	d226      	bcs.n	800f9d4 <HAL_FLASHEx_Erase+0x88>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f986:	f24c 3850 	movw	r8, #50000	@ 0xc350
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f98a:	4e19      	ldr	r6, [pc, #100]	@ (800f9f0 <HAL_FLASHEx_Erase+0xa4>)
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800f98c:	7c21      	ldrb	r1, [r4, #16]
 800f98e:	4628      	mov	r0, r5
 800f990:	f7ff ff84 	bl	800f89c <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f994:	4640      	mov	r0, r8
 800f996:	f7ff fef7 	bl	800f788 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800f99a:	6933      	ldr	r3, [r6, #16]
 800f99c:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 800f9a0:	6133      	str	r3, [r6, #16]
        if (status != HAL_OK)
 800f9a2:	4681      	mov	r9, r0
 800f9a4:	b9a8      	cbnz	r0, 800f9d2 <HAL_FLASHEx_Erase+0x86>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800f9a6:	3501      	adds	r5, #1
 800f9a8:	68e3      	ldr	r3, [r4, #12]
 800f9aa:	68a2      	ldr	r2, [r4, #8]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	42ab      	cmp	r3, r5
 800f9b0:	d8ec      	bhi.n	800f98c <HAL_FLASHEx_Erase+0x40>
 800f9b2:	e00f      	b.n	800f9d4 <HAL_FLASHEx_Erase+0x88>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800f9b4:	6861      	ldr	r1, [r4, #4]
 800f9b6:	7c20      	ldrb	r0, [r4, #16]
 800f9b8:	f7ff ff5e 	bl	800f878 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800f9bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800f9c0:	f7ff fee2 	bl	800f788 <FLASH_WaitForLastOperation>
 800f9c4:	4681      	mov	r9, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800f9c6:	4a0a      	ldr	r2, [pc, #40]	@ (800f9f0 <HAL_FLASHEx_Erase+0xa4>)
 800f9c8:	6913      	ldr	r3, [r2, #16]
 800f9ca:	f023 0304 	bic.w	r3, r3, #4
 800f9ce:	6113      	str	r3, [r2, #16]
 800f9d0:	e000      	b.n	800f9d4 <HAL_FLASHEx_Erase+0x88>
          *SectorError = index;
 800f9d2:	603d      	str	r5, [r7, #0]
    FLASH_FlushCaches();
 800f9d4:	f7ff ff8a 	bl	800f8ec <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800f9d8:	4b04      	ldr	r3, [pc, #16]	@ (800f9ec <HAL_FLASHEx_Erase+0xa0>)
 800f9da:	2200      	movs	r2, #0
 800f9dc:	761a      	strb	r2, [r3, #24]
}
 800f9de:	4648      	mov	r0, r9
 800f9e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800f9e4:	f04f 0902 	mov.w	r9, #2
 800f9e8:	e7f9      	b.n	800f9de <HAL_FLASHEx_Erase+0x92>
 800f9ea:	bf00      	nop
 800f9ec:	20000ae4 	.word	0x20000ae4
 800f9f0:	40023c00 	.word	0x40023c00

0800f9f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9f8:	b083      	sub	sp, #12
 800f9fa:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800f9fc:	4613      	mov	r3, r2
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800f9fe:	f04f 0e01 	mov.w	lr, #1
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fa02:	2503      	movs	r5, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fa04:	f04f 080f 	mov.w	r8, #15
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800fa08:	4c72      	ldr	r4, [pc, #456]	@ (800fbd4 <HAL_GPIO_Init+0x1e0>)
 800fa0a:	e04b      	b.n	800faa4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800fa0c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800fa0e:	fa05 fa02 	lsl.w	sl, r5, r2
 800fa12:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_Init->Speed << (position * 2U));
 800fa16:	68cf      	ldr	r7, [r1, #12]
 800fa18:	4097      	lsls	r7, r2
 800fa1a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800fa1e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800fa20:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800fa22:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800fa26:	684f      	ldr	r7, [r1, #4]
 800fa28:	f3c7 1700 	ubfx	r7, r7, #4, #1
 800fa2c:	409f      	lsls	r7, r3
 800fa2e:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 800fa32:	6047      	str	r7, [r0, #4]
 800fa34:	e044      	b.n	800fac0 <HAL_GPIO_Init+0xcc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fa36:	f04f 0c00 	mov.w	ip, #0
 800fa3a:	fa0c fc0b 	lsl.w	ip, ip, fp
 800fa3e:	ea4c 0c0a 	orr.w	ip, ip, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fa42:	f8c7 c008 	str.w	ip, [r7, #8]
        temp = EXTI->RTSR;
 800fa46:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800fa48:	ea6f 0c09 	mvn.w	ip, r9
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800fa4c:	684e      	ldr	r6, [r1, #4]
 800fa4e:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~((uint32_t)iocurrent);
 800fa52:	bf0c      	ite	eq
 800fa54:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 800fa58:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->RTSR = temp;
 800fa5c:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 800fa5e:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800fa60:	684e      	ldr	r6, [r1, #4]
 800fa62:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~((uint32_t)iocurrent);
 800fa66:	bf0c      	ite	eq
 800fa68:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 800fa6c:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->FTSR = temp;
 800fa70:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 800fa72:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800fa74:	684e      	ldr	r6, [r1, #4]
 800fa76:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~((uint32_t)iocurrent);
 800fa7a:	bf0c      	ite	eq
 800fa7c:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 800fa80:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->EMR = temp;
 800fa84:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800fa86:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800fa88:	684e      	ldr	r6, [r1, #4]
 800fa8a:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~((uint32_t)iocurrent);
 800fa8e:	bf0c      	ite	eq
 800fa90:	ea0c 0707 	andeq.w	r7, ip, r7
        {
          temp |= iocurrent;
 800fa94:	ea49 0707 	orrne.w	r7, r9, r7
        }
        EXTI->IMR = temp;
 800fa98:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800fa9a:	3301      	adds	r3, #1
 800fa9c:	3202      	adds	r2, #2
 800fa9e:	2b10      	cmp	r3, #16
 800faa0:	f000 8094 	beq.w	800fbcc <HAL_GPIO_Init+0x1d8>
    ioposition = 0x01U << position;
 800faa4:	fa0e fc03 	lsl.w	ip, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800faa8:	680f      	ldr	r7, [r1, #0]
 800faaa:	ea0c 0907 	and.w	r9, ip, r7
    if(iocurrent == ioposition)
 800faae:	ea3c 0707 	bics.w	r7, ip, r7
 800fab2:	d1f2      	bne.n	800fa9a <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800fab4:	684f      	ldr	r7, [r1, #4]
 800fab6:	f007 0703 	and.w	r7, r7, #3
 800faba:	3f01      	subs	r7, #1
 800fabc:	2f01      	cmp	r7, #1
 800fabe:	d9a5      	bls.n	800fa0c <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800fac0:	684f      	ldr	r7, [r1, #4]
 800fac2:	f007 0703 	and.w	r7, r7, #3
 800fac6:	2f03      	cmp	r7, #3
 800fac8:	d023      	beq.n	800fb12 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->PUPDR;
 800faca:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800facc:	fa05 fc02 	lsl.w	ip, r5, r2
 800fad0:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800fad4:	688f      	ldr	r7, [r1, #8]
 800fad6:	4097      	lsls	r7, r2
 800fad8:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->PUPDR = temp;
 800fadc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800fade:	684f      	ldr	r7, [r1, #4]
 800fae0:	f007 0703 	and.w	r7, r7, #3
 800fae4:	2f02      	cmp	r7, #2
 800fae6:	d114      	bne.n	800fb12 <HAL_GPIO_Init+0x11e>
        temp = GPIOx->AFR[position >> 3U];
 800fae8:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800faec:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800faf0:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800faf4:	f003 0b07 	and.w	fp, r3, #7
 800faf8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800fafc:	fa08 fa0b 	lsl.w	sl, r8, fp
 800fb00:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800fb04:	690f      	ldr	r7, [r1, #16]
 800fb06:	fa07 f70b 	lsl.w	r7, r7, fp
 800fb0a:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 800fb0e:	f8cc 7020 	str.w	r7, [ip, #32]
      temp = GPIOx->MODER;
 800fb12:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800fb14:	fa05 fc02 	lsl.w	ip, r5, r2
 800fb18:	ea27 0c0c 	bic.w	ip, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800fb1c:	684f      	ldr	r7, [r1, #4]
 800fb1e:	f007 0703 	and.w	r7, r7, #3
 800fb22:	4097      	lsls	r7, r2
 800fb24:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->MODER = temp;
 800fb28:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800fb2a:	684f      	ldr	r7, [r1, #4]
 800fb2c:	f417 3f40 	tst.w	r7, #196608	@ 0x30000
 800fb30:	d0b3      	beq.n	800fa9a <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800fb32:	2700      	movs	r7, #0
 800fb34:	9701      	str	r7, [sp, #4]
 800fb36:	4e28      	ldr	r6, [pc, #160]	@ (800fbd8 <HAL_GPIO_Init+0x1e4>)
 800fb38:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 800fb3a:	f447 4780 	orr.w	r7, r7, #16384	@ 0x4000
 800fb3e:	6477      	str	r7, [r6, #68]	@ 0x44
 800fb40:	6c77      	ldr	r7, [r6, #68]	@ 0x44
 800fb42:	f407 4780 	and.w	r7, r7, #16384	@ 0x4000
 800fb46:	9701      	str	r7, [sp, #4]
 800fb48:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800fb4a:	f023 0703 	bic.w	r7, r3, #3
 800fb4e:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 800fb52:	f507 379c 	add.w	r7, r7, #79872	@ 0x13800
 800fb56:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800fb5a:	f003 0b03 	and.w	fp, r3, #3
 800fb5e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800fb62:	fa08 fc0b 	lsl.w	ip, r8, fp
 800fb66:	ea2a 0a0c 	bic.w	sl, sl, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800fb6a:	f5a6 5660 	sub.w	r6, r6, #14336	@ 0x3800
 800fb6e:	42b0      	cmp	r0, r6
 800fb70:	f43f af61 	beq.w	800fa36 <HAL_GPIO_Init+0x42>
 800fb74:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800fb78:	42b0      	cmp	r0, r6
 800fb7a:	d018      	beq.n	800fbae <HAL_GPIO_Init+0x1ba>
 800fb7c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800fb80:	42b0      	cmp	r0, r6
 800fb82:	d017      	beq.n	800fbb4 <HAL_GPIO_Init+0x1c0>
 800fb84:	f8df c054 	ldr.w	ip, [pc, #84]	@ 800fbdc <HAL_GPIO_Init+0x1e8>
 800fb88:	4560      	cmp	r0, ip
 800fb8a:	d016      	beq.n	800fbba <HAL_GPIO_Init+0x1c6>
 800fb8c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800fb90:	4560      	cmp	r0, ip
 800fb92:	d015      	beq.n	800fbc0 <HAL_GPIO_Init+0x1cc>
 800fb94:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800fb98:	4560      	cmp	r0, ip
 800fb9a:	d014      	beq.n	800fbc6 <HAL_GPIO_Init+0x1d2>
 800fb9c:	f50c 6c80 	add.w	ip, ip, #1024	@ 0x400
 800fba0:	4560      	cmp	r0, ip
 800fba2:	bf14      	ite	ne
 800fba4:	f04f 0c07 	movne.w	ip, #7
 800fba8:	f04f 0c06 	moveq.w	ip, #6
 800fbac:	e745      	b.n	800fa3a <HAL_GPIO_Init+0x46>
 800fbae:	f04f 0c01 	mov.w	ip, #1
 800fbb2:	e742      	b.n	800fa3a <HAL_GPIO_Init+0x46>
 800fbb4:	f04f 0c02 	mov.w	ip, #2
 800fbb8:	e73f      	b.n	800fa3a <HAL_GPIO_Init+0x46>
 800fbba:	f04f 0c03 	mov.w	ip, #3
 800fbbe:	e73c      	b.n	800fa3a <HAL_GPIO_Init+0x46>
 800fbc0:	f04f 0c04 	mov.w	ip, #4
 800fbc4:	e739      	b.n	800fa3a <HAL_GPIO_Init+0x46>
 800fbc6:	f04f 0c05 	mov.w	ip, #5
 800fbca:	e736      	b.n	800fa3a <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 800fbcc:	b003      	add	sp, #12
 800fbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd2:	bf00      	nop
 800fbd4:	40013c00 	.word	0x40013c00
 800fbd8:	40023800 	.word	0x40023800
 800fbdc:	40020c00 	.word	0x40020c00

0800fbe0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800fbe0:	6903      	ldr	r3, [r0, #16]
 800fbe2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800fbe4:	bf14      	ite	ne
 800fbe6:	2001      	movne	r0, #1
 800fbe8:	2000      	moveq	r0, #0
 800fbea:	4770      	bx	lr

0800fbec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800fbec:	b10a      	cbz	r2, 800fbf2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800fbee:	6181      	str	r1, [r0, #24]
 800fbf0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800fbf2:	0409      	lsls	r1, r1, #16
 800fbf4:	6181      	str	r1, [r0, #24]
  }
}
 800fbf6:	4770      	bx	lr

0800fbf8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800fbf8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800fbfa:	ea01 0203 	and.w	r2, r1, r3
 800fbfe:	ea21 0103 	bic.w	r1, r1, r3
 800fc02:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fc06:	6181      	str	r1, [r0, #24]
}
 800fc08:	4770      	bx	lr
	...

0800fc0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800fc0c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800fc0e:	4b05      	ldr	r3, [pc, #20]	@ (800fc24 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800fc10:	695b      	ldr	r3, [r3, #20]
 800fc12:	4203      	tst	r3, r0
 800fc14:	d100      	bne.n	800fc18 <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 800fc16:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800fc18:	4b02      	ldr	r3, [pc, #8]	@ (800fc24 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 800fc1a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800fc1c:	f001 feb8 	bl	8011990 <HAL_GPIO_EXTI_Callback>
}
 800fc20:	e7f9      	b.n	800fc16 <HAL_GPIO_EXTI_IRQHandler+0xa>
 800fc22:	bf00      	nop
 800fc24:	40013c00 	.word	0x40013c00

0800fc28 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800fc28:	2800      	cmp	r0, #0
 800fc2a:	f000 80b0 	beq.w	800fd8e <HAL_I2C_Init+0x166>
{
 800fc2e:	b570      	push	{r4, r5, r6, lr}
 800fc30:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800fc32:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d073      	beq.n	800fd22 <HAL_I2C_Init+0xfa>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800fc3a:	2324      	movs	r3, #36	@ 0x24
 800fc3c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800fc40:	6822      	ldr	r2, [r4, #0]
 800fc42:	6813      	ldr	r3, [r2, #0]
 800fc44:	f023 0301 	bic.w	r3, r3, #1
 800fc48:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800fc4a:	6822      	ldr	r2, [r4, #0]
 800fc4c:	6813      	ldr	r3, [r2, #0]
 800fc4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fc52:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800fc54:	6822      	ldr	r2, [r4, #0]
 800fc56:	6813      	ldr	r3, [r2, #0]
 800fc58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fc5c:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800fc5e:	f000 f9d1 	bl	8010004 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800fc62:	6862      	ldr	r2, [r4, #4]
 800fc64:	4b4c      	ldr	r3, [pc, #304]	@ (800fd98 <HAL_I2C_Init+0x170>)
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d860      	bhi.n	800fd2c <HAL_I2C_Init+0x104>
 800fc6a:	4b4c      	ldr	r3, [pc, #304]	@ (800fd9c <HAL_I2C_Init+0x174>)
 800fc6c:	4298      	cmp	r0, r3
 800fc6e:	f240 8090 	bls.w	800fd92 <HAL_I2C_Init+0x16a>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800fc72:	494b      	ldr	r1, [pc, #300]	@ (800fda0 <HAL_I2C_Init+0x178>)
 800fc74:	fba1 3100 	umull	r3, r1, r1, r0
 800fc78:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800fc7a:	6825      	ldr	r5, [r4, #0]
 800fc7c:	686a      	ldr	r2, [r5, #4]
 800fc7e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800fc82:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 800fc86:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800fc88:	6821      	ldr	r1, [r4, #0]
 800fc8a:	6a0a      	ldr	r2, [r1, #32]
 800fc8c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800fc90:	4d41      	ldr	r5, [pc, #260]	@ (800fd98 <HAL_I2C_Init+0x170>)
 800fc92:	6866      	ldr	r6, [r4, #4]
 800fc94:	42ae      	cmp	r6, r5
 800fc96:	d84e      	bhi.n	800fd36 <HAL_I2C_Init+0x10e>
 800fc98:	3301      	adds	r3, #1
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800fc9e:	6821      	ldr	r1, [r4, #0]
 800fca0:	69ca      	ldr	r2, [r1, #28]
 800fca2:	f422 424f 	bic.w	r2, r2, #52992	@ 0xcf00
 800fca6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800fcaa:	6865      	ldr	r5, [r4, #4]
 800fcac:	4b3a      	ldr	r3, [pc, #232]	@ (800fd98 <HAL_I2C_Init+0x170>)
 800fcae:	429d      	cmp	r5, r3
 800fcb0:	d84b      	bhi.n	800fd4a <HAL_I2C_Init+0x122>
 800fcb2:	1e43      	subs	r3, r0, #1
 800fcb4:	006d      	lsls	r5, r5, #1
 800fcb6:	fbb3 f3f5 	udiv	r3, r3, r5
 800fcba:	3301      	adds	r3, #1
 800fcbc:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800fcc0:	4203      	tst	r3, r0
 800fcc2:	d05e      	beq.n	800fd82 <HAL_I2C_Init+0x15a>
 800fcc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fcc8:	431a      	orrs	r2, r3
 800fcca:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800fccc:	6821      	ldr	r1, [r4, #0]
 800fcce:	680a      	ldr	r2, [r1, #0]
 800fcd0:	69e3      	ldr	r3, [r4, #28]
 800fcd2:	6a20      	ldr	r0, [r4, #32]
 800fcd4:	4303      	orrs	r3, r0
 800fcd6:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800fcda:	4313      	orrs	r3, r2
 800fcdc:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800fcde:	6821      	ldr	r1, [r4, #0]
 800fce0:	688a      	ldr	r2, [r1, #8]
 800fce2:	6923      	ldr	r3, [r4, #16]
 800fce4:	68e0      	ldr	r0, [r4, #12]
 800fce6:	4303      	orrs	r3, r0
 800fce8:	f422 4203 	bic.w	r2, r2, #33536	@ 0x8300
 800fcec:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800fcf4:	6821      	ldr	r1, [r4, #0]
 800fcf6:	68ca      	ldr	r2, [r1, #12]
 800fcf8:	6963      	ldr	r3, [r4, #20]
 800fcfa:	69a0      	ldr	r0, [r4, #24]
 800fcfc:	4303      	orrs	r3, r0
 800fcfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800fd02:	4313      	orrs	r3, r2
 800fd04:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800fd06:	6822      	ldr	r2, [r4, #0]
 800fd08:	6813      	ldr	r3, [r2, #0]
 800fd0a:	f043 0301 	orr.w	r3, r3, #1
 800fd0e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800fd10:	2000      	movs	r0, #0
 800fd12:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800fd14:	2320      	movs	r3, #32
 800fd16:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800fd1a:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800fd1c:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e

  return HAL_OK;
}
 800fd20:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800fd22:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800fd26:	f7fe fd11 	bl	800e74c <HAL_I2C_MspInit>
 800fd2a:	e786      	b.n	800fc3a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800fd2c:	4b1d      	ldr	r3, [pc, #116]	@ (800fda4 <HAL_I2C_Init+0x17c>)
 800fd2e:	4298      	cmp	r0, r3
 800fd30:	d89f      	bhi.n	800fc72 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 800fd32:	2001      	movs	r0, #1
 800fd34:	e7f4      	b.n	800fd20 <HAL_I2C_Init+0xf8>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800fd36:	f44f 7596 	mov.w	r5, #300	@ 0x12c
 800fd3a:	fb05 f303 	mul.w	r3, r5, r3
 800fd3e:	4d1a      	ldr	r5, [pc, #104]	@ (800fda8 <HAL_I2C_Init+0x180>)
 800fd40:	fba5 5303 	umull	r5, r3, r5, r3
 800fd44:	099b      	lsrs	r3, r3, #6
 800fd46:	3301      	adds	r3, #1
 800fd48:	e7a7      	b.n	800fc9a <HAL_I2C_Init+0x72>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800fd4a:	68a3      	ldr	r3, [r4, #8]
 800fd4c:	b95b      	cbnz	r3, 800fd66 <HAL_I2C_Init+0x13e>
 800fd4e:	1e43      	subs	r3, r0, #1
 800fd50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fd54:	fbb3 f3f5 	udiv	r3, r3, r5
 800fd58:	3301      	adds	r3, #1
 800fd5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fd5e:	b193      	cbz	r3, 800fd86 <HAL_I2C_Init+0x15e>
 800fd60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fd64:	e7b0      	b.n	800fcc8 <HAL_I2C_Init+0xa0>
 800fd66:	1e43      	subs	r3, r0, #1
 800fd68:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800fd6c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800fd70:	fbb3 f3f5 	udiv	r3, r3, r5
 800fd74:	3301      	adds	r3, #1
 800fd76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fd7a:	b133      	cbz	r3, 800fd8a <HAL_I2C_Init+0x162>
 800fd7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fd80:	e7a2      	b.n	800fcc8 <HAL_I2C_Init+0xa0>
 800fd82:	2304      	movs	r3, #4
 800fd84:	e7a0      	b.n	800fcc8 <HAL_I2C_Init+0xa0>
 800fd86:	2301      	movs	r3, #1
 800fd88:	e79e      	b.n	800fcc8 <HAL_I2C_Init+0xa0>
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	e79c      	b.n	800fcc8 <HAL_I2C_Init+0xa0>
    return HAL_ERROR;
 800fd8e:	2001      	movs	r0, #1
}
 800fd90:	4770      	bx	lr
    return HAL_ERROR;
 800fd92:	2001      	movs	r0, #1
 800fd94:	e7c4      	b.n	800fd20 <HAL_I2C_Init+0xf8>
 800fd96:	bf00      	nop
 800fd98:	000186a0 	.word	0x000186a0
 800fd9c:	001e847f 	.word	0x001e847f
 800fda0:	431bde83 	.word	0x431bde83
 800fda4:	003d08ff 	.word	0x003d08ff
 800fda8:	10624dd3 	.word	0x10624dd3

0800fdac <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800fdac:	2800      	cmp	r0, #0
 800fdae:	d030      	beq.n	800fe12 <HAL_IWDG_Init+0x66>
{
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	4604      	mov	r4, r0
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800fdb4:	6803      	ldr	r3, [r0, #0]
 800fdb6:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800fdba:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800fdbc:	6803      	ldr	r3, [r0, #0]
 800fdbe:	f245 5255 	movw	r2, #21845	@ 0x5555
 800fdc2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800fdc4:	6803      	ldr	r3, [r0, #0]
 800fdc6:	6842      	ldr	r2, [r0, #4]
 800fdc8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800fdca:	6803      	ldr	r3, [r0, #0]
 800fdcc:	6882      	ldr	r2, [r0, #8]
 800fdce:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800fdd0:	f7fe fe88 	bl	800eae4 <HAL_GetTick>
 800fdd4:	4605      	mov	r5, r0

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800fdd6:	6823      	ldr	r3, [r4, #0]
 800fdd8:	68da      	ldr	r2, [r3, #12]
 800fdda:	f012 0f03 	tst.w	r2, #3
 800fdde:	d013      	beq.n	800fe08 <HAL_IWDG_Init+0x5c>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800fde0:	f641 0601 	movw	r6, #6145	@ 0x1801
 800fde4:	e004      	b.n	800fdf0 <HAL_IWDG_Init+0x44>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800fde6:	6823      	ldr	r3, [r4, #0]
 800fde8:	68da      	ldr	r2, [r3, #12]
 800fdea:	f012 0f03 	tst.w	r2, #3
 800fdee:	d00b      	beq.n	800fe08 <HAL_IWDG_Init+0x5c>
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800fdf0:	f7fe fe78 	bl	800eae4 <HAL_GetTick>
 800fdf4:	1b40      	subs	r0, r0, r5
 800fdf6:	42b0      	cmp	r0, r6
 800fdf8:	d9f5      	bls.n	800fde6 <HAL_IWDG_Init+0x3a>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	68db      	ldr	r3, [r3, #12]
 800fdfe:	f013 0f03 	tst.w	r3, #3
 800fe02:	d0f0      	beq.n	800fde6 <HAL_IWDG_Init+0x3a>
      {
        return HAL_TIMEOUT;
 800fe04:	2003      	movs	r0, #3
 800fe06:	e003      	b.n	800fe10 <HAL_IWDG_Init+0x64>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800fe08:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800fe0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800fe0e:	2000      	movs	r0, #0
}
 800fe10:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800fe12:	2001      	movs	r0, #1
}
 800fe14:	4770      	bx	lr

0800fe16 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800fe16:	6803      	ldr	r3, [r0, #0]
 800fe18:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800fe1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800fe1e:	2000      	movs	r0, #0
 800fe20:	4770      	bx	lr
	...

0800fe24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800fe24:	b530      	push	{r4, r5, lr}
 800fe26:	b083      	sub	sp, #12
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800fe28:	2300      	movs	r3, #0
 800fe2a:	9301      	str	r3, [sp, #4]
 800fe2c:	4b19      	ldr	r3, [pc, #100]	@ (800fe94 <HAL_PWREx_EnableOverDrive+0x70>)
 800fe2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800fe30:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800fe34:	641a      	str	r2, [r3, #64]	@ 0x40
 800fe36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800fe3c:	9301      	str	r3, [sp, #4]
 800fe3e:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800fe40:	4b15      	ldr	r3, [pc, #84]	@ (800fe98 <HAL_PWREx_EnableOverDrive+0x74>)
 800fe42:	2201      	movs	r2, #1
 800fe44:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 800fe46:	f7fe fe4d 	bl	800eae4 <HAL_GetTick>
 800fe4a:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800fe4c:	4d13      	ldr	r5, [pc, #76]	@ (800fe9c <HAL_PWREx_EnableOverDrive+0x78>)
 800fe4e:	686b      	ldr	r3, [r5, #4]
 800fe50:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800fe54:	d108      	bne.n	800fe68 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800fe56:	f7fe fe45 	bl	800eae4 <HAL_GetTick>
 800fe5a:	1b00      	subs	r0, r0, r4
 800fe5c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800fe60:	d9f5      	bls.n	800fe4e <HAL_PWREx_EnableOverDrive+0x2a>
    {
      return HAL_TIMEOUT;
 800fe62:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800fe64:	b003      	add	sp, #12
 800fe66:	bd30      	pop	{r4, r5, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800fe68:	4b0b      	ldr	r3, [pc, #44]	@ (800fe98 <HAL_PWREx_EnableOverDrive+0x74>)
 800fe6a:	2201      	movs	r2, #1
 800fe6c:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 800fe6e:	f7fe fe39 	bl	800eae4 <HAL_GetTick>
 800fe72:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800fe74:	4d09      	ldr	r5, [pc, #36]	@ (800fe9c <HAL_PWREx_EnableOverDrive+0x78>)
 800fe76:	686b      	ldr	r3, [r5, #4]
 800fe78:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800fe7c:	d107      	bne.n	800fe8e <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800fe7e:	f7fe fe31 	bl	800eae4 <HAL_GetTick>
 800fe82:	1b00      	subs	r0, r0, r4
 800fe84:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800fe88:	d9f5      	bls.n	800fe76 <HAL_PWREx_EnableOverDrive+0x52>
      return HAL_TIMEOUT;
 800fe8a:	2003      	movs	r0, #3
 800fe8c:	e7ea      	b.n	800fe64 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 800fe8e:	2000      	movs	r0, #0
 800fe90:	e7e8      	b.n	800fe64 <HAL_PWREx_EnableOverDrive+0x40>
 800fe92:	bf00      	nop
 800fe94:	40023800 	.word	0x40023800
 800fe98:	420e0000 	.word	0x420e0000
 800fe9c:	40007000 	.word	0x40007000

0800fea0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fea0:	2800      	cmp	r0, #0
 800fea2:	f000 809d 	beq.w	800ffe0 <HAL_RCC_ClockConfig+0x140>
{
 800fea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800feaa:	460d      	mov	r5, r1
 800feac:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800feae:	4b50      	ldr	r3, [pc, #320]	@ (800fff0 <HAL_RCC_ClockConfig+0x150>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f003 030f 	and.w	r3, r3, #15
 800feb6:	428b      	cmp	r3, r1
 800feb8:	d208      	bcs.n	800fecc <HAL_RCC_ClockConfig+0x2c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800feba:	b2cb      	uxtb	r3, r1
 800febc:	4a4c      	ldr	r2, [pc, #304]	@ (800fff0 <HAL_RCC_ClockConfig+0x150>)
 800febe:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fec0:	6813      	ldr	r3, [r2, #0]
 800fec2:	f003 030f 	and.w	r3, r3, #15
 800fec6:	428b      	cmp	r3, r1
 800fec8:	f040 808c 	bne.w	800ffe4 <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fecc:	6823      	ldr	r3, [r4, #0]
 800fece:	f013 0f02 	tst.w	r3, #2
 800fed2:	d017      	beq.n	800ff04 <HAL_RCC_ClockConfig+0x64>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fed4:	f013 0f04 	tst.w	r3, #4
 800fed8:	d004      	beq.n	800fee4 <HAL_RCC_ClockConfig+0x44>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800feda:	4a46      	ldr	r2, [pc, #280]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
 800fedc:	6893      	ldr	r3, [r2, #8]
 800fede:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800fee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fee4:	6823      	ldr	r3, [r4, #0]
 800fee6:	f013 0f08 	tst.w	r3, #8
 800feea:	d004      	beq.n	800fef6 <HAL_RCC_ClockConfig+0x56>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800feec:	4a41      	ldr	r2, [pc, #260]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
 800feee:	6893      	ldr	r3, [r2, #8]
 800fef0:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800fef4:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fef6:	4a3f      	ldr	r2, [pc, #252]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
 800fef8:	6893      	ldr	r3, [r2, #8]
 800fefa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fefe:	68a1      	ldr	r1, [r4, #8]
 800ff00:	430b      	orrs	r3, r1
 800ff02:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ff04:	6823      	ldr	r3, [r4, #0]
 800ff06:	f013 0f01 	tst.w	r3, #1
 800ff0a:	d032      	beq.n	800ff72 <HAL_RCC_ClockConfig+0xd2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ff0c:	6862      	ldr	r2, [r4, #4]
 800ff0e:	2a01      	cmp	r2, #1
 800ff10:	d021      	beq.n	800ff56 <HAL_RCC_ClockConfig+0xb6>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ff12:	1e93      	subs	r3, r2, #2
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d925      	bls.n	800ff64 <HAL_RCC_ClockConfig+0xc4>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ff18:	4b36      	ldr	r3, [pc, #216]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f013 0f02 	tst.w	r3, #2
 800ff20:	d062      	beq.n	800ffe8 <HAL_RCC_ClockConfig+0x148>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ff22:	4934      	ldr	r1, [pc, #208]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
 800ff24:	688b      	ldr	r3, [r1, #8]
 800ff26:	f023 0303 	bic.w	r3, r3, #3
 800ff2a:	4313      	orrs	r3, r2
 800ff2c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ff2e:	f7fe fdd9 	bl	800eae4 <HAL_GetTick>
 800ff32:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ff34:	4f2f      	ldr	r7, [pc, #188]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ff36:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	f003 030c 	and.w	r3, r3, #12
 800ff40:	6862      	ldr	r2, [r4, #4]
 800ff42:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800ff46:	d014      	beq.n	800ff72 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ff48:	f7fe fdcc 	bl	800eae4 <HAL_GetTick>
 800ff4c:	1b80      	subs	r0, r0, r6
 800ff4e:	4540      	cmp	r0, r8
 800ff50:	d9f3      	bls.n	800ff3a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_TIMEOUT;
 800ff52:	2003      	movs	r0, #3
 800ff54:	e042      	b.n	800ffdc <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ff56:	4b27      	ldr	r3, [pc, #156]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800ff5e:	d1e0      	bne.n	800ff22 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800ff60:	2001      	movs	r0, #1
 800ff62:	e03b      	b.n	800ffdc <HAL_RCC_ClockConfig+0x13c>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ff64:	4b23      	ldr	r3, [pc, #140]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800ff6c:	d1d9      	bne.n	800ff22 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800ff6e:	2001      	movs	r0, #1
 800ff70:	e034      	b.n	800ffdc <HAL_RCC_ClockConfig+0x13c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ff72:	4b1f      	ldr	r3, [pc, #124]	@ (800fff0 <HAL_RCC_ClockConfig+0x150>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f003 030f 	and.w	r3, r3, #15
 800ff7a:	42ab      	cmp	r3, r5
 800ff7c:	d907      	bls.n	800ff8e <HAL_RCC_ClockConfig+0xee>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ff7e:	b2ea      	uxtb	r2, r5
 800ff80:	4b1b      	ldr	r3, [pc, #108]	@ (800fff0 <HAL_RCC_ClockConfig+0x150>)
 800ff82:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f003 030f 	and.w	r3, r3, #15
 800ff8a:	42ab      	cmp	r3, r5
 800ff8c:	d12e      	bne.n	800ffec <HAL_RCC_ClockConfig+0x14c>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ff8e:	6823      	ldr	r3, [r4, #0]
 800ff90:	f013 0f04 	tst.w	r3, #4
 800ff94:	d006      	beq.n	800ffa4 <HAL_RCC_ClockConfig+0x104>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ff96:	4a17      	ldr	r2, [pc, #92]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
 800ff98:	6893      	ldr	r3, [r2, #8]
 800ff9a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800ff9e:	68e1      	ldr	r1, [r4, #12]
 800ffa0:	430b      	orrs	r3, r1
 800ffa2:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ffa4:	6823      	ldr	r3, [r4, #0]
 800ffa6:	f013 0f08 	tst.w	r3, #8
 800ffaa:	d007      	beq.n	800ffbc <HAL_RCC_ClockConfig+0x11c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ffac:	4a11      	ldr	r2, [pc, #68]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
 800ffae:	6893      	ldr	r3, [r2, #8]
 800ffb0:	6921      	ldr	r1, [r4, #16]
 800ffb2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800ffb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800ffba:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800ffbc:	f000 f842 	bl	8010044 <HAL_RCC_GetSysClockFreq>
 800ffc0:	4b0c      	ldr	r3, [pc, #48]	@ (800fff4 <HAL_RCC_ClockConfig+0x154>)
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800ffc8:	4a0b      	ldr	r2, [pc, #44]	@ (800fff8 <HAL_RCC_ClockConfig+0x158>)
 800ffca:	5cd3      	ldrb	r3, [r2, r3]
 800ffcc:	40d8      	lsrs	r0, r3
 800ffce:	4b0b      	ldr	r3, [pc, #44]	@ (800fffc <HAL_RCC_ClockConfig+0x15c>)
 800ffd0:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800ffd2:	4b0b      	ldr	r3, [pc, #44]	@ (8010000 <HAL_RCC_ClockConfig+0x160>)
 800ffd4:	6818      	ldr	r0, [r3, #0]
 800ffd6:	f7fe fd39 	bl	800ea4c <HAL_InitTick>

  return HAL_OK;
 800ffda:	2000      	movs	r0, #0
}
 800ffdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800ffe0:	2001      	movs	r0, #1
}
 800ffe2:	4770      	bx	lr
      return HAL_ERROR;
 800ffe4:	2001      	movs	r0, #1
 800ffe6:	e7f9      	b.n	800ffdc <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 800ffe8:	2001      	movs	r0, #1
 800ffea:	e7f7      	b.n	800ffdc <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 800ffec:	2001      	movs	r0, #1
 800ffee:	e7f5      	b.n	800ffdc <HAL_RCC_ClockConfig+0x13c>
 800fff0:	40023c00 	.word	0x40023c00
 800fff4:	40023800 	.word	0x40023800
 800fff8:	08012018 	.word	0x08012018
 800fffc:	200000c0 	.word	0x200000c0
 8010000:	200000c8 	.word	0x200000c8

08010004 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8010004:	4b04      	ldr	r3, [pc, #16]	@ (8010018 <HAL_RCC_GetPCLK1Freq+0x14>)
 8010006:	689b      	ldr	r3, [r3, #8]
 8010008:	f3c3 2382 	ubfx	r3, r3, #10, #3
 801000c:	4a03      	ldr	r2, [pc, #12]	@ (801001c <HAL_RCC_GetPCLK1Freq+0x18>)
 801000e:	5cd3      	ldrb	r3, [r2, r3]
 8010010:	4a03      	ldr	r2, [pc, #12]	@ (8010020 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8010012:	6810      	ldr	r0, [r2, #0]
}
 8010014:	40d8      	lsrs	r0, r3
 8010016:	4770      	bx	lr
 8010018:	40023800 	.word	0x40023800
 801001c:	08012010 	.word	0x08012010
 8010020:	200000c0 	.word	0x200000c0

08010024 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8010024:	4b04      	ldr	r3, [pc, #16]	@ (8010038 <HAL_RCC_GetPCLK2Freq+0x14>)
 8010026:	689b      	ldr	r3, [r3, #8]
 8010028:	f3c3 3342 	ubfx	r3, r3, #13, #3
 801002c:	4a03      	ldr	r2, [pc, #12]	@ (801003c <HAL_RCC_GetPCLK2Freq+0x18>)
 801002e:	5cd3      	ldrb	r3, [r2, r3]
 8010030:	4a03      	ldr	r2, [pc, #12]	@ (8010040 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8010032:	6810      	ldr	r0, [r2, #0]
}
 8010034:	40d8      	lsrs	r0, r3
 8010036:	4770      	bx	lr
 8010038:	40023800 	.word	0x40023800
 801003c:	08012010 	.word	0x08012010
 8010040:	200000c0 	.word	0x200000c0

08010044 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010044:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010046:	4b46      	ldr	r3, [pc, #280]	@ (8010160 <HAL_RCC_GetSysClockFreq+0x11c>)
 8010048:	689b      	ldr	r3, [r3, #8]
 801004a:	f003 030c 	and.w	r3, r3, #12
 801004e:	2b08      	cmp	r3, #8
 8010050:	d007      	beq.n	8010062 <HAL_RCC_GetSysClockFreq+0x1e>
 8010052:	2b0c      	cmp	r3, #12
 8010054:	d045      	beq.n	80100e2 <HAL_RCC_GetSysClockFreq+0x9e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010056:	4843      	ldr	r0, [pc, #268]	@ (8010164 <HAL_RCC_GetSysClockFreq+0x120>)
 8010058:	4a43      	ldr	r2, [pc, #268]	@ (8010168 <HAL_RCC_GetSysClockFreq+0x124>)
 801005a:	2b04      	cmp	r3, #4
 801005c:	bf18      	it	ne
 801005e:	4610      	movne	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8010060:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010062:	4b3f      	ldr	r3, [pc, #252]	@ (8010160 <HAL_RCC_GetSysClockFreq+0x11c>)
 8010064:	685a      	ldr	r2, [r3, #4]
 8010066:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8010070:	d012      	beq.n	8010098 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010072:	4b3b      	ldr	r3, [pc, #236]	@ (8010160 <HAL_RCC_GetSysClockFreq+0x11c>)
 8010074:	6859      	ldr	r1, [r3, #4]
 8010076:	f3c1 1188 	ubfx	r1, r1, #6, #9
 801007a:	483a      	ldr	r0, [pc, #232]	@ (8010164 <HAL_RCC_GetSysClockFreq+0x120>)
 801007c:	2300      	movs	r3, #0
 801007e:	fba1 0100 	umull	r0, r1, r1, r0
 8010082:	f7fc fcff 	bl	800ca84 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8010086:	4b36      	ldr	r3, [pc, #216]	@ (8010160 <HAL_RCC_GetSysClockFreq+0x11c>)
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 801008e:	3301      	adds	r3, #1
 8010090:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8010092:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8010096:	e7e3      	b.n	8010060 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010098:	4b31      	ldr	r3, [pc, #196]	@ (8010160 <HAL_RCC_GetSysClockFreq+0x11c>)
 801009a:	6858      	ldr	r0, [r3, #4]
 801009c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80100a0:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80100a4:	ebbc 0c00 	subs.w	ip, ip, r0
 80100a8:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80100ac:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80100b0:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80100b4:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80100b8:	ebb1 010c 	subs.w	r1, r1, ip
 80100bc:	eb63 030e 	sbc.w	r3, r3, lr
 80100c0:	00db      	lsls	r3, r3, #3
 80100c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80100c6:	00c9      	lsls	r1, r1, #3
 80100c8:	eb11 0c00 	adds.w	ip, r1, r0
 80100cc:	f143 0300 	adc.w	r3, r3, #0
 80100d0:	0299      	lsls	r1, r3, #10
 80100d2:	2300      	movs	r3, #0
 80100d4:	ea4f 208c 	mov.w	r0, ip, lsl #10
 80100d8:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 80100dc:	f7fc fcd2 	bl	800ca84 <__aeabi_uldivmod>
 80100e0:	e7d1      	b.n	8010086 <HAL_RCC_GetSysClockFreq+0x42>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80100e2:	4b1f      	ldr	r3, [pc, #124]	@ (8010160 <HAL_RCC_GetSysClockFreq+0x11c>)
 80100e4:	685a      	ldr	r2, [r3, #4]
 80100e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80100f0:	d010      	beq.n	8010114 <HAL_RCC_GetSysClockFreq+0xd0>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80100f2:	4b1b      	ldr	r3, [pc, #108]	@ (8010160 <HAL_RCC_GetSysClockFreq+0x11c>)
 80100f4:	6859      	ldr	r1, [r3, #4]
 80100f6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80100fa:	481a      	ldr	r0, [pc, #104]	@ (8010164 <HAL_RCC_GetSysClockFreq+0x120>)
 80100fc:	2300      	movs	r3, #0
 80100fe:	fba1 0100 	umull	r0, r1, r1, r0
 8010102:	f7fc fcbf 	bl	800ca84 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8010106:	4b16      	ldr	r3, [pc, #88]	@ (8010160 <HAL_RCC_GetSysClockFreq+0x11c>)
 8010108:	685b      	ldr	r3, [r3, #4]
 801010a:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 801010e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8010112:	e7a5      	b.n	8010060 <HAL_RCC_GetSysClockFreq+0x1c>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010114:	4b12      	ldr	r3, [pc, #72]	@ (8010160 <HAL_RCC_GetSysClockFreq+0x11c>)
 8010116:	6858      	ldr	r0, [r3, #4]
 8010118:	f3c0 1088 	ubfx	r0, r0, #6, #9
 801011c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8010120:	ebbc 0c00 	subs.w	ip, ip, r0
 8010124:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8010128:	ea4f 138e 	mov.w	r3, lr, lsl #6
 801012c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8010130:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8010134:	ebb1 010c 	subs.w	r1, r1, ip
 8010138:	eb63 030e 	sbc.w	r3, r3, lr
 801013c:	00db      	lsls	r3, r3, #3
 801013e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010142:	00c9      	lsls	r1, r1, #3
 8010144:	eb11 0c00 	adds.w	ip, r1, r0
 8010148:	f143 0300 	adc.w	r3, r3, #0
 801014c:	0299      	lsls	r1, r3, #10
 801014e:	2300      	movs	r3, #0
 8010150:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8010154:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8010158:	f7fc fc94 	bl	800ca84 <__aeabi_uldivmod>
 801015c:	e7d3      	b.n	8010106 <HAL_RCC_GetSysClockFreq+0xc2>
 801015e:	bf00      	nop
 8010160:	40023800 	.word	0x40023800
 8010164:	017d7840 	.word	0x017d7840
 8010168:	00f42400 	.word	0x00f42400

0801016c <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801016c:	2800      	cmp	r0, #0
 801016e:	f000 8204 	beq.w	801057a <HAL_RCC_OscConfig+0x40e>
{
 8010172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801017a:	6803      	ldr	r3, [r0, #0]
 801017c:	f013 0f01 	tst.w	r3, #1
 8010180:	d041      	beq.n	8010206 <HAL_RCC_OscConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8010182:	4b9a      	ldr	r3, [pc, #616]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010184:	689b      	ldr	r3, [r3, #8]
 8010186:	f003 030c 	and.w	r3, r3, #12
 801018a:	2b04      	cmp	r3, #4
 801018c:	d032      	beq.n	80101f4 <HAL_RCC_OscConfig+0x88>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 801018e:	4b97      	ldr	r3, [pc, #604]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010190:	689b      	ldr	r3, [r3, #8]
 8010192:	f003 030c 	and.w	r3, r3, #12
        || \
 8010196:	2b08      	cmp	r3, #8
 8010198:	d027      	beq.n	80101ea <HAL_RCC_OscConfig+0x7e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801019a:	4b94      	ldr	r3, [pc, #592]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 801019c:	689b      	ldr	r3, [r3, #8]
 801019e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80101a2:	2b0c      	cmp	r3, #12
 80101a4:	d059      	beq.n	801025a <HAL_RCC_OscConfig+0xee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80101a6:	6863      	ldr	r3, [r4, #4]
 80101a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80101ac:	d05b      	beq.n	8010266 <HAL_RCC_OscConfig+0xfa>
 80101ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80101b2:	d05e      	beq.n	8010272 <HAL_RCC_OscConfig+0x106>
 80101b4:	4b8d      	ldr	r3, [pc, #564]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80101bc:	601a      	str	r2, [r3, #0]
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80101c4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80101c6:	6863      	ldr	r3, [r4, #4]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d05c      	beq.n	8010286 <HAL_RCC_OscConfig+0x11a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80101cc:	f7fe fc8a 	bl	800eae4 <HAL_GetTick>
 80101d0:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80101d2:	4e86      	ldr	r6, [pc, #536]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 80101d4:	6833      	ldr	r3, [r6, #0]
 80101d6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80101da:	d114      	bne.n	8010206 <HAL_RCC_OscConfig+0x9a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80101dc:	f7fe fc82 	bl	800eae4 <HAL_GetTick>
 80101e0:	1b40      	subs	r0, r0, r5
 80101e2:	2864      	cmp	r0, #100	@ 0x64
 80101e4:	d9f6      	bls.n	80101d4 <HAL_RCC_OscConfig+0x68>
          {
            return HAL_TIMEOUT;
 80101e6:	2003      	movs	r0, #3
 80101e8:	e1ce      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80101ea:	4b80      	ldr	r3, [pc, #512]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80101f2:	d0d2      	beq.n	801019a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80101f4:	4b7d      	ldr	r3, [pc, #500]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80101fc:	d003      	beq.n	8010206 <HAL_RCC_OscConfig+0x9a>
 80101fe:	6863      	ldr	r3, [r4, #4]
 8010200:	2b00      	cmp	r3, #0
 8010202:	f000 81bc 	beq.w	801057e <HAL_RCC_OscConfig+0x412>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010206:	6823      	ldr	r3, [r4, #0]
 8010208:	f013 0f02 	tst.w	r3, #2
 801020c:	d060      	beq.n	80102d0 <HAL_RCC_OscConfig+0x164>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801020e:	4b77      	ldr	r3, [pc, #476]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	f013 0f0c 	tst.w	r3, #12
 8010216:	d04a      	beq.n	80102ae <HAL_RCC_OscConfig+0x142>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8010218:	4b74      	ldr	r3, [pc, #464]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	f003 030c 	and.w	r3, r3, #12
        || \
 8010220:	2b08      	cmp	r3, #8
 8010222:	d03f      	beq.n	80102a4 <HAL_RCC_OscConfig+0x138>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010224:	4b71      	ldr	r3, [pc, #452]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010226:	689b      	ldr	r3, [r3, #8]
 8010228:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 801022c:	2b0c      	cmp	r3, #12
 801022e:	d069      	beq.n	8010304 <HAL_RCC_OscConfig+0x198>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010230:	68e3      	ldr	r3, [r4, #12]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d075      	beq.n	8010322 <HAL_RCC_OscConfig+0x1b6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010236:	4b6e      	ldr	r3, [pc, #440]	@ (80103f0 <HAL_RCC_OscConfig+0x284>)
 8010238:	2201      	movs	r2, #1
 801023a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801023c:	f7fe fc52 	bl	800eae4 <HAL_GetTick>
 8010240:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010242:	4e6a      	ldr	r6, [pc, #424]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010244:	6833      	ldr	r3, [r6, #0]
 8010246:	f013 0f02 	tst.w	r3, #2
 801024a:	d161      	bne.n	8010310 <HAL_RCC_OscConfig+0x1a4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801024c:	f7fe fc4a 	bl	800eae4 <HAL_GetTick>
 8010250:	1b40      	subs	r0, r0, r5
 8010252:	2802      	cmp	r0, #2
 8010254:	d9f6      	bls.n	8010244 <HAL_RCC_OscConfig+0xd8>
          {
            return HAL_TIMEOUT;
 8010256:	2003      	movs	r0, #3
 8010258:	e196      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801025a:	4b64      	ldr	r3, [pc, #400]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8010262:	d0a0      	beq.n	80101a6 <HAL_RCC_OscConfig+0x3a>
 8010264:	e7c6      	b.n	80101f4 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010266:	4a61      	ldr	r2, [pc, #388]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010268:	6813      	ldr	r3, [r2, #0]
 801026a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801026e:	6013      	str	r3, [r2, #0]
 8010270:	e7a9      	b.n	80101c6 <HAL_RCC_OscConfig+0x5a>
 8010272:	4b5e      	ldr	r3, [pc, #376]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010274:	681a      	ldr	r2, [r3, #0]
 8010276:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801027a:	601a      	str	r2, [r3, #0]
 801027c:	681a      	ldr	r2, [r3, #0]
 801027e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8010282:	601a      	str	r2, [r3, #0]
 8010284:	e79f      	b.n	80101c6 <HAL_RCC_OscConfig+0x5a>
        tickstart = HAL_GetTick();
 8010286:	f7fe fc2d 	bl	800eae4 <HAL_GetTick>
 801028a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801028c:	4e57      	ldr	r6, [pc, #348]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 801028e:	6833      	ldr	r3, [r6, #0]
 8010290:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8010294:	d0b7      	beq.n	8010206 <HAL_RCC_OscConfig+0x9a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010296:	f7fe fc25 	bl	800eae4 <HAL_GetTick>
 801029a:	1b40      	subs	r0, r0, r5
 801029c:	2864      	cmp	r0, #100	@ 0x64
 801029e:	d9f6      	bls.n	801028e <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80102a0:	2003      	movs	r0, #3
 80102a2:	e171      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80102a4:	4b51      	ldr	r3, [pc, #324]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80102ac:	d1ba      	bne.n	8010224 <HAL_RCC_OscConfig+0xb8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80102ae:	4b4f      	ldr	r3, [pc, #316]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	f013 0f02 	tst.w	r3, #2
 80102b6:	d003      	beq.n	80102c0 <HAL_RCC_OscConfig+0x154>
 80102b8:	68e3      	ldr	r3, [r4, #12]
 80102ba:	2b01      	cmp	r3, #1
 80102bc:	f040 8161 	bne.w	8010582 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80102c0:	4a4a      	ldr	r2, [pc, #296]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 80102c2:	6813      	ldr	r3, [r2, #0]
 80102c4:	6921      	ldr	r1, [r4, #16]
 80102c6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80102ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80102ce:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80102d0:	6823      	ldr	r3, [r4, #0]
 80102d2:	f013 0f08 	tst.w	r3, #8
 80102d6:	d049      	beq.n	801036c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80102d8:	6963      	ldr	r3, [r4, #20]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d033      	beq.n	8010346 <HAL_RCC_OscConfig+0x1da>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80102de:	4b44      	ldr	r3, [pc, #272]	@ (80103f0 <HAL_RCC_OscConfig+0x284>)
 80102e0:	2201      	movs	r2, #1
 80102e2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80102e6:	f7fe fbfd 	bl	800eae4 <HAL_GetTick>
 80102ea:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80102ec:	4e3f      	ldr	r6, [pc, #252]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 80102ee:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80102f0:	f013 0f02 	tst.w	r3, #2
 80102f4:	d13a      	bne.n	801036c <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80102f6:	f7fe fbf5 	bl	800eae4 <HAL_GetTick>
 80102fa:	1b40      	subs	r0, r0, r5
 80102fc:	2802      	cmp	r0, #2
 80102fe:	d9f6      	bls.n	80102ee <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8010300:	2003      	movs	r0, #3
 8010302:	e141      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010304:	4b39      	ldr	r3, [pc, #228]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010306:	685b      	ldr	r3, [r3, #4]
 8010308:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 801030c:	d190      	bne.n	8010230 <HAL_RCC_OscConfig+0xc4>
 801030e:	e7ce      	b.n	80102ae <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010310:	4a36      	ldr	r2, [pc, #216]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010312:	6813      	ldr	r3, [r2, #0]
 8010314:	6921      	ldr	r1, [r4, #16]
 8010316:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 801031a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 801031e:	6013      	str	r3, [r2, #0]
 8010320:	e7d6      	b.n	80102d0 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8010322:	4b33      	ldr	r3, [pc, #204]	@ (80103f0 <HAL_RCC_OscConfig+0x284>)
 8010324:	2200      	movs	r2, #0
 8010326:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8010328:	f7fe fbdc 	bl	800eae4 <HAL_GetTick>
 801032c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801032e:	4e2f      	ldr	r6, [pc, #188]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010330:	6833      	ldr	r3, [r6, #0]
 8010332:	f013 0f02 	tst.w	r3, #2
 8010336:	d0cb      	beq.n	80102d0 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010338:	f7fe fbd4 	bl	800eae4 <HAL_GetTick>
 801033c:	1b40      	subs	r0, r0, r5
 801033e:	2802      	cmp	r0, #2
 8010340:	d9f6      	bls.n	8010330 <HAL_RCC_OscConfig+0x1c4>
            return HAL_TIMEOUT;
 8010342:	2003      	movs	r0, #3
 8010344:	e120      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010346:	4b2a      	ldr	r3, [pc, #168]	@ (80103f0 <HAL_RCC_OscConfig+0x284>)
 8010348:	2200      	movs	r2, #0
 801034a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801034e:	f7fe fbc9 	bl	800eae4 <HAL_GetTick>
 8010352:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010354:	4e25      	ldr	r6, [pc, #148]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010356:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8010358:	f013 0f02 	tst.w	r3, #2
 801035c:	d006      	beq.n	801036c <HAL_RCC_OscConfig+0x200>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801035e:	f7fe fbc1 	bl	800eae4 <HAL_GetTick>
 8010362:	1b40      	subs	r0, r0, r5
 8010364:	2802      	cmp	r0, #2
 8010366:	d9f6      	bls.n	8010356 <HAL_RCC_OscConfig+0x1ea>
        {
          return HAL_TIMEOUT;
 8010368:	2003      	movs	r0, #3
 801036a:	e10d      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801036c:	6823      	ldr	r3, [r4, #0]
 801036e:	f013 0f04 	tst.w	r3, #4
 8010372:	d077      	beq.n	8010464 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8010374:	4b1d      	ldr	r3, [pc, #116]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010378:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 801037c:	d133      	bne.n	80103e6 <HAL_RCC_OscConfig+0x27a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801037e:	2300      	movs	r3, #0
 8010380:	9301      	str	r3, [sp, #4]
 8010382:	4b1a      	ldr	r3, [pc, #104]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 8010384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010386:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 801038a:	641a      	str	r2, [r3, #64]	@ 0x40
 801038c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801038e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010392:	9301      	str	r3, [sp, #4]
 8010394:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8010396:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010398:	4b16      	ldr	r3, [pc, #88]	@ (80103f4 <HAL_RCC_OscConfig+0x288>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80103a0:	d02a      	beq.n	80103f8 <HAL_RCC_OscConfig+0x28c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80103a2:	68a3      	ldr	r3, [r4, #8]
 80103a4:	2b01      	cmp	r3, #1
 80103a6:	d03b      	beq.n	8010420 <HAL_RCC_OscConfig+0x2b4>
 80103a8:	2b05      	cmp	r3, #5
 80103aa:	d03f      	beq.n	801042c <HAL_RCC_OscConfig+0x2c0>
 80103ac:	4b0f      	ldr	r3, [pc, #60]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
 80103ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80103b0:	f022 0201 	bic.w	r2, r2, #1
 80103b4:	671a      	str	r2, [r3, #112]	@ 0x70
 80103b6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80103b8:	f022 0204 	bic.w	r2, r2, #4
 80103bc:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80103be:	68a3      	ldr	r3, [r4, #8]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d03d      	beq.n	8010440 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80103c4:	f7fe fb8e 	bl	800eae4 <HAL_GetTick>
 80103c8:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80103ca:	4f08      	ldr	r7, [pc, #32]	@ (80103ec <HAL_RCC_OscConfig+0x280>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80103cc:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80103d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80103d2:	f013 0f02 	tst.w	r3, #2
 80103d6:	d144      	bne.n	8010462 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80103d8:	f7fe fb84 	bl	800eae4 <HAL_GetTick>
 80103dc:	1b80      	subs	r0, r0, r6
 80103de:	4540      	cmp	r0, r8
 80103e0:	d9f6      	bls.n	80103d0 <HAL_RCC_OscConfig+0x264>
        {
          return HAL_TIMEOUT;
 80103e2:	2003      	movs	r0, #3
 80103e4:	e0d0      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
    FlagStatus       pwrclkchanged = RESET;
 80103e6:	2500      	movs	r5, #0
 80103e8:	e7d6      	b.n	8010398 <HAL_RCC_OscConfig+0x22c>
 80103ea:	bf00      	nop
 80103ec:	40023800 	.word	0x40023800
 80103f0:	42470000 	.word	0x42470000
 80103f4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80103f8:	4a6b      	ldr	r2, [pc, #428]	@ (80105a8 <HAL_RCC_OscConfig+0x43c>)
 80103fa:	6813      	ldr	r3, [r2, #0]
 80103fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010400:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8010402:	f7fe fb6f 	bl	800eae4 <HAL_GetTick>
 8010406:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010408:	4f67      	ldr	r7, [pc, #412]	@ (80105a8 <HAL_RCC_OscConfig+0x43c>)
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8010410:	d1c7      	bne.n	80103a2 <HAL_RCC_OscConfig+0x236>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010412:	f7fe fb67 	bl	800eae4 <HAL_GetTick>
 8010416:	1b80      	subs	r0, r0, r6
 8010418:	2802      	cmp	r0, #2
 801041a:	d9f6      	bls.n	801040a <HAL_RCC_OscConfig+0x29e>
          return HAL_TIMEOUT;
 801041c:	2003      	movs	r0, #3
 801041e:	e0b3      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010420:	4a62      	ldr	r2, [pc, #392]	@ (80105ac <HAL_RCC_OscConfig+0x440>)
 8010422:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8010424:	f043 0301 	orr.w	r3, r3, #1
 8010428:	6713      	str	r3, [r2, #112]	@ 0x70
 801042a:	e7c8      	b.n	80103be <HAL_RCC_OscConfig+0x252>
 801042c:	4b5f      	ldr	r3, [pc, #380]	@ (80105ac <HAL_RCC_OscConfig+0x440>)
 801042e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010430:	f042 0204 	orr.w	r2, r2, #4
 8010434:	671a      	str	r2, [r3, #112]	@ 0x70
 8010436:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010438:	f042 0201 	orr.w	r2, r2, #1
 801043c:	671a      	str	r2, [r3, #112]	@ 0x70
 801043e:	e7be      	b.n	80103be <HAL_RCC_OscConfig+0x252>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010440:	f7fe fb50 	bl	800eae4 <HAL_GetTick>
 8010444:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010446:	4f59      	ldr	r7, [pc, #356]	@ (80105ac <HAL_RCC_OscConfig+0x440>)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010448:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801044c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801044e:	f013 0f02 	tst.w	r3, #2
 8010452:	d006      	beq.n	8010462 <HAL_RCC_OscConfig+0x2f6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010454:	f7fe fb46 	bl	800eae4 <HAL_GetTick>
 8010458:	1b80      	subs	r0, r0, r6
 801045a:	4540      	cmp	r0, r8
 801045c:	d9f6      	bls.n	801044c <HAL_RCC_OscConfig+0x2e0>
        {
          return HAL_TIMEOUT;
 801045e:	2003      	movs	r0, #3
 8010460:	e092      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8010462:	b9ed      	cbnz	r5, 80104a0 <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010464:	69a3      	ldr	r3, [r4, #24]
 8010466:	2b00      	cmp	r3, #0
 8010468:	f000 808d 	beq.w	8010586 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801046c:	4a4f      	ldr	r2, [pc, #316]	@ (80105ac <HAL_RCC_OscConfig+0x440>)
 801046e:	6892      	ldr	r2, [r2, #8]
 8010470:	f002 020c 	and.w	r2, r2, #12
 8010474:	2a08      	cmp	r2, #8
 8010476:	d054      	beq.n	8010522 <HAL_RCC_OscConfig+0x3b6>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010478:	2b02      	cmp	r3, #2
 801047a:	d017      	beq.n	80104ac <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801047c:	4b4c      	ldr	r3, [pc, #304]	@ (80105b0 <HAL_RCC_OscConfig+0x444>)
 801047e:	2200      	movs	r2, #0
 8010480:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010482:	f7fe fb2f 	bl	800eae4 <HAL_GetTick>
 8010486:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010488:	4d48      	ldr	r5, [pc, #288]	@ (80105ac <HAL_RCC_OscConfig+0x440>)
 801048a:	682b      	ldr	r3, [r5, #0]
 801048c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8010490:	d045      	beq.n	801051e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010492:	f7fe fb27 	bl	800eae4 <HAL_GetTick>
 8010496:	1b00      	subs	r0, r0, r4
 8010498:	2802      	cmp	r0, #2
 801049a:	d9f6      	bls.n	801048a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 801049c:	2003      	movs	r0, #3
 801049e:	e073      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80104a0:	4a42      	ldr	r2, [pc, #264]	@ (80105ac <HAL_RCC_OscConfig+0x440>)
 80104a2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80104a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80104a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80104aa:	e7db      	b.n	8010464 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_DISABLE();
 80104ac:	4b40      	ldr	r3, [pc, #256]	@ (80105b0 <HAL_RCC_OscConfig+0x444>)
 80104ae:	2200      	movs	r2, #0
 80104b0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80104b2:	f7fe fb17 	bl	800eae4 <HAL_GetTick>
 80104b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80104b8:	4e3c      	ldr	r6, [pc, #240]	@ (80105ac <HAL_RCC_OscConfig+0x440>)
 80104ba:	6833      	ldr	r3, [r6, #0]
 80104bc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80104c0:	d006      	beq.n	80104d0 <HAL_RCC_OscConfig+0x364>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80104c2:	f7fe fb0f 	bl	800eae4 <HAL_GetTick>
 80104c6:	1b40      	subs	r0, r0, r5
 80104c8:	2802      	cmp	r0, #2
 80104ca:	d9f6      	bls.n	80104ba <HAL_RCC_OscConfig+0x34e>
            return HAL_TIMEOUT;
 80104cc:	2003      	movs	r0, #3
 80104ce:	e05b      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80104d0:	69e3      	ldr	r3, [r4, #28]
 80104d2:	6a22      	ldr	r2, [r4, #32]
 80104d4:	4313      	orrs	r3, r2
 80104d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80104d8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80104dc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80104de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80104e2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80104e4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80104e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80104ea:	0852      	lsrs	r2, r2, #1
 80104ec:	3a01      	subs	r2, #1
 80104ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104f2:	4a2e      	ldr	r2, [pc, #184]	@ (80105ac <HAL_RCC_OscConfig+0x440>)
 80104f4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80104f6:	4b2e      	ldr	r3, [pc, #184]	@ (80105b0 <HAL_RCC_OscConfig+0x444>)
 80104f8:	2201      	movs	r2, #1
 80104fa:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80104fc:	f7fe faf2 	bl	800eae4 <HAL_GetTick>
 8010500:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010502:	4d2a      	ldr	r5, [pc, #168]	@ (80105ac <HAL_RCC_OscConfig+0x440>)
 8010504:	682b      	ldr	r3, [r5, #0]
 8010506:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801050a:	d106      	bne.n	801051a <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801050c:	f7fe faea 	bl	800eae4 <HAL_GetTick>
 8010510:	1b00      	subs	r0, r0, r4
 8010512:	2802      	cmp	r0, #2
 8010514:	d9f6      	bls.n	8010504 <HAL_RCC_OscConfig+0x398>
            return HAL_TIMEOUT;
 8010516:	2003      	movs	r0, #3
 8010518:	e036      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 801051a:	2000      	movs	r0, #0
 801051c:	e034      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
 801051e:	2000      	movs	r0, #0
 8010520:	e032      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010522:	2b01      	cmp	r3, #1
 8010524:	d033      	beq.n	801058e <HAL_RCC_OscConfig+0x422>
        pll_config = RCC->PLLCFGR;
 8010526:	4b21      	ldr	r3, [pc, #132]	@ (80105ac <HAL_RCC_OscConfig+0x440>)
 8010528:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801052a:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801052e:	69e2      	ldr	r2, [r4, #28]
 8010530:	4291      	cmp	r1, r2
 8010532:	d12e      	bne.n	8010592 <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010534:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010538:	6a21      	ldr	r1, [r4, #32]
 801053a:	428a      	cmp	r2, r1
 801053c:	d12b      	bne.n	8010596 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801053e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010540:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8010544:	401a      	ands	r2, r3
 8010546:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 801054a:	d126      	bne.n	801059a <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801054c:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8010550:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8010552:	0852      	lsrs	r2, r2, #1
 8010554:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010556:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 801055a:	d120      	bne.n	801059e <HAL_RCC_OscConfig+0x432>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801055c:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8010560:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010562:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8010566:	d11c      	bne.n	80105a2 <HAL_RCC_OscConfig+0x436>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8010568:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801056a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801056e:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8010572:	bf14      	ite	ne
 8010574:	2001      	movne	r0, #1
 8010576:	2000      	moveq	r0, #0
 8010578:	e006      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
    return HAL_ERROR;
 801057a:	2001      	movs	r0, #1
}
 801057c:	4770      	bx	lr
        return HAL_ERROR;
 801057e:	2001      	movs	r0, #1
 8010580:	e002      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
        return HAL_ERROR;
 8010582:	2001      	movs	r0, #1
 8010584:	e000      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 8010586:	2000      	movs	r0, #0
}
 8010588:	b002      	add	sp, #8
 801058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 801058e:	2001      	movs	r0, #1
 8010590:	e7fa      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
          return HAL_ERROR;
 8010592:	2001      	movs	r0, #1
 8010594:	e7f8      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
 8010596:	2001      	movs	r0, #1
 8010598:	e7f6      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
 801059a:	2001      	movs	r0, #1
 801059c:	e7f4      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
 801059e:	2001      	movs	r0, #1
 80105a0:	e7f2      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
 80105a2:	2001      	movs	r0, #1
 80105a4:	e7f0      	b.n	8010588 <HAL_RCC_OscConfig+0x41c>
 80105a6:	bf00      	nop
 80105a8:	40007000 	.word	0x40007000
 80105ac:	40023800 	.word	0x40023800
 80105b0:	42470000 	.word	0x42470000

080105b4 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d05a      	beq.n	801066e <HAL_SPI_Init+0xba>
{
 80105b8:	b510      	push	{r4, lr}
 80105ba:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80105bc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80105be:	b933      	cbnz	r3, 80105ce <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80105c0:	6843      	ldr	r3, [r0, #4]
 80105c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80105c6:	d005      	beq.n	80105d4 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80105c8:	2300      	movs	r3, #0
 80105ca:	61c3      	str	r3, [r0, #28]
 80105cc:	e002      	b.n	80105d4 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80105ce:	2300      	movs	r3, #0
 80105d0:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80105d2:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80105d4:	2300      	movs	r3, #0
 80105d6:	62a3      	str	r3, [r4, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80105d8:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d040      	beq.n	8010662 <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80105e0:	2302      	movs	r3, #2
 80105e2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80105e6:	6822      	ldr	r2, [r4, #0]
 80105e8:	6813      	ldr	r3, [r2, #0]
 80105ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80105ee:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80105f0:	6822      	ldr	r2, [r4, #0]
 80105f2:	6863      	ldr	r3, [r4, #4]
 80105f4:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 80105f8:	68a1      	ldr	r1, [r4, #8]
 80105fa:	f401 4104 	and.w	r1, r1, #33792	@ 0x8400
 80105fe:	430b      	orrs	r3, r1
 8010600:	68e1      	ldr	r1, [r4, #12]
 8010602:	f401 6100 	and.w	r1, r1, #2048	@ 0x800
 8010606:	430b      	orrs	r3, r1
 8010608:	6921      	ldr	r1, [r4, #16]
 801060a:	f001 0102 	and.w	r1, r1, #2
 801060e:	430b      	orrs	r3, r1
 8010610:	6961      	ldr	r1, [r4, #20]
 8010612:	f001 0101 	and.w	r1, r1, #1
 8010616:	430b      	orrs	r3, r1
 8010618:	69a1      	ldr	r1, [r4, #24]
 801061a:	f401 7100 	and.w	r1, r1, #512	@ 0x200
 801061e:	430b      	orrs	r3, r1
 8010620:	69e1      	ldr	r1, [r4, #28]
 8010622:	f001 0138 	and.w	r1, r1, #56	@ 0x38
 8010626:	430b      	orrs	r3, r1
 8010628:	6a21      	ldr	r1, [r4, #32]
 801062a:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801062e:	430b      	orrs	r3, r1
 8010630:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8010632:	f401 5100 	and.w	r1, r1, #8192	@ 0x2000
 8010636:	430b      	orrs	r3, r1
 8010638:	6013      	str	r3, [r2, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801063a:	6821      	ldr	r1, [r4, #0]
 801063c:	8b63      	ldrh	r3, [r4, #26]
 801063e:	f003 0304 	and.w	r3, r3, #4
 8010642:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8010644:	f002 0210 	and.w	r2, r2, #16
 8010648:	4313      	orrs	r3, r2
 801064a:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801064c:	6822      	ldr	r2, [r4, #0]
 801064e:	69d3      	ldr	r3, [r2, #28]
 8010650:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010654:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010656:	2000      	movs	r0, #0
 8010658:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801065a:	2301      	movs	r3, #1
 801065c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51

  return HAL_OK;
}
 8010660:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8010662:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8010666:	4620      	mov	r0, r4
 8010668:	f7fe f8a8 	bl	800e7bc <HAL_SPI_MspInit>
 801066c:	e7b8      	b.n	80105e0 <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 801066e:	2001      	movs	r0, #1
}
 8010670:	4770      	bx	lr
	...

08010674 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010674:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8010678:	b2db      	uxtb	r3, r3
 801067a:	2b01      	cmp	r3, #1
 801067c:	d137      	bne.n	80106ee <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801067e:	2302      	movs	r3, #2
 8010680:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010684:	6802      	ldr	r2, [r0, #0]
 8010686:	68d3      	ldr	r3, [r2, #12]
 8010688:	f043 0301 	orr.w	r3, r3, #1
 801068c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801068e:	6803      	ldr	r3, [r0, #0]
 8010690:	4a19      	ldr	r2, [pc, #100]	@ (80106f8 <HAL_TIM_Base_Start_IT+0x84>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d020      	beq.n	80106d8 <HAL_TIM_Base_Start_IT+0x64>
 8010696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801069a:	d01d      	beq.n	80106d8 <HAL_TIM_Base_Start_IT+0x64>
 801069c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80106a0:	4293      	cmp	r3, r2
 80106a2:	d019      	beq.n	80106d8 <HAL_TIM_Base_Start_IT+0x64>
 80106a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80106a8:	4293      	cmp	r3, r2
 80106aa:	d015      	beq.n	80106d8 <HAL_TIM_Base_Start_IT+0x64>
 80106ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d011      	beq.n	80106d8 <HAL_TIM_Base_Start_IT+0x64>
 80106b4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d00d      	beq.n	80106d8 <HAL_TIM_Base_Start_IT+0x64>
 80106bc:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80106c0:	4293      	cmp	r3, r2
 80106c2:	d009      	beq.n	80106d8 <HAL_TIM_Base_Start_IT+0x64>
 80106c4:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80106c8:	4293      	cmp	r3, r2
 80106ca:	d005      	beq.n	80106d8 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80106cc:	681a      	ldr	r2, [r3, #0]
 80106ce:	f042 0201 	orr.w	r2, r2, #1
 80106d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80106d4:	2000      	movs	r0, #0
 80106d6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80106d8:	689a      	ldr	r2, [r3, #8]
 80106da:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106de:	2a06      	cmp	r2, #6
 80106e0:	d007      	beq.n	80106f2 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80106e2:	681a      	ldr	r2, [r3, #0]
 80106e4:	f042 0201 	orr.w	r2, r2, #1
 80106e8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80106ea:	2000      	movs	r0, #0
 80106ec:	4770      	bx	lr
    return HAL_ERROR;
 80106ee:	2001      	movs	r0, #1
 80106f0:	4770      	bx	lr
  return HAL_OK;
 80106f2:	2000      	movs	r0, #0
}
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop
 80106f8:	40010000 	.word	0x40010000

080106fc <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80106fc:	6802      	ldr	r2, [r0, #0]
 80106fe:	68d3      	ldr	r3, [r2, #12]
 8010700:	f023 0301 	bic.w	r3, r3, #1
 8010704:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010706:	6803      	ldr	r3, [r0, #0]
 8010708:	6a19      	ldr	r1, [r3, #32]
 801070a:	f241 1211 	movw	r2, #4369	@ 0x1111
 801070e:	4211      	tst	r1, r2
 8010710:	d108      	bne.n	8010724 <HAL_TIM_Base_Stop_IT+0x28>
 8010712:	6a19      	ldr	r1, [r3, #32]
 8010714:	f240 4244 	movw	r2, #1092	@ 0x444
 8010718:	4211      	tst	r1, r2
 801071a:	d103      	bne.n	8010724 <HAL_TIM_Base_Stop_IT+0x28>
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	f022 0201 	bic.w	r2, r2, #1
 8010722:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8010724:	2301      	movs	r3, #1
 8010726:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
}
 801072a:	2000      	movs	r0, #0
 801072c:	4770      	bx	lr

0801072e <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801072e:	4770      	bx	lr

08010730 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010730:	4770      	bx	lr

08010732 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010732:	4770      	bx	lr

08010734 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010734:	4770      	bx	lr

08010736 <HAL_TIM_IRQHandler>:
{
 8010736:	b570      	push	{r4, r5, r6, lr}
 8010738:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 801073a:	6803      	ldr	r3, [r0, #0]
 801073c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 801073e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8010740:	f015 0f02 	tst.w	r5, #2
 8010744:	d010      	beq.n	8010768 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8010746:	f016 0f02 	tst.w	r6, #2
 801074a:	d00d      	beq.n	8010768 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 801074c:	f06f 0202 	mvn.w	r2, #2
 8010750:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010752:	2301      	movs	r3, #1
 8010754:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010756:	6803      	ldr	r3, [r0, #0]
 8010758:	699b      	ldr	r3, [r3, #24]
 801075a:	f013 0f03 	tst.w	r3, #3
 801075e:	d05e      	beq.n	801081e <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 8010760:	f7ff ffe6 	bl	8010730 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010764:	2300      	movs	r3, #0
 8010766:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8010768:	f015 0f04 	tst.w	r5, #4
 801076c:	d012      	beq.n	8010794 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801076e:	f016 0f04 	tst.w	r6, #4
 8010772:	d00f      	beq.n	8010794 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8010774:	6823      	ldr	r3, [r4, #0]
 8010776:	f06f 0204 	mvn.w	r2, #4
 801077a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801077c:	2302      	movs	r3, #2
 801077e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010780:	6823      	ldr	r3, [r4, #0]
 8010782:	699b      	ldr	r3, [r3, #24]
 8010784:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8010788:	d04f      	beq.n	801082a <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 801078a:	4620      	mov	r0, r4
 801078c:	f7ff ffd0 	bl	8010730 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010790:	2300      	movs	r3, #0
 8010792:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8010794:	f015 0f08 	tst.w	r5, #8
 8010798:	d012      	beq.n	80107c0 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801079a:	f016 0f08 	tst.w	r6, #8
 801079e:	d00f      	beq.n	80107c0 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80107a0:	6823      	ldr	r3, [r4, #0]
 80107a2:	f06f 0208 	mvn.w	r2, #8
 80107a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107a8:	2304      	movs	r3, #4
 80107aa:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80107ac:	6823      	ldr	r3, [r4, #0]
 80107ae:	69db      	ldr	r3, [r3, #28]
 80107b0:	f013 0f03 	tst.w	r3, #3
 80107b4:	d040      	beq.n	8010838 <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 80107b6:	4620      	mov	r0, r4
 80107b8:	f7ff ffba 	bl	8010730 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107bc:	2300      	movs	r3, #0
 80107be:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80107c0:	f015 0f10 	tst.w	r5, #16
 80107c4:	d012      	beq.n	80107ec <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80107c6:	f016 0f10 	tst.w	r6, #16
 80107ca:	d00f      	beq.n	80107ec <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80107cc:	6823      	ldr	r3, [r4, #0]
 80107ce:	f06f 0210 	mvn.w	r2, #16
 80107d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80107d4:	2308      	movs	r3, #8
 80107d6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80107d8:	6823      	ldr	r3, [r4, #0]
 80107da:	69db      	ldr	r3, [r3, #28]
 80107dc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80107e0:	d031      	beq.n	8010846 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80107e2:	4620      	mov	r0, r4
 80107e4:	f7ff ffa4 	bl	8010730 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107e8:	2300      	movs	r3, #0
 80107ea:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80107ec:	f015 0f01 	tst.w	r5, #1
 80107f0:	d002      	beq.n	80107f8 <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80107f2:	f016 0f01 	tst.w	r6, #1
 80107f6:	d12d      	bne.n	8010854 <HAL_TIM_IRQHandler+0x11e>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80107f8:	f015 0f80 	tst.w	r5, #128	@ 0x80
 80107fc:	d002      	beq.n	8010804 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80107fe:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8010802:	d12f      	bne.n	8010864 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8010804:	f015 0f40 	tst.w	r5, #64	@ 0x40
 8010808:	d002      	beq.n	8010810 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801080a:	f016 0f40 	tst.w	r6, #64	@ 0x40
 801080e:	d131      	bne.n	8010874 <HAL_TIM_IRQHandler+0x13e>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8010810:	f015 0f20 	tst.w	r5, #32
 8010814:	d002      	beq.n	801081c <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8010816:	f016 0f20 	tst.w	r6, #32
 801081a:	d133      	bne.n	8010884 <HAL_TIM_IRQHandler+0x14e>
}
 801081c:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801081e:	f7ff ff86 	bl	801072e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010822:	4620      	mov	r0, r4
 8010824:	f7ff ff85 	bl	8010732 <HAL_TIM_PWM_PulseFinishedCallback>
 8010828:	e79c      	b.n	8010764 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801082a:	4620      	mov	r0, r4
 801082c:	f7ff ff7f 	bl	801072e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010830:	4620      	mov	r0, r4
 8010832:	f7ff ff7e 	bl	8010732 <HAL_TIM_PWM_PulseFinishedCallback>
 8010836:	e7ab      	b.n	8010790 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010838:	4620      	mov	r0, r4
 801083a:	f7ff ff78 	bl	801072e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801083e:	4620      	mov	r0, r4
 8010840:	f7ff ff77 	bl	8010732 <HAL_TIM_PWM_PulseFinishedCallback>
 8010844:	e7ba      	b.n	80107bc <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010846:	4620      	mov	r0, r4
 8010848:	f7ff ff71 	bl	801072e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801084c:	4620      	mov	r0, r4
 801084e:	f7ff ff70 	bl	8010732 <HAL_TIM_PWM_PulseFinishedCallback>
 8010852:	e7c9      	b.n	80107e8 <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8010854:	6823      	ldr	r3, [r4, #0]
 8010856:	f06f 0201 	mvn.w	r2, #1
 801085a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 801085c:	4620      	mov	r0, r4
 801085e:	f7fd fecd 	bl	800e5fc <HAL_TIM_PeriodElapsedCallback>
 8010862:	e7c9      	b.n	80107f8 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8010864:	6823      	ldr	r3, [r4, #0]
 8010866:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 801086a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 801086c:	4620      	mov	r0, r4
 801086e:	f000 f9ca 	bl	8010c06 <HAL_TIMEx_BreakCallback>
 8010872:	e7c7      	b.n	8010804 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8010874:	6823      	ldr	r3, [r4, #0]
 8010876:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 801087a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 801087c:	4620      	mov	r0, r4
 801087e:	f7ff ff59 	bl	8010734 <HAL_TIM_TriggerCallback>
 8010882:	e7c5      	b.n	8010810 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8010884:	6823      	ldr	r3, [r4, #0]
 8010886:	f06f 0220 	mvn.w	r2, #32
 801088a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 801088c:	4620      	mov	r0, r4
 801088e:	f000 f9b9 	bl	8010c04 <HAL_TIMEx_CommutCallback>
}
 8010892:	e7c3      	b.n	801081c <HAL_TIM_IRQHandler+0xe6>

08010894 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010894:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010896:	4a41      	ldr	r2, [pc, #260]	@ (801099c <TIM_Base_SetConfig+0x108>)
 8010898:	4290      	cmp	r0, r2
 801089a:	d04e      	beq.n	801093a <TIM_Base_SetConfig+0xa6>
 801089c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80108a0:	d065      	beq.n	801096e <TIM_Base_SetConfig+0xda>
 80108a2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80108a6:	4290      	cmp	r0, r2
 80108a8:	d02c      	beq.n	8010904 <TIM_Base_SetConfig+0x70>
 80108aa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80108ae:	4290      	cmp	r0, r2
 80108b0:	d03e      	beq.n	8010930 <TIM_Base_SetConfig+0x9c>
 80108b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80108b6:	4290      	cmp	r0, r2
 80108b8:	d06a      	beq.n	8010990 <TIM_Base_SetConfig+0xfc>
 80108ba:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80108be:	4290      	cmp	r0, r2
 80108c0:	d025      	beq.n	801090e <TIM_Base_SetConfig+0x7a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80108c2:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80108c6:	4290      	cmp	r0, r2
 80108c8:	d055      	beq.n	8010976 <TIM_Base_SetConfig+0xe2>
 80108ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80108ce:	4290      	cmp	r0, r2
 80108d0:	d051      	beq.n	8010976 <TIM_Base_SetConfig+0xe2>
 80108d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80108d6:	4290      	cmp	r0, r2
 80108d8:	d04d      	beq.n	8010976 <TIM_Base_SetConfig+0xe2>
 80108da:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 80108de:	4290      	cmp	r0, r2
 80108e0:	d049      	beq.n	8010976 <TIM_Base_SetConfig+0xe2>
 80108e2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80108e6:	4290      	cmp	r0, r2
 80108e8:	d045      	beq.n	8010976 <TIM_Base_SetConfig+0xe2>
 80108ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80108ee:	4290      	cmp	r0, r2
 80108f0:	d041      	beq.n	8010976 <TIM_Base_SetConfig+0xe2>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80108f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80108f6:	694a      	ldr	r2, [r1, #20]
 80108f8:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80108fa:	688a      	ldr	r2, [r1, #8]
 80108fc:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80108fe:	680a      	ldr	r2, [r1, #0]
 8010900:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010902:	e02c      	b.n	801095e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8010908:	684a      	ldr	r2, [r1, #4]
 801090a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801090c:	e033      	b.n	8010976 <TIM_Base_SetConfig+0xe2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801090e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8010912:	684a      	ldr	r2, [r1, #4]
 8010914:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8010916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801091a:	68ca      	ldr	r2, [r1, #12]
 801091c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801091e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010922:	694a      	ldr	r2, [r1, #20]
 8010924:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010926:	688a      	ldr	r2, [r1, #8]
 8010928:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 801092a:	680a      	ldr	r2, [r1, #0]
 801092c:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801092e:	e014      	b.n	801095a <TIM_Base_SetConfig+0xc6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8010934:	684a      	ldr	r2, [r1, #4]
 8010936:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010938:	e01d      	b.n	8010976 <TIM_Base_SetConfig+0xe2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801093a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 801093e:	684a      	ldr	r2, [r1, #4]
 8010940:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8010942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010946:	68ca      	ldr	r2, [r1, #12]
 8010948:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801094a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801094e:	694a      	ldr	r2, [r1, #20]
 8010950:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010952:	688a      	ldr	r2, [r1, #8]
 8010954:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8010956:	680a      	ldr	r2, [r1, #0]
 8010958:	6282      	str	r2, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801095a:	690a      	ldr	r2, [r1, #16]
 801095c:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 801095e:	6802      	ldr	r2, [r0, #0]
 8010960:	f042 0204 	orr.w	r2, r2, #4
 8010964:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010966:	2201      	movs	r2, #1
 8010968:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 801096a:	6003      	str	r3, [r0, #0]
}
 801096c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801096e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8010972:	684a      	ldr	r2, [r1, #4]
 8010974:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8010976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801097a:	68ca      	ldr	r2, [r1, #12]
 801097c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801097e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010982:	694a      	ldr	r2, [r1, #20]
 8010984:	4313      	orrs	r3, r2
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010986:	688a      	ldr	r2, [r1, #8]
 8010988:	62c2      	str	r2, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 801098a:	680a      	ldr	r2, [r1, #0]
 801098c:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801098e:	e7e6      	b.n	801095e <TIM_Base_SetConfig+0xca>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8010994:	684a      	ldr	r2, [r1, #4]
 8010996:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010998:	e7ed      	b.n	8010976 <TIM_Base_SetConfig+0xe2>
 801099a:	bf00      	nop
 801099c:	40010000 	.word	0x40010000

080109a0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80109a0:	b340      	cbz	r0, 80109f4 <HAL_TIM_Base_Init+0x54>
{
 80109a2:	b510      	push	{r4, lr}
 80109a4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80109a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80109aa:	b1f3      	cbz	r3, 80109ea <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80109ac:	2302      	movs	r3, #2
 80109ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80109b2:	4621      	mov	r1, r4
 80109b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80109b8:	f7ff ff6c 	bl	8010894 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80109bc:	2301      	movs	r3, #1
 80109be:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109c2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80109c6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80109ca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80109ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80109d2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80109d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109da:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80109de:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80109e2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80109e6:	2000      	movs	r0, #0
}
 80109e8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80109ea:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80109ee:	f7fd ff41 	bl	800e874 <HAL_TIM_Base_MspInit>
 80109f2:	e7db      	b.n	80109ac <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80109f4:	2001      	movs	r0, #1
}
 80109f6:	4770      	bx	lr

080109f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80109f8:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80109fa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80109fc:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010a00:	430a      	orrs	r2, r1
 8010a02:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8010a06:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010a0a:	6082      	str	r2, [r0, #8]
}
 8010a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a10:	4770      	bx	lr

08010a12 <HAL_TIM_ConfigClockSource>:
{
 8010a12:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8010a14:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	f000 80ad 	beq.w	8010b78 <HAL_TIM_ConfigClockSource+0x166>
 8010a1e:	4604      	mov	r4, r0
 8010a20:	2301      	movs	r3, #1
 8010a22:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8010a26:	2302      	movs	r3, #2
 8010a28:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8010a2c:	6802      	ldr	r2, [r0, #0]
 8010a2e:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a30:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8010a34:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8010a38:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8010a3a:	680b      	ldr	r3, [r1, #0]
 8010a3c:	2b60      	cmp	r3, #96	@ 0x60
 8010a3e:	d060      	beq.n	8010b02 <HAL_TIM_ConfigClockSource+0xf0>
 8010a40:	d83d      	bhi.n	8010abe <HAL_TIM_ConfigClockSource+0xac>
 8010a42:	2b40      	cmp	r3, #64	@ 0x40
 8010a44:	d079      	beq.n	8010b3a <HAL_TIM_ConfigClockSource+0x128>
 8010a46:	d91c      	bls.n	8010a82 <HAL_TIM_ConfigClockSource+0x70>
 8010a48:	2b50      	cmp	r3, #80	@ 0x50
 8010a4a:	d136      	bne.n	8010aba <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010a4c:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8010a4e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8010a50:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8010a52:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010a54:	6a1a      	ldr	r2, [r3, #32]
 8010a56:	f022 0201 	bic.w	r2, r2, #1
 8010a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010a5c:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010a5e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010a62:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010a66:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8010a6a:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8010a6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010a6e:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010a70:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010a72:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010a78:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8010a7c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010a7e:	2000      	movs	r0, #0
}
 8010a80:	e012      	b.n	8010aa8 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8010a82:	2b20      	cmp	r3, #32
 8010a84:	d002      	beq.n	8010a8c <HAL_TIM_ConfigClockSource+0x7a>
 8010a86:	d90b      	bls.n	8010aa0 <HAL_TIM_ConfigClockSource+0x8e>
 8010a88:	2b30      	cmp	r3, #48	@ 0x30
 8010a8a:	d114      	bne.n	8010ab6 <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010a8c:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010a8e:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010a90:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010a94:	4313      	orrs	r3, r2
 8010a96:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8010a9a:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010a9c:	2000      	movs	r0, #0
}
 8010a9e:	e003      	b.n	8010aa8 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8010aa0:	f033 0210 	bics.w	r2, r3, #16
 8010aa4:	d0f2      	beq.n	8010a8c <HAL_TIM_ConfigClockSource+0x7a>
 8010aa6:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8010aae:	2300      	movs	r3, #0
 8010ab0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8010ab4:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8010ab6:	2001      	movs	r0, #1
 8010ab8:	e7f6      	b.n	8010aa8 <HAL_TIM_ConfigClockSource+0x96>
 8010aba:	2001      	movs	r0, #1
 8010abc:	e7f4      	b.n	8010aa8 <HAL_TIM_ConfigClockSource+0x96>
 8010abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010ac2:	d055      	beq.n	8010b70 <HAL_TIM_ConfigClockSource+0x15e>
 8010ac4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010ac8:	d10c      	bne.n	8010ae4 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8010aca:	68cb      	ldr	r3, [r1, #12]
 8010acc:	684a      	ldr	r2, [r1, #4]
 8010ace:	6889      	ldr	r1, [r1, #8]
 8010ad0:	6800      	ldr	r0, [r0, #0]
 8010ad2:	f7ff ff91 	bl	80109f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010ad6:	6822      	ldr	r2, [r4, #0]
 8010ad8:	6893      	ldr	r3, [r2, #8]
 8010ada:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8010ade:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010ae0:	2000      	movs	r0, #0
      break;
 8010ae2:	e7e1      	b.n	8010aa8 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8010ae4:	2b70      	cmp	r3, #112	@ 0x70
 8010ae6:	d145      	bne.n	8010b74 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8010ae8:	68cb      	ldr	r3, [r1, #12]
 8010aea:	684a      	ldr	r2, [r1, #4]
 8010aec:	6889      	ldr	r1, [r1, #8]
 8010aee:	6800      	ldr	r0, [r0, #0]
 8010af0:	f7ff ff82 	bl	80109f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8010af4:	6822      	ldr	r2, [r4, #0]
 8010af6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010af8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8010afc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010afe:	2000      	movs	r0, #0
      break;
 8010b00:	e7d2      	b.n	8010aa8 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8010b02:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8010b04:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8010b06:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8010b08:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b0a:	6a19      	ldr	r1, [r3, #32]
 8010b0c:	f021 0110 	bic.w	r1, r1, #16
 8010b10:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b12:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010b14:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010b18:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010b1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8010b20:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8010b24:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b26:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010b28:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010b2a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010b30:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8010b34:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010b36:	2000      	movs	r0, #0
}
 8010b38:	e7b6      	b.n	8010aa8 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b3a:	6803      	ldr	r3, [r0, #0]
                               sClockSourceConfig->ClockPolarity,
 8010b3c:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8010b3e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8010b40:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b42:	6a1a      	ldr	r2, [r3, #32]
 8010b44:	f022 0201 	bic.w	r2, r2, #1
 8010b48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b4a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010b4c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010b50:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010b54:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8010b58:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8010b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b5c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010b5e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8010b60:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8010b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010b66:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8010b6a:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010b6c:	2000      	movs	r0, #0
}
 8010b6e:	e79b      	b.n	8010aa8 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8010b70:	2000      	movs	r0, #0
 8010b72:	e799      	b.n	8010aa8 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8010b74:	2001      	movs	r0, #1
 8010b76:	e797      	b.n	8010aa8 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8010b78:	2002      	movs	r0, #2
 8010b7a:	e79b      	b.n	8010ab4 <HAL_TIM_ConfigClockSource+0xa2>

08010b7c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010b7c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8010b80:	2a01      	cmp	r2, #1
 8010b82:	d03b      	beq.n	8010bfc <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8010b84:	b430      	push	{r4, r5}
 8010b86:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8010b88:	2201      	movs	r2, #1
 8010b8a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b8e:	2202      	movs	r2, #2
 8010b90:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010b94:	6804      	ldr	r4, [r0, #0]
 8010b96:	6862      	ldr	r2, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010b98:	68a0      	ldr	r0, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010b9a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010b9e:	680d      	ldr	r5, [r1, #0]
 8010ba0:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010ba2:	6062      	str	r2, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010ba4:	681a      	ldr	r2, [r3, #0]
 8010ba6:	4c16      	ldr	r4, [pc, #88]	@ (8010c00 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8010ba8:	42a2      	cmp	r2, r4
 8010baa:	d01a      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8010bac:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8010bb0:	d017      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8010bb2:	f5a4 447c 	sub.w	r4, r4, #64512	@ 0xfc00
 8010bb6:	42a2      	cmp	r2, r4
 8010bb8:	d013      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8010bba:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8010bbe:	42a2      	cmp	r2, r4
 8010bc0:	d00f      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8010bc2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8010bc6:	42a2      	cmp	r2, r4
 8010bc8:	d00b      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8010bca:	f504 4478 	add.w	r4, r4, #63488	@ 0xf800
 8010bce:	42a2      	cmp	r2, r4
 8010bd0:	d007      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8010bd2:	f504 5470 	add.w	r4, r4, #15360	@ 0x3c00
 8010bd6:	42a2      	cmp	r2, r4
 8010bd8:	d003      	beq.n	8010be2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8010bda:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8010bde:	42a2      	cmp	r2, r4
 8010be0:	d104      	bne.n	8010bec <HAL_TIMEx_MasterConfigSynchronization+0x70>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010be2:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010be6:	6849      	ldr	r1, [r1, #4]
 8010be8:	4308      	orrs	r0, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010bea:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010bec:	2201      	movs	r2, #1
 8010bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8010bf8:	bc30      	pop	{r4, r5}
 8010bfa:	4770      	bx	lr
  __HAL_LOCK(htim);
 8010bfc:	2002      	movs	r0, #2
}
 8010bfe:	4770      	bx	lr
 8010c00:	40010000 	.word	0x40010000

08010c04 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010c04:	4770      	bx	lr

08010c06 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010c06:	4770      	bx	lr

08010c08 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010c08:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c0a:	f102 030c 	add.w	r3, r2, #12
 8010c0e:	e853 3f00 	ldrex	r3, [r3]
 8010c12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c16:	320c      	adds	r2, #12
 8010c18:	e842 3100 	strex	r1, r3, [r2]
 8010c1c:	2900      	cmp	r1, #0
 8010c1e:	d1f3      	bne.n	8010c08 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c20:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c22:	f102 0314 	add.w	r3, r2, #20
 8010c26:	e853 3f00 	ldrex	r3, [r3]
 8010c2a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c2e:	3214      	adds	r2, #20
 8010c30:	e842 3100 	strex	r1, r3, [r2]
 8010c34:	2900      	cmp	r1, #0
 8010c36:	d1f3      	bne.n	8010c20 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c38:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8010c3a:	2b01      	cmp	r3, #1
 8010c3c:	d005      	beq.n	8010c4a <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c3e:	2320      	movs	r3, #32
 8010c40:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c44:	2300      	movs	r3, #0
 8010c46:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8010c48:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c4a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c4c:	f102 030c 	add.w	r3, r2, #12
 8010c50:	e853 3f00 	ldrex	r3, [r3]
 8010c54:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c58:	320c      	adds	r2, #12
 8010c5a:	e842 3100 	strex	r1, r3, [r2]
 8010c5e:	2900      	cmp	r1, #0
 8010c60:	d1f3      	bne.n	8010c4a <UART_EndRxTransfer+0x42>
 8010c62:	e7ec      	b.n	8010c3e <UART_EndRxTransfer+0x36>

08010c64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010c64:	b510      	push	{r4, lr}
 8010c66:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c68:	6802      	ldr	r2, [r0, #0]
 8010c6a:	6913      	ldr	r3, [r2, #16]
 8010c6c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8010c70:	68c1      	ldr	r1, [r0, #12]
 8010c72:	430b      	orrs	r3, r1
 8010c74:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8010c76:	6801      	ldr	r1, [r0, #0]
 8010c78:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010c7a:	6883      	ldr	r3, [r0, #8]
 8010c7c:	6900      	ldr	r0, [r0, #16]
 8010c7e:	4303      	orrs	r3, r0
 8010c80:	6960      	ldr	r0, [r4, #20]
 8010c82:	4303      	orrs	r3, r0
 8010c84:	69e0      	ldr	r0, [r4, #28]
 8010c86:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8010c88:	f422 4216 	bic.w	r2, r2, #38400	@ 0x9600
 8010c8c:	f022 020c 	bic.w	r2, r2, #12
 8010c90:	4313      	orrs	r3, r2
 8010c92:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010c94:	6822      	ldr	r2, [r4, #0]
 8010c96:	6953      	ldr	r3, [r2, #20]
 8010c98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010c9c:	69a1      	ldr	r1, [r4, #24]
 8010c9e:	430b      	orrs	r3, r1
 8010ca0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010ca2:	6823      	ldr	r3, [r4, #0]
 8010ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8010d60 <UART_SetConfig+0xfc>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d006      	beq.n	8010cb8 <UART_SetConfig+0x54>
 8010caa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d002      	beq.n	8010cb8 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010cb2:	f7ff f9a7 	bl	8010004 <HAL_RCC_GetPCLK1Freq>
 8010cb6:	e001      	b.n	8010cbc <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010cb8:	f7ff f9b4 	bl	8010024 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010cbc:	69e3      	ldr	r3, [r4, #28]
 8010cbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010cc2:	d024      	beq.n	8010d0e <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010cc4:	2100      	movs	r1, #0
 8010cc6:	1803      	adds	r3, r0, r0
 8010cc8:	4149      	adcs	r1, r1
 8010cca:	181b      	adds	r3, r3, r0
 8010ccc:	f141 0100 	adc.w	r1, r1, #0
 8010cd0:	00c9      	lsls	r1, r1, #3
 8010cd2:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8010cd6:	00db      	lsls	r3, r3, #3
 8010cd8:	1818      	adds	r0, r3, r0
 8010cda:	6863      	ldr	r3, [r4, #4]
 8010cdc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010ce0:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8010ce4:	f141 0100 	adc.w	r1, r1, #0
 8010ce8:	f7fb fecc 	bl	800ca84 <__aeabi_uldivmod>
 8010cec:	6821      	ldr	r1, [r4, #0]
 8010cee:	4a1d      	ldr	r2, [pc, #116]	@ (8010d64 <UART_SetConfig+0x100>)
 8010cf0:	fba2 4300 	umull	r4, r3, r2, r0
 8010cf4:	095b      	lsrs	r3, r3, #5
 8010cf6:	2464      	movs	r4, #100	@ 0x64
 8010cf8:	fb04 0013 	mls	r0, r4, r3, r0
 8010cfc:	0100      	lsls	r0, r0, #4
 8010cfe:	3032      	adds	r0, #50	@ 0x32
 8010d00:	fba2 2000 	umull	r2, r0, r2, r0
 8010d04:	011b      	lsls	r3, r3, #4
 8010d06:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8010d0a:	608b      	str	r3, [r1, #8]
  }
}
 8010d0c:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010d0e:	2300      	movs	r3, #0
 8010d10:	1802      	adds	r2, r0, r0
 8010d12:	eb43 0103 	adc.w	r1, r3, r3
 8010d16:	1812      	adds	r2, r2, r0
 8010d18:	f141 0100 	adc.w	r1, r1, #0
 8010d1c:	00c9      	lsls	r1, r1, #3
 8010d1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010d22:	00d2      	lsls	r2, r2, #3
 8010d24:	1810      	adds	r0, r2, r0
 8010d26:	f141 0100 	adc.w	r1, r1, #0
 8010d2a:	6862      	ldr	r2, [r4, #4]
 8010d2c:	1892      	adds	r2, r2, r2
 8010d2e:	415b      	adcs	r3, r3
 8010d30:	f7fb fea8 	bl	800ca84 <__aeabi_uldivmod>
 8010d34:	4a0b      	ldr	r2, [pc, #44]	@ (8010d64 <UART_SetConfig+0x100>)
 8010d36:	fba2 3100 	umull	r3, r1, r2, r0
 8010d3a:	0949      	lsrs	r1, r1, #5
 8010d3c:	2364      	movs	r3, #100	@ 0x64
 8010d3e:	fb03 0311 	mls	r3, r3, r1, r0
 8010d42:	00db      	lsls	r3, r3, #3
 8010d44:	3332      	adds	r3, #50	@ 0x32
 8010d46:	fba2 2303 	umull	r2, r3, r2, r3
 8010d4a:	6820      	ldr	r0, [r4, #0]
 8010d4c:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8010d50:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8010d54:	091b      	lsrs	r3, r3, #4
 8010d56:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010d5a:	4413      	add	r3, r2
 8010d5c:	6083      	str	r3, [r0, #8]
 8010d5e:	e7d5      	b.n	8010d0c <UART_SetConfig+0xa8>
 8010d60:	40011000 	.word	0x40011000
 8010d64:	51eb851f 	.word	0x51eb851f

08010d68 <HAL_UART_Init>:
  if (huart == NULL)
 8010d68:	b360      	cbz	r0, 8010dc4 <HAL_UART_Init+0x5c>
{
 8010d6a:	b510      	push	{r4, lr}
 8010d6c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8010d6e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8010d72:	b313      	cbz	r3, 8010dba <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8010d74:	2324      	movs	r3, #36	@ 0x24
 8010d76:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8010d7a:	6822      	ldr	r2, [r4, #0]
 8010d7c:	68d3      	ldr	r3, [r2, #12]
 8010d7e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8010d82:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8010d84:	4620      	mov	r0, r4
 8010d86:	f7ff ff6d 	bl	8010c64 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010d8a:	6822      	ldr	r2, [r4, #0]
 8010d8c:	6913      	ldr	r3, [r2, #16]
 8010d8e:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8010d92:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010d94:	6822      	ldr	r2, [r4, #0]
 8010d96:	6953      	ldr	r3, [r2, #20]
 8010d98:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8010d9c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8010d9e:	6822      	ldr	r2, [r4, #0]
 8010da0:	68d3      	ldr	r3, [r2, #12]
 8010da2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8010da6:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010da8:	2000      	movs	r0, #0
 8010daa:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8010dac:	2320      	movs	r3, #32
 8010dae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8010db2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010db6:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8010db8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8010dba:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8010dbe:	f7fd fd77 	bl	800e8b0 <HAL_UART_MspInit>
 8010dc2:	e7d7      	b.n	8010d74 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8010dc4:	2001      	movs	r0, #1
}
 8010dc6:	4770      	bx	lr

08010dc8 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8010dc8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	2b20      	cmp	r3, #32
 8010dd0:	d110      	bne.n	8010df4 <HAL_UART_Transmit_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8010dd2:	b189      	cbz	r1, 8010df8 <HAL_UART_Transmit_IT+0x30>
 8010dd4:	b192      	cbz	r2, 8010dfc <HAL_UART_Transmit_IT+0x34>
    huart->pTxBuffPtr = pData;
 8010dd6:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8010dd8:	8482      	strh	r2, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 8010dda:	84c2      	strh	r2, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010de0:	2221      	movs	r2, #33	@ 0x21
 8010de2:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8010de6:	6801      	ldr	r1, [r0, #0]
 8010de8:	68ca      	ldr	r2, [r1, #12]
 8010dea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8010dee:	60ca      	str	r2, [r1, #12]
    return HAL_OK;
 8010df0:	4618      	mov	r0, r3
 8010df2:	4770      	bx	lr
    return HAL_BUSY;
 8010df4:	2002      	movs	r0, #2
 8010df6:	4770      	bx	lr
      return HAL_ERROR;
 8010df8:	2001      	movs	r0, #1
 8010dfa:	4770      	bx	lr
 8010dfc:	2001      	movs	r0, #1
}
 8010dfe:	4770      	bx	lr

08010e00 <UART_DMAAbortOnError>:
{
 8010e00:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010e02:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8010e04:	2300      	movs	r3, #0
 8010e06:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  HAL_UART_ErrorCallback(huart);
 8010e08:	f7fd fde4 	bl	800e9d4 <HAL_UART_ErrorCallback>
}
 8010e0c:	bd08      	pop	{r3, pc}

08010e0e <HAL_UART_AbortCpltCallback>:
}
 8010e0e:	4770      	bx	lr

08010e10 <HAL_UART_Abort_IT>:
{
 8010e10:	b538      	push	{r3, r4, r5, lr}
 8010e12:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8010e14:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e16:	f102 030c 	add.w	r3, r2, #12
 8010e1a:	e853 3f00 	ldrex	r3, [r3]
 8010e1e:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e22:	320c      	adds	r2, #12
 8010e24:	e842 3100 	strex	r1, r3, [r2]
 8010e28:	2900      	cmp	r1, #0
 8010e2a:	d1f3      	bne.n	8010e14 <HAL_UART_Abort_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e2c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e2e:	f102 0314 	add.w	r3, r2, #20
 8010e32:	e853 3f00 	ldrex	r3, [r3]
 8010e36:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e3a:	3214      	adds	r2, #20
 8010e3c:	e842 3100 	strex	r1, r3, [r2]
 8010e40:	2900      	cmp	r1, #0
 8010e42:	d1f3      	bne.n	8010e2c <HAL_UART_Abort_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d057      	beq.n	8010efa <HAL_UART_Abort_IT+0xea>
  if (huart->hdmatx != NULL)
 8010e4a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010e4c:	b13b      	cbz	r3, 8010e5e <HAL_UART_Abort_IT+0x4e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010e4e:	6822      	ldr	r2, [r4, #0]
 8010e50:	6952      	ldr	r2, [r2, #20]
 8010e52:	f012 0f80 	tst.w	r2, #128	@ 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8010e56:	bf14      	ite	ne
 8010e58:	4a33      	ldrne	r2, [pc, #204]	@ (8010f28 <HAL_UART_Abort_IT+0x118>)
      huart->hdmatx->XferAbortCallback = NULL;
 8010e5a:	2200      	moveq	r2, #0
 8010e5c:	651a      	str	r2, [r3, #80]	@ 0x50
  if (huart->hdmarx != NULL)
 8010e5e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010e60:	b13b      	cbz	r3, 8010e72 <HAL_UART_Abort_IT+0x62>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e62:	6822      	ldr	r2, [r4, #0]
 8010e64:	6952      	ldr	r2, [r2, #20]
 8010e66:	f012 0f40 	tst.w	r2, #64	@ 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8010e6a:	bf14      	ite	ne
 8010e6c:	4a2f      	ldrne	r2, [pc, #188]	@ (8010f2c <HAL_UART_Abort_IT+0x11c>)
      huart->hdmarx->XferAbortCallback = NULL;
 8010e6e:	2200      	moveq	r2, #0
 8010e70:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010e72:	6823      	ldr	r3, [r4, #0]
 8010e74:	695b      	ldr	r3, [r3, #20]
 8010e76:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010e7a:	d015      	beq.n	8010ea8 <HAL_UART_Abort_IT+0x98>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010e7c:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e7e:	f101 0314 	add.w	r3, r1, #20
 8010e82:	e853 3f00 	ldrex	r3, [r3]
 8010e86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e8a:	3114      	adds	r1, #20
 8010e8c:	e841 3200 	strex	r2, r3, [r1]
 8010e90:	4615      	mov	r5, r2
 8010e92:	2a00      	cmp	r2, #0
 8010e94:	d1f2      	bne.n	8010e7c <HAL_UART_Abort_IT+0x6c>
    if (huart->hdmatx != NULL)
 8010e96:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8010e98:	b130      	cbz	r0, 8010ea8 <HAL_UART_Abort_IT+0x98>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8010e9a:	f7fe fac5 	bl	800f428 <HAL_DMA_Abort_IT>
 8010e9e:	2800      	cmp	r0, #0
 8010ea0:	d03b      	beq.n	8010f1a <HAL_UART_Abort_IT+0x10a>
        huart->hdmatx->XferAbortCallback = NULL;
 8010ea2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8010ea4:	2200      	movs	r2, #0
 8010ea6:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ea8:	6823      	ldr	r3, [r4, #0]
 8010eaa:	695b      	ldr	r3, [r3, #20]
 8010eac:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8010eb0:	d014      	beq.n	8010edc <HAL_UART_Abort_IT+0xcc>
 8010eb2:	2501      	movs	r5, #1
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010eb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010eb6:	f102 0314 	add.w	r3, r2, #20
 8010eba:	e853 3f00 	ldrex	r3, [r3]
 8010ebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ec2:	3214      	adds	r2, #20
 8010ec4:	e842 3100 	strex	r1, r3, [r2]
 8010ec8:	2900      	cmp	r1, #0
 8010eca:	d1f3      	bne.n	8010eb4 <HAL_UART_Abort_IT+0xa4>
    if (huart->hdmarx != NULL)
 8010ecc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8010ece:	b308      	cbz	r0, 8010f14 <HAL_UART_Abort_IT+0x104>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010ed0:	f7fe faaa 	bl	800f428 <HAL_DMA_Abort_IT>
 8010ed4:	b178      	cbz	r0, 8010ef6 <HAL_UART_Abort_IT+0xe6>
        huart->hdmarx->XferAbortCallback = NULL;
 8010ed6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010ed8:	2200      	movs	r2, #0
 8010eda:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = 0x00U;
 8010edc:	2300      	movs	r3, #0
 8010ede:	84e3      	strh	r3, [r4, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 8010ee0:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ee2:	6463      	str	r3, [r4, #68]	@ 0x44
    huart->gState  = HAL_UART_STATE_READY;
 8010ee4:	2220      	movs	r2, #32
 8010ee6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 8010eea:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010eee:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_UART_AbortCpltCallback(huart);
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	f7ff ff8c 	bl	8010e0e <HAL_UART_AbortCpltCallback>
}
 8010ef6:	2000      	movs	r0, #0
 8010ef8:	bd38      	pop	{r3, r4, r5, pc}
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8010efa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010efc:	f102 030c 	add.w	r3, r2, #12
 8010f00:	e853 3f00 	ldrex	r3, [r3]
 8010f04:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f08:	320c      	adds	r2, #12
 8010f0a:	e842 3100 	strex	r1, r3, [r2]
 8010f0e:	2900      	cmp	r1, #0
 8010f10:	d1f3      	bne.n	8010efa <HAL_UART_Abort_IT+0xea>
 8010f12:	e79a      	b.n	8010e4a <HAL_UART_Abort_IT+0x3a>
  if (AbortCplt == 0x01U)
 8010f14:	2d01      	cmp	r5, #1
 8010f16:	d1ee      	bne.n	8010ef6 <HAL_UART_Abort_IT+0xe6>
 8010f18:	e7e0      	b.n	8010edc <HAL_UART_Abort_IT+0xcc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f1a:	6823      	ldr	r3, [r4, #0]
 8010f1c:	695b      	ldr	r3, [r3, #20]
 8010f1e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8010f22:	d0e8      	beq.n	8010ef6 <HAL_UART_Abort_IT+0xe6>
 8010f24:	e7c6      	b.n	8010eb4 <HAL_UART_Abort_IT+0xa4>
 8010f26:	bf00      	nop
 8010f28:	08010f5d 	.word	0x08010f5d
 8010f2c:	08010f31 	.word	0x08010f31

08010f30 <UART_DMARxAbortCallback>:
{
 8010f30:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f32:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->hdmarx->XferAbortCallback = NULL;
 8010f34:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8010f36:	2200      	movs	r2, #0
 8010f38:	651a      	str	r2, [r3, #80]	@ 0x50
  if (huart->hdmatx != NULL)
 8010f3a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010f3c:	b10b      	cbz	r3, 8010f42 <UART_DMARxAbortCallback+0x12>
    if (huart->hdmatx->XferAbortCallback != NULL)
 8010f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f40:	b95b      	cbnz	r3, 8010f5a <UART_DMARxAbortCallback+0x2a>
  huart->TxXferCount = 0x00U;
 8010f42:	2300      	movs	r3, #0
 8010f44:	84c3      	strh	r3, [r0, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8010f46:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f48:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->gState  = HAL_UART_STATE_READY;
 8010f4a:	2220      	movs	r2, #32
 8010f4c:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8010f50:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f54:	6303      	str	r3, [r0, #48]	@ 0x30
  HAL_UART_AbortCpltCallback(huart);
 8010f56:	f7ff ff5a 	bl	8010e0e <HAL_UART_AbortCpltCallback>
}
 8010f5a:	bd08      	pop	{r3, pc}

08010f5c <UART_DMATxAbortCallback>:
{
 8010f5c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f5e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 8010f60:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8010f62:	2200      	movs	r2, #0
 8010f64:	651a      	str	r2, [r3, #80]	@ 0x50
  if (huart->hdmarx != NULL)
 8010f66:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8010f68:	b10b      	cbz	r3, 8010f6e <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8010f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010f6c:	b95b      	cbnz	r3, 8010f86 <UART_DMATxAbortCallback+0x2a>
  huart->TxXferCount = 0x00U;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	84c3      	strh	r3, [r0, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8010f72:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f74:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->gState  = HAL_UART_STATE_READY;
 8010f76:	2220      	movs	r2, #32
 8010f78:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8010f7c:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f80:	6303      	str	r3, [r0, #48]	@ 0x30
  HAL_UART_AbortCpltCallback(huart);
 8010f82:	f7ff ff44 	bl	8010e0e <HAL_UART_AbortCpltCallback>
}
 8010f86:	bd08      	pop	{r3, pc}

08010f88 <HAL_UART_AbortReceiveCpltCallback>:
}
 8010f88:	4770      	bx	lr
	...

08010f8c <HAL_UART_AbortReceive_IT>:
{
 8010f8c:	b510      	push	{r4, lr}
 8010f8e:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010f90:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f92:	f102 030c 	add.w	r3, r2, #12
 8010f96:	e853 3f00 	ldrex	r3, [r3]
 8010f9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f9e:	320c      	adds	r2, #12
 8010fa0:	e842 3100 	strex	r1, r3, [r2]
 8010fa4:	2900      	cmp	r1, #0
 8010fa6:	d1f3      	bne.n	8010f90 <HAL_UART_AbortReceive_IT+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010fa8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010faa:	f102 0314 	add.w	r3, r2, #20
 8010fae:	e853 3f00 	ldrex	r3, [r3]
 8010fb2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fb6:	3214      	adds	r2, #20
 8010fb8:	e842 3100 	strex	r1, r3, [r2]
 8010fbc:	2900      	cmp	r1, #0
 8010fbe:	d1f3      	bne.n	8010fa8 <HAL_UART_AbortReceive_IT+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fc0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d01c      	beq.n	8011000 <HAL_UART_AbortReceive_IT+0x74>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fc6:	6823      	ldr	r3, [r4, #0]
 8010fc8:	695b      	ldr	r3, [r3, #20]
 8010fca:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8010fce:	d02e      	beq.n	801102e <HAL_UART_AbortReceive_IT+0xa2>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010fd0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fd2:	f102 0314 	add.w	r3, r2, #20
 8010fd6:	e853 3f00 	ldrex	r3, [r3]
 8010fda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fde:	3214      	adds	r2, #20
 8010fe0:	e842 3100 	strex	r1, r3, [r2]
 8010fe4:	2900      	cmp	r1, #0
 8010fe6:	d1f3      	bne.n	8010fd0 <HAL_UART_AbortReceive_IT+0x44>
    if (huart->hdmarx != NULL)
 8010fe8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010fea:	b1b3      	cbz	r3, 801101a <HAL_UART_AbortReceive_IT+0x8e>
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8010fec:	4a15      	ldr	r2, [pc, #84]	@ (8011044 <HAL_UART_AbortReceive_IT+0xb8>)
 8010fee:	651a      	str	r2, [r3, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010ff0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8010ff2:	f7fe fa19 	bl	800f428 <HAL_DMA_Abort_IT>
 8010ff6:	b318      	cbz	r0, 8011040 <HAL_UART_AbortReceive_IT+0xb4>
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010ff8:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8010ffa:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8010ffc:	4798      	blx	r3
 8010ffe:	e01f      	b.n	8011040 <HAL_UART_AbortReceive_IT+0xb4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8011000:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011002:	f102 030c 	add.w	r3, r2, #12
 8011006:	e853 3f00 	ldrex	r3, [r3]
 801100a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801100e:	320c      	adds	r2, #12
 8011010:	e842 3100 	strex	r1, r3, [r2]
 8011014:	2900      	cmp	r1, #0
 8011016:	d1f3      	bne.n	8011000 <HAL_UART_AbortReceive_IT+0x74>
 8011018:	e7d5      	b.n	8010fc6 <HAL_UART_AbortReceive_IT+0x3a>
      huart->RxXferCount = 0x00U;
 801101a:	2300      	movs	r3, #0
 801101c:	85e3      	strh	r3, [r4, #46]	@ 0x2e
      huart->RxState = HAL_UART_STATE_READY;
 801101e:	2220      	movs	r2, #32
 8011020:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011024:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_UART_AbortReceiveCpltCallback(huart);
 8011026:	4620      	mov	r0, r4
 8011028:	f7ff ffae 	bl	8010f88 <HAL_UART_AbortReceiveCpltCallback>
 801102c:	e008      	b.n	8011040 <HAL_UART_AbortReceive_IT+0xb4>
    huart->RxXferCount = 0x00U;
 801102e:	2300      	movs	r3, #0
 8011030:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    huart->RxState = HAL_UART_STATE_READY;
 8011032:	2220      	movs	r2, #32
 8011034:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011038:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_UART_AbortReceiveCpltCallback(huart);
 801103a:	4620      	mov	r0, r4
 801103c:	f7ff ffa4 	bl	8010f88 <HAL_UART_AbortReceiveCpltCallback>
}
 8011040:	2000      	movs	r0, #0
 8011042:	bd10      	pop	{r4, pc}
 8011044:	08011049 	.word	0x08011049

08011048 <UART_DMARxOnlyAbortCallback>:
{
 8011048:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801104a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 801104c:	2300      	movs	r3, #0
 801104e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8011050:	2220      	movs	r2, #32
 8011052:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011056:	6303      	str	r3, [r0, #48]	@ 0x30
  HAL_UART_AbortReceiveCpltCallback(huart);
 8011058:	f7ff ff96 	bl	8010f88 <HAL_UART_AbortReceiveCpltCallback>
}
 801105c:	bd08      	pop	{r3, pc}

0801105e <HAL_UARTEx_RxEventCallback>:
}
 801105e:	4770      	bx	lr

08011060 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011060:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8011064:	b2db      	uxtb	r3, r3
 8011066:	2b22      	cmp	r3, #34	@ 0x22
 8011068:	d11d      	bne.n	80110a6 <UART_Receive_IT+0x46>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801106a:	6883      	ldr	r3, [r0, #8]
 801106c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011070:	d006      	beq.n	8011080 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8011072:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011074:	b17b      	cbz	r3, 8011096 <UART_Receive_IT+0x36>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8011076:	6803      	ldr	r3, [r0, #0]
 8011078:	685b      	ldr	r3, [r3, #4]
 801107a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801107e:	e01a      	b.n	80110b6 <UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011080:	6903      	ldr	r3, [r0, #16]
 8011082:	b9a3      	cbnz	r3, 80110ae <UART_Receive_IT+0x4e>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8011084:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011086:	6803      	ldr	r3, [r0, #0]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801108e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8011090:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8011092:	3302      	adds	r3, #2
 8011094:	e012      	b.n	80110bc <UART_Receive_IT+0x5c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8011096:	6903      	ldr	r3, [r0, #16]
 8011098:	2b00      	cmp	r3, #0
 801109a:	d1ec      	bne.n	8011076 <UART_Receive_IT+0x16>
 801109c:	e008      	b.n	80110b0 <UART_Receive_IT+0x50>
        HAL_UART_RxCpltCallback(huart);
 801109e:	f7fd fc95 	bl	800e9cc <HAL_UART_RxCpltCallback>
      return HAL_OK;
 80110a2:	2000      	movs	r0, #0
 80110a4:	e048      	b.n	8011138 <UART_Receive_IT+0xd8>
    return HAL_BUSY;
 80110a6:	2002      	movs	r0, #2
 80110a8:	4770      	bx	lr
    return HAL_OK;
 80110aa:	2000      	movs	r0, #0
}
 80110ac:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80110ae:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80110b0:	6803      	ldr	r3, [r0, #0]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80110b8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80110ba:	3301      	adds	r3, #1
      huart->pRxBuffPtr += 2U;
 80110bc:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80110be:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80110c0:	3b01      	subs	r3, #1
 80110c2:	b29b      	uxth	r3, r3
 80110c4:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d1ef      	bne.n	80110aa <UART_Receive_IT+0x4a>
{
 80110ca:	b500      	push	{lr}
 80110cc:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80110ce:	6802      	ldr	r2, [r0, #0]
 80110d0:	68d3      	ldr	r3, [r2, #12]
 80110d2:	f023 0320 	bic.w	r3, r3, #32
 80110d6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80110d8:	6802      	ldr	r2, [r0, #0]
 80110da:	68d3      	ldr	r3, [r2, #12]
 80110dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80110e0:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80110e2:	6802      	ldr	r2, [r0, #0]
 80110e4:	6953      	ldr	r3, [r2, #20]
 80110e6:	f023 0301 	bic.w	r3, r3, #1
 80110ea:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80110ec:	2320      	movs	r3, #32
 80110ee:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80110f2:	2300      	movs	r3, #0
 80110f4:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	d1d0      	bne.n	801109e <UART_Receive_IT+0x3e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110fc:	2300      	movs	r3, #0
 80110fe:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011100:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011102:	f102 030c 	add.w	r3, r2, #12
 8011106:	e853 3f00 	ldrex	r3, [r3]
 801110a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801110e:	320c      	adds	r2, #12
 8011110:	e842 3100 	strex	r1, r3, [r2]
 8011114:	2900      	cmp	r1, #0
 8011116:	d1f3      	bne.n	8011100 <UART_Receive_IT+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011118:	6803      	ldr	r3, [r0, #0]
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	f012 0f10 	tst.w	r2, #16
 8011120:	d006      	beq.n	8011130 <UART_Receive_IT+0xd0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011122:	2200      	movs	r2, #0
 8011124:	9201      	str	r2, [sp, #4]
 8011126:	681a      	ldr	r2, [r3, #0]
 8011128:	9201      	str	r2, [sp, #4]
 801112a:	685b      	ldr	r3, [r3, #4]
 801112c:	9301      	str	r3, [sp, #4]
 801112e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011130:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8011132:	f7ff ff94 	bl	801105e <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8011136:	2000      	movs	r0, #0
}
 8011138:	b003      	add	sp, #12
 801113a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08011140 <HAL_UART_IRQHandler>:
{
 8011140:	b510      	push	{r4, lr}
 8011142:	b082      	sub	sp, #8
 8011144:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8011146:	6802      	ldr	r2, [r0, #0]
 8011148:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801114a:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801114c:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 801114e:	f013 0f0f 	tst.w	r3, #15
 8011152:	d109      	bne.n	8011168 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8011154:	f013 0f20 	tst.w	r3, #32
 8011158:	d00d      	beq.n	8011176 <HAL_UART_IRQHandler+0x36>
 801115a:	f010 0f20 	tst.w	r0, #32
 801115e:	d00a      	beq.n	8011176 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 8011160:	4620      	mov	r0, r4
 8011162:	f7ff ff7d 	bl	8011060 <UART_Receive_IT>
      return;
 8011166:	e018      	b.n	801119a <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8011168:	f001 0101 	and.w	r1, r1, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 801116c:	f400 7c90 	and.w	ip, r0, #288	@ 0x120
 8011170:	ea5c 0c01 	orrs.w	ip, ip, r1
 8011174:	d113      	bne.n	801119e <HAL_UART_IRQHandler+0x5e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011176:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011178:	2901      	cmp	r1, #1
 801117a:	f000 8081 	beq.w	8011280 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 801117e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011182:	d003      	beq.n	801118c <HAL_UART_IRQHandler+0x4c>
 8011184:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8011188:	f040 8128 	bne.w	80113dc <HAL_UART_IRQHandler+0x29c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 801118c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8011190:	d003      	beq.n	801119a <HAL_UART_IRQHandler+0x5a>
 8011192:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8011196:	f040 814e 	bne.w	8011436 <HAL_UART_IRQHandler+0x2f6>
}
 801119a:	b002      	add	sp, #8
 801119c:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 801119e:	f013 0f01 	tst.w	r3, #1
 80111a2:	d006      	beq.n	80111b2 <HAL_UART_IRQHandler+0x72>
 80111a4:	f410 7f80 	tst.w	r0, #256	@ 0x100
 80111a8:	d003      	beq.n	80111b2 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80111aa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80111ac:	f042 0201 	orr.w	r2, r2, #1
 80111b0:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80111b2:	f013 0f04 	tst.w	r3, #4
 80111b6:	d00b      	beq.n	80111d0 <HAL_UART_IRQHandler+0x90>
 80111b8:	b191      	cbz	r1, 80111e0 <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80111ba:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80111bc:	f042 0202 	orr.w	r2, r2, #2
 80111c0:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80111c2:	f013 0f02 	tst.w	r3, #2
 80111c6:	d107      	bne.n	80111d8 <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80111c8:	f013 0f08 	tst.w	r3, #8
 80111cc:	d10f      	bne.n	80111ee <HAL_UART_IRQHandler+0xae>
 80111ce:	e012      	b.n	80111f6 <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80111d0:	f013 0f02 	tst.w	r3, #2
 80111d4:	d004      	beq.n	80111e0 <HAL_UART_IRQHandler+0xa0>
 80111d6:	b119      	cbz	r1, 80111e0 <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80111d8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80111da:	f042 0204 	orr.w	r2, r2, #4
 80111de:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80111e0:	f013 0f08 	tst.w	r3, #8
 80111e4:	d007      	beq.n	80111f6 <HAL_UART_IRQHandler+0xb6>
 80111e6:	f000 0220 	and.w	r2, r0, #32
 80111ea:	430a      	orrs	r2, r1
 80111ec:	d003      	beq.n	80111f6 <HAL_UART_IRQHandler+0xb6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80111ee:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80111f0:	f042 0208 	orr.w	r2, r2, #8
 80111f4:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80111f6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80111f8:	2a00      	cmp	r2, #0
 80111fa:	d0ce      	beq.n	801119a <HAL_UART_IRQHandler+0x5a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80111fc:	f013 0f20 	tst.w	r3, #32
 8011200:	d002      	beq.n	8011208 <HAL_UART_IRQHandler+0xc8>
 8011202:	f010 0f20 	tst.w	r0, #32
 8011206:	d10e      	bne.n	8011226 <HAL_UART_IRQHandler+0xe6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8011208:	6823      	ldr	r3, [r4, #0]
 801120a:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801120c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801120e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8011212:	f002 0208 	and.w	r2, r2, #8
 8011216:	4313      	orrs	r3, r2
 8011218:	d109      	bne.n	801122e <HAL_UART_IRQHandler+0xee>
        HAL_UART_ErrorCallback(huart);
 801121a:	4620      	mov	r0, r4
 801121c:	f7fd fbda 	bl	800e9d4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011220:	2300      	movs	r3, #0
 8011222:	6463      	str	r3, [r4, #68]	@ 0x44
 8011224:	e7b9      	b.n	801119a <HAL_UART_IRQHandler+0x5a>
        UART_Receive_IT(huart);
 8011226:	4620      	mov	r0, r4
 8011228:	f7ff ff1a 	bl	8011060 <UART_Receive_IT>
 801122c:	e7ec      	b.n	8011208 <HAL_UART_IRQHandler+0xc8>
        UART_EndRxTransfer(huart);
 801122e:	4620      	mov	r0, r4
 8011230:	f7ff fcea 	bl	8010c08 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011234:	6823      	ldr	r3, [r4, #0]
 8011236:	695b      	ldr	r3, [r3, #20]
 8011238:	f013 0f40 	tst.w	r3, #64	@ 0x40
 801123c:	d01c      	beq.n	8011278 <HAL_UART_IRQHandler+0x138>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801123e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011240:	f102 0314 	add.w	r3, r2, #20
 8011244:	e853 3f00 	ldrex	r3, [r3]
 8011248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801124c:	3214      	adds	r2, #20
 801124e:	e842 3100 	strex	r1, r3, [r2]
 8011252:	2900      	cmp	r1, #0
 8011254:	d1f3      	bne.n	801123e <HAL_UART_IRQHandler+0xfe>
          if (huart->hdmarx != NULL)
 8011256:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011258:	b153      	cbz	r3, 8011270 <HAL_UART_IRQHandler+0x130>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801125a:	4a7c      	ldr	r2, [pc, #496]	@ (801144c <HAL_UART_IRQHandler+0x30c>)
 801125c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801125e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8011260:	f7fe f8e2 	bl	800f428 <HAL_DMA_Abort_IT>
 8011264:	2800      	cmp	r0, #0
 8011266:	d098      	beq.n	801119a <HAL_UART_IRQHandler+0x5a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011268:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801126a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801126c:	4798      	blx	r3
 801126e:	e794      	b.n	801119a <HAL_UART_IRQHandler+0x5a>
            HAL_UART_ErrorCallback(huart);
 8011270:	4620      	mov	r0, r4
 8011272:	f7fd fbaf 	bl	800e9d4 <HAL_UART_ErrorCallback>
 8011276:	e790      	b.n	801119a <HAL_UART_IRQHandler+0x5a>
          HAL_UART_ErrorCallback(huart);
 8011278:	4620      	mov	r0, r4
 801127a:	f7fd fbab 	bl	800e9d4 <HAL_UART_ErrorCallback>
 801127e:	e78c      	b.n	801119a <HAL_UART_IRQHandler+0x5a>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8011280:	f013 0f10 	tst.w	r3, #16
 8011284:	f43f af7b 	beq.w	801117e <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8011288:	f010 0f10 	tst.w	r0, #16
 801128c:	f43f af77 	beq.w	801117e <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011290:	2300      	movs	r3, #0
 8011292:	9301      	str	r3, [sp, #4]
 8011294:	6813      	ldr	r3, [r2, #0]
 8011296:	9301      	str	r3, [sp, #4]
 8011298:	6853      	ldr	r3, [r2, #4]
 801129a:	9301      	str	r3, [sp, #4]
 801129c:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801129e:	6953      	ldr	r3, [r2, #20]
 80112a0:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80112a4:	d05e      	beq.n	8011364 <HAL_UART_IRQHandler+0x224>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80112a6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	6851      	ldr	r1, [r2, #4]
 80112ac:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 80112ae:	2900      	cmp	r1, #0
 80112b0:	d049      	beq.n	8011346 <HAL_UART_IRQHandler+0x206>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80112b2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 80112b4:	428a      	cmp	r2, r1
 80112b6:	d946      	bls.n	8011346 <HAL_UART_IRQHandler+0x206>
        huart->RxXferCount = nb_remaining_rx_data;
 80112b8:	85e1      	strh	r1, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80112ba:	69db      	ldr	r3, [r3, #28]
 80112bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80112c0:	d037      	beq.n	8011332 <HAL_UART_IRQHandler+0x1f2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80112c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112c4:	f102 030c 	add.w	r3, r2, #12
 80112c8:	e853 3f00 	ldrex	r3, [r3]
 80112cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112d0:	320c      	adds	r2, #12
 80112d2:	e842 3100 	strex	r1, r3, [r2]
 80112d6:	2900      	cmp	r1, #0
 80112d8:	d1f3      	bne.n	80112c2 <HAL_UART_IRQHandler+0x182>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80112da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112dc:	f102 0314 	add.w	r3, r2, #20
 80112e0:	e853 3f00 	ldrex	r3, [r3]
 80112e4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112e8:	3214      	adds	r2, #20
 80112ea:	e842 3100 	strex	r1, r3, [r2]
 80112ee:	2900      	cmp	r1, #0
 80112f0:	d1f3      	bne.n	80112da <HAL_UART_IRQHandler+0x19a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80112f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112f4:	f102 0314 	add.w	r3, r2, #20
 80112f8:	e853 3f00 	ldrex	r3, [r3]
 80112fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011300:	3214      	adds	r2, #20
 8011302:	e842 3100 	strex	r1, r3, [r2]
 8011306:	2900      	cmp	r1, #0
 8011308:	d1f3      	bne.n	80112f2 <HAL_UART_IRQHandler+0x1b2>
          huart->RxState = HAL_UART_STATE_READY;
 801130a:	2320      	movs	r3, #32
 801130c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011310:	2300      	movs	r3, #0
 8011312:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011314:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011316:	f102 030c 	add.w	r3, r2, #12
 801131a:	e853 3f00 	ldrex	r3, [r3]
 801131e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011322:	320c      	adds	r2, #12
 8011324:	e842 3100 	strex	r1, r3, [r2]
 8011328:	2900      	cmp	r1, #0
 801132a:	d1f3      	bne.n	8011314 <HAL_UART_IRQHandler+0x1d4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 801132c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801132e:	f7fe f836 	bl	800f39e <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011332:	2302      	movs	r3, #2
 8011334:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011336:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8011338:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801133a:	1ac9      	subs	r1, r1, r3
 801133c:	b289      	uxth	r1, r1
 801133e:	4620      	mov	r0, r4
 8011340:	f7ff fe8d 	bl	801105e <HAL_UARTEx_RxEventCallback>
 8011344:	e729      	b.n	801119a <HAL_UART_IRQHandler+0x5a>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8011346:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8011348:	428a      	cmp	r2, r1
 801134a:	f47f af26 	bne.w	801119a <HAL_UART_IRQHandler+0x5a>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 801134e:	69db      	ldr	r3, [r3, #28]
 8011350:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011354:	f47f af21 	bne.w	801119a <HAL_UART_IRQHandler+0x5a>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011358:	2302      	movs	r3, #2
 801135a:	6363      	str	r3, [r4, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801135c:	4620      	mov	r0, r4
 801135e:	f7ff fe7e 	bl	801105e <HAL_UARTEx_RxEventCallback>
 8011362:	e71a      	b.n	801119a <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011364:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8011366:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 8011368:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 801136a:	b29b      	uxth	r3, r3
 801136c:	2b00      	cmp	r3, #0
 801136e:	f43f af14 	beq.w	801119a <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011372:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8011374:	1a89      	subs	r1, r1, r2
 8011376:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8011378:	2900      	cmp	r1, #0
 801137a:	f43f af0e 	beq.w	801119a <HAL_UART_IRQHandler+0x5a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801137e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011380:	f102 030c 	add.w	r3, r2, #12
 8011384:	e853 3f00 	ldrex	r3, [r3]
 8011388:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801138c:	320c      	adds	r2, #12
 801138e:	e842 3000 	strex	r0, r3, [r2]
 8011392:	2800      	cmp	r0, #0
 8011394:	d1f3      	bne.n	801137e <HAL_UART_IRQHandler+0x23e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011396:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011398:	f102 0314 	add.w	r3, r2, #20
 801139c:	e853 3f00 	ldrex	r3, [r3]
 80113a0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a4:	3214      	adds	r2, #20
 80113a6:	e842 3000 	strex	r0, r3, [r2]
 80113aa:	2800      	cmp	r0, #0
 80113ac:	d1f3      	bne.n	8011396 <HAL_UART_IRQHandler+0x256>
        huart->RxState = HAL_UART_STATE_READY;
 80113ae:	2320      	movs	r3, #32
 80113b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80113b4:	2300      	movs	r3, #0
 80113b6:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113b8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113ba:	f102 030c 	add.w	r3, r2, #12
 80113be:	e853 3f00 	ldrex	r3, [r3]
 80113c2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113c6:	320c      	adds	r2, #12
 80113c8:	e842 3000 	strex	r0, r3, [r2]
 80113cc:	2800      	cmp	r0, #0
 80113ce:	d1f3      	bne.n	80113b8 <HAL_UART_IRQHandler+0x278>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80113d0:	2302      	movs	r3, #2
 80113d2:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80113d4:	4620      	mov	r0, r4
 80113d6:	f7ff fe42 	bl	801105e <HAL_UARTEx_RxEventCallback>
 80113da:	e6de      	b.n	801119a <HAL_UART_IRQHandler+0x5a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80113dc:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	2b21      	cmp	r3, #33	@ 0x21
 80113e4:	f47f aed9 	bne.w	801119a <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113e8:	68a3      	ldr	r3, [r4, #8]
 80113ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80113ee:	d016      	beq.n	801141e <HAL_UART_IRQHandler+0x2de>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80113f0:	6a23      	ldr	r3, [r4, #32]
 80113f2:	1c59      	adds	r1, r3, #1
 80113f4:	6221      	str	r1, [r4, #32]
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 80113fa:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80113fc:	3b01      	subs	r3, #1
 80113fe:	b29b      	uxth	r3, r3
 8011400:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8011402:	2b00      	cmp	r3, #0
 8011404:	f47f aec9 	bne.w	801119a <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8011408:	6822      	ldr	r2, [r4, #0]
 801140a:	68d3      	ldr	r3, [r2, #12]
 801140c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011410:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011412:	6822      	ldr	r2, [r4, #0]
 8011414:	68d3      	ldr	r3, [r2, #12]
 8011416:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801141a:	60d3      	str	r3, [r2, #12]
 801141c:	e6bd      	b.n	801119a <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801141e:	6923      	ldr	r3, [r4, #16]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d1e5      	bne.n	80113f0 <HAL_UART_IRQHandler+0x2b0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8011424:	6a23      	ldr	r3, [r4, #32]
 8011426:	881b      	ldrh	r3, [r3, #0]
 8011428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801142c:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 801142e:	6a23      	ldr	r3, [r4, #32]
 8011430:	3302      	adds	r3, #2
 8011432:	6223      	str	r3, [r4, #32]
 8011434:	e7e1      	b.n	80113fa <HAL_UART_IRQHandler+0x2ba>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8011436:	68d3      	ldr	r3, [r2, #12]
 8011438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801143c:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 801143e:	2320      	movs	r3, #32
 8011440:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8011444:	4620      	mov	r0, r4
 8011446:	f7fd fabd 	bl	800e9c4 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 801144a:	e6a6      	b.n	801119a <HAL_UART_IRQHandler+0x5a>
 801144c:	08010e01 	.word	0x08010e01

08011450 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 8011450:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8011452:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8011454:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011456:	2300      	movs	r3, #0
 8011458:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801145a:	2322      	movs	r3, #34	@ 0x22
 801145c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011460:	6903      	ldr	r3, [r0, #16]
 8011462:	b123      	cbz	r3, 801146e <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8011464:	6802      	ldr	r2, [r0, #0]
 8011466:	68d3      	ldr	r3, [r2, #12]
 8011468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801146c:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801146e:	6802      	ldr	r2, [r0, #0]
 8011470:	6953      	ldr	r3, [r2, #20]
 8011472:	f043 0301 	orr.w	r3, r3, #1
 8011476:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8011478:	6802      	ldr	r2, [r0, #0]
 801147a:	68d3      	ldr	r3, [r2, #12]
 801147c:	f043 0320 	orr.w	r3, r3, #32
 8011480:	60d3      	str	r3, [r2, #12]
}
 8011482:	2000      	movs	r0, #0
 8011484:	4770      	bx	lr

08011486 <HAL_UART_Receive_IT>:
{
 8011486:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8011488:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 801148c:	b2db      	uxtb	r3, r3
 801148e:	2b20      	cmp	r3, #32
 8011490:	d108      	bne.n	80114a4 <HAL_UART_Receive_IT+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8011492:	b149      	cbz	r1, 80114a8 <HAL_UART_Receive_IT+0x22>
 8011494:	b90a      	cbnz	r2, 801149a <HAL_UART_Receive_IT+0x14>
      return HAL_ERROR;
 8011496:	2001      	movs	r0, #1
}
 8011498:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801149a:	2300      	movs	r3, #0
 801149c:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 801149e:	f7ff ffd7 	bl	8011450 <UART_Start_Receive_IT>
 80114a2:	e7f9      	b.n	8011498 <HAL_UART_Receive_IT+0x12>
    return HAL_BUSY;
 80114a4:	2002      	movs	r0, #2
 80114a6:	e7f7      	b.n	8011498 <HAL_UART_Receive_IT+0x12>
      return HAL_ERROR;
 80114a8:	2001      	movs	r0, #1
 80114aa:	e7f5      	b.n	8011498 <HAL_UART_Receive_IT+0x12>

080114ac <Probe_InitHAL>:
    motorB.last_step_angle = 9999;
}

/* Private functions ---------------------------------------------------------*/
void Probe_InitHAL(void)
{
 80114ac:	b508      	push	{r3, lr}
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80114ae:	4802      	ldr	r0, [pc, #8]	@ (80114b8 <Probe_InitHAL+0xc>)
 80114b0:	f7ff f8e0 	bl	8010674 <HAL_TIM_Base_Start_IT>
    {
        // error handler
    }
}
 80114b4:	bd08      	pop	{r3, pc}
 80114b6:	bf00      	nop
 80114b8:	20000930 	.word	0x20000930

080114bc <Probe_Init>:
{
 80114bc:	b508      	push	{r3, lr}
    Probe_InitHAL();
 80114be:	f7ff fff5 	bl	80114ac <Probe_InitHAL>
    return DIR_NONE;
}

static inline void Filter_Reset(Filter_t *f)
{
    f->exp_avg = 0.0f;
 80114c2:	4b0d      	ldr	r3, [pc, #52]	@ (80114f8 <Probe_Init+0x3c>)
 80114c4:	2100      	movs	r1, #0
 80114c6:	6019      	str	r1, [r3, #0]
    f->movavg_index = 0;
 80114c8:	2200      	movs	r2, #0
 80114ca:	741a      	strb	r2, [r3, #16]
    f->movavg_count = 0;
 80114cc:	745a      	strb	r2, [r3, #17]
    f->initialized = 0;
 80114ce:	749a      	strb	r2, [r3, #18]
    f->last_value = 0.0f;
 80114d0:	6159      	str	r1, [r3, #20]
    f->exp_avg = 0.0f;
 80114d2:	6199      	str	r1, [r3, #24]
    f->movavg_index = 0;
 80114d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    f->movavg_count = 0;
 80114d8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    f->initialized = 0;
 80114dc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    f->last_value = 0.0f;
 80114e0:	62d9      	str	r1, [r3, #44]	@ 0x2c
    motorA.I1_last = 0;
 80114e2:	861a      	strh	r2, [r3, #48]	@ 0x30
    motorA.I2_last = 0;
 80114e4:	865a      	strh	r2, [r3, #50]	@ 0x32
    motorA.angle_deg = 0;
 80114e6:	869a      	strh	r2, [r3, #52]	@ 0x34
    motorA.dir = DIR_NONE;
 80114e8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    motorA.step_count = 0;
 80114ec:	871a      	strh	r2, [r3, #56]	@ 0x38
    motorA.last_step_angle = 9999;
 80114ee:	f242 720f 	movw	r2, #9999	@ 0x270f
 80114f2:	875a      	strh	r2, [r3, #58]	@ 0x3a
}
 80114f4:	bd08      	pop	{r3, pc}
 80114f6:	bf00      	nop
 80114f8:	20000b3c 	.word	0x20000b3c

080114fc <StartAdcMeasurement>:
    }
}

/* ADC measurement start -----------------------------------------------------*/
void StartAdcMeasurement(void)
{
 80114fc:	b508      	push	{r3, lr}
    if (adc_ready)
 80114fe:	4b08      	ldr	r3, [pc, #32]	@ (8011520 <StartAdcMeasurement+0x24>)
 8011500:	781b      	ldrb	r3, [r3, #0]
 8011502:	b923      	cbnz	r3, 801150e <StartAdcMeasurement+0x12>
            // chyba při startu
        }
    }
    else
    {
        adc_ready_counter++;
 8011504:	4a07      	ldr	r2, [pc, #28]	@ (8011524 <StartAdcMeasurement+0x28>)
 8011506:	8813      	ldrh	r3, [r2, #0]
 8011508:	3301      	adds	r3, #1
 801150a:	8013      	strh	r3, [r2, #0]
    }
}
 801150c:	bd08      	pop	{r3, pc}
        adc_ready = 0;
 801150e:	4b04      	ldr	r3, [pc, #16]	@ (8011520 <StartAdcMeasurement+0x24>)
 8011510:	2200      	movs	r2, #0
 8011512:	701a      	strb	r2, [r3, #0]
        if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_values, ADC_CHANNEL_COUNT) != HAL_OK)
 8011514:	2204      	movs	r2, #4
 8011516:	4904      	ldr	r1, [pc, #16]	@ (8011528 <StartAdcMeasurement+0x2c>)
 8011518:	4804      	ldr	r0, [pc, #16]	@ (801152c <StartAdcMeasurement+0x30>)
 801151a:	f7fd fbbf 	bl	800ec9c <HAL_ADC_Start_DMA>
        }
 801151e:	e7f5      	b.n	801150c <StartAdcMeasurement+0x10>
 8011520:	200000cc 	.word	0x200000cc
 8011524:	20000b06 	.word	0x20000b06
 8011528:	20000b08 	.word	0x20000b08
 801152c:	20000a98 	.word	0x20000a98

08011530 <HAL_ADC_ConvCpltCallback>:
   // Motor_StepDetectionAndUpdate(&motorB);
}
/* Callback functions --------------------------------------------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
    if (hadc->Instance == ADC1)
 8011530:	6802      	ldr	r2, [r0, #0]
 8011532:	4bbb      	ldr	r3, [pc, #748]	@ (8011820 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8011534:	429a      	cmp	r2, r3
 8011536:	d000      	beq.n	801153a <HAL_ADC_ConvCpltCallback+0xa>
 8011538:	4770      	bx	lr
{
 801153a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Motor_HandleSample(&motorA,
 801153e:	4bb9      	ldr	r3, [pc, #740]	@ (8011824 <HAL_ADC_ConvCpltCallback+0x2f4>)
 8011540:	885e      	ldrh	r6, [r3, #2]
 8011542:	881f      	ldrh	r7, [r3, #0]
    if (!f->initialized)
 8011544:	4bb8      	ldr	r3, [pc, #736]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8011546:	7c9b      	ldrb	r3, [r3, #18]
 8011548:	2b00      	cmp	r3, #0
 801154a:	f000 80e7 	beq.w	801171c <HAL_ADC_ConvCpltCallback+0x1ec>
        f->exp_avg = (0.9f * f->exp_avg) + (0.1f * (float) x);
 801154e:	4bb6      	ldr	r3, [pc, #728]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8011550:	edd3 7a00 	vldr	s15, [r3]
 8011554:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 801182c <HAL_ADC_ConvCpltCallback+0x2fc>
 8011558:	ee67 7a87 	vmul.f32	s15, s15, s14
 801155c:	ee07 6a10 	vmov	s14, r6
 8011560:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011564:	eddf 6ab2 	vldr	s13, [pc, #712]	@ 8011830 <HAL_ADC_ConvCpltCallback+0x300>
 8011568:	ee27 7a26 	vmul.f32	s14, s14, s13
 801156c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011570:	edc3 7a00 	vstr	s15, [r3]
    float diff = fabsf(f->exp_avg - f->last_value);
 8011574:	ed93 7a05 	vldr	s14, [r3, #20]
 8011578:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801157c:	eeb0 7ac7 	vabs.f32	s14, s14
    if (diff <= 25.0f)
 8011580:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8011584:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801158c:	d825      	bhi.n	80115da <HAL_ADC_ConvCpltCallback+0xaa>
        f->movavg_buf[f->movavg_index] = f->exp_avg;
 801158e:	4619      	mov	r1, r3
 8011590:	7c1b      	ldrb	r3, [r3, #16]
 8011592:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011596:	edc2 7a01 	vstr	s15, [r2, #4]
        f->movavg_index = (f->movavg_index + 1) % MOVAVG_LEN;
 801159a:	3301      	adds	r3, #1
 801159c:	4aa5      	ldr	r2, [pc, #660]	@ (8011834 <HAL_ADC_ConvCpltCallback+0x304>)
 801159e:	fb82 0203 	smull	r0, r2, r2, r3
 80115a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80115a6:	1a9b      	subs	r3, r3, r2
 80115a8:	740b      	strb	r3, [r1, #16]
        if (f->movavg_count < MOVAVG_LEN)
 80115aa:	7c4a      	ldrb	r2, [r1, #17]
 80115ac:	2a02      	cmp	r2, #2
 80115ae:	f200 80c6 	bhi.w	801173e <HAL_ADC_ConvCpltCallback+0x20e>
            f->movavg_count++;
 80115b2:	3201      	adds	r2, #1
 80115b4:	744a      	strb	r2, [r1, #17]
        for (uint8_t i = 0; i < f->movavg_count; i++)
 80115b6:	b2d2      	uxtb	r2, r2
 80115b8:	4b9f      	ldr	r3, [pc, #636]	@ (8011838 <HAL_ADC_ConvCpltCallback+0x308>)
 80115ba:	eb03 0182 	add.w	r1, r3, r2, lsl #2
        float sum = 0.0f;
 80115be:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 801183c <HAL_ADC_ConvCpltCallback+0x30c>
            sum += f->movavg_buf[i];
 80115c2:	ecf3 7a01 	vldmia	r3!, {s15}
 80115c6:	ee37 7a27 	vadd.f32	s14, s14, s15
        for (uint8_t i = 0; i < f->movavg_count; i++)
 80115ca:	428b      	cmp	r3, r1
 80115cc:	d1f9      	bne.n	80115c2 <HAL_ADC_ConvCpltCallback+0x92>
        f->last_value = sum / f->movavg_count;
 80115ce:	ee07 2a90 	vmov	s15, r2
 80115d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80115d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80115da:	4b93      	ldr	r3, [pc, #588]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 80115dc:	edc3 7a05 	vstr	s15, [r3, #20]
    return (uint16_t) f->last_value;
 80115e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80115e4:	ee17 3a90 	vmov	r3, s15
 80115e8:	b29c      	uxth	r4, r3
    m->I1_last = Filter_Step(&m->I1_filter, raw_I1);
 80115ea:	b224      	sxth	r4, r4
 80115ec:	4b8e      	ldr	r3, [pc, #568]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 80115ee:	861c      	strh	r4, [r3, #48]	@ 0x30
    if (!f->initialized)
 80115f0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	f000 80aa 	beq.w	801174e <HAL_ADC_ConvCpltCallback+0x21e>
        f->exp_avg = (0.9f * f->exp_avg) + (0.1f * (float) x);
 80115fa:	4b8b      	ldr	r3, [pc, #556]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 80115fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8011600:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 801182c <HAL_ADC_ConvCpltCallback+0x2fc>
 8011604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011608:	ee07 7a10 	vmov	s14, r7
 801160c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011610:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8011830 <HAL_ADC_ConvCpltCallback+0x300>
 8011614:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011618:	ee77 7a87 	vadd.f32	s15, s15, s14
 801161c:	edc3 7a06 	vstr	s15, [r3, #24]
    float diff = fabsf(f->exp_avg - f->last_value);
 8011620:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8011624:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8011628:	eeb0 7ac7 	vabs.f32	s14, s14
    if (diff <= 25.0f)
 801162c:	eef3 6a09 	vmov.f32	s13, #57	@ 0x41c80000  25.0
 8011630:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011638:	d829      	bhi.n	801168e <HAL_ADC_ConvCpltCallback+0x15e>
        f->movavg_buf[f->movavg_index] = f->exp_avg;
 801163a:	4619      	mov	r1, r3
 801163c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011640:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8011644:	edc2 7a07 	vstr	s15, [r2, #28]
        f->movavg_index = (f->movavg_index + 1) % MOVAVG_LEN;
 8011648:	3301      	adds	r3, #1
 801164a:	4a7a      	ldr	r2, [pc, #488]	@ (8011834 <HAL_ADC_ConvCpltCallback+0x304>)
 801164c:	fb82 0203 	smull	r0, r2, r2, r3
 8011650:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011654:	1a9b      	subs	r3, r3, r2
 8011656:	f881 3028 	strb.w	r3, [r1, #40]	@ 0x28
        if (f->movavg_count < MOVAVG_LEN)
 801165a:	f891 2029 	ldrb.w	r2, [r1, #41]	@ 0x29
 801165e:	2a02      	cmp	r2, #2
 8011660:	f200 8089 	bhi.w	8011776 <HAL_ADC_ConvCpltCallback+0x246>
            f->movavg_count++;
 8011664:	3201      	adds	r2, #1
 8011666:	f881 2029 	strb.w	r2, [r1, #41]	@ 0x29
        for (uint8_t i = 0; i < f->movavg_count; i++)
 801166a:	b2d2      	uxtb	r2, r2
 801166c:	4b74      	ldr	r3, [pc, #464]	@ (8011840 <HAL_ADC_ConvCpltCallback+0x310>)
 801166e:	eb03 0182 	add.w	r1, r3, r2, lsl #2
        float sum = 0.0f;
 8011672:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 801183c <HAL_ADC_ConvCpltCallback+0x30c>
            sum += f->movavg_buf[i];
 8011676:	ecf3 7a01 	vldmia	r3!, {s15}
 801167a:	ee37 7a27 	vadd.f32	s14, s14, s15
        for (uint8_t i = 0; i < f->movavg_count; i++)
 801167e:	428b      	cmp	r3, r1
 8011680:	d1f9      	bne.n	8011676 <HAL_ADC_ConvCpltCallback+0x146>
        f->last_value = sum / f->movavg_count;
 8011682:	ee07 2a90 	vmov	s15, r2
 8011686:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801168a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801168e:	4b66      	ldr	r3, [pc, #408]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8011690:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    return (uint16_t) f->last_value;
 8011694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011698:	ee17 3a90 	vmov	r3, s15
 801169c:	b29d      	uxth	r5, r3
    m->I2_last = Filter_Step(&m->I2_filter, raw_I2);
 801169e:	b22d      	sxth	r5, r5
 80116a0:	f8df 8184 	ldr.w	r8, [pc, #388]	@ 8011828 <HAL_ADC_ConvCpltCallback+0x2f8>
 80116a4:	f8a8 5032 	strh.w	r5, [r8, #50]	@ 0x32
                             (float)m->I2_last - MIDDLE_VALUE);
 80116a8:	ee07 5a90 	vmov	s15, r5
 80116ac:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    float angle_rad = atan2f((float)m->I1_last - MIDDLE_VALUE,
 80116b0:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8011844 <HAL_ADC_ConvCpltCallback+0x314>
 80116b4:	ee07 4a10 	vmov	s14, r4
 80116b8:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80116bc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80116c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80116c4:	f000 fa20 	bl	8011b08 <atan2f>
 80116c8:	ee10 0a10 	vmov	r0, s0
    m->angle_deg = (int16_t)(angle_rad * (180.0f / M_PI));
 80116cc:	f7fb f95a 	bl	800c984 <__aeabi_f2d>
 80116d0:	a351      	add	r3, pc, #324	@ (adr r3, 8011818 <HAL_ADC_ConvCpltCallback+0x2e8>)
 80116d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d6:	f7fa fec7 	bl	800c468 <__aeabi_dmul>
 80116da:	f7fb f9ab 	bl	800ca34 <__aeabi_d2iz>
 80116de:	b200      	sxth	r0, r0
 80116e0:	f8a8 0034 	strh.w	r0, [r8, #52]	@ 0x34
    switch (capture_state)
 80116e4:	4b58      	ldr	r3, [pc, #352]	@ (8011848 <HAL_ADC_ConvCpltCallback+0x318>)
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d04b      	beq.n	8011788 <HAL_ADC_ConvCpltCallback+0x258>
 80116f0:	2a01      	cmp	r2, #1
 80116f2:	d07f      	beq.n	80117f4 <HAL_ADC_ConvCpltCallback+0x2c4>
    if (abs(m->I1_last - MIDDLE_VALUE) > hysteresis &&
 80116f4:	f2a4 74fd 	subw	r4, r4, #2045	@ 0x7fd
 80116f8:	2c00      	cmp	r4, #0
 80116fa:	bfb8      	it	lt
 80116fc:	4264      	neglt	r4, r4
 80116fe:	2c1e      	cmp	r4, #30
 8011700:	dd07      	ble.n	8011712 <HAL_ADC_ConvCpltCallback+0x1e2>
        abs(m->I2_last - MIDDLE_VALUE) > hysteresis)
 8011702:	f2a5 75fd 	subw	r5, r5, #2045	@ 0x7fd
 8011706:	2d00      	cmp	r5, #0
 8011708:	bfb8      	it	lt
 801170a:	426d      	neglt	r5, r5
    if (abs(m->I1_last - MIDDLE_VALUE) > hysteresis &&
 801170c:	2d1e      	cmp	r5, #30
 801170e:	f300 80c3 	bgt.w	8011898 <HAL_ADC_ConvCpltCallback+0x368>
    {
        Capture_HandleSample(adc_values);
        adc_ready = 1;
 8011712:	4b4e      	ldr	r3, [pc, #312]	@ (801184c <HAL_ADC_ConvCpltCallback+0x31c>)
 8011714:	2201      	movs	r2, #1
 8011716:	701a      	strb	r2, [r3, #0]
    }
}
 8011718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        f->exp_avg = (float) x;
 801171c:	ee07 6a90 	vmov	s15, r6
 8011720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011724:	4b40      	ldr	r3, [pc, #256]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8011726:	edc3 7a00 	vstr	s15, [r3]
        f->last_value = f->exp_avg;
 801172a:	edc3 7a05 	vstr	s15, [r3, #20]
        f->initialized = 1;
 801172e:	2101      	movs	r1, #1
 8011730:	7499      	strb	r1, [r3, #18]
        f->movavg_buf[0] = f->exp_avg;
 8011732:	edc3 7a01 	vstr	s15, [r3, #4]
        f->movavg_index = 1;
 8011736:	7419      	strb	r1, [r3, #16]
        f->movavg_count = 1;
 8011738:	7459      	strb	r1, [r3, #17]
        return (uint16_t) f->exp_avg;
 801173a:	4634      	mov	r4, r6
 801173c:	e755      	b.n	80115ea <HAL_ADC_ConvCpltCallback+0xba>
        for (uint8_t i = 0; i < f->movavg_count; i++)
 801173e:	4b3a      	ldr	r3, [pc, #232]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8011740:	7c5a      	ldrb	r2, [r3, #17]
 8011742:	2a00      	cmp	r2, #0
 8011744:	f47f af38 	bne.w	80115b8 <HAL_ADC_ConvCpltCallback+0x88>
        float sum = 0.0f;
 8011748:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 801183c <HAL_ADC_ConvCpltCallback+0x30c>
 801174c:	e73f      	b.n	80115ce <HAL_ADC_ConvCpltCallback+0x9e>
        f->exp_avg = (float) x;
 801174e:	ee07 7a90 	vmov	s15, r7
 8011752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011756:	4b34      	ldr	r3, [pc, #208]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8011758:	edc3 7a06 	vstr	s15, [r3, #24]
        f->last_value = f->exp_avg;
 801175c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        f->initialized = 1;
 8011760:	2101      	movs	r1, #1
 8011762:	f883 102a 	strb.w	r1, [r3, #42]	@ 0x2a
        f->movavg_buf[0] = f->exp_avg;
 8011766:	edc3 7a07 	vstr	s15, [r3, #28]
        f->movavg_index = 1;
 801176a:	f883 1028 	strb.w	r1, [r3, #40]	@ 0x28
        f->movavg_count = 1;
 801176e:	f883 1029 	strb.w	r1, [r3, #41]	@ 0x29
        return (uint16_t) f->exp_avg;
 8011772:	463d      	mov	r5, r7
 8011774:	e793      	b.n	801169e <HAL_ADC_ConvCpltCallback+0x16e>
        for (uint8_t i = 0; i < f->movavg_count; i++)
 8011776:	4b2c      	ldr	r3, [pc, #176]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 8011778:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801177c:	2a00      	cmp	r2, #0
 801177e:	f47f af75 	bne.w	801166c <HAL_ADC_ConvCpltCallback+0x13c>
        float sum = 0.0f;
 8011782:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 801183c <HAL_ADC_ConvCpltCallback+0x30c>
 8011786:	e77c      	b.n	8011682 <HAL_ADC_ConvCpltCallback+0x152>
            if ((abs(adc_sample[ADC_CHANNEL_IA1] - TRIGGER_THRESHOLD) > 50) ||
 8011788:	f6a6 0302 	subw	r3, r6, #2050	@ 0x802
 801178c:	2b00      	cmp	r3, #0
 801178e:	bfb8      	it	lt
 8011790:	425b      	neglt	r3, r3
 8011792:	2b32      	cmp	r3, #50	@ 0x32
 8011794:	dc08      	bgt.n	80117a8 <HAL_ADC_ConvCpltCallback+0x278>
                (abs(adc_sample[ADC_CHANNEL_IB2] - TRIGGER_THRESHOLD) > 50))
 8011796:	4b23      	ldr	r3, [pc, #140]	@ (8011824 <HAL_ADC_ConvCpltCallback+0x2f4>)
 8011798:	889b      	ldrh	r3, [r3, #4]
 801179a:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 801179e:	2b00      	cmp	r3, #0
 80117a0:	bfb8      	it	lt
 80117a2:	425b      	neglt	r3, r3
            if ((abs(adc_sample[ADC_CHANNEL_IA1] - TRIGGER_THRESHOLD) > 50) ||
 80117a4:	2b32      	cmp	r3, #50	@ 0x32
 80117a6:	dda5      	ble.n	80116f4 <HAL_ADC_ConvCpltCallback+0x1c4>
                capture_state = CAPT_CAPTURING;
 80117a8:	4b27      	ldr	r3, [pc, #156]	@ (8011848 <HAL_ADC_ConvCpltCallback+0x318>)
 80117aa:	2201      	movs	r2, #1
 80117ac:	701a      	strb	r2, [r3, #0]
                capture_count = 0;
 80117ae:	4928      	ldr	r1, [pc, #160]	@ (8011850 <HAL_ADC_ConvCpltCallback+0x320>)
 80117b0:	2200      	movs	r2, #0
 80117b2:	600a      	str	r2, [r1, #0]
    f->exp_avg = 0.0f;
 80117b4:	4b1c      	ldr	r3, [pc, #112]	@ (8011828 <HAL_ADC_ConvCpltCallback+0x2f8>)
 80117b6:	f04f 0c00 	mov.w	ip, #0
 80117ba:	f8c3 c000 	str.w	ip, [r3]
    f->movavg_index = 0;
 80117be:	741a      	strb	r2, [r3, #16]
    f->movavg_count = 0;
 80117c0:	745a      	strb	r2, [r3, #17]
    f->initialized = 0;
 80117c2:	749a      	strb	r2, [r3, #18]
    f->last_value = 0.0f;
 80117c4:	f8c3 c014 	str.w	ip, [r3, #20]
    f->exp_avg = 0.0f;
 80117c8:	f8c3 c018 	str.w	ip, [r3, #24]
    f->movavg_index = 0;
 80117cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    f->movavg_count = 0;
 80117d0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    f->initialized = 0;
 80117d4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    f->last_value = 0.0f;
 80117d8:	f8c3 c02c 	str.w	ip, [r3, #44]	@ 0x2c
                capture_buffer[capture_count]       = adc_sample[ADC_CHANNEL_IA1];
 80117dc:	680a      	ldr	r2, [r1, #0]
 80117de:	4b1d      	ldr	r3, [pc, #116]	@ (8011854 <HAL_ADC_ConvCpltCallback+0x324>)
 80117e0:	f823 6012 	strh.w	r6, [r3, r2, lsl #1]
                capture_buffer_ch2[capture_count]   = adc_sample[ADC_CHANNEL_IA2];
 80117e4:	680a      	ldr	r2, [r1, #0]
 80117e6:	4b1c      	ldr	r3, [pc, #112]	@ (8011858 <HAL_ADC_ConvCpltCallback+0x328>)
 80117e8:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
                capture_count++;
 80117ec:	680b      	ldr	r3, [r1, #0]
 80117ee:	3301      	adds	r3, #1
 80117f0:	600b      	str	r3, [r1, #0]
 80117f2:	e77f      	b.n	80116f4 <HAL_ADC_ConvCpltCallback+0x1c4>
            if (capture_count < CAPTURE_SAMPLES)
 80117f4:	4b16      	ldr	r3, [pc, #88]	@ (8011850 <HAL_ADC_ConvCpltCallback+0x320>)
 80117f6:	681a      	ldr	r2, [r3, #0]
 80117f8:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 80117fc:	429a      	cmp	r2, r3
 80117fe:	f63f af79 	bhi.w	80116f4 <HAL_ADC_ConvCpltCallback+0x1c4>
                sample_divider++;
 8011802:	4b16      	ldr	r3, [pc, #88]	@ (801185c <HAL_ADC_ConvCpltCallback+0x32c>)
 8011804:	781b      	ldrb	r3, [r3, #0]
 8011806:	3301      	adds	r3, #1
 8011808:	b2db      	uxtb	r3, r3
                if (sample_divider >= 5)
 801180a:	2b04      	cmp	r3, #4
 801180c:	d828      	bhi.n	8011860 <HAL_ADC_ConvCpltCallback+0x330>
                sample_divider++;
 801180e:	4a13      	ldr	r2, [pc, #76]	@ (801185c <HAL_ADC_ConvCpltCallback+0x32c>)
 8011810:	7013      	strb	r3, [r2, #0]
 8011812:	e76f      	b.n	80116f4 <HAL_ADC_ConvCpltCallback+0x1c4>
 8011814:	f3af 8000 	nop.w
 8011818:	1a63c1f8 	.word	0x1a63c1f8
 801181c:	404ca5dc 	.word	0x404ca5dc
 8011820:	40012000 	.word	0x40012000
 8011824:	20000b08 	.word	0x20000b08
 8011828:	20000b3c 	.word	0x20000b3c
 801182c:	3f666666 	.word	0x3f666666
 8011830:	3dcccccd 	.word	0x3dcccccd
 8011834:	55555556 	.word	0x55555556
 8011838:	20000b40 	.word	0x20000b40
 801183c:	00000000 	.word	0x00000000
 8011840:	20000b58 	.word	0x20000b58
 8011844:	44ffa000 	.word	0x44ffa000
 8011848:	20014400 	.word	0x20014400
 801184c:	200000cc 	.word	0x200000cc
 8011850:	200143fc 	.word	0x200143fc
 8011854:	2000a7bc 	.word	0x2000a7bc
 8011858:	20000b7c 	.word	0x20000b7c
 801185c:	20000b04 	.word	0x20000b04
                    sample_divider = 0;
 8011860:	4b42      	ldr	r3, [pc, #264]	@ (801196c <HAL_ADC_ConvCpltCallback+0x43c>)
 8011862:	2200      	movs	r2, #0
 8011864:	701a      	strb	r2, [r3, #0]
                    capture_buffer[capture_count]       = adc_sample[ADC_CHANNEL_IA1];
 8011866:	4b42      	ldr	r3, [pc, #264]	@ (8011970 <HAL_ADC_ConvCpltCallback+0x440>)
 8011868:	6819      	ldr	r1, [r3, #0]
 801186a:	4a42      	ldr	r2, [pc, #264]	@ (8011974 <HAL_ADC_ConvCpltCallback+0x444>)
 801186c:	f822 6011 	strh.w	r6, [r2, r1, lsl #1]
                    capture_buffer_ch2[capture_count]   = adc_sample[ADC_CHANNEL_IA2];
 8011870:	6819      	ldr	r1, [r3, #0]
 8011872:	4a41      	ldr	r2, [pc, #260]	@ (8011978 <HAL_ADC_ConvCpltCallback+0x448>)
 8011874:	f822 7011 	strh.w	r7, [r2, r1, lsl #1]
                    capture_count++;
 8011878:	681a      	ldr	r2, [r3, #0]
 801187a:	3201      	adds	r2, #1
 801187c:	601a      	str	r2, [r3, #0]
                    if (capture_count >= CAPTURE_SAMPLES)
 801187e:	681a      	ldr	r2, [r3, #0]
 8011880:	f644 631f 	movw	r3, #19999	@ 0x4e1f
 8011884:	429a      	cmp	r2, r3
 8011886:	f67f af35 	bls.w	80116f4 <HAL_ADC_ConvCpltCallback+0x1c4>
                        capture_state = CAPT_DONE;
 801188a:	4b3c      	ldr	r3, [pc, #240]	@ (801197c <HAL_ADC_ConvCpltCallback+0x44c>)
 801188c:	2202      	movs	r2, #2
 801188e:	701a      	strb	r2, [r3, #0]
                        capture_ready = 1;
 8011890:	4b3b      	ldr	r3, [pc, #236]	@ (8011980 <HAL_ADC_ConvCpltCallback+0x450>)
 8011892:	2201      	movs	r2, #1
 8011894:	701a      	strb	r2, [r3, #0]
 8011896:	e72d      	b.n	80116f4 <HAL_ADC_ConvCpltCallback+0x1c4>
    if (angle > 178 || angle < -178)
 8011898:	f100 03b2 	add.w	r3, r0, #178	@ 0xb2
 801189c:	b29b      	uxth	r3, r3
 801189e:	f5b3 7fb2 	cmp.w	r3, #356	@ 0x164
 80118a2:	d821      	bhi.n	80118e8 <HAL_ADC_ConvCpltCallback+0x3b8>
    if (ab->count < ANGLE_BUFFER_LEN)
 80118a4:	4b37      	ldr	r3, [pc, #220]	@ (8011984 <HAL_ADC_ConvCpltCallback+0x454>)
 80118a6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80118aa:	2a13      	cmp	r2, #19
 80118ac:	d826      	bhi.n	80118fc <HAL_ADC_ConvCpltCallback+0x3cc>
        ab->buf[ab->count++] = angle;
 80118ae:	1c53      	adds	r3, r2, #1
 80118b0:	b2db      	uxtb	r3, r3
 80118b2:	4934      	ldr	r1, [pc, #208]	@ (8011984 <HAL_ADC_ConvCpltCallback+0x454>)
 80118b4:	f881 3028 	strb.w	r3, [r1, #40]	@ 0x28
 80118b8:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
    if (ab->count < ANGLE_BUFFER_LEN)
 80118bc:	2b13      	cmp	r3, #19
 80118be:	d918      	bls.n	80118f2 <HAL_ADC_ConvCpltCallback+0x3c2>
    int16_t last = ab->buf[ab->count - 1];
 80118c0:	4a30      	ldr	r2, [pc, #192]	@ (8011984 <HAL_ADC_ConvCpltCallback+0x454>)
 80118c2:	3b01      	subs	r3, #1
    int16_t diff = last - first;
 80118c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118c8:	8812      	ldrh	r2, [r2, #0]
 80118ca:	1a9b      	subs	r3, r3, r2
 80118cc:	b21b      	sxth	r3, r3
    if (diff > 0)
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	dc3c      	bgt.n	801194c <HAL_ADC_ConvCpltCallback+0x41c>
    if (diff < 0)
 80118d2:	0fdb      	lsrs	r3, r3, #31
 80118d4:	005b      	lsls	r3, r3, #1
        m->dir = Detect_RotationDirection(&angle_buffer);
 80118d6:	4a2c      	ldr	r2, [pc, #176]	@ (8011988 <HAL_ADC_ConvCpltCallback+0x458>)
 80118d8:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
        if (m->dir == DIR_CW || m->dir == DIR_CCW)
 80118dc:	1e5a      	subs	r2, r3, #1
 80118de:	b2d2      	uxtb	r2, r2
 80118e0:	2a01      	cmp	r2, #1
 80118e2:	f63f af16 	bhi.w	8011712 <HAL_ADC_ConvCpltCallback+0x1e2>
 80118e6:	e035      	b.n	8011954 <HAL_ADC_ConvCpltCallback+0x424>
        ab->buf[0] = angle;
 80118e8:	4b26      	ldr	r3, [pc, #152]	@ (8011984 <HAL_ADC_ConvCpltCallback+0x454>)
 80118ea:	8018      	strh	r0, [r3, #0]
        ab->count = 1;
 80118ec:	2201      	movs	r2, #1
 80118ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        m->dir = Detect_RotationDirection(&angle_buffer);
 80118f2:	4b25      	ldr	r3, [pc, #148]	@ (8011988 <HAL_ADC_ConvCpltCallback+0x458>)
 80118f4:	2200      	movs	r2, #0
 80118f6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        if (m->dir == DIR_CW || m->dir == DIR_CCW)
 80118fa:	e70a      	b.n	8011712 <HAL_ADC_ConvCpltCallback+0x1e2>
 80118fc:	4b21      	ldr	r3, [pc, #132]	@ (8011984 <HAL_ADC_ConvCpltCallback+0x454>)
 80118fe:	f103 0126 	add.w	r1, r3, #38	@ 0x26
            ab->buf[i] = ab->buf[i + 1];
 8011902:	885a      	ldrh	r2, [r3, #2]
 8011904:	f823 2b02 	strh.w	r2, [r3], #2
        for (uint8_t i = 0; i < ANGLE_BUFFER_LEN - 1; i++)
 8011908:	428b      	cmp	r3, r1
 801190a:	d1fa      	bne.n	8011902 <HAL_ADC_ConvCpltCallback+0x3d2>
        ab->buf[ANGLE_BUFFER_LEN - 1] = angle;
 801190c:	4b1d      	ldr	r3, [pc, #116]	@ (8011984 <HAL_ADC_ConvCpltCallback+0x454>)
 801190e:	84d8      	strh	r0, [r3, #38]	@ 0x26
    if (ab->count < ANGLE_BUFFER_LEN)
 8011910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011914:	e7d4      	b.n	80118c0 <HAL_ADC_ConvCpltCallback+0x390>
            if (abs(m->last_step_angle) == abs(step_angles[i]))
 8011916:	4a1c      	ldr	r2, [pc, #112]	@ (8011988 <HAL_ADC_ConvCpltCallback+0x458>)
 8011918:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	@ 0x3a
 801191c:	2a00      	cmp	r2, #0
 801191e:	bfb8      	it	lt
 8011920:	4252      	neglt	r2, r2
 8011922:	ea85 71e5 	eor.w	r1, r5, r5, asr #31
 8011926:	eba1 71e5 	sub.w	r1, r1, r5, asr #31
 801192a:	b292      	uxth	r2, r2
 801192c:	b289      	uxth	r1, r1
 801192e:	428a      	cmp	r2, r1
 8011930:	f43f aeef 	beq.w	8011712 <HAL_ADC_ConvCpltCallback+0x1e2>
            if (m->dir == DIR_CW)
 8011934:	2b01      	cmp	r3, #1
                m->step_count++;
 8011936:	4b14      	ldr	r3, [pc, #80]	@ (8011988 <HAL_ADC_ConvCpltCallback+0x458>)
 8011938:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801193a:	bf0c      	ite	eq
 801193c:	3301      	addeq	r3, #1
                m->step_count--;
 801193e:	f103 33ff 	addne.w	r3, r3, #4294967295
 8011942:	b21b      	sxth	r3, r3
                m->step_count++;
 8011944:	4a10      	ldr	r2, [pc, #64]	@ (8011988 <HAL_ADC_ConvCpltCallback+0x458>)
 8011946:	8713      	strh	r3, [r2, #56]	@ 0x38
            m->last_step_angle = step_angles[i];
 8011948:	8755      	strh	r5, [r2, #58]	@ 0x3a
            return;
 801194a:	e6e2      	b.n	8011712 <HAL_ADC_ConvCpltCallback+0x1e2>
        m->dir = Detect_RotationDirection(&angle_buffer);
 801194c:	2301      	movs	r3, #1
 801194e:	4a0e      	ldr	r2, [pc, #56]	@ (8011988 <HAL_ADC_ConvCpltCallback+0x458>)
 8011950:	f882 3036 	strb.w	r3, [r2, #54]	@ 0x36
        if (m->dir == DIR_CW || m->dir == DIR_CCW)
 8011954:	490d      	ldr	r1, [pc, #52]	@ (801198c <HAL_ADC_ConvCpltCallback+0x45c>)
 8011956:	f101 040a 	add.w	r4, r1, #10
        if (abs(m->angle_deg - step_angles[i]) <= STEP_TOLERANCE)
 801195a:	f931 5b02 	ldrsh.w	r5, [r1], #2
 801195e:	1b42      	subs	r2, r0, r5
 8011960:	3204      	adds	r2, #4
 8011962:	2a08      	cmp	r2, #8
 8011964:	d9d7      	bls.n	8011916 <HAL_ADC_ConvCpltCallback+0x3e6>
    for (uint8_t i = 0; i < STEP_ANGLES_COUNT; i++)
 8011966:	428c      	cmp	r4, r1
 8011968:	d1f7      	bne.n	801195a <HAL_ADC_ConvCpltCallback+0x42a>
 801196a:	e6d2      	b.n	8011712 <HAL_ADC_ConvCpltCallback+0x1e2>
 801196c:	20000b04 	.word	0x20000b04
 8011970:	200143fc 	.word	0x200143fc
 8011974:	2000a7bc 	.word	0x2000a7bc
 8011978:	20000b7c 	.word	0x20000b7c
 801197c:	20014400 	.word	0x20014400
 8011980:	20000b78 	.word	0x20000b78
 8011984:	20000b10 	.word	0x20000b10
 8011988:	20000b3c 	.word	0x20000b3c
 801198c:	08012030 	.word	0x08012030

08011990 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
#if (BUFFERING == 1)
    if (GPIO_Pin == button_Pin)
 8011990:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8011994:	d000      	beq.n	8011998 <HAL_GPIO_EXTI_Callback+0x8>
    {
        capture_state = CAPT_WAIT_TRIGGER;
    }
#endif
}
 8011996:	4770      	bx	lr
        capture_state = CAPT_WAIT_TRIGGER;
 8011998:	4b01      	ldr	r3, [pc, #4]	@ (80119a0 <HAL_GPIO_EXTI_Callback+0x10>)
 801199a:	2200      	movs	r2, #0
 801199c:	701a      	strb	r2, [r3, #0]
}
 801199e:	e7fa      	b.n	8011996 <HAL_GPIO_EXTI_Callback+0x6>
 80119a0:	20014400 	.word	0x20014400

080119a4 <Switch_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/


void Switch_Init(void)
{
 80119a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80119aa:	2300      	movs	r3, #0
 80119ac:	9304      	str	r3, [sp, #16]
 80119ae:	9305      	str	r3, [sp, #20]

  /* Configure all GPIO pins */
  for (int i = 0 ; i < SWITCH_NUMBER; i++)
 80119b0:	4c0a      	ldr	r4, [pc, #40]	@ (80119dc <Switch_Init+0x38>)
 80119b2:	4d0b      	ldr	r5, [pc, #44]	@ (80119e0 <Switch_Init+0x3c>)
 80119b4:	f104 080a 	add.w	r8, r4, #10
  {
    GPIO_InitStruct.Pin = Switch_Pin[i];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80119b8:	461f      	mov	r7, r3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80119ba:	2601      	movs	r6, #1
    GPIO_InitStruct.Pin = Switch_Pin[i];
 80119bc:	f834 3b02 	ldrh.w	r3, [r4], #2
 80119c0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80119c2:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80119c4:	9603      	str	r6, [sp, #12]
    HAL_GPIO_Init(Switch_Port[i], &GPIO_InitStruct);
 80119c6:	a901      	add	r1, sp, #4
 80119c8:	f855 0b04 	ldr.w	r0, [r5], #4
 80119cc:	f7fe f812 	bl	800f9f4 <HAL_GPIO_Init>
  for (int i = 0 ; i < SWITCH_NUMBER; i++)
 80119d0:	4544      	cmp	r4, r8
 80119d2:	d1f3      	bne.n	80119bc <Switch_Init+0x18>
  }

  return;
}
 80119d4:	b006      	add	sp, #24
 80119d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119da:	bf00      	nop
 80119dc:	0801203c 	.word	0x0801203c
 80119e0:	08012048 	.word	0x08012048

080119e4 <Switch_GetAll>:


uint16_t Switch_GetAll(void)
{
 80119e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint16_t val = 0;

  /* Read input states on all GPIO pins */
  for (int i = 0; i < SWITCH_NUMBER; i++)
 80119e8:	4e1f      	ldr	r6, [pc, #124]	@ (8011a68 <Switch_GetAll+0x84>)
 80119ea:	4d20      	ldr	r5, [pc, #128]	@ (8011a6c <Switch_GetAll+0x88>)
 80119ec:	2400      	movs	r4, #0
  uint16_t val = 0;
 80119ee:	4627      	mov	r7, r4
  {
    if (HAL_GPIO_ReadPin(Switch_Port[i], Switch_Pin[i]) == 0)
    {
      val |= (1 << i);
 80119f0:	f04f 0801 	mov.w	r8, #1
 80119f4:	e002      	b.n	80119fc <Switch_GetAll+0x18>
  for (int i = 0; i < SWITCH_NUMBER; i++)
 80119f6:	3401      	adds	r4, #1
 80119f8:	2c05      	cmp	r4, #5
 80119fa:	d00c      	beq.n	8011a16 <Switch_GetAll+0x32>
    if (HAL_GPIO_ReadPin(Switch_Port[i], Switch_Pin[i]) == 0)
 80119fc:	f835 1b02 	ldrh.w	r1, [r5], #2
 8011a00:	f856 0b04 	ldr.w	r0, [r6], #4
 8011a04:	f7fe f8ec 	bl	800fbe0 <HAL_GPIO_ReadPin>
 8011a08:	2800      	cmp	r0, #0
 8011a0a:	d1f4      	bne.n	80119f6 <Switch_GetAll+0x12>
      val |= (1 << i);
 8011a0c:	fa08 f304 	lsl.w	r3, r8, r4
 8011a10:	433b      	orrs	r3, r7
 8011a12:	b29f      	uxth	r7, r3
 8011a14:	e7ef      	b.n	80119f6 <Switch_GetAll+0x12>
    }
  }

  /* Did the value change */
  if (val != sw.value)
 8011a16:	4b16      	ldr	r3, [pc, #88]	@ (8011a70 <Switch_GetAll+0x8c>)
 8011a18:	881b      	ldrh	r3, [r3, #0]
 8011a1a:	42bb      	cmp	r3, r7
 8011a1c:	d01b      	beq.n	8011a56 <Switch_GetAll+0x72>
  {
    /* New value is read */
    if (val != sw.valueToDebounce)
 8011a1e:	4b14      	ldr	r3, [pc, #80]	@ (8011a70 <Switch_GetAll+0x8c>)
 8011a20:	885b      	ldrh	r3, [r3, #2]
 8011a22:	42bb      	cmp	r3, r7
 8011a24:	d00e      	beq.n	8011a44 <Switch_GetAll+0x60>
    {
      /* New value is not debouncing, start it */
      sw.debounceCount = 0;
      sw.valueToDebounce = val;
 8011a26:	4b12      	ldr	r3, [pc, #72]	@ (8011a70 <Switch_GetAll+0x8c>)
 8011a28:	805f      	strh	r7, [r3, #2]
    }

    /* Increment debounce counter */
    sw.debounceCount++;
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	809a      	strh	r2, [r3, #4]
  {
    sw.debounceCount = 0;
  }

  /* Is push button pressed? */
  if (sw.value & (1 << 9))
 8011a2e:	4b10      	ldr	r3, [pc, #64]	@ (8011a70 <Switch_GetAll+0x8c>)
 8011a30:	8818      	ldrh	r0, [r3, #0]
 8011a32:	f410 7f00 	tst.w	r0, #512	@ 0x200
 8011a36:	d012      	beq.n	8011a5e <Switch_GetAll+0x7a>
  {
    sw.btnPressed++;
 8011a38:	68db      	ldr	r3, [r3, #12]
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	4a0c      	ldr	r2, [pc, #48]	@ (8011a70 <Switch_GetAll+0x8c>)
 8011a3e:	60d3      	str	r3, [r2, #12]
    sw.btnReleased = sw.btnPressed;
    sw.btnPressed = 0;
  }

  return sw.value;
}
 8011a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sw.debounceCount++;
 8011a44:	4a0a      	ldr	r2, [pc, #40]	@ (8011a70 <Switch_GetAll+0x8c>)
 8011a46:	8893      	ldrh	r3, [r2, #4]
 8011a48:	3301      	adds	r3, #1
 8011a4a:	b29b      	uxth	r3, r3
 8011a4c:	8093      	strh	r3, [r2, #4]
    if (sw.debounceCount > SW_DEBOUNCE_COUNT)
 8011a4e:	2b0f      	cmp	r3, #15
 8011a50:	d9ed      	bls.n	8011a2e <Switch_GetAll+0x4a>
      sw.value = val;
 8011a52:	8017      	strh	r7, [r2, #0]
 8011a54:	e7eb      	b.n	8011a2e <Switch_GetAll+0x4a>
    sw.debounceCount = 0;
 8011a56:	4b06      	ldr	r3, [pc, #24]	@ (8011a70 <Switch_GetAll+0x8c>)
 8011a58:	2200      	movs	r2, #0
 8011a5a:	809a      	strh	r2, [r3, #4]
 8011a5c:	e7e7      	b.n	8011a2e <Switch_GetAll+0x4a>
    sw.btnReleased = sw.btnPressed;
 8011a5e:	4b04      	ldr	r3, [pc, #16]	@ (8011a70 <Switch_GetAll+0x8c>)
 8011a60:	68da      	ldr	r2, [r3, #12]
 8011a62:	611a      	str	r2, [r3, #16]
 8011a64:	2300      	movs	r3, #0
 8011a66:	e7e9      	b.n	8011a3c <Switch_GetAll+0x58>
 8011a68:	08012048 	.word	0x08012048
 8011a6c:	0801203c 	.word	0x0801203c
 8011a70:	20014404 	.word	0x20014404

08011a74 <memcmp>:
 8011a74:	b510      	push	{r4, lr}
 8011a76:	3901      	subs	r1, #1
 8011a78:	4402      	add	r2, r0
 8011a7a:	4290      	cmp	r0, r2
 8011a7c:	d101      	bne.n	8011a82 <memcmp+0xe>
 8011a7e:	2000      	movs	r0, #0
 8011a80:	e005      	b.n	8011a8e <memcmp+0x1a>
 8011a82:	7803      	ldrb	r3, [r0, #0]
 8011a84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011a88:	42a3      	cmp	r3, r4
 8011a8a:	d001      	beq.n	8011a90 <memcmp+0x1c>
 8011a8c:	1b18      	subs	r0, r3, r4
 8011a8e:	bd10      	pop	{r4, pc}
 8011a90:	3001      	adds	r0, #1
 8011a92:	e7f2      	b.n	8011a7a <memcmp+0x6>

08011a94 <memset>:
 8011a94:	4402      	add	r2, r0
 8011a96:	4603      	mov	r3, r0
 8011a98:	4293      	cmp	r3, r2
 8011a9a:	d100      	bne.n	8011a9e <memset+0xa>
 8011a9c:	4770      	bx	lr
 8011a9e:	f803 1b01 	strb.w	r1, [r3], #1
 8011aa2:	e7f9      	b.n	8011a98 <memset+0x4>

08011aa4 <__libc_init_array>:
 8011aa4:	b570      	push	{r4, r5, r6, lr}
 8011aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8011adc <__libc_init_array+0x38>)
 8011aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8011ae0 <__libc_init_array+0x3c>)
 8011aaa:	1b64      	subs	r4, r4, r5
 8011aac:	10a4      	asrs	r4, r4, #2
 8011aae:	2600      	movs	r6, #0
 8011ab0:	42a6      	cmp	r6, r4
 8011ab2:	d109      	bne.n	8011ac8 <__libc_init_array+0x24>
 8011ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8011ae4 <__libc_init_array+0x40>)
 8011ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8011ae8 <__libc_init_array+0x44>)
 8011ab8:	f000 f9a4 	bl	8011e04 <_init>
 8011abc:	1b64      	subs	r4, r4, r5
 8011abe:	10a4      	asrs	r4, r4, #2
 8011ac0:	2600      	movs	r6, #0
 8011ac2:	42a6      	cmp	r6, r4
 8011ac4:	d105      	bne.n	8011ad2 <__libc_init_array+0x2e>
 8011ac6:	bd70      	pop	{r4, r5, r6, pc}
 8011ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011acc:	4798      	blx	r3
 8011ace:	3601      	adds	r6, #1
 8011ad0:	e7ee      	b.n	8011ab0 <__libc_init_array+0xc>
 8011ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8011ad6:	4798      	blx	r3
 8011ad8:	3601      	adds	r6, #1
 8011ada:	e7f2      	b.n	8011ac2 <__libc_init_array+0x1e>
 8011adc:	0801209c 	.word	0x0801209c
 8011ae0:	0801209c 	.word	0x0801209c
 8011ae4:	0801209c 	.word	0x0801209c
 8011ae8:	080120a0 	.word	0x080120a0

08011aec <memcpy>:
 8011aec:	440a      	add	r2, r1
 8011aee:	4291      	cmp	r1, r2
 8011af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011af4:	d100      	bne.n	8011af8 <memcpy+0xc>
 8011af6:	4770      	bx	lr
 8011af8:	b510      	push	{r4, lr}
 8011afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011afe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b02:	4291      	cmp	r1, r2
 8011b04:	d1f9      	bne.n	8011afa <memcpy+0xe>
 8011b06:	bd10      	pop	{r4, pc}

08011b08 <atan2f>:
 8011b08:	f000 b800 	b.w	8011b0c <__ieee754_atan2f>

08011b0c <__ieee754_atan2f>:
 8011b0c:	ee10 2a90 	vmov	r2, s1
 8011b10:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011b14:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011b18:	b510      	push	{r4, lr}
 8011b1a:	eef0 7a40 	vmov.f32	s15, s0
 8011b1e:	d806      	bhi.n	8011b2e <__ieee754_atan2f+0x22>
 8011b20:	ee10 0a10 	vmov	r0, s0
 8011b24:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011b28:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b2c:	d904      	bls.n	8011b38 <__ieee754_atan2f+0x2c>
 8011b2e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011b32:	eeb0 0a67 	vmov.f32	s0, s15
 8011b36:	bd10      	pop	{r4, pc}
 8011b38:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011b3c:	d103      	bne.n	8011b46 <__ieee754_atan2f+0x3a>
 8011b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b42:	f000 b883 	b.w	8011c4c <atanf>
 8011b46:	1794      	asrs	r4, r2, #30
 8011b48:	f004 0402 	and.w	r4, r4, #2
 8011b4c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011b50:	b943      	cbnz	r3, 8011b64 <__ieee754_atan2f+0x58>
 8011b52:	2c02      	cmp	r4, #2
 8011b54:	d05e      	beq.n	8011c14 <__ieee754_atan2f+0x108>
 8011b56:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011c28 <__ieee754_atan2f+0x11c>
 8011b5a:	2c03      	cmp	r4, #3
 8011b5c:	bf08      	it	eq
 8011b5e:	eef0 7a47 	vmoveq.f32	s15, s14
 8011b62:	e7e6      	b.n	8011b32 <__ieee754_atan2f+0x26>
 8011b64:	b941      	cbnz	r1, 8011b78 <__ieee754_atan2f+0x6c>
 8011b66:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011c2c <__ieee754_atan2f+0x120>
 8011b6a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011c30 <__ieee754_atan2f+0x124>
 8011b6e:	2800      	cmp	r0, #0
 8011b70:	bfb8      	it	lt
 8011b72:	eef0 7a47 	vmovlt.f32	s15, s14
 8011b76:	e7dc      	b.n	8011b32 <__ieee754_atan2f+0x26>
 8011b78:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011b7c:	d110      	bne.n	8011ba0 <__ieee754_atan2f+0x94>
 8011b7e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b82:	f104 34ff 	add.w	r4, r4, #4294967295
 8011b86:	d107      	bne.n	8011b98 <__ieee754_atan2f+0x8c>
 8011b88:	2c02      	cmp	r4, #2
 8011b8a:	d846      	bhi.n	8011c1a <__ieee754_atan2f+0x10e>
 8011b8c:	4b29      	ldr	r3, [pc, #164]	@ (8011c34 <__ieee754_atan2f+0x128>)
 8011b8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011b92:	edd3 7a00 	vldr	s15, [r3]
 8011b96:	e7cc      	b.n	8011b32 <__ieee754_atan2f+0x26>
 8011b98:	2c02      	cmp	r4, #2
 8011b9a:	d841      	bhi.n	8011c20 <__ieee754_atan2f+0x114>
 8011b9c:	4b26      	ldr	r3, [pc, #152]	@ (8011c38 <__ieee754_atan2f+0x12c>)
 8011b9e:	e7f6      	b.n	8011b8e <__ieee754_atan2f+0x82>
 8011ba0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011ba4:	d0df      	beq.n	8011b66 <__ieee754_atan2f+0x5a>
 8011ba6:	1a5b      	subs	r3, r3, r1
 8011ba8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011bac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011bb0:	da1a      	bge.n	8011be8 <__ieee754_atan2f+0xdc>
 8011bb2:	2a00      	cmp	r2, #0
 8011bb4:	da01      	bge.n	8011bba <__ieee754_atan2f+0xae>
 8011bb6:	313c      	adds	r1, #60	@ 0x3c
 8011bb8:	db19      	blt.n	8011bee <__ieee754_atan2f+0xe2>
 8011bba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011bbe:	f000 f919 	bl	8011df4 <fabsf>
 8011bc2:	f000 f843 	bl	8011c4c <atanf>
 8011bc6:	eef0 7a40 	vmov.f32	s15, s0
 8011bca:	2c01      	cmp	r4, #1
 8011bcc:	d012      	beq.n	8011bf4 <__ieee754_atan2f+0xe8>
 8011bce:	2c02      	cmp	r4, #2
 8011bd0:	d017      	beq.n	8011c02 <__ieee754_atan2f+0xf6>
 8011bd2:	2c00      	cmp	r4, #0
 8011bd4:	d0ad      	beq.n	8011b32 <__ieee754_atan2f+0x26>
 8011bd6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011c3c <__ieee754_atan2f+0x130>
 8011bda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bde:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011c40 <__ieee754_atan2f+0x134>
 8011be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011be6:	e7a4      	b.n	8011b32 <__ieee754_atan2f+0x26>
 8011be8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011c2c <__ieee754_atan2f+0x120>
 8011bec:	e7ed      	b.n	8011bca <__ieee754_atan2f+0xbe>
 8011bee:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011c44 <__ieee754_atan2f+0x138>
 8011bf2:	e7ea      	b.n	8011bca <__ieee754_atan2f+0xbe>
 8011bf4:	ee17 3a90 	vmov	r3, s15
 8011bf8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011bfc:	ee07 3a90 	vmov	s15, r3
 8011c00:	e797      	b.n	8011b32 <__ieee754_atan2f+0x26>
 8011c02:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011c3c <__ieee754_atan2f+0x130>
 8011c06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011c0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011c40 <__ieee754_atan2f+0x134>
 8011c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c12:	e78e      	b.n	8011b32 <__ieee754_atan2f+0x26>
 8011c14:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011c40 <__ieee754_atan2f+0x134>
 8011c18:	e78b      	b.n	8011b32 <__ieee754_atan2f+0x26>
 8011c1a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011c48 <__ieee754_atan2f+0x13c>
 8011c1e:	e788      	b.n	8011b32 <__ieee754_atan2f+0x26>
 8011c20:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011c44 <__ieee754_atan2f+0x138>
 8011c24:	e785      	b.n	8011b32 <__ieee754_atan2f+0x26>
 8011c26:	bf00      	nop
 8011c28:	c0490fdb 	.word	0xc0490fdb
 8011c2c:	3fc90fdb 	.word	0x3fc90fdb
 8011c30:	bfc90fdb 	.word	0xbfc90fdb
 8011c34:	08012068 	.word	0x08012068
 8011c38:	0801205c 	.word	0x0801205c
 8011c3c:	33bbbd2e 	.word	0x33bbbd2e
 8011c40:	40490fdb 	.word	0x40490fdb
 8011c44:	00000000 	.word	0x00000000
 8011c48:	3f490fdb 	.word	0x3f490fdb

08011c4c <atanf>:
 8011c4c:	b538      	push	{r3, r4, r5, lr}
 8011c4e:	ee10 5a10 	vmov	r5, s0
 8011c52:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011c56:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011c5a:	eef0 7a40 	vmov.f32	s15, s0
 8011c5e:	d310      	bcc.n	8011c82 <atanf+0x36>
 8011c60:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011c64:	d904      	bls.n	8011c70 <atanf+0x24>
 8011c66:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8011c6e:	bd38      	pop	{r3, r4, r5, pc}
 8011c70:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011da8 <atanf+0x15c>
 8011c74:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011dac <atanf+0x160>
 8011c78:	2d00      	cmp	r5, #0
 8011c7a:	bfc8      	it	gt
 8011c7c:	eef0 7a47 	vmovgt.f32	s15, s14
 8011c80:	e7f3      	b.n	8011c6a <atanf+0x1e>
 8011c82:	4b4b      	ldr	r3, [pc, #300]	@ (8011db0 <atanf+0x164>)
 8011c84:	429c      	cmp	r4, r3
 8011c86:	d810      	bhi.n	8011caa <atanf+0x5e>
 8011c88:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011c8c:	d20a      	bcs.n	8011ca4 <atanf+0x58>
 8011c8e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011db4 <atanf+0x168>
 8011c92:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c9a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca2:	dce2      	bgt.n	8011c6a <atanf+0x1e>
 8011ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ca8:	e013      	b.n	8011cd2 <atanf+0x86>
 8011caa:	f000 f8a3 	bl	8011df4 <fabsf>
 8011cae:	4b42      	ldr	r3, [pc, #264]	@ (8011db8 <atanf+0x16c>)
 8011cb0:	429c      	cmp	r4, r3
 8011cb2:	d84f      	bhi.n	8011d54 <atanf+0x108>
 8011cb4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011cb8:	429c      	cmp	r4, r3
 8011cba:	d841      	bhi.n	8011d40 <atanf+0xf4>
 8011cbc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011cc0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011cc4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011cc8:	2300      	movs	r3, #0
 8011cca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011cce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011cd2:	1c5a      	adds	r2, r3, #1
 8011cd4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011cd8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011dbc <atanf+0x170>
 8011cdc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011dc0 <atanf+0x174>
 8011ce0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011dc4 <atanf+0x178>
 8011ce4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011ce8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011cec:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011dc8 <atanf+0x17c>
 8011cf0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011cf4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011dcc <atanf+0x180>
 8011cf8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011cfc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011dd0 <atanf+0x184>
 8011d00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011d04:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011dd4 <atanf+0x188>
 8011d08:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011d0c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011dd8 <atanf+0x18c>
 8011d10:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011d14:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011ddc <atanf+0x190>
 8011d18:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011d1c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8011de0 <atanf+0x194>
 8011d20:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011d24:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011de4 <atanf+0x198>
 8011d28:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011d2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011d30:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011d34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011d38:	d121      	bne.n	8011d7e <atanf+0x132>
 8011d3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d3e:	e794      	b.n	8011c6a <atanf+0x1e>
 8011d40:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011d44:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011d48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d52:	e7be      	b.n	8011cd2 <atanf+0x86>
 8011d54:	4b24      	ldr	r3, [pc, #144]	@ (8011de8 <atanf+0x19c>)
 8011d56:	429c      	cmp	r4, r3
 8011d58:	d80b      	bhi.n	8011d72 <atanf+0x126>
 8011d5a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011d5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011d62:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011d66:	2302      	movs	r3, #2
 8011d68:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d70:	e7af      	b.n	8011cd2 <atanf+0x86>
 8011d72:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011d76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d7a:	2303      	movs	r3, #3
 8011d7c:	e7a9      	b.n	8011cd2 <atanf+0x86>
 8011d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8011dec <atanf+0x1a0>)
 8011d80:	491b      	ldr	r1, [pc, #108]	@ (8011df0 <atanf+0x1a4>)
 8011d82:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011d86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011d8a:	edd3 6a00 	vldr	s13, [r3]
 8011d8e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011d92:	2d00      	cmp	r5, #0
 8011d94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d98:	edd2 7a00 	vldr	s15, [r2]
 8011d9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011da0:	bfb8      	it	lt
 8011da2:	eef1 7a67 	vneglt.f32	s15, s15
 8011da6:	e760      	b.n	8011c6a <atanf+0x1e>
 8011da8:	bfc90fdb 	.word	0xbfc90fdb
 8011dac:	3fc90fdb 	.word	0x3fc90fdb
 8011db0:	3edfffff 	.word	0x3edfffff
 8011db4:	7149f2ca 	.word	0x7149f2ca
 8011db8:	3f97ffff 	.word	0x3f97ffff
 8011dbc:	3c8569d7 	.word	0x3c8569d7
 8011dc0:	3d4bda59 	.word	0x3d4bda59
 8011dc4:	bd6ef16b 	.word	0xbd6ef16b
 8011dc8:	3d886b35 	.word	0x3d886b35
 8011dcc:	3dba2e6e 	.word	0x3dba2e6e
 8011dd0:	3e124925 	.word	0x3e124925
 8011dd4:	3eaaaaab 	.word	0x3eaaaaab
 8011dd8:	bd15a221 	.word	0xbd15a221
 8011ddc:	bd9d8795 	.word	0xbd9d8795
 8011de0:	bde38e38 	.word	0xbde38e38
 8011de4:	be4ccccd 	.word	0xbe4ccccd
 8011de8:	401bffff 	.word	0x401bffff
 8011dec:	08012084 	.word	0x08012084
 8011df0:	08012074 	.word	0x08012074

08011df4 <fabsf>:
 8011df4:	ee10 3a10 	vmov	r3, s0
 8011df8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011dfc:	ee00 3a10 	vmov	s0, r3
 8011e00:	4770      	bx	lr
	...

08011e04 <_init>:
 8011e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e06:	bf00      	nop
 8011e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e0a:	bc08      	pop	{r3}
 8011e0c:	469e      	mov	lr, r3
 8011e0e:	4770      	bx	lr

08011e10 <_fini>:
 8011e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e12:	bf00      	nop
 8011e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e16:	bc08      	pop	{r3}
 8011e18:	469e      	mov	lr, r3
 8011e1a:	4770      	bx	lr
