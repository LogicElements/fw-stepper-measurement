
stepperMeasurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000424  0803c000  0803c000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c4  0803c424  0803c424  00001424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08043be8  08043be8  00008be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043dfc  08043dfc  000090cc  2**0
                  CONTENTS
  4 .ARM          00000008  08043dfc  08043dfc  00008dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08043e04  08043e04  000090cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08043e04  08043e04  00008e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08043e08  08043e08  00008e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  200000c0  08043e0c  000090c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a7c  200000cc  08043e18  000090cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  08043e18  00009b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ae91  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004714  00000000  00000000  00023f8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001810  00000000  00000000  000286a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012b5  00000000  00000000  00029eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002819a  00000000  00000000  0002b16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000224db  00000000  00000000  00053307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef100  00000000  00000000  000757e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001648e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063ec  00000000  00000000  00164928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0016ad14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0803c424 <__do_global_dtors_aux>:
 803c424:	b510      	push	{r4, lr}
 803c426:	4c05      	ldr	r4, [pc, #20]	@ (803c43c <__do_global_dtors_aux+0x18>)
 803c428:	7823      	ldrb	r3, [r4, #0]
 803c42a:	b933      	cbnz	r3, 803c43a <__do_global_dtors_aux+0x16>
 803c42c:	4b04      	ldr	r3, [pc, #16]	@ (803c440 <__do_global_dtors_aux+0x1c>)
 803c42e:	b113      	cbz	r3, 803c436 <__do_global_dtors_aux+0x12>
 803c430:	4804      	ldr	r0, [pc, #16]	@ (803c444 <__do_global_dtors_aux+0x20>)
 803c432:	f3af 8000 	nop.w
 803c436:	2301      	movs	r3, #1
 803c438:	7023      	strb	r3, [r4, #0]
 803c43a:	bd10      	pop	{r4, pc}
 803c43c:	200000cc 	.word	0x200000cc
 803c440:	00000000 	.word	0x00000000
 803c444:	08043bd0 	.word	0x08043bd0

0803c448 <frame_dummy>:
 803c448:	b508      	push	{r3, lr}
 803c44a:	4b03      	ldr	r3, [pc, #12]	@ (803c458 <frame_dummy+0x10>)
 803c44c:	b11b      	cbz	r3, 803c456 <frame_dummy+0xe>
 803c44e:	4903      	ldr	r1, [pc, #12]	@ (803c45c <frame_dummy+0x14>)
 803c450:	4803      	ldr	r0, [pc, #12]	@ (803c460 <frame_dummy+0x18>)
 803c452:	f3af 8000 	nop.w
 803c456:	bd08      	pop	{r3, pc}
 803c458:	00000000 	.word	0x00000000
 803c45c:	200000d0 	.word	0x200000d0
 803c460:	08043bd0 	.word	0x08043bd0

0803c464 <__aeabi_uldivmod>:
 803c464:	b953      	cbnz	r3, 803c47c <__aeabi_uldivmod+0x18>
 803c466:	b94a      	cbnz	r2, 803c47c <__aeabi_uldivmod+0x18>
 803c468:	2900      	cmp	r1, #0
 803c46a:	bf08      	it	eq
 803c46c:	2800      	cmpeq	r0, #0
 803c46e:	bf1c      	itt	ne
 803c470:	f04f 31ff 	movne.w	r1, #4294967295
 803c474:	f04f 30ff 	movne.w	r0, #4294967295
 803c478:	f000 b96a 	b.w	803c750 <__aeabi_idiv0>
 803c47c:	f1ad 0c08 	sub.w	ip, sp, #8
 803c480:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 803c484:	f000 f806 	bl	803c494 <__udivmoddi4>
 803c488:	f8dd e004 	ldr.w	lr, [sp, #4]
 803c48c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 803c490:	b004      	add	sp, #16
 803c492:	4770      	bx	lr

0803c494 <__udivmoddi4>:
 803c494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 803c498:	9d08      	ldr	r5, [sp, #32]
 803c49a:	460c      	mov	r4, r1
 803c49c:	2b00      	cmp	r3, #0
 803c49e:	d14e      	bne.n	803c53e <__udivmoddi4+0xaa>
 803c4a0:	4694      	mov	ip, r2
 803c4a2:	458c      	cmp	ip, r1
 803c4a4:	4686      	mov	lr, r0
 803c4a6:	fab2 f282 	clz	r2, r2
 803c4aa:	d962      	bls.n	803c572 <__udivmoddi4+0xde>
 803c4ac:	b14a      	cbz	r2, 803c4c2 <__udivmoddi4+0x2e>
 803c4ae:	f1c2 0320 	rsb	r3, r2, #32
 803c4b2:	4091      	lsls	r1, r2
 803c4b4:	fa20 f303 	lsr.w	r3, r0, r3
 803c4b8:	fa0c fc02 	lsl.w	ip, ip, r2
 803c4bc:	4319      	orrs	r1, r3
 803c4be:	fa00 fe02 	lsl.w	lr, r0, r2
 803c4c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 803c4c6:	fa1f f68c 	uxth.w	r6, ip
 803c4ca:	fbb1 f4f7 	udiv	r4, r1, r7
 803c4ce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 803c4d2:	fb07 1114 	mls	r1, r7, r4, r1
 803c4d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 803c4da:	fb04 f106 	mul.w	r1, r4, r6
 803c4de:	4299      	cmp	r1, r3
 803c4e0:	d90a      	bls.n	803c4f8 <__udivmoddi4+0x64>
 803c4e2:	eb1c 0303 	adds.w	r3, ip, r3
 803c4e6:	f104 30ff 	add.w	r0, r4, #4294967295
 803c4ea:	f080 8112 	bcs.w	803c712 <__udivmoddi4+0x27e>
 803c4ee:	4299      	cmp	r1, r3
 803c4f0:	f240 810f 	bls.w	803c712 <__udivmoddi4+0x27e>
 803c4f4:	3c02      	subs	r4, #2
 803c4f6:	4463      	add	r3, ip
 803c4f8:	1a59      	subs	r1, r3, r1
 803c4fa:	fa1f f38e 	uxth.w	r3, lr
 803c4fe:	fbb1 f0f7 	udiv	r0, r1, r7
 803c502:	fb07 1110 	mls	r1, r7, r0, r1
 803c506:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 803c50a:	fb00 f606 	mul.w	r6, r0, r6
 803c50e:	429e      	cmp	r6, r3
 803c510:	d90a      	bls.n	803c528 <__udivmoddi4+0x94>
 803c512:	eb1c 0303 	adds.w	r3, ip, r3
 803c516:	f100 31ff 	add.w	r1, r0, #4294967295
 803c51a:	f080 80fc 	bcs.w	803c716 <__udivmoddi4+0x282>
 803c51e:	429e      	cmp	r6, r3
 803c520:	f240 80f9 	bls.w	803c716 <__udivmoddi4+0x282>
 803c524:	4463      	add	r3, ip
 803c526:	3802      	subs	r0, #2
 803c528:	1b9b      	subs	r3, r3, r6
 803c52a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 803c52e:	2100      	movs	r1, #0
 803c530:	b11d      	cbz	r5, 803c53a <__udivmoddi4+0xa6>
 803c532:	40d3      	lsrs	r3, r2
 803c534:	2200      	movs	r2, #0
 803c536:	e9c5 3200 	strd	r3, r2, [r5]
 803c53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 803c53e:	428b      	cmp	r3, r1
 803c540:	d905      	bls.n	803c54e <__udivmoddi4+0xba>
 803c542:	b10d      	cbz	r5, 803c548 <__udivmoddi4+0xb4>
 803c544:	e9c5 0100 	strd	r0, r1, [r5]
 803c548:	2100      	movs	r1, #0
 803c54a:	4608      	mov	r0, r1
 803c54c:	e7f5      	b.n	803c53a <__udivmoddi4+0xa6>
 803c54e:	fab3 f183 	clz	r1, r3
 803c552:	2900      	cmp	r1, #0
 803c554:	d146      	bne.n	803c5e4 <__udivmoddi4+0x150>
 803c556:	42a3      	cmp	r3, r4
 803c558:	d302      	bcc.n	803c560 <__udivmoddi4+0xcc>
 803c55a:	4290      	cmp	r0, r2
 803c55c:	f0c0 80f0 	bcc.w	803c740 <__udivmoddi4+0x2ac>
 803c560:	1a86      	subs	r6, r0, r2
 803c562:	eb64 0303 	sbc.w	r3, r4, r3
 803c566:	2001      	movs	r0, #1
 803c568:	2d00      	cmp	r5, #0
 803c56a:	d0e6      	beq.n	803c53a <__udivmoddi4+0xa6>
 803c56c:	e9c5 6300 	strd	r6, r3, [r5]
 803c570:	e7e3      	b.n	803c53a <__udivmoddi4+0xa6>
 803c572:	2a00      	cmp	r2, #0
 803c574:	f040 8090 	bne.w	803c698 <__udivmoddi4+0x204>
 803c578:	eba1 040c 	sub.w	r4, r1, ip
 803c57c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 803c580:	fa1f f78c 	uxth.w	r7, ip
 803c584:	2101      	movs	r1, #1
 803c586:	fbb4 f6f8 	udiv	r6, r4, r8
 803c58a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 803c58e:	fb08 4416 	mls	r4, r8, r6, r4
 803c592:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 803c596:	fb07 f006 	mul.w	r0, r7, r6
 803c59a:	4298      	cmp	r0, r3
 803c59c:	d908      	bls.n	803c5b0 <__udivmoddi4+0x11c>
 803c59e:	eb1c 0303 	adds.w	r3, ip, r3
 803c5a2:	f106 34ff 	add.w	r4, r6, #4294967295
 803c5a6:	d202      	bcs.n	803c5ae <__udivmoddi4+0x11a>
 803c5a8:	4298      	cmp	r0, r3
 803c5aa:	f200 80cd 	bhi.w	803c748 <__udivmoddi4+0x2b4>
 803c5ae:	4626      	mov	r6, r4
 803c5b0:	1a1c      	subs	r4, r3, r0
 803c5b2:	fa1f f38e 	uxth.w	r3, lr
 803c5b6:	fbb4 f0f8 	udiv	r0, r4, r8
 803c5ba:	fb08 4410 	mls	r4, r8, r0, r4
 803c5be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 803c5c2:	fb00 f707 	mul.w	r7, r0, r7
 803c5c6:	429f      	cmp	r7, r3
 803c5c8:	d908      	bls.n	803c5dc <__udivmoddi4+0x148>
 803c5ca:	eb1c 0303 	adds.w	r3, ip, r3
 803c5ce:	f100 34ff 	add.w	r4, r0, #4294967295
 803c5d2:	d202      	bcs.n	803c5da <__udivmoddi4+0x146>
 803c5d4:	429f      	cmp	r7, r3
 803c5d6:	f200 80b0 	bhi.w	803c73a <__udivmoddi4+0x2a6>
 803c5da:	4620      	mov	r0, r4
 803c5dc:	1bdb      	subs	r3, r3, r7
 803c5de:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 803c5e2:	e7a5      	b.n	803c530 <__udivmoddi4+0x9c>
 803c5e4:	f1c1 0620 	rsb	r6, r1, #32
 803c5e8:	408b      	lsls	r3, r1
 803c5ea:	fa22 f706 	lsr.w	r7, r2, r6
 803c5ee:	431f      	orrs	r7, r3
 803c5f0:	fa20 fc06 	lsr.w	ip, r0, r6
 803c5f4:	fa04 f301 	lsl.w	r3, r4, r1
 803c5f8:	ea43 030c 	orr.w	r3, r3, ip
 803c5fc:	40f4      	lsrs	r4, r6
 803c5fe:	fa00 f801 	lsl.w	r8, r0, r1
 803c602:	0c38      	lsrs	r0, r7, #16
 803c604:	ea4f 4913 	mov.w	r9, r3, lsr #16
 803c608:	fbb4 fef0 	udiv	lr, r4, r0
 803c60c:	fa1f fc87 	uxth.w	ip, r7
 803c610:	fb00 441e 	mls	r4, r0, lr, r4
 803c614:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 803c618:	fb0e f90c 	mul.w	r9, lr, ip
 803c61c:	45a1      	cmp	r9, r4
 803c61e:	fa02 f201 	lsl.w	r2, r2, r1
 803c622:	d90a      	bls.n	803c63a <__udivmoddi4+0x1a6>
 803c624:	193c      	adds	r4, r7, r4
 803c626:	f10e 3aff 	add.w	sl, lr, #4294967295
 803c62a:	f080 8084 	bcs.w	803c736 <__udivmoddi4+0x2a2>
 803c62e:	45a1      	cmp	r9, r4
 803c630:	f240 8081 	bls.w	803c736 <__udivmoddi4+0x2a2>
 803c634:	f1ae 0e02 	sub.w	lr, lr, #2
 803c638:	443c      	add	r4, r7
 803c63a:	eba4 0409 	sub.w	r4, r4, r9
 803c63e:	fa1f f983 	uxth.w	r9, r3
 803c642:	fbb4 f3f0 	udiv	r3, r4, r0
 803c646:	fb00 4413 	mls	r4, r0, r3, r4
 803c64a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 803c64e:	fb03 fc0c 	mul.w	ip, r3, ip
 803c652:	45a4      	cmp	ip, r4
 803c654:	d907      	bls.n	803c666 <__udivmoddi4+0x1d2>
 803c656:	193c      	adds	r4, r7, r4
 803c658:	f103 30ff 	add.w	r0, r3, #4294967295
 803c65c:	d267      	bcs.n	803c72e <__udivmoddi4+0x29a>
 803c65e:	45a4      	cmp	ip, r4
 803c660:	d965      	bls.n	803c72e <__udivmoddi4+0x29a>
 803c662:	3b02      	subs	r3, #2
 803c664:	443c      	add	r4, r7
 803c666:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 803c66a:	fba0 9302 	umull	r9, r3, r0, r2
 803c66e:	eba4 040c 	sub.w	r4, r4, ip
 803c672:	429c      	cmp	r4, r3
 803c674:	46ce      	mov	lr, r9
 803c676:	469c      	mov	ip, r3
 803c678:	d351      	bcc.n	803c71e <__udivmoddi4+0x28a>
 803c67a:	d04e      	beq.n	803c71a <__udivmoddi4+0x286>
 803c67c:	b155      	cbz	r5, 803c694 <__udivmoddi4+0x200>
 803c67e:	ebb8 030e 	subs.w	r3, r8, lr
 803c682:	eb64 040c 	sbc.w	r4, r4, ip
 803c686:	fa04 f606 	lsl.w	r6, r4, r6
 803c68a:	40cb      	lsrs	r3, r1
 803c68c:	431e      	orrs	r6, r3
 803c68e:	40cc      	lsrs	r4, r1
 803c690:	e9c5 6400 	strd	r6, r4, [r5]
 803c694:	2100      	movs	r1, #0
 803c696:	e750      	b.n	803c53a <__udivmoddi4+0xa6>
 803c698:	f1c2 0320 	rsb	r3, r2, #32
 803c69c:	fa20 f103 	lsr.w	r1, r0, r3
 803c6a0:	fa0c fc02 	lsl.w	ip, ip, r2
 803c6a4:	fa24 f303 	lsr.w	r3, r4, r3
 803c6a8:	4094      	lsls	r4, r2
 803c6aa:	430c      	orrs	r4, r1
 803c6ac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 803c6b0:	fa00 fe02 	lsl.w	lr, r0, r2
 803c6b4:	fa1f f78c 	uxth.w	r7, ip
 803c6b8:	fbb3 f0f8 	udiv	r0, r3, r8
 803c6bc:	fb08 3110 	mls	r1, r8, r0, r3
 803c6c0:	0c23      	lsrs	r3, r4, #16
 803c6c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 803c6c6:	fb00 f107 	mul.w	r1, r0, r7
 803c6ca:	4299      	cmp	r1, r3
 803c6cc:	d908      	bls.n	803c6e0 <__udivmoddi4+0x24c>
 803c6ce:	eb1c 0303 	adds.w	r3, ip, r3
 803c6d2:	f100 36ff 	add.w	r6, r0, #4294967295
 803c6d6:	d22c      	bcs.n	803c732 <__udivmoddi4+0x29e>
 803c6d8:	4299      	cmp	r1, r3
 803c6da:	d92a      	bls.n	803c732 <__udivmoddi4+0x29e>
 803c6dc:	3802      	subs	r0, #2
 803c6de:	4463      	add	r3, ip
 803c6e0:	1a5b      	subs	r3, r3, r1
 803c6e2:	b2a4      	uxth	r4, r4
 803c6e4:	fbb3 f1f8 	udiv	r1, r3, r8
 803c6e8:	fb08 3311 	mls	r3, r8, r1, r3
 803c6ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 803c6f0:	fb01 f307 	mul.w	r3, r1, r7
 803c6f4:	42a3      	cmp	r3, r4
 803c6f6:	d908      	bls.n	803c70a <__udivmoddi4+0x276>
 803c6f8:	eb1c 0404 	adds.w	r4, ip, r4
 803c6fc:	f101 36ff 	add.w	r6, r1, #4294967295
 803c700:	d213      	bcs.n	803c72a <__udivmoddi4+0x296>
 803c702:	42a3      	cmp	r3, r4
 803c704:	d911      	bls.n	803c72a <__udivmoddi4+0x296>
 803c706:	3902      	subs	r1, #2
 803c708:	4464      	add	r4, ip
 803c70a:	1ae4      	subs	r4, r4, r3
 803c70c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 803c710:	e739      	b.n	803c586 <__udivmoddi4+0xf2>
 803c712:	4604      	mov	r4, r0
 803c714:	e6f0      	b.n	803c4f8 <__udivmoddi4+0x64>
 803c716:	4608      	mov	r0, r1
 803c718:	e706      	b.n	803c528 <__udivmoddi4+0x94>
 803c71a:	45c8      	cmp	r8, r9
 803c71c:	d2ae      	bcs.n	803c67c <__udivmoddi4+0x1e8>
 803c71e:	ebb9 0e02 	subs.w	lr, r9, r2
 803c722:	eb63 0c07 	sbc.w	ip, r3, r7
 803c726:	3801      	subs	r0, #1
 803c728:	e7a8      	b.n	803c67c <__udivmoddi4+0x1e8>
 803c72a:	4631      	mov	r1, r6
 803c72c:	e7ed      	b.n	803c70a <__udivmoddi4+0x276>
 803c72e:	4603      	mov	r3, r0
 803c730:	e799      	b.n	803c666 <__udivmoddi4+0x1d2>
 803c732:	4630      	mov	r0, r6
 803c734:	e7d4      	b.n	803c6e0 <__udivmoddi4+0x24c>
 803c736:	46d6      	mov	lr, sl
 803c738:	e77f      	b.n	803c63a <__udivmoddi4+0x1a6>
 803c73a:	4463      	add	r3, ip
 803c73c:	3802      	subs	r0, #2
 803c73e:	e74d      	b.n	803c5dc <__udivmoddi4+0x148>
 803c740:	4606      	mov	r6, r0
 803c742:	4623      	mov	r3, r4
 803c744:	4608      	mov	r0, r1
 803c746:	e70f      	b.n	803c568 <__udivmoddi4+0xd4>
 803c748:	3e02      	subs	r6, #2
 803c74a:	4463      	add	r3, ip
 803c74c:	e730      	b.n	803c5b0 <__udivmoddi4+0x11c>
 803c74e:	bf00      	nop

0803c750 <__aeabi_idiv0>:
 803c750:	4770      	bx	lr
 803c752:	bf00      	nop

0803c754 <Config_AppInit>:
/* Public variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/

Status_t Config_AppInit(void)
{
 803c754:	b480      	push	{r7}
 803c756:	b083      	sub	sp, #12
 803c758:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 803c75a:	2300      	movs	r3, #0
 803c75c:	80fb      	strh	r3, [r7, #6]

  UNUSED(ca);

  return ret;
 803c75e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803c762:	4618      	mov	r0, r3
 803c764:	370c      	adds	r7, #12
 803c766:	46bd      	mov	sp, r7
 803c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c76c:	4770      	bx	lr

0803c76e <Config_Callback>:


Status_t Config_Callback(uint32_t id)
{
 803c76e:	b480      	push	{r7}
 803c770:	b085      	sub	sp, #20
 803c772:	af00      	add	r7, sp, #0
 803c774:	6078      	str	r0, [r7, #4]
  Status_t ret = STATUS_OK;
 803c776:	2300      	movs	r3, #0
 803c778:	81fb      	strh	r3, [r7, #14]

  /* Check if some value need further action to propagate */
  switch (CONF_BLOCK_ID(id))
 803c77a:	687b      	ldr	r3, [r7, #4]
 803c77c:	0e1b      	lsrs	r3, r3, #24
 803c77e:	2b03      	cmp	r3, #3
#endif
      break;


    default:
      break;
 803c780:	bf00      	nop
  }
  return ret;
 803c782:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 803c786:	4618      	mov	r0, r3
 803c788:	3714      	adds	r7, #20
 803c78a:	46bd      	mov	sp, r7
 803c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c790:	4770      	bx	lr

0803c792 <Config_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/


Status_t Config_Init(void)
{
 803c792:	b580      	push	{r7, lr}
 803c794:	b082      	sub	sp, #8
 803c796:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 803c798:	2300      	movs	r3, #0
 803c79a:	80fb      	strh	r3, [r7, #6]
  {
    Error_Handler();
  }

  /* Use factory default after every power on */
  RegMap_RestoreFactoryValues();
 803c79c:	f000 fcf2 	bl	803d184 <RegMap_RestoreFactoryValues>

  /* Initialize application-specific stuff */
  Config_AppInit();
 803c7a0:	f7ff ffd8 	bl	803c754 <Config_AppInit>

  return ret;
 803c7a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803c7a8:	4618      	mov	r0, r3
 803c7aa:	3708      	adds	r7, #8
 803c7ac:	46bd      	mov	sp, r7
 803c7ae:	bd80      	pop	{r7, pc}

0803c7b0 <Config_ApplyConfig>:



Status_t Config_ApplyConfig(uint32_t id)
{
 803c7b0:	b580      	push	{r7, lr}
 803c7b2:	b084      	sub	sp, #16
 803c7b4:	af00      	add	r7, sp, #0
 803c7b6:	6078      	str	r0, [r7, #4]
  Status_t ret = STATUS_OK;
 803c7b8:	2300      	movs	r3, #0
 803c7ba:	81fb      	strh	r3, [r7, #14]

  /* Application-specific callback */
  Config_Callback(id);
 803c7bc:	6878      	ldr	r0, [r7, #4]
 803c7be:	f7ff ffd6 	bl	803c76e <Config_Callback>

  /* If this value should be stored in Flash, notify flash task */
  if ((id & 0x070) == 0x070)
 803c7c2:	687b      	ldr	r3, [r7, #4]
 803c7c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 803c7c8:	2b70      	cmp	r3, #112	@ 0x70
 803c7ca:	d101      	bne.n	803c7d0 <Config_ApplyConfig+0x20>
  {
    FlashApp_RequestConfStorage();
 803c7cc:	f000 fa02 	bl	803cbd4 <FlashApp_RequestConfStorage>
  }

  return ret;
 803c7d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 803c7d4:	4618      	mov	r0, r3
 803c7d6:	3710      	adds	r7, #16
 803c7d8:	46bd      	mov	sp, r7
 803c7da:	bd80      	pop	{r7, pc}

0803c7dc <Config_ReadStream>:


Status_t Config_ReadStream(uint8_t *data, uint32_t length)
{
 803c7dc:	b580      	push	{r7, lr}
 803c7de:	b088      	sub	sp, #32
 803c7e0:	af00      	add	r7, sp, #0
 803c7e2:	6078      	str	r0, [r7, #4]
 803c7e4:	6039      	str	r1, [r7, #0]
  Status_t ret = STATUS_OK;
 803c7e6:	2300      	movs	r3, #0
 803c7e8:	83fb      	strh	r3, [r7, #30]
  uint32_t reqIdx = 0;
 803c7ea:	2300      	movs	r3, #0
 803c7ec:	61bb      	str	r3, [r7, #24]
  uint32_t sizeReg;
  uint32_t i;
  uint32_t value;

  /* First entry must be CONF_SYS_REGMAP_VERSION with major part equal to our factory set value */
  id = *((uint32_t *) (data));
 803c7ee:	687b      	ldr	r3, [r7, #4]
 803c7f0:	681b      	ldr	r3, [r3, #0]
 803c7f2:	60bb      	str	r3, [r7, #8]
  value = *((uint32_t *) (data + 4));
 803c7f4:	687b      	ldr	r3, [r7, #4]
 803c7f6:	685b      	ldr	r3, [r3, #4]
 803c7f8:	613b      	str	r3, [r7, #16]

  if ((id != CONF_SYS_REGMAP_VERSION) || (value & 0xFFFF0000) != (CONF_INT(CONF_SYS_REGMAP_VERSION) & 0xFFFF0000) )
 803c7fa:	68bb      	ldr	r3, [r7, #8]
 803c7fc:	f244 1232 	movw	r2, #16690	@ 0x4132
 803c800:	4293      	cmp	r3, r2
 803c802:	d108      	bne.n	803c816 <Config_ReadStream+0x3a>
 803c804:	4b28      	ldr	r3, [pc, #160]	@ (803c8a8 <Config_ReadStream+0xcc>)
 803c806:	681b      	ldr	r3, [r3, #0]
 803c808:	3304      	adds	r3, #4
 803c80a:	681a      	ldr	r2, [r3, #0]
 803c80c:	693b      	ldr	r3, [r7, #16]
 803c80e:	4053      	eors	r3, r2
 803c810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 803c814:	d33e      	bcc.n	803c894 <Config_ReadStream+0xb8>
  {
    ret = STATUS_ERROR;
 803c816:	2301      	movs	r3, #1
 803c818:	83fb      	strh	r3, [r7, #30]
 803c81a:	e03f      	b.n	803c89c <Config_ReadStream+0xc0>
  {
    /* Process the whole received stream */
    while ((reqIdx < length))
    {
      /* Take ID */
      memcpy(&id, data + reqIdx, sizeof(id));
 803c81c:	687a      	ldr	r2, [r7, #4]
 803c81e:	69bb      	ldr	r3, [r7, #24]
 803c820:	4413      	add	r3, r2
 803c822:	681b      	ldr	r3, [r3, #0]
 803c824:	60bb      	str	r3, [r7, #8]
      reqIdx += sizeof(uint32_t);
 803c826:	69bb      	ldr	r3, [r7, #24]
 803c828:	3304      	adds	r3, #4
 803c82a:	61bb      	str	r3, [r7, #24]
      sizeReg = CONF_BYTE_LEN_ID(id);
 803c82c:	68bb      	ldr	r3, [r7, #8]
 803c82e:	f003 030f 	and.w	r3, r3, #15
 803c832:	4a1e      	ldr	r2, [pc, #120]	@ (803c8ac <Config_ReadStream+0xd0>)
 803c834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 803c838:	60fb      	str	r3, [r7, #12]

      /* Check that this ID is known */
      ret = STATUS_ERROR;
 803c83a:	2301      	movs	r3, #1
 803c83c:	83fb      	strh	r3, [r7, #30]
      for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 803c83e:	2300      	movs	r3, #0
 803c840:	617b      	str	r3, [r7, #20]
 803c842:	e00b      	b.n	803c85c <Config_ReadStream+0x80>
      {
        if (CONF_REG_FLASH[i] == id)
 803c844:	4a1a      	ldr	r2, [pc, #104]	@ (803c8b0 <Config_ReadStream+0xd4>)
 803c846:	697b      	ldr	r3, [r7, #20]
 803c848:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 803c84c:	68bb      	ldr	r3, [r7, #8]
 803c84e:	429a      	cmp	r2, r3
 803c850:	d101      	bne.n	803c856 <Config_ReadStream+0x7a>
        {
          ret = STATUS_OK;
 803c852:	2300      	movs	r3, #0
 803c854:	83fb      	strh	r3, [r7, #30]
      for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 803c856:	697b      	ldr	r3, [r7, #20]
 803c858:	3301      	adds	r3, #1
 803c85a:	617b      	str	r3, [r7, #20]
 803c85c:	697b      	ldr	r3, [r7, #20]
 803c85e:	2b04      	cmp	r3, #4
 803c860:	d9f0      	bls.n	803c844 <Config_ReadStream+0x68>
        }
      }

      if (ret == STATUS_OK)
 803c862:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 803c866:	2b00      	cmp	r3, #0
 803c868:	d110      	bne.n	803c88c <Config_ReadStream+0xb0>
      {
        /* Write new value into register storage */
        memcpy(CONF_PTR(id), data + reqIdx, sizeReg);
 803c86a:	68bb      	ldr	r3, [r7, #8]
 803c86c:	0e1b      	lsrs	r3, r3, #24
 803c86e:	4a0e      	ldr	r2, [pc, #56]	@ (803c8a8 <Config_ReadStream+0xcc>)
 803c870:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 803c874:	68bb      	ldr	r3, [r7, #8]
 803c876:	0b1b      	lsrs	r3, r3, #12
 803c878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 803c87c:	18d0      	adds	r0, r2, r3
 803c87e:	687a      	ldr	r2, [r7, #4]
 803c880:	69bb      	ldr	r3, [r7, #24]
 803c882:	4413      	add	r3, r2
 803c884:	68fa      	ldr	r2, [r7, #12]
 803c886:	4619      	mov	r1, r3
 803c888:	f007 f994 	bl	8043bb4 <memcpy>
      }

      reqIdx += sizeReg;
 803c88c:	69ba      	ldr	r2, [r7, #24]
 803c88e:	68fb      	ldr	r3, [r7, #12]
 803c890:	4413      	add	r3, r2
 803c892:	61bb      	str	r3, [r7, #24]
    while ((reqIdx < length))
 803c894:	69ba      	ldr	r2, [r7, #24]
 803c896:	683b      	ldr	r3, [r7, #0]
 803c898:	429a      	cmp	r2, r3
 803c89a:	d3bf      	bcc.n	803c81c <Config_ReadStream+0x40>
    }
  }
  return ret;
 803c89c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 803c8a0:	4618      	mov	r0, r3
 803c8a2:	3720      	adds	r7, #32
 803c8a4:	46bd      	mov	sp, r7
 803c8a6:	bd80      	pop	{r7, pc}
 803c8a8:	08043c2c 	.word	0x08043c2c
 803c8ac:	08043be8 	.word	0x08043be8
 803c8b0:	08043c94 	.word	0x08043c94

0803c8b4 <Config_FillStream>:

Status_t Config_FillStream(uint8_t *data, uint32_t *length, uint32_t maxLength)
{
 803c8b4:	b580      	push	{r7, lr}
 803c8b6:	b08a      	sub	sp, #40	@ 0x28
 803c8b8:	af00      	add	r7, sp, #0
 803c8ba:	60f8      	str	r0, [r7, #12]
 803c8bc:	60b9      	str	r1, [r7, #8]
 803c8be:	607a      	str	r2, [r7, #4]
  Status_t ret = STATUS_OK;
 803c8c0:	2300      	movs	r3, #0
 803c8c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint32_t reqIdx = 0;
 803c8c4:	2300      	movs	r3, #0
 803c8c6:	623b      	str	r3, [r7, #32]
  uint32_t id;
  uint32_t sizeReg;
  uint32_t i;

  /* Go through all the known config ID that need to be stored in flash */
  for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 803c8c8:	2300      	movs	r3, #0
 803c8ca:	61fb      	str	r3, [r7, #28]
 803c8cc:	e035      	b.n	803c93a <Config_FillStream+0x86>
  {
    /* Take next ID from the list of known IDs */
    id = CONF_REG_FLASH[i];
 803c8ce:	4a21      	ldr	r2, [pc, #132]	@ (803c954 <Config_FillStream+0xa0>)
 803c8d0:	69fb      	ldr	r3, [r7, #28]
 803c8d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 803c8d6:	617b      	str	r3, [r7, #20]
    sizeReg = CONF_BYTE_LEN_ID(id);
 803c8d8:	697b      	ldr	r3, [r7, #20]
 803c8da:	f003 030f 	and.w	r3, r3, #15
 803c8de:	4a1e      	ldr	r2, [pc, #120]	@ (803c958 <Config_FillStream+0xa4>)
 803c8e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 803c8e4:	61bb      	str	r3, [r7, #24]

    if (reqIdx + 4 + sizeReg <= maxLength)
 803c8e6:	6a3a      	ldr	r2, [r7, #32]
 803c8e8:	69bb      	ldr	r3, [r7, #24]
 803c8ea:	4413      	add	r3, r2
 803c8ec:	3304      	adds	r3, #4
 803c8ee:	687a      	ldr	r2, [r7, #4]
 803c8f0:	429a      	cmp	r2, r3
 803c8f2:	d31d      	bcc.n	803c930 <Config_FillStream+0x7c>
    {
      /* Store ID into config stream */
      memcpy(data + reqIdx, &id, sizeof(id));
 803c8f4:	68fa      	ldr	r2, [r7, #12]
 803c8f6:	6a3b      	ldr	r3, [r7, #32]
 803c8f8:	4413      	add	r3, r2
 803c8fa:	697a      	ldr	r2, [r7, #20]
 803c8fc:	601a      	str	r2, [r3, #0]
      reqIdx += sizeof(uint32_t);
 803c8fe:	6a3b      	ldr	r3, [r7, #32]
 803c900:	3304      	adds	r3, #4
 803c902:	623b      	str	r3, [r7, #32]

      /* Store config value into stream */
      memcpy(data + reqIdx, CONF_PTR(id), sizeReg);
 803c904:	68fa      	ldr	r2, [r7, #12]
 803c906:	6a3b      	ldr	r3, [r7, #32]
 803c908:	18d0      	adds	r0, r2, r3
 803c90a:	697b      	ldr	r3, [r7, #20]
 803c90c:	0e1b      	lsrs	r3, r3, #24
 803c90e:	4a13      	ldr	r2, [pc, #76]	@ (803c95c <Config_FillStream+0xa8>)
 803c910:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 803c914:	697b      	ldr	r3, [r7, #20]
 803c916:	0b1b      	lsrs	r3, r3, #12
 803c918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 803c91c:	4413      	add	r3, r2
 803c91e:	69ba      	ldr	r2, [r7, #24]
 803c920:	4619      	mov	r1, r3
 803c922:	f007 f947 	bl	8043bb4 <memcpy>
      reqIdx += sizeReg;
 803c926:	6a3a      	ldr	r2, [r7, #32]
 803c928:	69bb      	ldr	r3, [r7, #24]
 803c92a:	4413      	add	r3, r2
 803c92c:	623b      	str	r3, [r7, #32]
 803c92e:	e001      	b.n	803c934 <Config_FillStream+0x80>
    }
    else
    {
      ret = STATUS_ERROR;
 803c930:	2301      	movs	r3, #1
 803c932:	84fb      	strh	r3, [r7, #38]	@ 0x26
  for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 803c934:	69fb      	ldr	r3, [r7, #28]
 803c936:	3301      	adds	r3, #1
 803c938:	61fb      	str	r3, [r7, #28]
 803c93a:	69fb      	ldr	r3, [r7, #28]
 803c93c:	2b04      	cmp	r3, #4
 803c93e:	d9c6      	bls.n	803c8ce <Config_FillStream+0x1a>
    }
  }

  *length = reqIdx;
 803c940:	68bb      	ldr	r3, [r7, #8]
 803c942:	6a3a      	ldr	r2, [r7, #32]
 803c944:	601a      	str	r2, [r3, #0]

  return ret;
 803c946:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 803c94a:	4618      	mov	r0, r3
 803c94c:	3728      	adds	r7, #40	@ 0x28
 803c94e:	46bd      	mov	sp, r7
 803c950:	bd80      	pop	{r7, pc}
 803c952:	bf00      	nop
 803c954:	08043c94 	.word	0x08043c94
 803c958:	08043be8 	.word	0x08043be8
 803c95c:	08043c2c 	.word	0x08043c2c

0803c960 <Control_Init>:
/* Private variables ---------------------------------------------------------*/
/* Public variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/

Status_t Control_Init(void) {
 803c960:	b480      	push	{r7}
 803c962:	b083      	sub	sp, #12
 803c964:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803c966:	2300      	movs	r3, #0
 803c968:	80fb      	strh	r3, [r7, #6]

	return ret;
 803c96a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803c96e:	4618      	mov	r0, r3
 803c970:	370c      	adds	r7, #12
 803c972:	46bd      	mov	sp, r7
 803c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 803c978:	4770      	bx	lr
	...

0803c97c <Control_Handle>:

Status_t Control_Handle(void) {
 803c97c:	b580      	push	{r7, lr}
 803c97e:	b082      	sub	sp, #8
 803c980:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803c982:	2300      	movs	r3, #0
 803c984:	80fb      	strh	r3, [r7, #6]

	/* Handle Reset commands */
	if (conf.sys.command == CONTROL_RESET) {
 803c986:	4b53      	ldr	r3, [pc, #332]	@ (803cad4 <Control_Handle+0x158>)
 803c988:	68db      	ldr	r3, [r3, #12]
 803c98a:	f242 62ad 	movw	r2, #9901	@ 0x26ad
 803c98e:	4293      	cmp	r3, r2
 803c990:	d106      	bne.n	803c9a0 <Control_Handle+0x24>
		//Led_GreenOff();
		//Led_RedOff();
		System_Delay(1000);
 803c992:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 803c996:	f000 fcb9 	bl	803d30c <System_Delay>
		System_Reset();
 803c99a:	f000 fcc3 	bl	803d324 <System_Reset>
 803c99e:	e032      	b.n	803ca06 <Control_Handle+0x8a>
	}
	/* Handle factory reset command */
	else if (conf.sys.command == CONTROL_FACTORY) {
 803c9a0:	4b4c      	ldr	r3, [pc, #304]	@ (803cad4 <Control_Handle+0x158>)
 803c9a2:	68db      	ldr	r3, [r3, #12]
 803c9a4:	f242 2261 	movw	r2, #8801	@ 0x2261
 803c9a8:	4293      	cmp	r3, r2
 803c9aa:	d102      	bne.n	803c9b2 <Control_Handle+0x36>
		FlashApp_RequestFactorySettings();
 803c9ac:	f000 f92c 	bl	803cc08 <FlashApp_RequestFactorySettings>
 803c9b0:	e029      	b.n	803ca06 <Control_Handle+0x8a>
	} else if (conf.sys.command == CONTROL_WDG_LATCH) {
 803c9b2:	4b48      	ldr	r3, [pc, #288]	@ (803cad4 <Control_Handle+0x158>)
 803c9b4:	68db      	ldr	r3, [r3, #12]
 803c9b6:	f241 527d 	movw	r2, #5501	@ 0x157d
 803c9ba:	4293      	cmp	r3, r2
 803c9bc:	d104      	bne.n	803c9c8 <Control_Handle+0x4c>
		/* The delay below should cause IWDG to restart device */
		System_Delay(4000);
 803c9be:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 803c9c2:	f000 fca3 	bl	803d30c <System_Delay>
 803c9c6:	e01e      	b.n	803ca06 <Control_Handle+0x8a>
	}
	/* Handle set error command */
	else if (conf.sys.command > CONTROL_ERROR
 803c9c8:	4b42      	ldr	r3, [pc, #264]	@ (803cad4 <Control_Handle+0x158>)
 803c9ca:	68db      	ldr	r3, [r3, #12]
 803c9cc:	f641 12c8 	movw	r2, #6600	@ 0x19c8
 803c9d0:	4293      	cmp	r3, r2
 803c9d2:	d90f      	bls.n	803c9f4 <Control_Handle+0x78>
			&& conf.sys.command < (CONTROL_ERROR + 100)) {
 803c9d4:	4b3f      	ldr	r3, [pc, #252]	@ (803cad4 <Control_Handle+0x158>)
 803c9d6:	68db      	ldr	r3, [r3, #12]
 803c9d8:	f641 222b 	movw	r2, #6699	@ 0x1a2b
 803c9dc:	4293      	cmp	r3, r2
 803c9de:	d809      	bhi.n	803c9f4 <Control_Handle+0x78>
		cntrl.localError = conf.sys.command - CONTROL_ERROR;
 803c9e0:	4b3c      	ldr	r3, [pc, #240]	@ (803cad4 <Control_Handle+0x158>)
 803c9e2:	68db      	ldr	r3, [r3, #12]
 803c9e4:	b29b      	uxth	r3, r3
 803c9e6:	f5a3 53ce 	sub.w	r3, r3, #6592	@ 0x19c0
 803c9ea:	3b08      	subs	r3, #8
 803c9ec:	b29a      	uxth	r2, r3
 803c9ee:	4b3a      	ldr	r3, [pc, #232]	@ (803cad8 <Control_Handle+0x15c>)
 803c9f0:	805a      	strh	r2, [r3, #2]
 803c9f2:	e008      	b.n	803ca06 <Control_Handle+0x8a>
	}
	/* Handle clear error command */
	else if (conf.sys.command == CONTROL_ERROR) {
 803c9f4:	4b37      	ldr	r3, [pc, #220]	@ (803cad4 <Control_Handle+0x158>)
 803c9f6:	68db      	ldr	r3, [r3, #12]
 803c9f8:	f641 12c8 	movw	r2, #6600	@ 0x19c8
 803c9fc:	4293      	cmp	r3, r2
 803c9fe:	d102      	bne.n	803ca06 <Control_Handle+0x8a>
		cntrl.localError = 0;
 803ca00:	4b35      	ldr	r3, [pc, #212]	@ (803cad8 <Control_Handle+0x15c>)
 803ca02:	2200      	movs	r2, #0
 803ca04:	805a      	strh	r2, [r3, #2]
	}
	/* Testing mode disables setting of modbus address from DIP */
	if (conf.sys.command == CONTROL_TESTING) {
 803ca06:	4b33      	ldr	r3, [pc, #204]	@ (803cad4 <Control_Handle+0x158>)
 803ca08:	68db      	ldr	r3, [r3, #12]
 803ca0a:	f641 6215 	movw	r2, #7701	@ 0x1e15
 803ca0e:	4293      	cmp	r3, r2
 803ca10:	d106      	bne.n	803ca20 <Control_Handle+0xa4>
		SET_BIT(conf.sys.status, STAT_BIT_TESTING);
 803ca12:	4b30      	ldr	r3, [pc, #192]	@ (803cad4 <Control_Handle+0x158>)
 803ca14:	689b      	ldr	r3, [r3, #8]
 803ca16:	f043 0302 	orr.w	r3, r3, #2
 803ca1a:	4a2e      	ldr	r2, [pc, #184]	@ (803cad4 <Control_Handle+0x158>)
 803ca1c:	6093      	str	r3, [r2, #8]
 803ca1e:	e00e      	b.n	803ca3e <Control_Handle+0xc2>
	} else {
		CLEAR_BIT(conf.sys.status, STAT_BIT_TESTING);
 803ca20:	4b2c      	ldr	r3, [pc, #176]	@ (803cad4 <Control_Handle+0x158>)
 803ca22:	689b      	ldr	r3, [r3, #8]
 803ca24:	f023 0302 	bic.w	r3, r3, #2
 803ca28:	4a2a      	ldr	r2, [pc, #168]	@ (803cad4 <Control_Handle+0x158>)
 803ca2a:	6093      	str	r3, [r2, #8]
		conf.com.mb_address = (conf.sys.io_input & 0x1F) + MODBUS_BASE_ADDRESS;
 803ca2c:	4b29      	ldr	r3, [pc, #164]	@ (803cad4 <Control_Handle+0x158>)
 803ca2e:	8a9b      	ldrh	r3, [r3, #20]
 803ca30:	f003 031f 	and.w	r3, r3, #31
 803ca34:	b29b      	uxth	r3, r3
 803ca36:	3320      	adds	r3, #32
 803ca38:	b29a      	uxth	r2, r3
 803ca3a:	4b26      	ldr	r3, [pc, #152]	@ (803cad4 <Control_Handle+0x158>)
 803ca3c:	879a      	strh	r2, [r3, #60]	@ 0x3c
	}

	/* Error flag of status register */
	if (cntrl.localError != 0 || (conf.sys.status & (0x300F0)) != 0) {
 803ca3e:	4b26      	ldr	r3, [pc, #152]	@ (803cad8 <Control_Handle+0x15c>)
 803ca40:	885b      	ldrh	r3, [r3, #2]
 803ca42:	2b00      	cmp	r3, #0
 803ca44:	d105      	bne.n	803ca52 <Control_Handle+0xd6>
 803ca46:	4b23      	ldr	r3, [pc, #140]	@ (803cad4 <Control_Handle+0x158>)
 803ca48:	689a      	ldr	r2, [r3, #8]
 803ca4a:	4b24      	ldr	r3, [pc, #144]	@ (803cadc <Control_Handle+0x160>)
 803ca4c:	4013      	ands	r3, r2
 803ca4e:	2b00      	cmp	r3, #0
 803ca50:	d006      	beq.n	803ca60 <Control_Handle+0xe4>
		SET_BIT(conf.sys.status, STAT_BIT_ERROR);
 803ca52:	4b20      	ldr	r3, [pc, #128]	@ (803cad4 <Control_Handle+0x158>)
 803ca54:	689b      	ldr	r3, [r3, #8]
 803ca56:	f043 0301 	orr.w	r3, r3, #1
 803ca5a:	4a1e      	ldr	r2, [pc, #120]	@ (803cad4 <Control_Handle+0x158>)
 803ca5c:	6093      	str	r3, [r2, #8]
 803ca5e:	e005      	b.n	803ca6c <Control_Handle+0xf0>
	} else {
		CLEAR_BIT(conf.sys.status, STAT_BIT_ERROR);
 803ca60:	4b1c      	ldr	r3, [pc, #112]	@ (803cad4 <Control_Handle+0x158>)
 803ca62:	689b      	ldr	r3, [r3, #8]
 803ca64:	f023 0301 	bic.w	r3, r3, #1
 803ca68:	4a1a      	ldr	r2, [pc, #104]	@ (803cad4 <Control_Handle+0x158>)
 803ca6a:	6093      	str	r3, [r2, #8]
	}

	/* Led blinking according to status flag */
	if (cntrl.count % LED_PERIOD == 0) {
 803ca6c:	4b1a      	ldr	r3, [pc, #104]	@ (803cad8 <Control_Handle+0x15c>)
 803ca6e:	6899      	ldr	r1, [r3, #8]
 803ca70:	4b1b      	ldr	r3, [pc, #108]	@ (803cae0 <Control_Handle+0x164>)
 803ca72:	fba3 2301 	umull	r2, r3, r3, r1
 803ca76:	091a      	lsrs	r2, r3, #4
 803ca78:	4613      	mov	r3, r2
 803ca7a:	009b      	lsls	r3, r3, #2
 803ca7c:	4413      	add	r3, r2
 803ca7e:	009b      	lsls	r3, r3, #2
 803ca80:	1aca      	subs	r2, r1, r3
 803ca82:	2a00      	cmp	r2, #0
 803ca84:	d104      	bne.n	803ca90 <Control_Handle+0x114>
		if (conf.sys.status & STAT_BIT_ERROR) {
 803ca86:	4b13      	ldr	r3, [pc, #76]	@ (803cad4 <Control_Handle+0x158>)
 803ca88:	689b      	ldr	r3, [r3, #8]
 803ca8a:	f003 0301 	and.w	r3, r3, #1
 803ca8e:	2b00      	cmp	r3, #0
	} else if (cntrl.count % LED_PERIOD == LED_BLINK) {
		//Led_GreenOff();
		//Led_RedOff();
	}

	if (HAL_GetTick() > cntrl.prevTick) {
 803ca90:	f002 fd1c 	bl	803f4cc <HAL_GetTick>
 803ca94:	4602      	mov	r2, r0
 803ca96:	4b10      	ldr	r3, [pc, #64]	@ (803cad8 <Control_Handle+0x15c>)
 803ca98:	685b      	ldr	r3, [r3, #4]
 803ca9a:	429a      	cmp	r2, r3
 803ca9c:	d90a      	bls.n	803cab4 <Control_Handle+0x138>
		cntrl.prevTick += 1000;
 803ca9e:	4b0e      	ldr	r3, [pc, #56]	@ (803cad8 <Control_Handle+0x15c>)
 803caa0:	685b      	ldr	r3, [r3, #4]
 803caa2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 803caa6:	4a0c      	ldr	r2, [pc, #48]	@ (803cad8 <Control_Handle+0x15c>)
 803caa8:	6053      	str	r3, [r2, #4]
		conf.sys.uptime += 1;
 803caaa:	4b0a      	ldr	r3, [pc, #40]	@ (803cad4 <Control_Handle+0x158>)
 803caac:	681b      	ldr	r3, [r3, #0]
 803caae:	3301      	adds	r3, #1
 803cab0:	4a08      	ldr	r2, [pc, #32]	@ (803cad4 <Control_Handle+0x158>)
 803cab2:	6013      	str	r3, [r2, #0]
	}

	/* Store previous command */
	cntrl.prevCmd = conf.sys.command;
 803cab4:	4b07      	ldr	r3, [pc, #28]	@ (803cad4 <Control_Handle+0x158>)
 803cab6:	68db      	ldr	r3, [r3, #12]
 803cab8:	b29a      	uxth	r2, r3
 803caba:	4b07      	ldr	r3, [pc, #28]	@ (803cad8 <Control_Handle+0x15c>)
 803cabc:	801a      	strh	r2, [r3, #0]
	cntrl.count++;
 803cabe:	4b06      	ldr	r3, [pc, #24]	@ (803cad8 <Control_Handle+0x15c>)
 803cac0:	689b      	ldr	r3, [r3, #8]
 803cac2:	3301      	adds	r3, #1
 803cac4:	4a04      	ldr	r2, [pc, #16]	@ (803cad8 <Control_Handle+0x15c>)
 803cac6:	6093      	str	r3, [r2, #8]

	return ret;
 803cac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803cacc:	4618      	mov	r0, r3
 803cace:	3708      	adds	r7, #8
 803cad0:	46bd      	mov	sp, r7
 803cad2:	bd80      	pop	{r7, pc}
 803cad4:	20000538 	.word	0x20000538
 803cad8:	200000e8 	.word	0x200000e8
 803cadc:	000300f0 	.word	0x000300f0
 803cae0:	cccccccd 	.word	0xcccccccd

0803cae4 <FlashApp_Init>:
/* Private variables ---------------------------------------------------------*/
/* Public variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/

Status_t FlashApp_Init(void) {
 803cae4:	b580      	push	{r7, lr}
 803cae6:	b082      	sub	sp, #8
 803cae8:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803caea:	2300      	movs	r3, #0
 803caec:	80fb      	strh	r3, [r7, #6]

	/* Initialize flash configuration */
	FlashConf_Init();
 803caee:	f000 f89d 	bl	803cc2c <FlashConf_Init>

	/* Read configuration - first attempt */
	ret = FlashConf_Load();
 803caf2:	f000 f8a9 	bl	803cc48 <FlashConf_Load>
 803caf6:	4603      	mov	r3, r0
 803caf8:	80fb      	strh	r3, [r7, #6]

	if (ret == STATUS_OK) {
 803cafa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 803cafe:	2b00      	cmp	r3, #0
 803cb00:	d003      	beq.n	803cb0a <FlashApp_Init+0x26>
		/* We have configuration */
	} else {
		/* No success in reading configuration, we store the default values*/
		ret = FlashConf_Store();
 803cb02:	f000 f8df 	bl	803ccc4 <FlashConf_Store>
 803cb06:	4603      	mov	r3, r0
 803cb08:	80fb      	strh	r3, [r7, #6]
	}

	/* FIXME: temporary disabled calibration */
//  Calib_Init();
	return ret;
 803cb0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803cb0e:	4618      	mov	r0, r3
 803cb10:	3708      	adds	r7, #8
 803cb12:	46bd      	mov	sp, r7
 803cb14:	bd80      	pop	{r7, pc}
	...

0803cb18 <FlashApp_Handle>:

Status_t FlashApp_Handle(void) {
 803cb18:	b580      	push	{r7, lr}
 803cb1a:	b082      	sub	sp, #8
 803cb1c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803cb1e:	2300      	movs	r3, #0
 803cb20:	80fb      	strh	r3, [r7, #6]

	/* Configuration requested, set dead time */
	if (flashApp.config) {
 803cb22:	4b2b      	ldr	r3, [pc, #172]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb24:	781b      	ldrb	r3, [r3, #0]
 803cb26:	2b00      	cmp	r3, #0
 803cb28:	d014      	beq.n	803cb54 <FlashApp_Handle+0x3c>
		flashApp.config = 0;
 803cb2a:	4b29      	ldr	r3, [pc, #164]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb2c:	2200      	movs	r2, #0
 803cb2e:	701a      	strb	r2, [r3, #0]
		flashApp.tick = HAL_GetTick() + CONFIG_DEAD_TIME;
 803cb30:	f002 fccc 	bl	803f4cc <HAL_GetTick>
 803cb34:	4603      	mov	r3, r0
 803cb36:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 803cb3a:	4a25      	ldr	r2, [pc, #148]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb3c:	6053      	str	r3, [r2, #4]
		flashApp.tick = (flashApp.tick == 0) ? (UINT32_MAX) : (flashApp.tick);
 803cb3e:	4b24      	ldr	r3, [pc, #144]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb40:	685b      	ldr	r3, [r3, #4]
 803cb42:	2b00      	cmp	r3, #0
 803cb44:	d002      	beq.n	803cb4c <FlashApp_Handle+0x34>
 803cb46:	4b22      	ldr	r3, [pc, #136]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb48:	685b      	ldr	r3, [r3, #4]
 803cb4a:	e001      	b.n	803cb50 <FlashApp_Handle+0x38>
 803cb4c:	f04f 33ff 	mov.w	r3, #4294967295
 803cb50:	4a1f      	ldr	r2, [pc, #124]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb52:	6053      	str	r3, [r2, #4]
	}

	/* If factory reset was requested */
	if (flashApp.reset == FACTORY_CONFIG) {
 803cb54:	4b1e      	ldr	r3, [pc, #120]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb56:	785b      	ldrb	r3, [r3, #1]
 803cb58:	2b01      	cmp	r3, #1
 803cb5a:	d114      	bne.n	803cb86 <FlashApp_Handle+0x6e>
		/* Load default factory settings */
		RegMap_RestoreFactoryValues();
 803cb5c:	f000 fb12 	bl	803d184 <RegMap_RestoreFactoryValues>

		/* Request immediate storage and reset */
		flashApp.reset = FACTORY_RESET;
 803cb60:	4b1b      	ldr	r3, [pc, #108]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb62:	2202      	movs	r2, #2
 803cb64:	705a      	strb	r2, [r3, #1]
		flashApp.tick = HAL_GetTick();
 803cb66:	f002 fcb1 	bl	803f4cc <HAL_GetTick>
 803cb6a:	4603      	mov	r3, r0
 803cb6c:	4a18      	ldr	r2, [pc, #96]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb6e:	6053      	str	r3, [r2, #4]
		flashApp.tick = (flashApp.tick == 0) ? (UINT32_MAX) : (flashApp.tick);
 803cb70:	4b17      	ldr	r3, [pc, #92]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb72:	685b      	ldr	r3, [r3, #4]
 803cb74:	2b00      	cmp	r3, #0
 803cb76:	d002      	beq.n	803cb7e <FlashApp_Handle+0x66>
 803cb78:	4b15      	ldr	r3, [pc, #84]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb7a:	685b      	ldr	r3, [r3, #4]
 803cb7c:	e001      	b.n	803cb82 <FlashApp_Handle+0x6a>
 803cb7e:	f04f 33ff 	mov.w	r3, #4294967295
 803cb82:	4a13      	ldr	r2, [pc, #76]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb84:	6053      	str	r3, [r2, #4]
	}

	/* Wait on tick expire */
	if (flashApp.tick != 0 && TICK_EXPIRED(flashApp.tick)) {
 803cb86:	4b12      	ldr	r3, [pc, #72]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb88:	685b      	ldr	r3, [r3, #4]
 803cb8a:	2b00      	cmp	r3, #0
 803cb8c:	d01a      	beq.n	803cbc4 <FlashApp_Handle+0xac>
 803cb8e:	f002 fc9d 	bl	803f4cc <HAL_GetTick>
 803cb92:	4602      	mov	r2, r0
 803cb94:	4b0e      	ldr	r3, [pc, #56]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cb96:	685b      	ldr	r3, [r3, #4]
 803cb98:	1ad3      	subs	r3, r2, r3
 803cb9a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 803cb9e:	4293      	cmp	r3, r2
 803cba0:	d210      	bcs.n	803cbc4 <FlashApp_Handle+0xac>
		/* Clear tick to prevent tick expire false events */
		flashApp.tick = 0;
 803cba2:	4b0b      	ldr	r3, [pc, #44]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cba4:	2200      	movs	r2, #0
 803cba6:	605a      	str	r2, [r3, #4]

		/* Write non-volatile registers to external Flash */
		ret = FlashConf_Store();
 803cba8:	f000 f88c 	bl	803ccc4 <FlashConf_Store>
 803cbac:	4603      	mov	r3, r0
 803cbae:	80fb      	strh	r3, [r7, #6]

		/* System reset */
		if (flashApp.reset == FACTORY_RESET) {
 803cbb0:	4b07      	ldr	r3, [pc, #28]	@ (803cbd0 <FlashApp_Handle+0xb8>)
 803cbb2:	785b      	ldrb	r3, [r3, #1]
 803cbb4:	2b02      	cmp	r3, #2
 803cbb6:	d105      	bne.n	803cbc4 <FlashApp_Handle+0xac>
			HAL_Delay(1000);
 803cbb8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 803cbbc:	f002 fc92 	bl	803f4e4 <HAL_Delay>
			System_Reset();
 803cbc0:	f000 fbb0 	bl	803d324 <System_Reset>
		}
	}

	/* FIXME: temporary disabled calibration */
//  Calib_Write();
	return ret;
 803cbc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803cbc8:	4618      	mov	r0, r3
 803cbca:	3708      	adds	r7, #8
 803cbcc:	46bd      	mov	sp, r7
 803cbce:	bd80      	pop	{r7, pc}
 803cbd0:	200000f4 	.word	0x200000f4

0803cbd4 <FlashApp_RequestConfStorage>:
	HAL_Delay(100);

	return ret;
}

Status_t FlashApp_RequestConfStorage(void) {
 803cbd4:	b480      	push	{r7}
 803cbd6:	b083      	sub	sp, #12
 803cbd8:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803cbda:	2300      	movs	r3, #0
 803cbdc:	80fb      	strh	r3, [r7, #6]

	/* Do not store to flash in testing mode */
	if (!(conf.sys.status & STAT_BIT_TESTING)) {
 803cbde:	4b08      	ldr	r3, [pc, #32]	@ (803cc00 <FlashApp_RequestConfStorage+0x2c>)
 803cbe0:	689b      	ldr	r3, [r3, #8]
 803cbe2:	f003 0302 	and.w	r3, r3, #2
 803cbe6:	2b00      	cmp	r3, #0
 803cbe8:	d102      	bne.n	803cbf0 <FlashApp_RequestConfStorage+0x1c>
		flashApp.config = CONFIG_STORE;
 803cbea:	4b06      	ldr	r3, [pc, #24]	@ (803cc04 <FlashApp_RequestConfStorage+0x30>)
 803cbec:	2201      	movs	r2, #1
 803cbee:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 803cbf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803cbf4:	4618      	mov	r0, r3
 803cbf6:	370c      	adds	r7, #12
 803cbf8:	46bd      	mov	sp, r7
 803cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cbfe:	4770      	bx	lr
 803cc00:	20000538 	.word	0x20000538
 803cc04:	200000f4 	.word	0x200000f4

0803cc08 <FlashApp_RequestFactorySettings>:

Status_t FlashApp_RequestFactorySettings(void) {
 803cc08:	b480      	push	{r7}
 803cc0a:	b083      	sub	sp, #12
 803cc0c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803cc0e:	2300      	movs	r3, #0
 803cc10:	80fb      	strh	r3, [r7, #6]

	flashApp.reset = FACTORY_CONFIG;
 803cc12:	4b05      	ldr	r3, [pc, #20]	@ (803cc28 <FlashApp_RequestFactorySettings+0x20>)
 803cc14:	2201      	movs	r2, #1
 803cc16:	705a      	strb	r2, [r3, #1]

	return ret;
 803cc18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803cc1c:	4618      	mov	r0, r3
 803cc1e:	370c      	adds	r7, #12
 803cc20:	46bd      	mov	sp, r7
 803cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cc26:	4770      	bx	lr
 803cc28:	200000f4 	.word	0x200000f4

0803cc2c <FlashConf_Init>:

Status_t FlashConf_EraseBlock(uint32_t address);

/* Functions -----------------------------------------------------------------*/

Status_t FlashConf_Init(void) {
 803cc2c:	b480      	push	{r7}
 803cc2e:	b083      	sub	sp, #12
 803cc30:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803cc32:	2300      	movs	r3, #0
 803cc34:	80fb      	strh	r3, [r7, #6]

	return ret;
 803cc36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803cc3a:	4618      	mov	r0, r3
 803cc3c:	370c      	adds	r7, #12
 803cc3e:	46bd      	mov	sp, r7
 803cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 803cc44:	4770      	bx	lr
	...

0803cc48 <FlashConf_Load>:

Status_t FlashConf_Load(void) {
 803cc48:	b580      	push	{r7, lr}
 803cc4a:	b082      	sub	sp, #8
 803cc4c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803cc4e:	2300      	movs	r3, #0
 803cc50:	80fb      	strh	r3, [r7, #6]

	/* Read headers */
	ret = FlashConf_FindEntry();
 803cc52:	f000 f87f 	bl	803cd54 <FlashConf_FindEntry>
 803cc56:	4603      	mov	r3, r0
 803cc58:	80fb      	strh	r3, [r7, #6]

	if (ret == STATUS_OK) {
 803cc5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 803cc5e:	2b00      	cmp	r3, #0
 803cc60:	d11d      	bne.n	803cc9e <FlashConf_Load+0x56>
		/* Read main configuration */
		ret = FlashConf_Read(flCo.configAddr);
 803cc62:	4b15      	ldr	r3, [pc, #84]	@ (803ccb8 <FlashConf_Load+0x70>)
 803cc64:	681b      	ldr	r3, [r3, #0]
 803cc66:	4618      	mov	r0, r3
 803cc68:	f000 f9b2 	bl	803cfd0 <FlashConf_Read>
 803cc6c:	4603      	mov	r3, r0
 803cc6e:	80fb      	strh	r3, [r7, #6]

		if (ret == STATUS_ERROR) {
 803cc70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 803cc74:	2b01      	cmp	r3, #1
 803cc76:	d106      	bne.n	803cc86 <FlashConf_Load+0x3e>
			/* Read backup configuration */
			ret = FlashConf_Read(flCo.backupAddr);
 803cc78:	4b0f      	ldr	r3, [pc, #60]	@ (803ccb8 <FlashConf_Load+0x70>)
 803cc7a:	685b      	ldr	r3, [r3, #4]
 803cc7c:	4618      	mov	r0, r3
 803cc7e:	f000 f9a7 	bl	803cfd0 <FlashConf_Read>
 803cc82:	4603      	mov	r3, r0
 803cc84:	80fb      	strh	r3, [r7, #6]
		}

		if (ret == STATUS_OK) {
 803cc86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 803cc8a:	2b00      	cmp	r3, #0
 803cc8c:	d109      	bne.n	803cca2 <FlashConf_Load+0x5a>
			/* Configuration have been read successfully */
			/* Parse and apply config data */
			Config_ReadStream(flCo.data.data,
					flCo.data.header.completeSize - sizeof(FlashConf_Header_t)
 803cc8e:	4b0a      	ldr	r3, [pc, #40]	@ (803ccb8 <FlashConf_Load+0x70>)
 803cc90:	691b      	ldr	r3, [r3, #16]
			Config_ReadStream(flCo.data.data,
 803cc92:	3b14      	subs	r3, #20
 803cc94:	4619      	mov	r1, r3
 803cc96:	4809      	ldr	r0, [pc, #36]	@ (803ccbc <FlashConf_Load+0x74>)
 803cc98:	f7ff fda0 	bl	803c7dc <Config_ReadStream>
 803cc9c:	e001      	b.n	803cca2 <FlashConf_Load+0x5a>
							- sizeof(FLASH_KEY));
		}
	} else {
		/* No configuration found */
		ret = STATUS_ERROR;
 803cc9e:	2301      	movs	r3, #1
 803cca0:	80fb      	strh	r3, [r7, #6]
	}

	conf.dbg.writes_conf = flCo.data.header.writes;
 803cca2:	4b05      	ldr	r3, [pc, #20]	@ (803ccb8 <FlashConf_Load+0x70>)
 803cca4:	68db      	ldr	r3, [r3, #12]
 803cca6:	4a06      	ldr	r2, [pc, #24]	@ (803ccc0 <FlashConf_Load+0x78>)
 803cca8:	64d3      	str	r3, [r2, #76]	@ 0x4c

	return ret;
 803ccaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803ccae:	4618      	mov	r0, r3
 803ccb0:	3708      	adds	r7, #8
 803ccb2:	46bd      	mov	sp, r7
 803ccb4:	bd80      	pop	{r7, pc}
 803ccb6:	bf00      	nop
 803ccb8:	200000fc 	.word	0x200000fc
 803ccbc:	20000114 	.word	0x20000114
 803ccc0:	20000538 	.word	0x20000538

0803ccc4 <FlashConf_Store>:

Status_t FlashConf_Store(void) {
 803ccc4:	b580      	push	{r7, lr}
 803ccc6:	b082      	sub	sp, #8
 803ccc8:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803ccca:	2300      	movs	r3, #0
 803cccc:	80fb      	strh	r3, [r7, #6]
	uint32_t length = 0;
 803ccce:	2300      	movs	r3, #0
 803ccd0:	603b      	str	r3, [r7, #0]

	/* Create config data to write*/
	ret = Config_FillStream(flCo.data.data, &length, FLASH_CONF_SIZE - 4);
 803ccd2:	463b      	mov	r3, r7
 803ccd4:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 803ccd8:	4619      	mov	r1, r3
 803ccda:	481a      	ldr	r0, [pc, #104]	@ (803cd44 <FlashConf_Store+0x80>)
 803ccdc:	f7ff fdea 	bl	803c8b4 <Config_FillStream>
 803cce0:	4603      	mov	r3, r0
 803cce2:	80fb      	strh	r3, [r7, #6]

	memcpy(flCo.data.data + length, &FLASH_KEY, sizeof(FLASH_KEY));
 803cce4:	683b      	ldr	r3, [r7, #0]
 803cce6:	4a17      	ldr	r2, [pc, #92]	@ (803cd44 <FlashConf_Store+0x80>)
 803cce8:	4413      	add	r3, r2
 803ccea:	4a17      	ldr	r2, [pc, #92]	@ (803cd48 <FlashConf_Store+0x84>)
 803ccec:	601a      	str	r2, [r3, #0]

	flCo.data.header.completeSize = length + sizeof(FLASH_KEY)
			+ sizeof(FlashConf_Header_t);
 803ccee:	683b      	ldr	r3, [r7, #0]
 803ccf0:	3314      	adds	r3, #20
	flCo.data.header.completeSize = length + sizeof(FLASH_KEY)
 803ccf2:	4a16      	ldr	r2, [pc, #88]	@ (803cd4c <FlashConf_Store+0x88>)
 803ccf4:	6113      	str	r3, [r2, #16]
	flCo.data.header.reserved = FLASH_KEY;
 803ccf6:	4a14      	ldr	r2, [pc, #80]	@ (803cd48 <FlashConf_Store+0x84>)
 803ccf8:	4b14      	ldr	r3, [pc, #80]	@ (803cd4c <FlashConf_Store+0x88>)
 803ccfa:	615a      	str	r2, [r3, #20]

	/* Write config data into flash */
	ret += FlashConf_Write();
 803ccfc:	f000 f9ac 	bl	803d058 <FlashConf_Write>
 803cd00:	4603      	mov	r3, r0
 803cd02:	b29a      	uxth	r2, r3
 803cd04:	88fb      	ldrh	r3, [r7, #6]
 803cd06:	4413      	add	r3, r2
 803cd08:	b29b      	uxth	r3, r3
 803cd0a:	80fb      	strh	r3, [r7, #6]

	conf.dbg.writes_conf = flCo.data.header.writes;
 803cd0c:	4b0f      	ldr	r3, [pc, #60]	@ (803cd4c <FlashConf_Store+0x88>)
 803cd0e:	68db      	ldr	r3, [r3, #12]
 803cd10:	4a0f      	ldr	r2, [pc, #60]	@ (803cd50 <FlashConf_Store+0x8c>)
 803cd12:	64d3      	str	r3, [r2, #76]	@ 0x4c

	if (ret == STATUS_OK) {
 803cd14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 803cd18:	2b00      	cmp	r3, #0
 803cd1a:	d106      	bne.n	803cd2a <FlashConf_Store+0x66>
		CLEAR_BIT(conf.sys.status, STAT_BIT_CONFIG_FLASH);
 803cd1c:	4b0c      	ldr	r3, [pc, #48]	@ (803cd50 <FlashConf_Store+0x8c>)
 803cd1e:	689b      	ldr	r3, [r3, #8]
 803cd20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 803cd24:	4a0a      	ldr	r2, [pc, #40]	@ (803cd50 <FlashConf_Store+0x8c>)
 803cd26:	6093      	str	r3, [r2, #8]
 803cd28:	e005      	b.n	803cd36 <FlashConf_Store+0x72>
	} else {
		SET_BIT(conf.sys.status, STAT_BIT_CONFIG_FLASH);
 803cd2a:	4b09      	ldr	r3, [pc, #36]	@ (803cd50 <FlashConf_Store+0x8c>)
 803cd2c:	689b      	ldr	r3, [r3, #8]
 803cd2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 803cd32:	4a07      	ldr	r2, [pc, #28]	@ (803cd50 <FlashConf_Store+0x8c>)
 803cd34:	6093      	str	r3, [r2, #8]
	}

	return ret;
 803cd36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803cd3a:	4618      	mov	r0, r3
 803cd3c:	3708      	adds	r7, #8
 803cd3e:	46bd      	mov	sp, r7
 803cd40:	bd80      	pop	{r7, pc}
 803cd42:	bf00      	nop
 803cd44:	20000114 	.word	0x20000114
 803cd48:	deadbeef 	.word	0xdeadbeef
 803cd4c:	200000fc 	.word	0x200000fc
 803cd50:	20000538 	.word	0x20000538

0803cd54 <FlashConf_FindEntry>:
	return ret;
}

/* Private Functions ---------------------------------------------------------*/

Status_t FlashConf_FindEntry(void) {
 803cd54:	b590      	push	{r4, r7, lr}
 803cd56:	b085      	sub	sp, #20
 803cd58:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803cd5a:	2300      	movs	r3, #0
 803cd5c:	81fb      	strh	r3, [r7, #14]
	uint32_t lastHeaderFound = 0;
 803cd5e:	2300      	movs	r3, #0
 803cd60:	60bb      	str	r3, [r7, #8]
	uint32_t address;

	/* Initial values */
	flCo.data.header.addressNext = FLASH_CONF_ADDR_START;
 803cd62:	4a8c      	ldr	r2, [pc, #560]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803cd64:	4b8c      	ldr	r3, [pc, #560]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cd66:	609a      	str	r2, [r3, #8]
	flCo.data.header.writes = 1;
 803cd68:	4b8b      	ldr	r3, [pc, #556]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cd6a:	2201      	movs	r2, #1
 803cd6c:	60da      	str	r2, [r3, #12]
	flCo.data.header.completeSize = sizeof(FlashConf_Header_t);
 803cd6e:	4b8a      	ldr	r3, [pc, #552]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cd70:	2210      	movs	r2, #16
 803cd72:	611a      	str	r2, [r3, #16]
	flCo.data.header.reserved = sizeof(FlashConf_Header_t);
 803cd74:	4b88      	ldr	r3, [pc, #544]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cd76:	2210      	movs	r2, #16
 803cd78:	615a      	str	r2, [r3, #20]
	flCo.invalidAddress = -1;
 803cd7a:	4b87      	ldr	r3, [pc, #540]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cd7c:	f04f 32ff 	mov.w	r2, #4294967295
 803cd80:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
	flCo.configAddr = FLASH_CONF_ADDR_START;
 803cd84:	4a83      	ldr	r2, [pc, #524]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803cd86:	4b84      	ldr	r3, [pc, #528]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cd88:	601a      	str	r2, [r3, #0]
	flCo.backupAddr = FLASH_CONF_ADDR_START;
 803cd8a:	4a82      	ldr	r2, [pc, #520]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803cd8c:	4b82      	ldr	r3, [pc, #520]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cd8e:	605a      	str	r2, [r3, #4]

	address = FLASH_CONF_ADDR_START;
 803cd90:	4b80      	ldr	r3, [pc, #512]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803cd92:	607b      	str	r3, [r7, #4]

	/* Find first sector with non-empty values*/
	while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 803cd94:	e02c      	b.n	803cdf0 <FlashConf_FindEntry+0x9c>
		/* Read header into temp */
		memcpy(&flCo.tempHead, (uint8_t*) address, sizeof(FlashConf_Header_t));
 803cd96:	687b      	ldr	r3, [r7, #4]
 803cd98:	2210      	movs	r2, #16
 803cd9a:	4619      	mov	r1, r3
 803cd9c:	487f      	ldr	r0, [pc, #508]	@ (803cf9c <FlashConf_FindEntry+0x248>)
 803cd9e:	f006 ff09 	bl	8043bb4 <memcpy>

		if (flCo.tempHead.addressNext == 0 && flCo.tempHead.completeSize == 0
 803cda2:	4b7d      	ldr	r3, [pc, #500]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cda4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 803cda8:	2b00      	cmp	r3, #0
 803cdaa:	d114      	bne.n	803cdd6 <FlashConf_FindEntry+0x82>
 803cdac:	4b7a      	ldr	r3, [pc, #488]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cdae:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 803cdb2:	2b00      	cmp	r3, #0
 803cdb4:	d10f      	bne.n	803cdd6 <FlashConf_FindEntry+0x82>
				&& flCo.tempHead.reserved != FLASH_KEY) {
 803cdb6:	4b78      	ldr	r3, [pc, #480]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cdb8:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 803cdbc:	4a78      	ldr	r2, [pc, #480]	@ (803cfa0 <FlashConf_FindEntry+0x24c>)
 803cdbe:	4293      	cmp	r3, r2
 803cdc0:	d009      	beq.n	803cdd6 <FlashConf_FindEntry+0x82>
			/* We can erase sector of backup */
			ret = FlashConf_EraseBlock(address);
 803cdc2:	6878      	ldr	r0, [r7, #4]
 803cdc4:	f000 f8f0 	bl	803cfa8 <FlashConf_EraseBlock>
 803cdc8:	4603      	mov	r3, r0
 803cdca:	81fb      	strh	r3, [r7, #14]

			/* Jump to next sector */
			address += FLASH_MEM_BLOCK_SIZE;
 803cdcc:	687b      	ldr	r3, [r7, #4]
 803cdce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 803cdd2:	607b      	str	r3, [r7, #4]
 803cdd4:	e00c      	b.n	803cdf0 <FlashConf_FindEntry+0x9c>
		} else if (flCo.tempHead.addressNext != FLASH_EMPTY_VALUE) {
 803cdd6:	4b70      	ldr	r3, [pc, #448]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cdd8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 803cddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 803cde0:	d002      	beq.n	803cde8 <FlashConf_FindEntry+0x94>
			/* We reached an empty value, so the previous value is final */
			lastHeaderFound = 1;
 803cde2:	2301      	movs	r3, #1
 803cde4:	60bb      	str	r3, [r7, #8]
 803cde6:	e003      	b.n	803cdf0 <FlashConf_FindEntry+0x9c>
		} else {
			/* Jump to next sector */
			address += FLASH_MEM_BLOCK_SIZE;
 803cde8:	687b      	ldr	r3, [r7, #4]
 803cdea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 803cdee:	607b      	str	r3, [r7, #4]
	while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 803cdf0:	4a68      	ldr	r2, [pc, #416]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803cdf2:	4b6c      	ldr	r3, [pc, #432]	@ (803cfa4 <FlashConf_FindEntry+0x250>)
 803cdf4:	4413      	add	r3, r2
 803cdf6:	687a      	ldr	r2, [r7, #4]
 803cdf8:	429a      	cmp	r2, r3
 803cdfa:	d202      	bcs.n	803ce02 <FlashConf_FindEntry+0xae>
 803cdfc:	68bb      	ldr	r3, [r7, #8]
 803cdfe:	2b00      	cmp	r3, #0
 803ce00:	d0c9      	beq.n	803cd96 <FlashConf_FindEntry+0x42>
		}
	}

	/* Nothing found in flash */
	if (address == FLASH_CONF_ADDR_END) {
 803ce02:	4a64      	ldr	r2, [pc, #400]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803ce04:	4b67      	ldr	r3, [pc, #412]	@ (803cfa4 <FlashConf_FindEntry+0x250>)
 803ce06:	4413      	add	r3, r2
 803ce08:	687a      	ldr	r2, [r7, #4]
 803ce0a:	429a      	cmp	r2, r3
 803ce0c:	d102      	bne.n	803ce14 <FlashConf_FindEntry+0xc0>
		ret = STATUS_ERROR;
 803ce0e:	2301      	movs	r3, #1
 803ce10:	81fb      	strh	r3, [r7, #14]
 803ce12:	e0a2      	b.n	803cf5a <FlashConf_FindEntry+0x206>
	} else {
		ret = STATUS_OK;
 803ce14:	2300      	movs	r3, #0
 803ce16:	81fb      	strh	r3, [r7, #14]
		lastHeaderFound = 0;
 803ce18:	2300      	movs	r3, #0
 803ce1a:	60bb      	str	r3, [r7, #8]

		/* Go through chain list until last non-empty value is found */
		while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 803ce1c:	e093      	b.n	803cf46 <FlashConf_FindEntry+0x1f2>
			/* Read header into temp */
			memcpy((uint8_t*) &flCo.tempHead, (uint8_t*) address,
 803ce1e:	687b      	ldr	r3, [r7, #4]
 803ce20:	2210      	movs	r2, #16
 803ce22:	4619      	mov	r1, r3
 803ce24:	485d      	ldr	r0, [pc, #372]	@ (803cf9c <FlashConf_FindEntry+0x248>)
 803ce26:	f006 fec5 	bl	8043bb4 <memcpy>
					sizeof(FlashConf_Header_t));

			if (flCo.tempHead.addressNext == FLASH_EMPTY_VALUE) {
 803ce2a:	4b5b      	ldr	r3, [pc, #364]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803ce2c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 803ce30:	f1b3 3fff 	cmp.w	r3, #4294967295
 803ce34:	d12d      	bne.n	803ce92 <FlashConf_FindEntry+0x13e>
				/* We reached an empty value, try to read next beginning of sector */

				/* This entry is the first */
				if (flCo.configAddr == FLASH_CONF_ADDR_START
 803ce36:	4b58      	ldr	r3, [pc, #352]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803ce38:	681b      	ldr	r3, [r3, #0]
 803ce3a:	4a56      	ldr	r2, [pc, #344]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803ce3c:	4293      	cmp	r3, r2
 803ce3e:	d10b      	bne.n	803ce58 <FlashConf_FindEntry+0x104>
						&& flCo.backupAddr == FLASH_CONF_ADDR_START) {
 803ce40:	4b55      	ldr	r3, [pc, #340]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803ce42:	685b      	ldr	r3, [r3, #4]
 803ce44:	4a53      	ldr	r2, [pc, #332]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803ce46:	4293      	cmp	r3, r2
 803ce48:	d106      	bne.n	803ce58 <FlashConf_FindEntry+0x104>
					/* Try the last sector */
					address = FLASH_CONF_ADDR_END - FLASH_MEM_BLOCK_SIZE;
 803ce4a:	4a56      	ldr	r2, [pc, #344]	@ (803cfa4 <FlashConf_FindEntry+0x250>)
 803ce4c:	4b51      	ldr	r3, [pc, #324]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803ce4e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 803ce52:	4413      	add	r3, r2
 803ce54:	607b      	str	r3, [r7, #4]
 803ce56:	e016      	b.n	803ce86 <FlashConf_FindEntry+0x132>
				}
				/* Jump to the beginning of sector */
				else if ((address % FLASH_MEM_BLOCK_SIZE)
						>= FLASH_MEM_BLOCK_SIZE / 2) // address & (FLASH_MEM_BLOCK_SIZE - 1) &&
 803ce58:	687b      	ldr	r3, [r7, #4]
 803ce5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
				else if ((address % FLASH_MEM_BLOCK_SIZE)
 803ce5e:	2b00      	cmp	r3, #0
 803ce60:	d011      	beq.n	803ce86 <FlashConf_FindEntry+0x132>
								{
					address &= ~(FLASH_MEM_BLOCK_SIZE - 1);
 803ce62:	687b      	ldr	r3, [r7, #4]
 803ce64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 803ce68:	f023 0307 	bic.w	r3, r3, #7
 803ce6c:	607b      	str	r3, [r7, #4]
					address += (FLASH_MEM_BLOCK_SIZE);
 803ce6e:	687b      	ldr	r3, [r7, #4]
 803ce70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 803ce74:	607b      	str	r3, [r7, #4]

					/* Wrap around the config space */
					if (address == FLASH_CONF_ADDR_END) {
 803ce76:	4a47      	ldr	r2, [pc, #284]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803ce78:	4b4a      	ldr	r3, [pc, #296]	@ (803cfa4 <FlashConf_FindEntry+0x250>)
 803ce7a:	4413      	add	r3, r2
 803ce7c:	687a      	ldr	r2, [r7, #4]
 803ce7e:	429a      	cmp	r2, r3
 803ce80:	d101      	bne.n	803ce86 <FlashConf_FindEntry+0x132>
						address = FLASH_CONF_ADDR_START;
 803ce82:	4b44      	ldr	r3, [pc, #272]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803ce84:	607b      	str	r3, [r7, #4]
					}
				}

				/* Read header into temporary storage */
				memcpy((uint8_t*) &flCo.tempHead, (uint8_t*) address,
 803ce86:	687b      	ldr	r3, [r7, #4]
 803ce88:	2210      	movs	r2, #16
 803ce8a:	4619      	mov	r1, r3
 803ce8c:	4843      	ldr	r0, [pc, #268]	@ (803cf9c <FlashConf_FindEntry+0x248>)
 803ce8e:	f006 fe91 	bl	8043bb4 <memcpy>
						sizeof(FlashConf_Header_t));
			}

			/* Still empty value */
			if (flCo.tempHead.addressNext == FLASH_EMPTY_VALUE) {
 803ce92:	4b41      	ldr	r3, [pc, #260]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803ce94:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 803ce98:	f1b3 3fff 	cmp.w	r3, #4294967295
 803ce9c:	d102      	bne.n	803cea4 <FlashConf_FindEntry+0x150>
				/* We reached an empty value, so the previous value is final */
				lastHeaderFound = 1;
 803ce9e:	2301      	movs	r3, #1
 803cea0:	60bb      	str	r3, [r7, #8]
 803cea2:	e050      	b.n	803cf46 <FlashConf_FindEntry+0x1f2>
			}
			/* Check next address on configuration boundaries and page beginning*/
			else if (flCo.tempHead.addressNext > FLASH_CONF_ADDR_END
 803cea4:	4b3c      	ldr	r3, [pc, #240]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cea6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 803ceaa:	493a      	ldr	r1, [pc, #232]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803ceac:	4b3d      	ldr	r3, [pc, #244]	@ (803cfa4 <FlashConf_FindEntry+0x250>)
 803ceae:	440b      	add	r3, r1
 803ceb0:	429a      	cmp	r2, r3
 803ceb2:	d806      	bhi.n	803cec2 <FlashConf_FindEntry+0x16e>
					|| (flCo.tempHead.addressNext & (FLASH_MEM_PAGE_SIZE - 1))) {
 803ceb4:	4b38      	ldr	r3, [pc, #224]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803ceb6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 803ceba:	f003 030f 	and.w	r3, r3, #15
 803cebe:	2b00      	cmp	r3, #0
 803cec0:	d016      	beq.n	803cef0 <FlashConf_FindEntry+0x19c>
				/* The next address is invalid */
				flCo.invalidAddress = address;
 803cec2:	4a35      	ldr	r2, [pc, #212]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cec4:	687b      	ldr	r3, [r7, #4]
 803cec6:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

				/* Maybe the erase has failed, try to peek into next sector */
				address &= ~(FLASH_MEM_BLOCK_SIZE - 1);
 803ceca:	687b      	ldr	r3, [r7, #4]
 803cecc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 803ced0:	f023 0307 	bic.w	r3, r3, #7
 803ced4:	607b      	str	r3, [r7, #4]
				address += (FLASH_MEM_BLOCK_SIZE);
 803ced6:	687b      	ldr	r3, [r7, #4]
 803ced8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 803cedc:	607b      	str	r3, [r7, #4]
				/* Wrap around the config space */
				if (address == FLASH_CONF_ADDR_END) {
 803cede:	4a2d      	ldr	r2, [pc, #180]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803cee0:	4b30      	ldr	r3, [pc, #192]	@ (803cfa4 <FlashConf_FindEntry+0x250>)
 803cee2:	4413      	add	r3, r2
 803cee4:	687a      	ldr	r2, [r7, #4]
 803cee6:	429a      	cmp	r2, r3
 803cee8:	d12d      	bne.n	803cf46 <FlashConf_FindEntry+0x1f2>
					address = FLASH_CONF_ADDR_START;
 803ceea:	4b2a      	ldr	r3, [pc, #168]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803ceec:	607b      	str	r3, [r7, #4]
				if (address == FLASH_CONF_ADDR_END) {
 803ceee:	e02a      	b.n	803cf46 <FlashConf_FindEntry+0x1f2>
				}
			} else {
				/* Store temp as new valid value */
				memcpy(&flCo.header, &flCo.tempHead,
 803cef0:	4a29      	ldr	r2, [pc, #164]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cef2:	4b29      	ldr	r3, [pc, #164]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cef4:	f502 6485 	add.w	r4, r2, #1064	@ 0x428
 803cef8:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 803cefc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 803cefe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						sizeof(FlashConf_Header_t));

				/* Shift config pointers and find out if some sector is left useless */
				if ((flCo.backupAddr ^ flCo.configAddr)
 803cf02:	4b25      	ldr	r3, [pc, #148]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf04:	685a      	ldr	r2, [r3, #4]
 803cf06:	4b24      	ldr	r3, [pc, #144]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf08:	681b      	ldr	r3, [r3, #0]
 803cf0a:	4053      	eors	r3, r2
 803cf0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 803cf10:	d30e      	bcc.n	803cf30 <FlashConf_FindEntry+0x1dc>
						& ~(FLASH_MEM_BLOCK_SIZE - 1)
						&& (flCo.configAddr - flCo.backupAddr
 803cf12:	4b21      	ldr	r3, [pc, #132]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf14:	681a      	ldr	r2, [r3, #0]
 803cf16:	4b20      	ldr	r3, [pc, #128]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf18:	685b      	ldr	r3, [r3, #4]
 803cf1a:	1ad3      	subs	r3, r2, r3
 803cf1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 803cf20:	d206      	bcs.n	803cf30 <FlashConf_FindEntry+0x1dc>
								< FLASH_MEM_BLOCK_SIZE)) {
					/* We can erase sector of backup */
					ret = FlashConf_EraseBlock(flCo.backupAddr);
 803cf22:	4b1d      	ldr	r3, [pc, #116]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf24:	685b      	ldr	r3, [r3, #4]
 803cf26:	4618      	mov	r0, r3
 803cf28:	f000 f83e 	bl	803cfa8 <FlashConf_EraseBlock>
 803cf2c:	4603      	mov	r3, r0
 803cf2e:	81fb      	strh	r3, [r7, #14]
				}

				flCo.backupAddr = flCo.configAddr;
 803cf30:	4b19      	ldr	r3, [pc, #100]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf32:	681b      	ldr	r3, [r3, #0]
 803cf34:	4a18      	ldr	r2, [pc, #96]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf36:	6053      	str	r3, [r2, #4]
				flCo.configAddr = address;
 803cf38:	4a17      	ldr	r2, [pc, #92]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf3a:	687b      	ldr	r3, [r7, #4]
 803cf3c:	6013      	str	r3, [r2, #0]
				address = flCo.tempHead.addressNext;
 803cf3e:	4b16      	ldr	r3, [pc, #88]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf40:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 803cf44:	607b      	str	r3, [r7, #4]
		while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 803cf46:	4a13      	ldr	r2, [pc, #76]	@ (803cf94 <FlashConf_FindEntry+0x240>)
 803cf48:	4b16      	ldr	r3, [pc, #88]	@ (803cfa4 <FlashConf_FindEntry+0x250>)
 803cf4a:	4413      	add	r3, r2
 803cf4c:	687a      	ldr	r2, [r7, #4]
 803cf4e:	429a      	cmp	r2, r3
 803cf50:	d203      	bcs.n	803cf5a <FlashConf_FindEntry+0x206>
 803cf52:	68bb      	ldr	r3, [r7, #8]
 803cf54:	2b00      	cmp	r3, #0
 803cf56:	f43f af62 	beq.w	803ce1e <FlashConf_FindEntry+0xca>
			}
		}
	}

	/* If invalid address was found and backup entry is in different sector, we can erase corrupted sector */
	if (flCo.invalidAddress != -1
 803cf5a:	4b0f      	ldr	r3, [pc, #60]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf5c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	@ 0x438
 803cf60:	f1b3 3fff 	cmp.w	r3, #4294967295
 803cf64:	d010      	beq.n	803cf88 <FlashConf_FindEntry+0x234>
			&& ((flCo.backupAddr ^ flCo.invalidAddress)
 803cf66:	4b0c      	ldr	r3, [pc, #48]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf68:	685a      	ldr	r2, [r3, #4]
 803cf6a:	4b0b      	ldr	r3, [pc, #44]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf6c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	@ 0x438
 803cf70:	4053      	eors	r3, r2
 803cf72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 803cf76:	d307      	bcc.n	803cf88 <FlashConf_FindEntry+0x234>
					& ~(FLASH_MEM_BLOCK_SIZE - 1)) != 0) {
		/* Erase the corrupted sector */
		ret = FlashConf_EraseBlock(flCo.invalidAddress);
 803cf78:	4b07      	ldr	r3, [pc, #28]	@ (803cf98 <FlashConf_FindEntry+0x244>)
 803cf7a:	f8d3 3438 	ldr.w	r3, [r3, #1080]	@ 0x438
 803cf7e:	4618      	mov	r0, r3
 803cf80:	f000 f812 	bl	803cfa8 <FlashConf_EraseBlock>
 803cf84:	4603      	mov	r3, r0
 803cf86:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 803cf88:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 803cf8c:	4618      	mov	r0, r3
 803cf8e:	3714      	adds	r7, #20
 803cf90:	46bd      	mov	sp, r7
 803cf92:	bd90      	pop	{r4, r7, pc}
 803cf94:	08008000 	.word	0x08008000
 803cf98:	200000fc 	.word	0x200000fc
 803cf9c:	20000514 	.word	0x20000514
 803cfa0:	deadbeef 	.word	0xdeadbeef
 803cfa4:	00004000 	.word	0x00004000

0803cfa8 <FlashConf_EraseBlock>:

Status_t FlashConf_EraseBlock(uint32_t address) {
 803cfa8:	b580      	push	{r7, lr}
 803cfaa:	b084      	sub	sp, #16
 803cfac:	af00      	add	r7, sp, #0
 803cfae:	6078      	str	r0, [r7, #4]
	Status_t ret = STATUS_OK;
 803cfb0:	2300      	movs	r3, #0
 803cfb2:	81fb      	strh	r3, [r7, #14]

	ret = System_FlashErase(address, address + 1);
 803cfb4:	687b      	ldr	r3, [r7, #4]
 803cfb6:	3301      	adds	r3, #1
 803cfb8:	4619      	mov	r1, r3
 803cfba:	6878      	ldr	r0, [r7, #4]
 803cfbc:	f000 fa02 	bl	803d3c4 <System_FlashErase>
 803cfc0:	4603      	mov	r3, r0
 803cfc2:	81fb      	strh	r3, [r7, #14]

	return ret;
 803cfc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 803cfc8:	4618      	mov	r0, r3
 803cfca:	3710      	adds	r7, #16
 803cfcc:	46bd      	mov	sp, r7
 803cfce:	bd80      	pop	{r7, pc}

0803cfd0 <FlashConf_Read>:

Status_t FlashConf_Read(uint32_t address) {
 803cfd0:	b580      	push	{r7, lr}
 803cfd2:	b084      	sub	sp, #16
 803cfd4:	af00      	add	r7, sp, #0
 803cfd6:	6078      	str	r0, [r7, #4]
	Status_t ret = STATUS_OK;
 803cfd8:	2300      	movs	r3, #0
 803cfda:	81fb      	strh	r3, [r7, #14]
	uint32_t lengthToRead;

	/* Read header */
	memcpy((uint8_t*) &flCo.data.header, (uint8_t*) address,
 803cfdc:	687b      	ldr	r3, [r7, #4]
 803cfde:	2210      	movs	r2, #16
 803cfe0:	4619      	mov	r1, r3
 803cfe2:	4818      	ldr	r0, [pc, #96]	@ (803d044 <FlashConf_Read+0x74>)
 803cfe4:	f006 fde6 	bl	8043bb4 <memcpy>
			sizeof(FlashConf_Header_t));

	lengthToRead = flCo.data.header.completeSize - sizeof(FlashConf_Header_t);
 803cfe8:	4b17      	ldr	r3, [pc, #92]	@ (803d048 <FlashConf_Read+0x78>)
 803cfea:	691b      	ldr	r3, [r3, #16]
 803cfec:	3b10      	subs	r3, #16
 803cfee:	60bb      	str	r3, [r7, #8]
	SAT_UP(lengthToRead, FLASH_CONF_SIZE);
 803cff0:	68bb      	ldr	r3, [r7, #8]
 803cff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 803cff6:	bf28      	it	cs
 803cff8:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 803cffc:	60bb      	str	r3, [r7, #8]

	/* Read the rest of configuration data */
	memcpy((uint8_t*) &flCo.data.data,
			(uint8_t*) address + sizeof(FlashConf_Header_t), lengthToRead);
 803cffe:	687b      	ldr	r3, [r7, #4]
 803d000:	3310      	adds	r3, #16
	memcpy((uint8_t*) &flCo.data.data,
 803d002:	68ba      	ldr	r2, [r7, #8]
 803d004:	4619      	mov	r1, r3
 803d006:	4811      	ldr	r0, [pc, #68]	@ (803d04c <FlashConf_Read+0x7c>)
 803d008:	f006 fdd4 	bl	8043bb4 <memcpy>

	/* Consistency check at reserved field*/
	if (flCo.data.header.reserved != FLASH_KEY) {
 803d00c:	4b0e      	ldr	r3, [pc, #56]	@ (803d048 <FlashConf_Read+0x78>)
 803d00e:	695b      	ldr	r3, [r3, #20]
 803d010:	4a0f      	ldr	r2, [pc, #60]	@ (803d050 <FlashConf_Read+0x80>)
 803d012:	4293      	cmp	r3, r2
 803d014:	d001      	beq.n	803d01a <FlashConf_Read+0x4a>
		ret = STATUS_ERROR;
 803d016:	2301      	movs	r3, #1
 803d018:	81fb      	strh	r3, [r7, #14]
	}

	/* Check consistency at the end of stream */
	if (memcmp(
			flCo.data.data + flCo.data.header.completeSize
 803d01a:	4b0b      	ldr	r3, [pc, #44]	@ (803d048 <FlashConf_Read+0x78>)
 803d01c:	691b      	ldr	r3, [r3, #16]
					- sizeof(FlashConf_Header_t) - sizeof(FLASH_KEY),
 803d01e:	3b14      	subs	r3, #20
	if (memcmp(
 803d020:	4a0a      	ldr	r2, [pc, #40]	@ (803d04c <FlashConf_Read+0x7c>)
 803d022:	4413      	add	r3, r2
 803d024:	2204      	movs	r2, #4
 803d026:	490b      	ldr	r1, [pc, #44]	@ (803d054 <FlashConf_Read+0x84>)
 803d028:	4618      	mov	r0, r3
 803d02a:	f006 fd87 	bl	8043b3c <memcmp>
 803d02e:	4603      	mov	r3, r0
 803d030:	2b00      	cmp	r3, #0
 803d032:	d001      	beq.n	803d038 <FlashConf_Read+0x68>
			&FLASH_KEY, sizeof(FLASH_KEY)) != 0) {
		ret = STATUS_ERROR;
 803d034:	2301      	movs	r3, #1
 803d036:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 803d038:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 803d03c:	4618      	mov	r0, r3
 803d03e:	3710      	adds	r7, #16
 803d040:	46bd      	mov	sp, r7
 803d042:	bd80      	pop	{r7, pc}
 803d044:	20000104 	.word	0x20000104
 803d048:	200000fc 	.word	0x200000fc
 803d04c:	20000114 	.word	0x20000114
 803d050:	deadbeef 	.word	0xdeadbeef
 803d054:	08043c28 	.word	0x08043c28

0803d058 <FlashConf_Write>:

Status_t FlashConf_Write(void) {
 803d058:	b580      	push	{r7, lr}
 803d05a:	b084      	sub	sp, #16
 803d05c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803d05e:	2300      	movs	r3, #0
 803d060:	817b      	strh	r3, [r7, #10]
	uint32_t address = flCo.data.header.addressNext; // previous address next become current address
 803d062:	4b44      	ldr	r3, [pc, #272]	@ (803d174 <FlashConf_Write+0x11c>)
 803d064:	689b      	ldr	r3, [r3, #8]
 803d066:	60fb      	str	r3, [r7, #12]
	uint32_t endAddress = (address & ~(FLASH_MEM_BLOCK_SIZE - 1))
 803d068:	68fb      	ldr	r3, [r7, #12]
 803d06a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 803d06e:	f023 0307 	bic.w	r3, r3, #7
 803d072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 803d076:	607b      	str	r3, [r7, #4]
			+ FLASH_MEM_BLOCK_SIZE; // end addess of current sector

	/* Increment the writes counter */
	flCo.data.header.writes += 1;
 803d078:	4b3e      	ldr	r3, [pc, #248]	@ (803d174 <FlashConf_Write+0x11c>)
 803d07a:	68db      	ldr	r3, [r3, #12]
 803d07c:	3301      	adds	r3, #1
 803d07e:	4a3d      	ldr	r2, [pc, #244]	@ (803d174 <FlashConf_Write+0x11c>)
 803d080:	60d3      	str	r3, [r2, #12]

	/* Compute the next address */
	flCo.data.header.addressNext += flCo.data.header.completeSize;
 803d082:	4b3c      	ldr	r3, [pc, #240]	@ (803d174 <FlashConf_Write+0x11c>)
 803d084:	689a      	ldr	r2, [r3, #8]
 803d086:	4b3b      	ldr	r3, [pc, #236]	@ (803d174 <FlashConf_Write+0x11c>)
 803d088:	691b      	ldr	r3, [r3, #16]
 803d08a:	4413      	add	r3, r2
 803d08c:	4a39      	ldr	r2, [pc, #228]	@ (803d174 <FlashConf_Write+0x11c>)
 803d08e:	6093      	str	r3, [r2, #8]
	/* Ceil up to whole pages */
	if (flCo.data.header.addressNext & (FLASH_MEM_PAGE_SIZE - 1)) {
 803d090:	4b38      	ldr	r3, [pc, #224]	@ (803d174 <FlashConf_Write+0x11c>)
 803d092:	689b      	ldr	r3, [r3, #8]
 803d094:	f003 030f 	and.w	r3, r3, #15
 803d098:	2b00      	cmp	r3, #0
 803d09a:	d00a      	beq.n	803d0b2 <FlashConf_Write+0x5a>
		flCo.data.header.addressNext &= ~(FLASH_MEM_PAGE_SIZE - 1);
 803d09c:	4b35      	ldr	r3, [pc, #212]	@ (803d174 <FlashConf_Write+0x11c>)
 803d09e:	689b      	ldr	r3, [r3, #8]
 803d0a0:	f023 030f 	bic.w	r3, r3, #15
 803d0a4:	4a33      	ldr	r2, [pc, #204]	@ (803d174 <FlashConf_Write+0x11c>)
 803d0a6:	6093      	str	r3, [r2, #8]
		flCo.data.header.addressNext += (FLASH_MEM_PAGE_SIZE);
 803d0a8:	4b32      	ldr	r3, [pc, #200]	@ (803d174 <FlashConf_Write+0x11c>)
 803d0aa:	689b      	ldr	r3, [r3, #8]
 803d0ac:	3310      	adds	r3, #16
 803d0ae:	4a31      	ldr	r2, [pc, #196]	@ (803d174 <FlashConf_Write+0x11c>)
 803d0b0:	6093      	str	r3, [r2, #8]
	}

	if (flCo.data.header.addressNext == FLASH_CONF_ADDR_END) {
 803d0b2:	4b30      	ldr	r3, [pc, #192]	@ (803d174 <FlashConf_Write+0x11c>)
 803d0b4:	689a      	ldr	r2, [r3, #8]
 803d0b6:	4930      	ldr	r1, [pc, #192]	@ (803d178 <FlashConf_Write+0x120>)
 803d0b8:	4b30      	ldr	r3, [pc, #192]	@ (803d17c <FlashConf_Write+0x124>)
 803d0ba:	440b      	add	r3, r1
 803d0bc:	429a      	cmp	r2, r3
 803d0be:	d103      	bne.n	803d0c8 <FlashConf_Write+0x70>
		flCo.data.header.addressNext = FLASH_CONF_ADDR_START;
 803d0c0:	4a2d      	ldr	r2, [pc, #180]	@ (803d178 <FlashConf_Write+0x120>)
 803d0c2:	4b2c      	ldr	r3, [pc, #176]	@ (803d174 <FlashConf_Write+0x11c>)
 803d0c4:	609a      	str	r2, [r3, #8]
 803d0c6:	e02e      	b.n	803d126 <FlashConf_Write+0xce>
	} else if (flCo.data.header.addressNext > endAddress) {
 803d0c8:	4b2a      	ldr	r3, [pc, #168]	@ (803d174 <FlashConf_Write+0x11c>)
 803d0ca:	689b      	ldr	r3, [r3, #8]
 803d0cc:	687a      	ldr	r2, [r7, #4]
 803d0ce:	429a      	cmp	r2, r3
 803d0d0:	d229      	bcs.n	803d126 <FlashConf_Write+0xce>
		/* Is this the last sector ? */
		if (endAddress == FLASH_CONF_ADDR_END) {
 803d0d2:	4a29      	ldr	r2, [pc, #164]	@ (803d178 <FlashConf_Write+0x120>)
 803d0d4:	4b29      	ldr	r3, [pc, #164]	@ (803d17c <FlashConf_Write+0x124>)
 803d0d6:	4413      	add	r3, r2
 803d0d8:	687a      	ldr	r2, [r7, #4]
 803d0da:	429a      	cmp	r2, r3
 803d0dc:	d102      	bne.n	803d0e4 <FlashConf_Write+0x8c>
			/* Go to first sector */
			address = FLASH_CONF_ADDR_START;
 803d0de:	4b26      	ldr	r3, [pc, #152]	@ (803d178 <FlashConf_Write+0x120>)
 803d0e0:	60fb      	str	r3, [r7, #12]
 803d0e2:	e003      	b.n	803d0ec <FlashConf_Write+0x94>
		} else {
			/* Go to next sector */
			address += FLASH_MEM_BLOCK_SIZE;
 803d0e4:	68fb      	ldr	r3, [r7, #12]
 803d0e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 803d0ea:	60fb      	str	r3, [r7, #12]
		}

		/* Reset the address pointer to the beginning of next sector */
		address = address & ~(FLASH_MEM_BLOCK_SIZE - 1);
 803d0ec:	68fb      	ldr	r3, [r7, #12]
 803d0ee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 803d0f2:	f023 0307 	bic.w	r3, r3, #7
 803d0f6:	60fb      	str	r3, [r7, #12]
		/* Increment Next address pointer */
		flCo.data.header.addressNext = address + flCo.data.header.completeSize;
 803d0f8:	4b1e      	ldr	r3, [pc, #120]	@ (803d174 <FlashConf_Write+0x11c>)
 803d0fa:	691a      	ldr	r2, [r3, #16]
 803d0fc:	68fb      	ldr	r3, [r7, #12]
 803d0fe:	4413      	add	r3, r2
 803d100:	4a1c      	ldr	r2, [pc, #112]	@ (803d174 <FlashConf_Write+0x11c>)
 803d102:	6093      	str	r3, [r2, #8]
		/* Ceil up to whole pages */
		if (flCo.data.header.addressNext & (FLASH_MEM_PAGE_SIZE - 1)) {
 803d104:	4b1b      	ldr	r3, [pc, #108]	@ (803d174 <FlashConf_Write+0x11c>)
 803d106:	689b      	ldr	r3, [r3, #8]
 803d108:	f003 030f 	and.w	r3, r3, #15
 803d10c:	2b00      	cmp	r3, #0
 803d10e:	d00a      	beq.n	803d126 <FlashConf_Write+0xce>
			flCo.data.header.addressNext &= ~(FLASH_MEM_PAGE_SIZE - 1);
 803d110:	4b18      	ldr	r3, [pc, #96]	@ (803d174 <FlashConf_Write+0x11c>)
 803d112:	689b      	ldr	r3, [r3, #8]
 803d114:	f023 030f 	bic.w	r3, r3, #15
 803d118:	4a16      	ldr	r2, [pc, #88]	@ (803d174 <FlashConf_Write+0x11c>)
 803d11a:	6093      	str	r3, [r2, #8]
			flCo.data.header.addressNext += (FLASH_MEM_PAGE_SIZE);
 803d11c:	4b15      	ldr	r3, [pc, #84]	@ (803d174 <FlashConf_Write+0x11c>)
 803d11e:	689b      	ldr	r3, [r3, #8]
 803d120:	3310      	adds	r3, #16
 803d122:	4a14      	ldr	r2, [pc, #80]	@ (803d174 <FlashConf_Write+0x11c>)
 803d124:	6093      	str	r3, [r2, #8]
		}
	}

	ret = System_FlashProgram(address, (uint8_t*) &flCo.data,
			((flCo.data.header.completeSize + 3) >> 2) * 4);
 803d126:	4b13      	ldr	r3, [pc, #76]	@ (803d174 <FlashConf_Write+0x11c>)
 803d128:	691b      	ldr	r3, [r3, #16]
 803d12a:	3303      	adds	r3, #3
 803d12c:	089b      	lsrs	r3, r3, #2
	ret = System_FlashProgram(address, (uint8_t*) &flCo.data,
 803d12e:	009b      	lsls	r3, r3, #2
 803d130:	461a      	mov	r2, r3
 803d132:	4913      	ldr	r1, [pc, #76]	@ (803d180 <FlashConf_Write+0x128>)
 803d134:	68f8      	ldr	r0, [r7, #12]
 803d136:	f000 f97f 	bl	803d438 <System_FlashProgram>
 803d13a:	4603      	mov	r3, r0
 803d13c:	817b      	strh	r3, [r7, #10]

	/* Shift config pointers and find out if some sector is left useless */
	if ((flCo.backupAddr ^ flCo.configAddr) & ~(FLASH_MEM_BLOCK_SIZE - 1)) {
 803d13e:	4b0d      	ldr	r3, [pc, #52]	@ (803d174 <FlashConf_Write+0x11c>)
 803d140:	685a      	ldr	r2, [r3, #4]
 803d142:	4b0c      	ldr	r3, [pc, #48]	@ (803d174 <FlashConf_Write+0x11c>)
 803d144:	681b      	ldr	r3, [r3, #0]
 803d146:	4053      	eors	r3, r2
 803d148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 803d14c:	d304      	bcc.n	803d158 <FlashConf_Write+0x100>
		/* We can erase sector of backup */
		FlashConf_EraseBlock(flCo.backupAddr);
 803d14e:	4b09      	ldr	r3, [pc, #36]	@ (803d174 <FlashConf_Write+0x11c>)
 803d150:	685b      	ldr	r3, [r3, #4]
 803d152:	4618      	mov	r0, r3
 803d154:	f7ff ff28 	bl	803cfa8 <FlashConf_EraseBlock>
	}

	flCo.backupAddr = flCo.configAddr;
 803d158:	4b06      	ldr	r3, [pc, #24]	@ (803d174 <FlashConf_Write+0x11c>)
 803d15a:	681b      	ldr	r3, [r3, #0]
 803d15c:	4a05      	ldr	r2, [pc, #20]	@ (803d174 <FlashConf_Write+0x11c>)
 803d15e:	6053      	str	r3, [r2, #4]
	flCo.configAddr = address;
 803d160:	4a04      	ldr	r2, [pc, #16]	@ (803d174 <FlashConf_Write+0x11c>)
 803d162:	68fb      	ldr	r3, [r7, #12]
 803d164:	6013      	str	r3, [r2, #0]

	return ret;
 803d166:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 803d16a:	4618      	mov	r0, r3
 803d16c:	3710      	adds	r7, #16
 803d16e:	46bd      	mov	sp, r7
 803d170:	bd80      	pop	{r7, pc}
 803d172:	bf00      	nop
 803d174:	200000fc 	.word	0x200000fc
 803d178:	08008000 	.word	0x08008000
 803d17c:	00004000 	.word	0x00004000
 803d180:	20000104 	.word	0x20000104

0803d184 <RegMap_RestoreFactoryValues>:
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/


Status_t RegMap_RestoreFactoryValues(void)
{
 803d184:	b580      	push	{r7, lr}
 803d186:	b082      	sub	sp, #8
 803d188:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 803d18a:	2300      	movs	r3, #0
 803d18c:	80fb      	strh	r3, [r7, #6]
  //uint8_t *id = (uint8_t *)0x1FFF7A10;

  /* Copy firmware info */
  memcpy(&conf.firm, CONF_C_APPLICATION_OFFSET + (uint32_t)CONF_FW_INFO_OFFSET, sizeof(conf.firm));
 803d18e:	4a1b      	ldr	r2, [pc, #108]	@ (803d1fc <RegMap_RestoreFactoryValues+0x78>)
 803d190:	4b1b      	ldr	r3, [pc, #108]	@ (803d200 <RegMap_RestoreFactoryValues+0x7c>)
 803d192:	4413      	add	r3, r2
 803d194:	2210      	movs	r2, #16
 803d196:	4619      	mov	r1, r3
 803d198:	481a      	ldr	r0, [pc, #104]	@ (803d204 <RegMap_RestoreFactoryValues+0x80>)
 803d19a:	f006 fd0b 	bl	8043bb4 <memcpy>

  /* Copy Hardware info */
  memcpy(&conf.fact, CONF_C_BOOTLOADER_OFFSET + (uint32_t)CONF_FW_INFO_OFFSET, sizeof(conf.fact));
 803d19e:	4a17      	ldr	r2, [pc, #92]	@ (803d1fc <RegMap_RestoreFactoryValues+0x78>)
 803d1a0:	4b19      	ldr	r3, [pc, #100]	@ (803d208 <RegMap_RestoreFactoryValues+0x84>)
 803d1a2:	4413      	add	r3, r2
 803d1a4:	2210      	movs	r2, #16
 803d1a6:	4619      	mov	r1, r3
 803d1a8:	4818      	ldr	r0, [pc, #96]	@ (803d20c <RegMap_RestoreFactoryValues+0x88>)
 803d1aa:	f006 fd03 	bl	8043bb4 <memcpy>

  CONF_INT(CONF_SYS_UPTIME)              = 0;
 803d1ae:	4b18      	ldr	r3, [pc, #96]	@ (803d210 <RegMap_RestoreFactoryValues+0x8c>)
 803d1b0:	2200      	movs	r2, #0
 803d1b2:	601a      	str	r2, [r3, #0]
  CONF_INT(CONF_SYS_REGMAP_VERSION)      = 1001;
 803d1b4:	4b16      	ldr	r3, [pc, #88]	@ (803d210 <RegMap_RestoreFactoryValues+0x8c>)
 803d1b6:	3304      	adds	r3, #4
 803d1b8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 803d1bc:	601a      	str	r2, [r3, #0]
  CONF_BYTE(CONF_COM_MB_BAUD_RATE)       = 1;
 803d1be:	4b15      	ldr	r3, [pc, #84]	@ (803d214 <RegMap_RestoreFactoryValues+0x90>)
 803d1c0:	2201      	movs	r2, #1
 803d1c2:	701a      	strb	r2, [r3, #0]
  CONF_BYTE(CONF_COM_MB_PARITY)          = 1;
 803d1c4:	4b13      	ldr	r3, [pc, #76]	@ (803d214 <RegMap_RestoreFactoryValues+0x90>)
 803d1c6:	3301      	adds	r3, #1
 803d1c8:	2201      	movs	r2, #1
 803d1ca:	701a      	strb	r2, [r3, #0]
  CONF_BYTE(CONF_COM_MB_STOP_BITS)       = 0;
 803d1cc:	4b11      	ldr	r3, [pc, #68]	@ (803d214 <RegMap_RestoreFactoryValues+0x90>)
 803d1ce:	3302      	adds	r3, #2
 803d1d0:	2200      	movs	r2, #0
 803d1d2:	701a      	strb	r2, [r3, #0]
  CONF_SHORT(CONF_COM_MB_ADDRESS)        = 32;
 803d1d4:	4b0f      	ldr	r3, [pc, #60]	@ (803d214 <RegMap_RestoreFactoryValues+0x90>)
 803d1d6:	3304      	adds	r3, #4
 803d1d8:	2220      	movs	r2, #32
 803d1da:	801a      	strh	r2, [r3, #0]
  CONF_SHORT(CONF_COM_MB_TIMEOUT)        = 10;
 803d1dc:	4b0d      	ldr	r3, [pc, #52]	@ (803d214 <RegMap_RestoreFactoryValues+0x90>)
 803d1de:	3308      	adds	r3, #8
 803d1e0:	220a      	movs	r2, #10
 803d1e2:	801a      	strh	r2, [r3, #0]
  CONF_SHORT(CONF_STPMEAS_NTC_BETA)      = 3977;
 803d1e4:	4b0c      	ldr	r3, [pc, #48]	@ (803d218 <RegMap_RestoreFactoryValues+0x94>)
 803d1e6:	3301      	adds	r3, #1
 803d1e8:	f640 7289 	movw	r2, #3977	@ 0xf89
 803d1ec:	801a      	strh	r2, [r3, #0]


  return ret;
 803d1ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803d1f2:	4618      	mov	r0, r3
 803d1f4:	3708      	adds	r7, #8
 803d1f6:	46bd      	mov	sp, r7
 803d1f8:	bd80      	pop	{r7, pc}
 803d1fa:	bf00      	nop
 803d1fc:	00000200 	.word	0x00000200
 803d200:	0803c000 	.word	0x0803c000
 803d204:	20000560 	.word	0x20000560
 803d208:	08000000 	.word	0x08000000
 803d20c:	20000550 	.word	0x20000550
 803d210:	20000538 	.word	0x20000538
 803d214:	20000570 	.word	0x20000570
 803d218:	20000580 	.word	0x20000580

0803d21c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 803d21c:	b480      	push	{r7}
 803d21e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 803d220:	f3bf 8f4f 	dsb	sy
}
 803d224:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 803d226:	4b06      	ldr	r3, [pc, #24]	@ (803d240 <__NVIC_SystemReset+0x24>)
 803d228:	68db      	ldr	r3, [r3, #12]
 803d22a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 803d22e:	4904      	ldr	r1, [pc, #16]	@ (803d240 <__NVIC_SystemReset+0x24>)
 803d230:	4b04      	ldr	r3, [pc, #16]	@ (803d244 <__NVIC_SystemReset+0x28>)
 803d232:	4313      	orrs	r3, r2
 803d234:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 803d236:	f3bf 8f4f 	dsb	sy
}
 803d23a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 803d23c:	bf00      	nop
 803d23e:	e7fd      	b.n	803d23c <__NVIC_SystemReset+0x20>
 803d240:	e000ed00 	.word	0xe000ed00
 803d244:	05fa0004 	.word	0x05fa0004

0803d248 <System_CrcInit>:
//
//  /* Freeze IWDG in stop */
//  __HAL_RCC_DBGMCU_CLK_ENABLE();
//  __HAL_DBGMCU_FREEZE_IWDG();
//}
void System_CrcInit(void) {
 803d248:	b580      	push	{r7, lr}
 803d24a:	b082      	sub	sp, #8
 803d24c:	af00      	add	r7, sp, #0
	/* Initialize CRC unit */
	hcrc.Instance = CRC;
 803d24e:	4b12      	ldr	r3, [pc, #72]	@ (803d298 <System_CrcInit+0x50>)
 803d250:	4a12      	ldr	r2, [pc, #72]	@ (803d29c <System_CrcInit+0x54>)
 803d252:	601a      	str	r2, [r3, #0]

	__HAL_RCC_CRC_CLK_ENABLE();
 803d254:	2300      	movs	r3, #0
 803d256:	607b      	str	r3, [r7, #4]
 803d258:	4b11      	ldr	r3, [pc, #68]	@ (803d2a0 <System_CrcInit+0x58>)
 803d25a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803d25c:	4a10      	ldr	r2, [pc, #64]	@ (803d2a0 <System_CrcInit+0x58>)
 803d25e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 803d262:	6313      	str	r3, [r2, #48]	@ 0x30
 803d264:	4b0e      	ldr	r3, [pc, #56]	@ (803d2a0 <System_CrcInit+0x58>)
 803d266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803d268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 803d26c:	607b      	str	r3, [r7, #4]
 803d26e:	687b      	ldr	r3, [r7, #4]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 803d270:	4809      	ldr	r0, [pc, #36]	@ (803d298 <System_CrcInit+0x50>)
 803d272:	f002 fd3c 	bl	803fcee <HAL_CRC_Init>
 803d276:	4603      	mov	r3, r0
 803d278:	2b00      	cmp	r3, #0
 803d27a:	d001      	beq.n	803d280 <System_CrcInit+0x38>
		Error_Handler();
 803d27c:	f001 fdd6 	bl	803ee2c <Error_Handler>
	}

	__HAL_CRC_DR_RESET(&hcrc);
 803d280:	4b05      	ldr	r3, [pc, #20]	@ (803d298 <System_CrcInit+0x50>)
 803d282:	681b      	ldr	r3, [r3, #0]
 803d284:	689a      	ldr	r2, [r3, #8]
 803d286:	4b04      	ldr	r3, [pc, #16]	@ (803d298 <System_CrcInit+0x50>)
 803d288:	681b      	ldr	r3, [r3, #0]
 803d28a:	f042 0201 	orr.w	r2, r2, #1
 803d28e:	609a      	str	r2, [r3, #8]
}
 803d290:	bf00      	nop
 803d292:	3708      	adds	r7, #8
 803d294:	46bd      	mov	sp, r7
 803d296:	bd80      	pop	{r7, pc}
 803d298:	200005d4 	.word	0x200005d4
 803d29c:	40023000 	.word	0x40023000
 803d2a0:	40023800 	.word	0x40023800

0803d2a4 <System_InitWdg>:

uint32_t System_CrcAccumulate(uint32_t *data, uint32_t length) {
	return HAL_CRC_Accumulate(&hcrc, data, length);
}

Status_t System_InitWdg(void) {
 803d2a4:	b580      	push	{r7, lr}
 803d2a6:	b082      	sub	sp, #8
 803d2a8:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803d2aa:	2300      	movs	r3, #0
 803d2ac:	80fb      	strh	r3, [r7, #6]

	/* 32000 Hz / 32 = 1000 counts per second
	 * 3000 = 3 s */
	hiwdg.Instance = IWDG;
 803d2ae:	4b0d      	ldr	r3, [pc, #52]	@ (803d2e4 <System_InitWdg+0x40>)
 803d2b0:	4a0d      	ldr	r2, [pc, #52]	@ (803d2e8 <System_InitWdg+0x44>)
 803d2b2:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 803d2b4:	4b0b      	ldr	r3, [pc, #44]	@ (803d2e4 <System_InitWdg+0x40>)
 803d2b6:	2203      	movs	r2, #3
 803d2b8:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 3000;
 803d2ba:	4b0a      	ldr	r3, [pc, #40]	@ (803d2e4 <System_InitWdg+0x40>)
 803d2bc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 803d2c0:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 803d2c2:	4808      	ldr	r0, [pc, #32]	@ (803d2e4 <System_InitWdg+0x40>)
 803d2c4:	f003 fec0 	bl	8041048 <HAL_IWDG_Init>
 803d2c8:	4603      	mov	r3, r0
 803d2ca:	2b00      	cmp	r3, #0
 803d2cc:	d001      	beq.n	803d2d2 <System_InitWdg+0x2e>
	{
		Error_Handler();
 803d2ce:	f001 fdad 	bl	803ee2c <Error_Handler>
	}
	System_ReloadWdg();
 803d2d2:	f000 f80b 	bl	803d2ec <System_ReloadWdg>

	return ret;
 803d2d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803d2da:	4618      	mov	r0, r3
 803d2dc:	3708      	adds	r7, #8
 803d2de:	46bd      	mov	sp, r7
 803d2e0:	bd80      	pop	{r7, pc}
 803d2e2:	bf00      	nop
 803d2e4:	200005dc 	.word	0x200005dc
 803d2e8:	40003000 	.word	0x40003000

0803d2ec <System_ReloadWdg>:

Status_t System_ReloadWdg(void)
{
 803d2ec:	b580      	push	{r7, lr}
 803d2ee:	b082      	sub	sp, #8
 803d2f0:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803d2f2:	2300      	movs	r3, #0
 803d2f4:	80fb      	strh	r3, [r7, #6]

	HAL_IWDG_Refresh(&hiwdg);
 803d2f6:	4804      	ldr	r0, [pc, #16]	@ (803d308 <System_ReloadWdg+0x1c>)
 803d2f8:	f003 feea 	bl	80410d0 <HAL_IWDG_Refresh>

	return ret;
 803d2fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803d300:	4618      	mov	r0, r3
 803d302:	3708      	adds	r7, #8
 803d304:	46bd      	mov	sp, r7
 803d306:	bd80      	pop	{r7, pc}
 803d308:	200005dc 	.word	0x200005dc

0803d30c <System_Delay>:

uint8_t System_Delay(uint32_t milliseconds) {
 803d30c:	b580      	push	{r7, lr}
 803d30e:	b082      	sub	sp, #8
 803d310:	af00      	add	r7, sp, #0
 803d312:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 803d314:	6878      	ldr	r0, [r7, #4]
 803d316:	f002 f8e5 	bl	803f4e4 <HAL_Delay>
	return 0;
 803d31a:	2300      	movs	r3, #0
}
 803d31c:	4618      	mov	r0, r3
 803d31e:	3708      	adds	r7, #8
 803d320:	46bd      	mov	sp, r7
 803d322:	bd80      	pop	{r7, pc}

0803d324 <System_Reset>:

void System_Reset(void) {
 803d324:	b580      	push	{r7, lr}
 803d326:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 803d328:	f7ff ff78 	bl	803d21c <__NVIC_SystemReset>

0803d32c <GetSector>:
}

uint32_t GetSector(uint32_t Address) {
 803d32c:	b480      	push	{r7}
 803d32e:	b083      	sub	sp, #12
 803d330:	af00      	add	r7, sp, #0
 803d332:	6078      	str	r0, [r7, #4]
	if (Address < 0x08004000)
 803d334:	687b      	ldr	r3, [r7, #4]
 803d336:	4a1b      	ldr	r2, [pc, #108]	@ (803d3a4 <GetSector+0x78>)
 803d338:	4293      	cmp	r3, r2
 803d33a:	d201      	bcs.n	803d340 <GetSector+0x14>
		return FLASH_SECTOR_0;
 803d33c:	2300      	movs	r3, #0
 803d33e:	e02b      	b.n	803d398 <GetSector+0x6c>
	else if (Address < 0x08008000)
 803d340:	687b      	ldr	r3, [r7, #4]
 803d342:	4a19      	ldr	r2, [pc, #100]	@ (803d3a8 <GetSector+0x7c>)
 803d344:	4293      	cmp	r3, r2
 803d346:	d201      	bcs.n	803d34c <GetSector+0x20>
		return FLASH_SECTOR_1;
 803d348:	2301      	movs	r3, #1
 803d34a:	e025      	b.n	803d398 <GetSector+0x6c>
	else if (Address < 0x0800C000)
 803d34c:	687b      	ldr	r3, [r7, #4]
 803d34e:	4a17      	ldr	r2, [pc, #92]	@ (803d3ac <GetSector+0x80>)
 803d350:	4293      	cmp	r3, r2
 803d352:	d201      	bcs.n	803d358 <GetSector+0x2c>
		return FLASH_SECTOR_2;
 803d354:	2302      	movs	r3, #2
 803d356:	e01f      	b.n	803d398 <GetSector+0x6c>
	else if (Address < 0x08010000)
 803d358:	687b      	ldr	r3, [r7, #4]
 803d35a:	4a15      	ldr	r2, [pc, #84]	@ (803d3b0 <GetSector+0x84>)
 803d35c:	4293      	cmp	r3, r2
 803d35e:	d801      	bhi.n	803d364 <GetSector+0x38>
		return FLASH_SECTOR_3;
 803d360:	2303      	movs	r3, #3
 803d362:	e019      	b.n	803d398 <GetSector+0x6c>
	else if (Address < 0x08020000)
 803d364:	687b      	ldr	r3, [r7, #4]
 803d366:	4a13      	ldr	r2, [pc, #76]	@ (803d3b4 <GetSector+0x88>)
 803d368:	4293      	cmp	r3, r2
 803d36a:	d801      	bhi.n	803d370 <GetSector+0x44>
		return FLASH_SECTOR_4;
 803d36c:	2304      	movs	r3, #4
 803d36e:	e013      	b.n	803d398 <GetSector+0x6c>
	else if (Address < 0x08040000)
 803d370:	687b      	ldr	r3, [r7, #4]
 803d372:	4a11      	ldr	r2, [pc, #68]	@ (803d3b8 <GetSector+0x8c>)
 803d374:	4293      	cmp	r3, r2
 803d376:	d801      	bhi.n	803d37c <GetSector+0x50>
		return FLASH_SECTOR_5;
 803d378:	2305      	movs	r3, #5
 803d37a:	e00d      	b.n	803d398 <GetSector+0x6c>
	else if (Address < 0x08060000)
 803d37c:	687b      	ldr	r3, [r7, #4]
 803d37e:	4a0f      	ldr	r2, [pc, #60]	@ (803d3bc <GetSector+0x90>)
 803d380:	4293      	cmp	r3, r2
 803d382:	d801      	bhi.n	803d388 <GetSector+0x5c>
		return FLASH_SECTOR_6;
 803d384:	2306      	movs	r3, #6
 803d386:	e007      	b.n	803d398 <GetSector+0x6c>
	else if (Address < 0x08080000)
 803d388:	687b      	ldr	r3, [r7, #4]
 803d38a:	4a0d      	ldr	r2, [pc, #52]	@ (803d3c0 <GetSector+0x94>)
 803d38c:	4293      	cmp	r3, r2
 803d38e:	d801      	bhi.n	803d394 <GetSector+0x68>
		return FLASH_SECTOR_7;
 803d390:	2307      	movs	r3, #7
 803d392:	e001      	b.n	803d398 <GetSector+0x6c>
	else
		return UINT32_MAX;
 803d394:	f04f 33ff 	mov.w	r3, #4294967295
}
 803d398:	4618      	mov	r0, r3
 803d39a:	370c      	adds	r7, #12
 803d39c:	46bd      	mov	sp, r7
 803d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d3a2:	4770      	bx	lr
 803d3a4:	08004000 	.word	0x08004000
 803d3a8:	08008000 	.word	0x08008000
 803d3ac:	0800c000 	.word	0x0800c000
 803d3b0:	0800ffff 	.word	0x0800ffff
 803d3b4:	0801ffff 	.word	0x0801ffff
 803d3b8:	0803ffff 	.word	0x0803ffff
 803d3bc:	0805ffff 	.word	0x0805ffff
 803d3c0:	0807ffff 	.word	0x0807ffff

0803d3c4 <System_FlashErase>:

Status_t System_FlashErase(uint32_t startAddress, uint32_t endAddress)
{
 803d3c4:	b580      	push	{r7, lr}
 803d3c6:	b08c      	sub	sp, #48	@ 0x30
 803d3c8:	af00      	add	r7, sp, #0
 803d3ca:	6078      	str	r0, [r7, #4]
 803d3cc:	6039      	str	r1, [r7, #0]
	Status_t ret = STATUS_OK;
 803d3ce:	2300      	movs	r3, #0
 803d3d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	FLASH_EraseInitTypeDef erase;
	uint32_t pageError;
	uint32_t startSector, endSector;

	/* Unlock Flash memory */
	ret = HAL_FLASH_Unlock();
 803d3d2:	f003 f877 	bl	80404c4 <HAL_FLASH_Unlock>
 803d3d6:	4603      	mov	r3, r0
 803d3d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Erase the given flash pages */
	startSector = GetSector(startAddress);
 803d3da:	6878      	ldr	r0, [r7, #4]
 803d3dc:	f7ff ffa6 	bl	803d32c <GetSector>
 803d3e0:	62b8      	str	r0, [r7, #40]	@ 0x28
	endSector = GetSector(endAddress);
 803d3e2:	6838      	ldr	r0, [r7, #0]
 803d3e4:	f7ff ffa2 	bl	803d32c <GetSector>
 803d3e8:	6278      	str	r0, [r7, #36]	@ 0x24
	if (startSector >= UINT32_MAX || endSector >= UINT32_MAX)
 803d3ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803d3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 803d3f0:	d003      	beq.n	803d3fa <System_FlashErase+0x36>
 803d3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 803d3f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 803d3f8:	d103      	bne.n	803d402 <System_FlashErase+0x3e>
	{
		HAL_FLASH_Lock();
 803d3fa:	f003 f885 	bl	8040508 <HAL_FLASH_Lock>
		return HAL_ERROR;
 803d3fe:	2301      	movs	r3, #1
 803d400:	e016      	b.n	803d430 <System_FlashErase+0x6c>
	}

	// Nastavení struktury pro vymazání
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;  // Vymazání sektorů
 803d402:	2300      	movs	r3, #0
 803d404:	613b      	str	r3, [r7, #16]
	erase.Sector = startSector;                 // Nastavení počátečního sektoru
 803d406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803d408:	61bb      	str	r3, [r7, #24]
	erase.NbSectors = (endSector - startSector) + 1; // Počet sektorů k vymazání
 803d40a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 803d40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 803d40e:	1ad3      	subs	r3, r2, r3
 803d410:	3301      	adds	r3, #1
 803d412:	61fb      	str	r3, [r7, #28]

	// Vymazání Flash paměti
	ret = HAL_FLASHEx_Erase(&erase, &pageError);
 803d414:	f107 020c 	add.w	r2, r7, #12
 803d418:	f107 0310 	add.w	r3, r7, #16
 803d41c:	4611      	mov	r1, r2
 803d41e:	4618      	mov	r0, r3
 803d420:	f003 f9c2 	bl	80407a8 <HAL_FLASHEx_Erase>
 803d424:	4603      	mov	r3, r0
 803d426:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	// Lock Flash memory po operaci
	HAL_FLASH_Lock();
 803d428:	f003 f86e 	bl	8040508 <HAL_FLASH_Lock>

	return ret;
 803d42c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
}
 803d430:	4618      	mov	r0, r3
 803d432:	3730      	adds	r7, #48	@ 0x30
 803d434:	46bd      	mov	sp, r7
 803d436:	bd80      	pop	{r7, pc}

0803d438 <System_FlashProgram>:

Status_t System_FlashProgram(uint32_t addressOffset, uint8_t *data,
		uint32_t length) {
 803d438:	b5b0      	push	{r4, r5, r7, lr}
 803d43a:	b088      	sub	sp, #32
 803d43c:	af00      	add	r7, sp, #0
 803d43e:	60f8      	str	r0, [r7, #12]
 803d440:	60b9      	str	r1, [r7, #8]
 803d442:	607a      	str	r2, [r7, #4]
	Status_t ret = STATUS_OK;
 803d444:	2300      	movs	r3, #0
 803d446:	83fb      	strh	r3, [r7, #30]
	uint32_t bytesWritten = 0;
 803d448:	2300      	movs	r3, #0
 803d44a:	61bb      	str	r3, [r7, #24]
	uint32_t value;

	/* Unlock Flash memory */
	ret = HAL_FLASH_Unlock();
 803d44c:	f003 f83a 	bl	80404c4 <HAL_FLASH_Unlock>
 803d450:	4603      	mov	r3, r0
 803d452:	83fb      	strh	r3, [r7, #30]

	/* Address and data length must be multiple of 4 */
	if (((uint32_t) addressOffset % 4) || (length % 4)) {
 803d454:	68fb      	ldr	r3, [r7, #12]
 803d456:	f003 0303 	and.w	r3, r3, #3
 803d45a:	2b00      	cmp	r3, #0
 803d45c:	d104      	bne.n	803d468 <System_FlashProgram+0x30>
 803d45e:	687b      	ldr	r3, [r7, #4]
 803d460:	f003 0303 	and.w	r3, r3, #3
 803d464:	2b00      	cmp	r3, #0
 803d466:	d02a      	beq.n	803d4be <System_FlashProgram+0x86>
		ret = STATUS_ERROR;
 803d468:	2301      	movs	r3, #1
 803d46a:	83fb      	strh	r3, [r7, #30]
	}

	while (ret == STATUS_OK && bytesWritten < length) {
 803d46c:	e027      	b.n	803d4be <System_FlashProgram+0x86>
		/* Write a single word */
		value = data[0] + ((uint32_t) data[1] << 8) + ((uint32_t) data[2] << 16)
 803d46e:	68bb      	ldr	r3, [r7, #8]
 803d470:	781b      	ldrb	r3, [r3, #0]
 803d472:	461a      	mov	r2, r3
 803d474:	68bb      	ldr	r3, [r7, #8]
 803d476:	3301      	adds	r3, #1
 803d478:	781b      	ldrb	r3, [r3, #0]
 803d47a:	021b      	lsls	r3, r3, #8
 803d47c:	441a      	add	r2, r3
 803d47e:	68bb      	ldr	r3, [r7, #8]
 803d480:	3302      	adds	r3, #2
 803d482:	781b      	ldrb	r3, [r3, #0]
 803d484:	041b      	lsls	r3, r3, #16
 803d486:	441a      	add	r2, r3
				+ ((uint32_t) data[3] << 24);
 803d488:	68bb      	ldr	r3, [r7, #8]
 803d48a:	3303      	adds	r3, #3
 803d48c:	781b      	ldrb	r3, [r3, #0]
 803d48e:	061b      	lsls	r3, r3, #24
		value = data[0] + ((uint32_t) data[1] << 8) + ((uint32_t) data[2] << 16)
 803d490:	4413      	add	r3, r2
 803d492:	617b      	str	r3, [r7, #20]
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 803d494:	697b      	ldr	r3, [r7, #20]
 803d496:	2200      	movs	r2, #0
 803d498:	461c      	mov	r4, r3
 803d49a:	4615      	mov	r5, r2
 803d49c:	4622      	mov	r2, r4
 803d49e:	462b      	mov	r3, r5
 803d4a0:	68f9      	ldr	r1, [r7, #12]
 803d4a2:	2002      	movs	r0, #2
 803d4a4:	f002 ffbc 	bl	8040420 <HAL_FLASH_Program>
 803d4a8:	4603      	mov	r3, r0
 803d4aa:	83fb      	strh	r3, [r7, #30]
				(uint32_t) addressOffset, value);
		bytesWritten += 4;
 803d4ac:	69bb      	ldr	r3, [r7, #24]
 803d4ae:	3304      	adds	r3, #4
 803d4b0:	61bb      	str	r3, [r7, #24]
		addressOffset += 4;
 803d4b2:	68fb      	ldr	r3, [r7, #12]
 803d4b4:	3304      	adds	r3, #4
 803d4b6:	60fb      	str	r3, [r7, #12]
		data += 4;
 803d4b8:	68bb      	ldr	r3, [r7, #8]
 803d4ba:	3304      	adds	r3, #4
 803d4bc:	60bb      	str	r3, [r7, #8]
	while (ret == STATUS_OK && bytesWritten < length) {
 803d4be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 803d4c2:	2b00      	cmp	r3, #0
 803d4c4:	d103      	bne.n	803d4ce <System_FlashProgram+0x96>
 803d4c6:	69ba      	ldr	r2, [r7, #24]
 803d4c8:	687b      	ldr	r3, [r7, #4]
 803d4ca:	429a      	cmp	r2, r3
 803d4cc:	d3cf      	bcc.n	803d46e <System_FlashProgram+0x36>
	}

	/* Lock Flash memory */
	HAL_FLASH_Lock();
 803d4ce:	f003 f81b 	bl	8040508 <HAL_FLASH_Lock>

	return ret;
 803d4d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 803d4d6:	4618      	mov	r0, r3
 803d4d8:	3720      	adds	r7, #32
 803d4da:	46bd      	mov	sp, r7
 803d4dc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0803d4e0 <System_RemapApplicationVector>:
	}

	return ret;
}

void System_RemapApplicationVector(void) {
 803d4e0:	b480      	push	{r7}
 803d4e2:	b085      	sub	sp, #20
 803d4e4:	af00      	add	r7, sp, #0
	volatile uint32_t *VectorTable = (volatile uint32_t*) 0x20000000;
 803d4e6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 803d4ea:	60bb      	str	r3, [r7, #8]

	/* Copy reset vector from flash into RAM */
	for (int i = 0; i < 48; i++) {
 803d4ec:	2300      	movs	r3, #0
 803d4ee:	60fb      	str	r3, [r7, #12]
 803d4f0:	e00e      	b.n	803d510 <System_RemapApplicationVector+0x30>
		VectorTable[i] =
				*(volatile uint32_t*) ((uint32_t) CONF_C_APPLICATION_OFFSET
						+ (i << 2));
 803d4f2:	68fb      	ldr	r3, [r7, #12]
 803d4f4:	009b      	lsls	r3, r3, #2
 803d4f6:	461a      	mov	r2, r3
				*(volatile uint32_t*) ((uint32_t) CONF_C_APPLICATION_OFFSET
 803d4f8:	4b3c      	ldr	r3, [pc, #240]	@ (803d5ec <System_RemapApplicationVector+0x10c>)
						+ (i << 2));
 803d4fa:	4413      	add	r3, r2
				*(volatile uint32_t*) ((uint32_t) CONF_C_APPLICATION_OFFSET
 803d4fc:	4619      	mov	r1, r3
		VectorTable[i] =
 803d4fe:	68fb      	ldr	r3, [r7, #12]
 803d500:	009b      	lsls	r3, r3, #2
 803d502:	68ba      	ldr	r2, [r7, #8]
 803d504:	4413      	add	r3, r2
				*(volatile uint32_t*) ((uint32_t) CONF_C_APPLICATION_OFFSET
 803d506:	680a      	ldr	r2, [r1, #0]
		VectorTable[i] =
 803d508:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 48; i++) {
 803d50a:	68fb      	ldr	r3, [r7, #12]
 803d50c:	3301      	adds	r3, #1
 803d50e:	60fb      	str	r3, [r7, #12]
 803d510:	68fb      	ldr	r3, [r7, #12]
 803d512:	2b2f      	cmp	r3, #47	@ 0x2f
 803d514:	dded      	ble.n	803d4f2 <System_RemapApplicationVector+0x12>
	}

	/* Remap vector from flash into RAM */
	//__HAL_RCC_AHB_FORCE_RESET();
	__HAL_RCC_GPIOA_FORCE_RESET();
 803d516:	4b36      	ldr	r3, [pc, #216]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d518:	691b      	ldr	r3, [r3, #16]
 803d51a:	4a35      	ldr	r2, [pc, #212]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d51c:	f043 0301 	orr.w	r3, r3, #1
 803d520:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOB_FORCE_RESET();
 803d522:	4b33      	ldr	r3, [pc, #204]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d524:	691b      	ldr	r3, [r3, #16]
 803d526:	4a32      	ldr	r2, [pc, #200]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d528:	f043 0302 	orr.w	r3, r3, #2
 803d52c:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOC_FORCE_RESET();
 803d52e:	4b30      	ldr	r3, [pc, #192]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d530:	691b      	ldr	r3, [r3, #16]
 803d532:	4a2f      	ldr	r2, [pc, #188]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d534:	f043 0304 	orr.w	r3, r3, #4
 803d538:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOH_FORCE_RESET();
 803d53a:	4b2d      	ldr	r3, [pc, #180]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d53c:	691b      	ldr	r3, [r3, #16]
 803d53e:	4a2c      	ldr	r2, [pc, #176]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803d544:	6113      	str	r3, [r2, #16]
	__HAL_RCC_DMA1_FORCE_RESET();
 803d546:	4b2a      	ldr	r3, [pc, #168]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d548:	691b      	ldr	r3, [r3, #16]
 803d54a:	4a29      	ldr	r2, [pc, #164]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d54c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 803d550:	6113      	str	r3, [r2, #16]
	__HAL_RCC_DMA2_FORCE_RESET();
 803d552:	4b27      	ldr	r3, [pc, #156]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d554:	691b      	ldr	r3, [r3, #16]
 803d556:	4a26      	ldr	r2, [pc, #152]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d558:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 803d55c:	6113      	str	r3, [r2, #16]

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 803d55e:	2300      	movs	r3, #0
 803d560:	607b      	str	r3, [r7, #4]
 803d562:	4b23      	ldr	r3, [pc, #140]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803d566:	4a22      	ldr	r2, [pc, #136]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 803d56c:	6453      	str	r3, [r2, #68]	@ 0x44
 803d56e:	4b20      	ldr	r3, [pc, #128]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803d572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 803d576:	607b      	str	r3, [r7, #4]
 803d578:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_AHB_RELEASE_RESET();
	__HAL_RCC_AHB1_RELEASE_RESET();
 803d57a:	4b1d      	ldr	r3, [pc, #116]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d57c:	2200      	movs	r2, #0
 803d57e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_RELEASE_RESET();
 803d580:	4b1b      	ldr	r3, [pc, #108]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d582:	691b      	ldr	r3, [r3, #16]
 803d584:	4a1a      	ldr	r2, [pc, #104]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d586:	f023 0301 	bic.w	r3, r3, #1
 803d58a:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOB_RELEASE_RESET();
 803d58c:	4b18      	ldr	r3, [pc, #96]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d58e:	691b      	ldr	r3, [r3, #16]
 803d590:	4a17      	ldr	r2, [pc, #92]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d592:	f023 0302 	bic.w	r3, r3, #2
 803d596:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOC_RELEASE_RESET();
 803d598:	4b15      	ldr	r3, [pc, #84]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d59a:	691b      	ldr	r3, [r3, #16]
 803d59c:	4a14      	ldr	r2, [pc, #80]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d59e:	f023 0304 	bic.w	r3, r3, #4
 803d5a2:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOH_RELEASE_RESET();
 803d5a4:	4b12      	ldr	r3, [pc, #72]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d5a6:	691b      	ldr	r3, [r3, #16]
 803d5a8:	4a11      	ldr	r2, [pc, #68]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d5aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 803d5ae:	6113      	str	r3, [r2, #16]
	__HAL_RCC_DMA1_RELEASE_RESET();
 803d5b0:	4b0f      	ldr	r3, [pc, #60]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d5b2:	691b      	ldr	r3, [r3, #16]
 803d5b4:	4a0e      	ldr	r2, [pc, #56]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d5b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 803d5ba:	6113      	str	r3, [r2, #16]
	__HAL_RCC_DMA2_RELEASE_RESET();
 803d5bc:	4b0c      	ldr	r3, [pc, #48]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d5be:	691b      	ldr	r3, [r3, #16]
 803d5c0:	4a0b      	ldr	r2, [pc, #44]	@ (803d5f0 <System_RemapApplicationVector+0x110>)
 803d5c2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 803d5c6:	6113      	str	r3, [r2, #16]

	__HAL_SYSCFG_REMAPMEMORY_SRAM();
 803d5c8:	4b0a      	ldr	r3, [pc, #40]	@ (803d5f4 <System_RemapApplicationVector+0x114>)
 803d5ca:	681b      	ldr	r3, [r3, #0]
 803d5cc:	4a09      	ldr	r2, [pc, #36]	@ (803d5f4 <System_RemapApplicationVector+0x114>)
 803d5ce:	f023 0307 	bic.w	r3, r3, #7
 803d5d2:	6013      	str	r3, [r2, #0]
 803d5d4:	4b07      	ldr	r3, [pc, #28]	@ (803d5f4 <System_RemapApplicationVector+0x114>)
 803d5d6:	681b      	ldr	r3, [r3, #0]
 803d5d8:	4a06      	ldr	r2, [pc, #24]	@ (803d5f4 <System_RemapApplicationVector+0x114>)
 803d5da:	f043 0303 	orr.w	r3, r3, #3
 803d5de:	6013      	str	r3, [r2, #0]
}
 803d5e0:	bf00      	nop
 803d5e2:	3714      	adds	r7, #20
 803d5e4:	46bd      	mov	sp, r7
 803d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d5ea:	4770      	bx	lr
 803d5ec:	0803c000 	.word	0x0803c000
 803d5f0:	40023800 	.word	0x40023800
 803d5f4:	40013800 	.word	0x40013800

0803d5f8 <MbRtu_ReadInputRegCallback>:
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/


Status_t MbRtu_ReadInputRegCallback(uint16_t address, uint16_t *value)
{
 803d5f8:	b480      	push	{r7}
 803d5fa:	b087      	sub	sp, #28
 803d5fc:	af00      	add	r7, sp, #0
 803d5fe:	4603      	mov	r3, r0
 803d600:	6039      	str	r1, [r7, #0]
 803d602:	80fb      	strh	r3, [r7, #6]
  Status_t ret = STATUS_OK;
 803d604:	2300      	movs	r3, #0
 803d606:	82fb      	strh	r3, [r7, #22]

  UNUSED(mb);

  switch (address)
 803d608:	88fb      	ldrh	r3, [r7, #6]
 803d60a:	2b18      	cmp	r3, #24
 803d60c:	f200 80cb 	bhi.w	803d7a6 <MbRtu_ReadInputRegCallback+0x1ae>
 803d610:	a201      	add	r2, pc, #4	@ (adr r2, 803d618 <MbRtu_ReadInputRegCallback+0x20>)
 803d612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803d616:	bf00      	nop
 803d618:	0803d67d 	.word	0x0803d67d
 803d61c:	0803d689 	.word	0x0803d689
 803d620:	0803d695 	.word	0x0803d695
 803d624:	0803d6a1 	.word	0x0803d6a1
 803d628:	0803d6ad 	.word	0x0803d6ad
 803d62c:	0803d6b9 	.word	0x0803d6b9
 803d630:	0803d6c5 	.word	0x0803d6c5
 803d634:	0803d6cf 	.word	0x0803d6cf
 803d638:	0803d6db 	.word	0x0803d6db
 803d63c:	0803d6e7 	.word	0x0803d6e7
 803d640:	0803d6f3 	.word	0x0803d6f3
 803d644:	0803d6ff 	.word	0x0803d6ff
 803d648:	0803d70b 	.word	0x0803d70b
 803d64c:	0803d717 	.word	0x0803d717
 803d650:	0803d723 	.word	0x0803d723
 803d654:	0803d72f 	.word	0x0803d72f
 803d658:	0803d73b 	.word	0x0803d73b
 803d65c:	0803d747 	.word	0x0803d747
 803d660:	0803d753 	.word	0x0803d753
 803d664:	0803d75f 	.word	0x0803d75f
 803d668:	0803d76b 	.word	0x0803d76b
 803d66c:	0803d777 	.word	0x0803d777
 803d670:	0803d783 	.word	0x0803d783
 803d674:	0803d78f 	.word	0x0803d78f
 803d678:	0803d79b 	.word	0x0803d79b
  {

    case MB_INPUT_SYS_UPTIME_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_UPTIME) + 0);
 803d67c:	4b56      	ldr	r3, [pc, #344]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d67e:	681b      	ldr	r3, [r3, #0]
 803d680:	881a      	ldrh	r2, [r3, #0]
 803d682:	683b      	ldr	r3, [r7, #0]
 803d684:	801a      	strh	r2, [r3, #0]
      break;
 803d686:	e095      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_UPTIME_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_UPTIME) + 1);
 803d688:	4b53      	ldr	r3, [pc, #332]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d68a:	681b      	ldr	r3, [r3, #0]
 803d68c:	885a      	ldrh	r2, [r3, #2]
 803d68e:	683b      	ldr	r3, [r7, #0]
 803d690:	801a      	strh	r2, [r3, #0]
      break;
 803d692:	e08f      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_REGMAP_VERSION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_REGMAP_VERSION) + 0);
 803d694:	4b50      	ldr	r3, [pc, #320]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d696:	681b      	ldr	r3, [r3, #0]
 803d698:	889a      	ldrh	r2, [r3, #4]
 803d69a:	683b      	ldr	r3, [r7, #0]
 803d69c:	801a      	strh	r2, [r3, #0]
      break;
 803d69e:	e089      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_REGMAP_VERSION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_REGMAP_VERSION) + 1);
 803d6a0:	4b4d      	ldr	r3, [pc, #308]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d6a2:	681b      	ldr	r3, [r3, #0]
 803d6a4:	88da      	ldrh	r2, [r3, #6]
 803d6a6:	683b      	ldr	r3, [r7, #0]
 803d6a8:	801a      	strh	r2, [r3, #0]
      break;
 803d6aa:	e083      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_STATUS_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_STATUS) + 0);
 803d6ac:	4b4a      	ldr	r3, [pc, #296]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d6ae:	681b      	ldr	r3, [r3, #0]
 803d6b0:	891a      	ldrh	r2, [r3, #8]
 803d6b2:	683b      	ldr	r3, [r7, #0]
 803d6b4:	801a      	strh	r2, [r3, #0]
      break;
 803d6b6:	e07d      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_STATUS_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_STATUS) + 1);
 803d6b8:	4b47      	ldr	r3, [pc, #284]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d6ba:	681b      	ldr	r3, [r3, #0]
 803d6bc:	895a      	ldrh	r2, [r3, #10]
 803d6be:	683b      	ldr	r3, [r7, #0]
 803d6c0:	801a      	strh	r2, [r3, #0]
      break;
 803d6c2:	e077      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_IO_INPUT:
      *value = conf.sys.io_input;
 803d6c4:	4b45      	ldr	r3, [pc, #276]	@ (803d7dc <MbRtu_ReadInputRegCallback+0x1e4>)
 803d6c6:	8a9a      	ldrh	r2, [r3, #20]
 803d6c8:	683b      	ldr	r3, [r7, #0]
 803d6ca:	801a      	strh	r2, [r3, #0]
      break;
 803d6cc:	e072      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_SERIAL_NUMBER_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_SERIAL_NUMBER) + 0);
 803d6ce:	4b42      	ldr	r3, [pc, #264]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d6d0:	685b      	ldr	r3, [r3, #4]
 803d6d2:	881a      	ldrh	r2, [r3, #0]
 803d6d4:	683b      	ldr	r3, [r7, #0]
 803d6d6:	801a      	strh	r2, [r3, #0]
      break;
 803d6d8:	e06c      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_SERIAL_NUMBER_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_SERIAL_NUMBER) + 1);
 803d6da:	4b3f      	ldr	r3, [pc, #252]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d6dc:	685b      	ldr	r3, [r3, #4]
 803d6de:	885a      	ldrh	r2, [r3, #2]
 803d6e0:	683b      	ldr	r3, [r7, #0]
 803d6e2:	801a      	strh	r2, [r3, #0]
      break;
 803d6e4:	e066      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_DEVICE_ID_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_DEVICE_ID) + 0);
 803d6e6:	4b3c      	ldr	r3, [pc, #240]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d6e8:	685b      	ldr	r3, [r3, #4]
 803d6ea:	889a      	ldrh	r2, [r3, #4]
 803d6ec:	683b      	ldr	r3, [r7, #0]
 803d6ee:	801a      	strh	r2, [r3, #0]
      break;
 803d6f0:	e060      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_DEVICE_ID_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_DEVICE_ID) + 1);
 803d6f2:	4b39      	ldr	r3, [pc, #228]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d6f4:	685b      	ldr	r3, [r3, #4]
 803d6f6:	88da      	ldrh	r2, [r3, #6]
 803d6f8:	683b      	ldr	r3, [r7, #0]
 803d6fa:	801a      	strh	r2, [r3, #0]
      break;
 803d6fc:	e05a      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_HW_REVISION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_HW_REVISION) + 0);
 803d6fe:	4b36      	ldr	r3, [pc, #216]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d700:	685b      	ldr	r3, [r3, #4]
 803d702:	891a      	ldrh	r2, [r3, #8]
 803d704:	683b      	ldr	r3, [r7, #0]
 803d706:	801a      	strh	r2, [r3, #0]
      break;
 803d708:	e054      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_HW_REVISION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_HW_REVISION) + 1);
 803d70a:	4b33      	ldr	r3, [pc, #204]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d70c:	685b      	ldr	r3, [r3, #4]
 803d70e:	895a      	ldrh	r2, [r3, #10]
 803d710:	683b      	ldr	r3, [r7, #0]
 803d712:	801a      	strh	r2, [r3, #0]
      break;
 803d714:	e04e      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_BOOT_REVISION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_BOOT_REVISION) + 0);
 803d716:	4b30      	ldr	r3, [pc, #192]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d718:	685b      	ldr	r3, [r3, #4]
 803d71a:	899a      	ldrh	r2, [r3, #12]
 803d71c:	683b      	ldr	r3, [r7, #0]
 803d71e:	801a      	strh	r2, [r3, #0]
      break;
 803d720:	e048      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_BOOT_REVISION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_BOOT_REVISION) + 1);
 803d722:	4b2d      	ldr	r3, [pc, #180]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d724:	685b      	ldr	r3, [r3, #4]
 803d726:	89da      	ldrh	r2, [r3, #14]
 803d728:	683b      	ldr	r3, [r7, #0]
 803d72a:	801a      	strh	r2, [r3, #0]
      break;
 803d72c:	e042      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_REVISION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_REVISION) + 0);
 803d72e:	4b2a      	ldr	r3, [pc, #168]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d730:	689b      	ldr	r3, [r3, #8]
 803d732:	881a      	ldrh	r2, [r3, #0]
 803d734:	683b      	ldr	r3, [r7, #0]
 803d736:	801a      	strh	r2, [r3, #0]
      break;
 803d738:	e03c      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_REVISION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_REVISION) + 1);
 803d73a:	4b27      	ldr	r3, [pc, #156]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d73c:	689b      	ldr	r3, [r3, #8]
 803d73e:	885a      	ldrh	r2, [r3, #2]
 803d740:	683b      	ldr	r3, [r7, #0]
 803d742:	801a      	strh	r2, [r3, #0]
      break;
 803d744:	e036      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_ASSEMBLY_INFO_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_ASSEMBLY_INFO) + 0);
 803d746:	4b24      	ldr	r3, [pc, #144]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d748:	689b      	ldr	r3, [r3, #8]
 803d74a:	889a      	ldrh	r2, [r3, #4]
 803d74c:	683b      	ldr	r3, [r7, #0]
 803d74e:	801a      	strh	r2, [r3, #0]
      break;
 803d750:	e030      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_ASSEMBLY_INFO_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_ASSEMBLY_INFO) + 1);
 803d752:	4b21      	ldr	r3, [pc, #132]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d754:	689b      	ldr	r3, [r3, #8]
 803d756:	88da      	ldrh	r2, [r3, #6]
 803d758:	683b      	ldr	r3, [r7, #0]
 803d75a:	801a      	strh	r2, [r3, #0]
      break;
 803d75c:	e02a      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_CHECKSUM_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_CHECKSUM) + 0);
 803d75e:	4b1e      	ldr	r3, [pc, #120]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d760:	689b      	ldr	r3, [r3, #8]
 803d762:	891a      	ldrh	r2, [r3, #8]
 803d764:	683b      	ldr	r3, [r7, #0]
 803d766:	801a      	strh	r2, [r3, #0]
      break;
 803d768:	e024      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_CHECKSUM_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_CHECKSUM) + 1);
 803d76a:	4b1b      	ldr	r3, [pc, #108]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d76c:	689b      	ldr	r3, [r3, #8]
 803d76e:	895a      	ldrh	r2, [r3, #10]
 803d770:	683b      	ldr	r3, [r7, #0]
 803d772:	801a      	strh	r2, [r3, #0]
      break;
 803d774:	e01e      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_SIZE_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_SIZE) + 0);
 803d776:	4b18      	ldr	r3, [pc, #96]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d778:	689b      	ldr	r3, [r3, #8]
 803d77a:	899a      	ldrh	r2, [r3, #12]
 803d77c:	683b      	ldr	r3, [r7, #0]
 803d77e:	801a      	strh	r2, [r3, #0]
      break;
 803d780:	e018      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_SIZE_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_SIZE) + 1);
 803d782:	4b15      	ldr	r3, [pc, #84]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d784:	689b      	ldr	r3, [r3, #8]
 803d786:	89da      	ldrh	r2, [r3, #14]
 803d788:	683b      	ldr	r3, [r7, #0]
 803d78a:	801a      	strh	r2, [r3, #0]
      break;
 803d78c:	e012      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_DBG_WRITES_CONF_0:
      *value = *((uint16_t *)CONF_PTR(CONF_DBG_WRITES_CONF) + 0);
 803d78e:	4b12      	ldr	r3, [pc, #72]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d790:	699b      	ldr	r3, [r3, #24]
 803d792:	881a      	ldrh	r2, [r3, #0]
 803d794:	683b      	ldr	r3, [r7, #0]
 803d796:	801a      	strh	r2, [r3, #0]
      break;
 803d798:	e00c      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_DBG_WRITES_CONF_1:
      *value = *((uint16_t *)CONF_PTR(CONF_DBG_WRITES_CONF) + 1);
 803d79a:	4b0f      	ldr	r3, [pc, #60]	@ (803d7d8 <MbRtu_ReadInputRegCallback+0x1e0>)
 803d79c:	699b      	ldr	r3, [r3, #24]
 803d79e:	885a      	ldrh	r2, [r3, #2]
 803d7a0:	683b      	ldr	r3, [r7, #0]
 803d7a2:	801a      	strh	r2, [r3, #0]
      break;
 803d7a4:	e006      	b.n	803d7b4 <MbRtu_ReadInputRegCallback+0x1bc>


    default:
      *value = MB_READ_NOT_SUPPORTED;
 803d7a6:	683b      	ldr	r3, [r7, #0]
 803d7a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 803d7ac:	801a      	strh	r2, [r3, #0]
      ret = STATUS_ERROR;
 803d7ae:	2301      	movs	r3, #1
 803d7b0:	82fb      	strh	r3, [r7, #22]
      break;
 803d7b2:	bf00      	nop
  }

  /* Reverse byte order */
  *value = __REV16(*value);
 803d7b4:	683b      	ldr	r3, [r7, #0]
 803d7b6:	881b      	ldrh	r3, [r3, #0]
 803d7b8:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 803d7ba:	693b      	ldr	r3, [r7, #16]
 803d7bc:	ba5b      	rev16	r3, r3
 803d7be:	60fb      	str	r3, [r7, #12]
  return result;
 803d7c0:	68fb      	ldr	r3, [r7, #12]
 803d7c2:	b29a      	uxth	r2, r3
 803d7c4:	683b      	ldr	r3, [r7, #0]
 803d7c6:	801a      	strh	r2, [r3, #0]

  return ret;
 803d7c8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 803d7cc:	4618      	mov	r0, r3
 803d7ce:	371c      	adds	r7, #28
 803d7d0:	46bd      	mov	sp, r7
 803d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d7d6:	4770      	bx	lr
 803d7d8:	08043c2c 	.word	0x08043c2c
 803d7dc:	20000538 	.word	0x20000538

0803d7e0 <MbRtu_ReadHoldingRegCallback>:


Status_t MbRtu_ReadHoldingRegCallback(uint16_t address, uint16_t *value)
{
 803d7e0:	b480      	push	{r7}
 803d7e2:	b087      	sub	sp, #28
 803d7e4:	af00      	add	r7, sp, #0
 803d7e6:	4603      	mov	r3, r0
 803d7e8:	6039      	str	r1, [r7, #0]
 803d7ea:	80fb      	strh	r3, [r7, #6]
  Status_t ret = STATUS_OK;
 803d7ec:	2300      	movs	r3, #0
 803d7ee:	82fb      	strh	r3, [r7, #22]

  switch (address)
 803d7f0:	88fb      	ldrh	r3, [r7, #6]
 803d7f2:	2b65      	cmp	r3, #101	@ 0x65
 803d7f4:	d05e      	beq.n	803d8b4 <MbRtu_ReadHoldingRegCallback+0xd4>
 803d7f6:	2b65      	cmp	r3, #101	@ 0x65
 803d7f8:	dc63      	bgt.n	803d8c2 <MbRtu_ReadHoldingRegCallback+0xe2>
 803d7fa:	2b08      	cmp	r3, #8
 803d7fc:	dc18      	bgt.n	803d830 <MbRtu_ReadHoldingRegCallback+0x50>
 803d7fe:	2b00      	cmp	r3, #0
 803d800:	db5f      	blt.n	803d8c2 <MbRtu_ReadHoldingRegCallback+0xe2>
 803d802:	2b08      	cmp	r3, #8
 803d804:	d85d      	bhi.n	803d8c2 <MbRtu_ReadHoldingRegCallback+0xe2>
 803d806:	a201      	add	r2, pc, #4	@ (adr r2, 803d80c <MbRtu_ReadHoldingRegCallback+0x2c>)
 803d808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803d80c:	0803d837 	.word	0x0803d837
 803d810:	0803d843 	.word	0x0803d843
 803d814:	0803d84f 	.word	0x0803d84f
 803d818:	0803d85b 	.word	0x0803d85b
 803d81c:	0803d867 	.word	0x0803d867
 803d820:	0803d875 	.word	0x0803d875
 803d824:	0803d883 	.word	0x0803d883
 803d828:	0803d891 	.word	0x0803d891
 803d82c:	0803d89b 	.word	0x0803d89b
 803d830:	2b64      	cmp	r3, #100	@ 0x64
 803d832:	d038      	beq.n	803d8a6 <MbRtu_ReadHoldingRegCallback+0xc6>
 803d834:	e045      	b.n	803d8c2 <MbRtu_ReadHoldingRegCallback+0xe2>
  {

    case MB_HOLD_SYS_COMMAND_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 0);
 803d836:	4b2f      	ldr	r3, [pc, #188]	@ (803d8f4 <MbRtu_ReadHoldingRegCallback+0x114>)
 803d838:	681b      	ldr	r3, [r3, #0]
 803d83a:	899a      	ldrh	r2, [r3, #12]
 803d83c:	683b      	ldr	r3, [r7, #0]
 803d83e:	801a      	strh	r2, [r3, #0]
      break;
 803d840:	e046      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_SYS_COMMAND_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 1);
 803d842:	4b2c      	ldr	r3, [pc, #176]	@ (803d8f4 <MbRtu_ReadHoldingRegCallback+0x114>)
 803d844:	681b      	ldr	r3, [r3, #0]
 803d846:	89da      	ldrh	r2, [r3, #14]
 803d848:	683b      	ldr	r3, [r7, #0]
 803d84a:	801a      	strh	r2, [r3, #0]
      break;
 803d84c:	e040      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_SYS_TEST_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 0);
 803d84e:	4b29      	ldr	r3, [pc, #164]	@ (803d8f4 <MbRtu_ReadHoldingRegCallback+0x114>)
 803d850:	681b      	ldr	r3, [r3, #0]
 803d852:	8a1a      	ldrh	r2, [r3, #16]
 803d854:	683b      	ldr	r3, [r7, #0]
 803d856:	801a      	strh	r2, [r3, #0]
      break;
 803d858:	e03a      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_SYS_TEST_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 1);
 803d85a:	4b26      	ldr	r3, [pc, #152]	@ (803d8f4 <MbRtu_ReadHoldingRegCallback+0x114>)
 803d85c:	681b      	ldr	r3, [r3, #0]
 803d85e:	8a5a      	ldrh	r2, [r3, #18]
 803d860:	683b      	ldr	r3, [r7, #0]
 803d862:	801a      	strh	r2, [r3, #0]
      break;
 803d864:	e034      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_COM_MB_BAUD_RATE:
      *value = conf.com.mb_baud_rate;
 803d866:	4b24      	ldr	r3, [pc, #144]	@ (803d8f8 <MbRtu_ReadHoldingRegCallback+0x118>)
 803d868:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 803d86c:	461a      	mov	r2, r3
 803d86e:	683b      	ldr	r3, [r7, #0]
 803d870:	801a      	strh	r2, [r3, #0]
      break;
 803d872:	e02d      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_COM_MB_PARITY:
      *value = conf.com.mb_parity;
 803d874:	4b20      	ldr	r3, [pc, #128]	@ (803d8f8 <MbRtu_ReadHoldingRegCallback+0x118>)
 803d876:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 803d87a:	461a      	mov	r2, r3
 803d87c:	683b      	ldr	r3, [r7, #0]
 803d87e:	801a      	strh	r2, [r3, #0]
      break;
 803d880:	e026      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_COM_MB_STOP_BITS:
      *value = conf.com.mb_stop_bits;
 803d882:	4b1d      	ldr	r3, [pc, #116]	@ (803d8f8 <MbRtu_ReadHoldingRegCallback+0x118>)
 803d884:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 803d888:	461a      	mov	r2, r3
 803d88a:	683b      	ldr	r3, [r7, #0]
 803d88c:	801a      	strh	r2, [r3, #0]
      break;
 803d88e:	e01f      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_COM_MB_APPLY:
      *value = conf.com.mb_apply;
 803d890:	4b19      	ldr	r3, [pc, #100]	@ (803d8f8 <MbRtu_ReadHoldingRegCallback+0x118>)
 803d892:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 803d894:	683b      	ldr	r3, [r7, #0]
 803d896:	801a      	strh	r2, [r3, #0]
      break;
 803d898:	e01a      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_COM_MB_TIMEOUT:
      *value = conf.com.mb_timeout;
 803d89a:	4b17      	ldr	r3, [pc, #92]	@ (803d8f8 <MbRtu_ReadHoldingRegCallback+0x118>)
 803d89c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 803d8a0:	683b      	ldr	r3, [r7, #0]
 803d8a2:	801a      	strh	r2, [r3, #0]
      break;
 803d8a4:	e014      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_STPMEAS_MODE:
      *value = conf.stpmeas.mode;
 803d8a6:	4b14      	ldr	r3, [pc, #80]	@ (803d8f8 <MbRtu_ReadHoldingRegCallback+0x118>)
 803d8a8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 803d8ac:	461a      	mov	r2, r3
 803d8ae:	683b      	ldr	r3, [r7, #0]
 803d8b0:	801a      	strh	r2, [r3, #0]
      break;
 803d8b2:	e00d      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_STPMEAS_NTC_BETA:
      *value = conf.stpmeas.ntc_beta;
 803d8b4:	4b10      	ldr	r3, [pc, #64]	@ (803d8f8 <MbRtu_ReadHoldingRegCallback+0x118>)
 803d8b6:	f8b3 3049 	ldrh.w	r3, [r3, #73]	@ 0x49
 803d8ba:	b29a      	uxth	r2, r3
 803d8bc:	683b      	ldr	r3, [r7, #0]
 803d8be:	801a      	strh	r2, [r3, #0]
      break;
 803d8c0:	e006      	b.n	803d8d0 <MbRtu_ReadHoldingRegCallback+0xf0>


    default:
      *value = MB_READ_NOT_SUPPORTED;
 803d8c2:	683b      	ldr	r3, [r7, #0]
 803d8c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 803d8c8:	801a      	strh	r2, [r3, #0]
      ret = STATUS_ERROR;
 803d8ca:	2301      	movs	r3, #1
 803d8cc:	82fb      	strh	r3, [r7, #22]
      break;
 803d8ce:	bf00      	nop
  }

  /* Reverse byte order */
  *value = __REV16(*value);
 803d8d0:	683b      	ldr	r3, [r7, #0]
 803d8d2:	881b      	ldrh	r3, [r3, #0]
 803d8d4:	613b      	str	r3, [r7, #16]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 803d8d6:	693b      	ldr	r3, [r7, #16]
 803d8d8:	ba5b      	rev16	r3, r3
 803d8da:	60fb      	str	r3, [r7, #12]
  return result;
 803d8dc:	68fb      	ldr	r3, [r7, #12]
 803d8de:	b29a      	uxth	r2, r3
 803d8e0:	683b      	ldr	r3, [r7, #0]
 803d8e2:	801a      	strh	r2, [r3, #0]

  return ret;
 803d8e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 803d8e8:	4618      	mov	r0, r3
 803d8ea:	371c      	adds	r7, #28
 803d8ec:	46bd      	mov	sp, r7
 803d8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 803d8f2:	4770      	bx	lr
 803d8f4:	08043c2c 	.word	0x08043c2c
 803d8f8:	20000538 	.word	0x20000538

0803d8fc <MbRtu_WriteHoldingRegCallback>:




Status_t MbRtu_WriteHoldingRegCallback(uint16_t address, uint16_t value)
{
 803d8fc:	b580      	push	{r7, lr}
 803d8fe:	b084      	sub	sp, #16
 803d900:	af00      	add	r7, sp, #0
 803d902:	4603      	mov	r3, r0
 803d904:	460a      	mov	r2, r1
 803d906:	80fb      	strh	r3, [r7, #6]
 803d908:	4613      	mov	r3, r2
 803d90a:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 803d90c:	2300      	movs	r3, #0
 803d90e:	81fb      	strh	r3, [r7, #14]
  uint32_t id = 0;
 803d910:	2300      	movs	r3, #0
 803d912:	60bb      	str	r3, [r7, #8]

  switch (address)
 803d914:	88fb      	ldrh	r3, [r7, #6]
 803d916:	2b65      	cmp	r3, #101	@ 0x65
 803d918:	d069      	beq.n	803d9ee <MbRtu_WriteHoldingRegCallback+0xf2>
 803d91a:	2b65      	cmp	r3, #101	@ 0x65
 803d91c:	dc6e      	bgt.n	803d9fc <MbRtu_WriteHoldingRegCallback+0x100>
 803d91e:	2b08      	cmp	r3, #8
 803d920:	dc18      	bgt.n	803d954 <MbRtu_WriteHoldingRegCallback+0x58>
 803d922:	2b00      	cmp	r3, #0
 803d924:	db6a      	blt.n	803d9fc <MbRtu_WriteHoldingRegCallback+0x100>
 803d926:	2b08      	cmp	r3, #8
 803d928:	d868      	bhi.n	803d9fc <MbRtu_WriteHoldingRegCallback+0x100>
 803d92a:	a201      	add	r2, pc, #4	@ (adr r2, 803d930 <MbRtu_WriteHoldingRegCallback+0x34>)
 803d92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 803d930:	0803d95b 	.word	0x0803d95b
 803d934:	0803d967 	.word	0x0803d967
 803d938:	0803d979 	.word	0x0803d979
 803d93c:	0803d985 	.word	0x0803d985
 803d940:	0803d995 	.word	0x0803d995
 803d944:	0803d9a5 	.word	0x0803d9a5
 803d948:	0803d9b5 	.word	0x0803d9b5
 803d94c:	0803d9c5 	.word	0x0803d9c5
 803d950:	0803d9d1 	.word	0x0803d9d1
 803d954:	2b64      	cmp	r3, #100	@ 0x64
 803d956:	d042      	beq.n	803d9de <MbRtu_WriteHoldingRegCallback+0xe2>
 803d958:	e050      	b.n	803d9fc <MbRtu_WriteHoldingRegCallback+0x100>
  {

    case MB_HOLD_SYS_COMMAND_0:
      *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 0) = value;
 803d95a:	4b30      	ldr	r3, [pc, #192]	@ (803da1c <MbRtu_WriteHoldingRegCallback+0x120>)
 803d95c:	681b      	ldr	r3, [r3, #0]
 803d95e:	330c      	adds	r3, #12
 803d960:	88ba      	ldrh	r2, [r7, #4]
 803d962:	801a      	strh	r2, [r3, #0]
      break;
 803d964:	e04d      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_SYS_COMMAND_1:
      *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 1) = value;
 803d966:	4b2d      	ldr	r3, [pc, #180]	@ (803da1c <MbRtu_WriteHoldingRegCallback+0x120>)
 803d968:	681b      	ldr	r3, [r3, #0]
 803d96a:	330e      	adds	r3, #14
 803d96c:	88ba      	ldrh	r2, [r7, #4]
 803d96e:	801a      	strh	r2, [r3, #0]
      id = CONF_SYS_COMMAND;
 803d970:	f24c 1352 	movw	r3, #49490	@ 0xc152
 803d974:	60bb      	str	r3, [r7, #8]
      break;
 803d976:	e044      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_SYS_TEST_0:
      *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 0) = value;
 803d978:	4b28      	ldr	r3, [pc, #160]	@ (803da1c <MbRtu_WriteHoldingRegCallback+0x120>)
 803d97a:	681b      	ldr	r3, [r3, #0]
 803d97c:	3310      	adds	r3, #16
 803d97e:	88ba      	ldrh	r2, [r7, #4]
 803d980:	801a      	strh	r2, [r3, #0]
      break;
 803d982:	e03e      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_SYS_TEST_1:
      *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 1) = value;
 803d984:	4b25      	ldr	r3, [pc, #148]	@ (803da1c <MbRtu_WriteHoldingRegCallback+0x120>)
 803d986:	681b      	ldr	r3, [r3, #0]
 803d988:	3312      	adds	r3, #18
 803d98a:	88ba      	ldrh	r2, [r7, #4]
 803d98c:	801a      	strh	r2, [r3, #0]
      id = CONF_SYS_TEST;
 803d98e:	4b24      	ldr	r3, [pc, #144]	@ (803da20 <MbRtu_WriteHoldingRegCallback+0x124>)
 803d990:	60bb      	str	r3, [r7, #8]
      break;
 803d992:	e036      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_BAUD_RATE:
      conf.com.mb_baud_rate = (com_mb_baud_rate_t)value;
 803d994:	88bb      	ldrh	r3, [r7, #4]
 803d996:	b2da      	uxtb	r2, r3
 803d998:	4b22      	ldr	r3, [pc, #136]	@ (803da24 <MbRtu_WriteHoldingRegCallback+0x128>)
 803d99a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      id = CONF_COM_MB_BAUD_RATE;
 803d99e:	4b22      	ldr	r3, [pc, #136]	@ (803da28 <MbRtu_WriteHoldingRegCallback+0x12c>)
 803d9a0:	60bb      	str	r3, [r7, #8]
      break;
 803d9a2:	e02e      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_PARITY:
      conf.com.mb_parity = (com_mb_parity_t)value;
 803d9a4:	88bb      	ldrh	r3, [r7, #4]
 803d9a6:	b2da      	uxtb	r2, r3
 803d9a8:	4b1e      	ldr	r3, [pc, #120]	@ (803da24 <MbRtu_WriteHoldingRegCallback+0x128>)
 803d9aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      id = CONF_COM_MB_PARITY;
 803d9ae:	4b1f      	ldr	r3, [pc, #124]	@ (803da2c <MbRtu_WriteHoldingRegCallback+0x130>)
 803d9b0:	60bb      	str	r3, [r7, #8]
      break;
 803d9b2:	e026      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_STOP_BITS:
      conf.com.mb_stop_bits = (com_mb_stop_bits_t)value;
 803d9b4:	88bb      	ldrh	r3, [r7, #4]
 803d9b6:	b2da      	uxtb	r2, r3
 803d9b8:	4b1a      	ldr	r3, [pc, #104]	@ (803da24 <MbRtu_WriteHoldingRegCallback+0x128>)
 803d9ba:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      id = CONF_COM_MB_STOP_BITS;
 803d9be:	4b1c      	ldr	r3, [pc, #112]	@ (803da30 <MbRtu_WriteHoldingRegCallback+0x134>)
 803d9c0:	60bb      	str	r3, [r7, #8]
      break;
 803d9c2:	e01e      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_APPLY:
      conf.com.mb_apply = value;
 803d9c4:	4a17      	ldr	r2, [pc, #92]	@ (803da24 <MbRtu_WriteHoldingRegCallback+0x128>)
 803d9c6:	88bb      	ldrh	r3, [r7, #4]
 803d9c8:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      id = CONF_COM_MB_APPLY;
 803d9ca:	4b1a      	ldr	r3, [pc, #104]	@ (803da34 <MbRtu_WriteHoldingRegCallback+0x138>)
 803d9cc:	60bb      	str	r3, [r7, #8]
      break;
 803d9ce:	e018      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_TIMEOUT:
      conf.com.mb_timeout = value;
 803d9d0:	4a14      	ldr	r2, [pc, #80]	@ (803da24 <MbRtu_WriteHoldingRegCallback+0x128>)
 803d9d2:	88bb      	ldrh	r3, [r7, #4]
 803d9d4:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
      id = CONF_COM_MB_TIMEOUT;
 803d9d8:	4b17      	ldr	r3, [pc, #92]	@ (803da38 <MbRtu_WriteHoldingRegCallback+0x13c>)
 803d9da:	60bb      	str	r3, [r7, #8]
      break;
 803d9dc:	e011      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_STPMEAS_MODE:
      conf.stpmeas.mode = (stpmeas_mode_t)value;
 803d9de:	88bb      	ldrh	r3, [r7, #4]
 803d9e0:	b2da      	uxtb	r2, r3
 803d9e2:	4b10      	ldr	r3, [pc, #64]	@ (803da24 <MbRtu_WriteHoldingRegCallback+0x128>)
 803d9e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
      id = CONF_STPMEAS_MODE;
 803d9e8:	4b14      	ldr	r3, [pc, #80]	@ (803da3c <MbRtu_WriteHoldingRegCallback+0x140>)
 803d9ea:	60bb      	str	r3, [r7, #8]
      break;
 803d9ec:	e009      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_STPMEAS_NTC_BETA:
      conf.stpmeas.ntc_beta = value;
 803d9ee:	4b0d      	ldr	r3, [pc, #52]	@ (803da24 <MbRtu_WriteHoldingRegCallback+0x128>)
 803d9f0:	88ba      	ldrh	r2, [r7, #4]
 803d9f2:	f8a3 2049 	strh.w	r2, [r3, #73]	@ 0x49
      id = CONF_STPMEAS_NTC_BETA;
 803d9f6:	4b12      	ldr	r3, [pc, #72]	@ (803da40 <MbRtu_WriteHoldingRegCallback+0x144>)
 803d9f8:	60bb      	str	r3, [r7, #8]
      break;
 803d9fa:	e002      	b.n	803da02 <MbRtu_WriteHoldingRegCallback+0x106>


    default:
      ret = STATUS_ERROR;
 803d9fc:	2301      	movs	r3, #1
 803d9fe:	81fb      	strh	r3, [r7, #14]
      break;
 803da00:	bf00      	nop
  }

  if (id != 0)
 803da02:	68bb      	ldr	r3, [r7, #8]
 803da04:	2b00      	cmp	r3, #0
 803da06:	d002      	beq.n	803da0e <MbRtu_WriteHoldingRegCallback+0x112>
  {
    Config_ApplyConfig(id);
 803da08:	68b8      	ldr	r0, [r7, #8]
 803da0a:	f7fe fed1 	bl	803c7b0 <Config_ApplyConfig>
  }

  return ret;
 803da0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 803da12:	4618      	mov	r0, r3
 803da14:	3710      	adds	r7, #16
 803da16:	46bd      	mov	sp, r7
 803da18:	bd80      	pop	{r7, pc}
 803da1a:	bf00      	nop
 803da1c:	08043c2c 	.word	0x08043c2c
 803da20:	00010152 	.word	0x00010152
 803da24:	20000538 	.word	0x20000538
 803da28:	03000570 	.word	0x03000570
 803da2c:	03001570 	.word	0x03001570
 803da30:	03002570 	.word	0x03002570
 803da34:	03006151 	.word	0x03006151
 803da38:	03008171 	.word	0x03008171
 803da3c:	05000550 	.word	0x05000550
 803da40:	05001151 	.word	0x05001151

0803da44 <MbUpgr_Init>:
/* Public variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/

Status_t MbUpgr_Init(void)
{
 803da44:	b480      	push	{r7}
 803da46:	b083      	sub	sp, #12
 803da48:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 803da4a:	2300      	movs	r3, #0
 803da4c:	80fb      	strh	r3, [r7, #6]

  /* Set status ready */
  mbu.status = MB_UPGR_STATUS_BUSY;
 803da4e:	4b08      	ldr	r3, [pc, #32]	@ (803da70 <MbUpgr_Init+0x2c>)
 803da50:	2200      	movs	r2, #0
 803da52:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  mbu.writeDone = 0;
 803da56:	4b06      	ldr	r3, [pc, #24]	@ (803da70 <MbUpgr_Init+0x2c>)
 803da58:	2200      	movs	r2, #0
 803da5a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return ret;
 803da5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803da62:	4618      	mov	r0, r3
 803da64:	370c      	adds	r7, #12
 803da66:	46bd      	mov	sp, r7
 803da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 803da6c:	4770      	bx	lr
 803da6e:	bf00      	nop
 803da70:	200005e8 	.word	0x200005e8

0803da74 <MbUpgr_Handle>:


Status_t MbUpgr_Handle(void)
{
 803da74:	b580      	push	{r7, lr}
 803da76:	b082      	sub	sp, #8
 803da78:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 803da7a:	2300      	movs	r3, #0
 803da7c:	80fb      	strh	r3, [r7, #6]

  /* First 4 registers were written? */
  if (mbu.startClb != 0)
 803da7e:	4b35      	ldr	r3, [pc, #212]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803da80:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 803da84:	2b00      	cmp	r3, #0
 803da86:	d020      	beq.n	803daca <MbUpgr_Handle+0x56>
  {
    mbu.startClb = 0;
 803da88:	4b32      	ldr	r3, [pc, #200]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803da8a:	2200      	movs	r2, #0
 803da8c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    /* Start of programming procedure */
    ret = MbUpgr_HeaderClb(mbu.type, mbu.mode, mbu.size);
 803da90:	4b30      	ldr	r3, [pc, #192]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803da92:	881b      	ldrh	r3, [r3, #0]
 803da94:	4a2f      	ldr	r2, [pc, #188]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803da96:	8851      	ldrh	r1, [r2, #2]
 803da98:	4a2e      	ldr	r2, [pc, #184]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803da9a:	6852      	ldr	r2, [r2, #4]
 803da9c:	4618      	mov	r0, r3
 803da9e:	f000 f8e1 	bl	803dc64 <MbUpgr_HeaderClb>
 803daa2:	4603      	mov	r3, r0
 803daa4:	80fb      	strh	r3, [r7, #6]
    if (mbu.writeDone == 0)
 803daa6:	4b2b      	ldr	r3, [pc, #172]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803daa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 803daac:	2b00      	cmp	r3, #0
 803daae:	d10c      	bne.n	803daca <MbUpgr_Handle+0x56>
    {
      if (ret == STATUS_OK)
 803dab0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 803dab4:	2b00      	cmp	r3, #0
 803dab6:	d104      	bne.n	803dac2 <MbUpgr_Handle+0x4e>
      {
        mbu.status = MB_UPGR_STATUS_READY;
 803dab8:	4b26      	ldr	r3, [pc, #152]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803daba:	2201      	movs	r2, #1
 803dabc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 803dac0:	e003      	b.n	803daca <MbUpgr_Handle+0x56>
      }
      else
      {
        mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 803dac2:	4b24      	ldr	r3, [pc, #144]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803dac4:	2203      	movs	r2, #3
 803dac6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      }
    }
  }
  /* Write done flag is set */
  if (mbu.writeDone != 0)
 803daca:	4b22      	ldr	r3, [pc, #136]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803dacc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 803dad0:	2b00      	cmp	r3, #0
 803dad2:	d039      	beq.n	803db48 <MbUpgr_Handle+0xd4>
  {
    /* Call function that writes data into flash */
    ret = MbUpgr_WritePageClb(mbu.offset, mbu.data, mbu.page_size);
 803dad4:	4b1f      	ldr	r3, [pc, #124]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803dad6:	f8d3 300a 	ldr.w	r3, [r3, #10]
 803dada:	4a1e      	ldr	r2, [pc, #120]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803dadc:	8912      	ldrh	r2, [r2, #8]
 803dade:	491e      	ldr	r1, [pc, #120]	@ (803db58 <MbUpgr_Handle+0xe4>)
 803dae0:	4618      	mov	r0, r3
 803dae2:	f000 f8da 	bl	803dc9a <MbUpgr_WritePageClb>
 803dae6:	4603      	mov	r3, r0
 803dae8:	80fb      	strh	r3, [r7, #6]
    if (ret == STATUS_OK)
 803daea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 803daee:	2b00      	cmp	r3, #0
 803daf0:	d104      	bne.n	803dafc <MbUpgr_Handle+0x88>
    {
      mbu.status = MB_UPGR_STATUS_READY;
 803daf2:	4b18      	ldr	r3, [pc, #96]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803daf4:	2201      	movs	r2, #1
 803daf6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 803dafa:	e003      	b.n	803db04 <MbUpgr_Handle+0x90>
    }
    else
    {
      mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 803dafc:	4b15      	ldr	r3, [pc, #84]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803dafe:	2203      	movs	r2, #3
 803db00:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    }
    /* Did we receive all data? */
    if (mbu.size - mbu.offset <= mbu.page_size)
 803db04:	4b13      	ldr	r3, [pc, #76]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803db06:	685a      	ldr	r2, [r3, #4]
 803db08:	4b12      	ldr	r3, [pc, #72]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803db0a:	f8d3 300a 	ldr.w	r3, [r3, #10]
 803db0e:	1ad3      	subs	r3, r2, r3
 803db10:	4a10      	ldr	r2, [pc, #64]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803db12:	8912      	ldrh	r2, [r2, #8]
 803db14:	4293      	cmp	r3, r2
 803db16:	d813      	bhi.n	803db40 <MbUpgr_Handle+0xcc>
    {
      /* The whole binary has been received, callback */
      ret = MbUpgr_WriteDoneClb(mbu.size);
 803db18:	4b0e      	ldr	r3, [pc, #56]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803db1a:	685b      	ldr	r3, [r3, #4]
 803db1c:	4618      	mov	r0, r3
 803db1e:	f000 f8cd 	bl	803dcbc <MbUpgr_WriteDoneClb>
 803db22:	4603      	mov	r3, r0
 803db24:	80fb      	strh	r3, [r7, #6]
      if (ret == STATUS_OK)
 803db26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 803db2a:	2b00      	cmp	r3, #0
 803db2c:	d104      	bne.n	803db38 <MbUpgr_Handle+0xc4>
      {
        mbu.status = MB_UPGR_STATUS_DONE_OK;
 803db2e:	4b09      	ldr	r3, [pc, #36]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803db30:	2202      	movs	r2, #2
 803db32:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 803db36:	e003      	b.n	803db40 <MbUpgr_Handle+0xcc>
      }
      else
      {
        mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 803db38:	4b06      	ldr	r3, [pc, #24]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803db3a:	2203      	movs	r2, #3
 803db3c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      }
    }
    /* Reset flags */
    mbu.writeDone = 0;
 803db40:	4b04      	ldr	r3, [pc, #16]	@ (803db54 <MbUpgr_Handle+0xe0>)
 803db42:	2200      	movs	r2, #0
 803db44:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }

  return ret;
 803db48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803db4c:	4618      	mov	r0, r3
 803db4e:	3708      	adds	r7, #8
 803db50:	46bd      	mov	sp, r7
 803db52:	bd80      	pop	{r7, pc}
 803db54:	200005e8 	.word	0x200005e8
 803db58:	200005f6 	.word	0x200005f6

0803db5c <MbUpgr_WriteRegisters>:


Status_t MbUpgr_WriteRegisters(uint16_t offset, uint16_t length, uint8_t* data)
{
 803db5c:	b480      	push	{r7}
 803db5e:	b087      	sub	sp, #28
 803db60:	af00      	add	r7, sp, #0
 803db62:	4603      	mov	r3, r0
 803db64:	603a      	str	r2, [r7, #0]
 803db66:	80fb      	strh	r3, [r7, #6]
 803db68:	460b      	mov	r3, r1
 803db6a:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 803db6c:	2300      	movs	r3, #0
 803db6e:	827b      	strh	r3, [r7, #18]
  uint8_t *storage = (uint8_t*)&mbu + (offset - MB_UPGR_BASE_ADDRESS) * 2;
 803db70:	88fb      	ldrh	r3, [r7, #6]
 803db72:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 803db76:	005b      	lsls	r3, r3, #1
 803db78:	461a      	mov	r2, r3
 803db7a:	4b1a      	ldr	r3, [pc, #104]	@ (803dbe4 <MbUpgr_WriteRegisters+0x88>)
 803db7c:	4413      	add	r3, r2
 803db7e:	60fb      	str	r3, [r7, #12]

  /* Copy and byte reverse */
  for (int i = 0; i < length; i++)
 803db80:	2300      	movs	r3, #0
 803db82:	617b      	str	r3, [r7, #20]
 803db84:	e01a      	b.n	803dbbc <MbUpgr_WriteRegisters+0x60>
  {
    storage[i * 2 + 1] = data[i * 2 + 0];
 803db86:	697b      	ldr	r3, [r7, #20]
 803db88:	005b      	lsls	r3, r3, #1
 803db8a:	461a      	mov	r2, r3
 803db8c:	683b      	ldr	r3, [r7, #0]
 803db8e:	441a      	add	r2, r3
 803db90:	697b      	ldr	r3, [r7, #20]
 803db92:	005b      	lsls	r3, r3, #1
 803db94:	3301      	adds	r3, #1
 803db96:	68f9      	ldr	r1, [r7, #12]
 803db98:	440b      	add	r3, r1
 803db9a:	7812      	ldrb	r2, [r2, #0]
 803db9c:	701a      	strb	r2, [r3, #0]
    storage[i * 2 + 0] = data[i * 2 + 1];
 803db9e:	697b      	ldr	r3, [r7, #20]
 803dba0:	005b      	lsls	r3, r3, #1
 803dba2:	3301      	adds	r3, #1
 803dba4:	683a      	ldr	r2, [r7, #0]
 803dba6:	441a      	add	r2, r3
 803dba8:	697b      	ldr	r3, [r7, #20]
 803dbaa:	005b      	lsls	r3, r3, #1
 803dbac:	4619      	mov	r1, r3
 803dbae:	68fb      	ldr	r3, [r7, #12]
 803dbb0:	440b      	add	r3, r1
 803dbb2:	7812      	ldrb	r2, [r2, #0]
 803dbb4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 803dbb6:	697b      	ldr	r3, [r7, #20]
 803dbb8:	3301      	adds	r3, #1
 803dbba:	617b      	str	r3, [r7, #20]
 803dbbc:	88bb      	ldrh	r3, [r7, #4]
 803dbbe:	697a      	ldr	r2, [r7, #20]
 803dbc0:	429a      	cmp	r2, r3
 803dbc2:	dbe0      	blt.n	803db86 <MbUpgr_WriteRegisters+0x2a>
  }

  /* Write into starting registers */
  if ((offset - MB_UPGR_BASE_ADDRESS) < 4)
 803dbc4:	88fb      	ldrh	r3, [r7, #6]
 803dbc6:	f5b3 7f7b 	cmp.w	r3, #1004	@ 0x3ec
 803dbca:	d203      	bcs.n	803dbd4 <MbUpgr_WriteRegisters+0x78>
  {
    mbu.startClb = 1;
 803dbcc:	4b05      	ldr	r3, [pc, #20]	@ (803dbe4 <MbUpgr_WriteRegisters+0x88>)
 803dbce:	2201      	movs	r2, #1
 803dbd0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  }

  return ret;
 803dbd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 803dbd8:	4618      	mov	r0, r3
 803dbda:	371c      	adds	r7, #28
 803dbdc:	46bd      	mov	sp, r7
 803dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 803dbe2:	4770      	bx	lr
 803dbe4:	200005e8 	.word	0x200005e8

0803dbe8 <MbUpgr_ReadRegisters>:


Status_t MbUpgr_ReadRegisters(uint16_t offset, uint16_t length, uint8_t* data)
{
 803dbe8:	b480      	push	{r7}
 803dbea:	b087      	sub	sp, #28
 803dbec:	af00      	add	r7, sp, #0
 803dbee:	4603      	mov	r3, r0
 803dbf0:	603a      	str	r2, [r7, #0]
 803dbf2:	80fb      	strh	r3, [r7, #6]
 803dbf4:	460b      	mov	r3, r1
 803dbf6:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 803dbf8:	2300      	movs	r3, #0
 803dbfa:	827b      	strh	r3, [r7, #18]
  uint8_t *storage = (uint8_t*)&mbu + (offset - MB_UPGR_BASE_ADDRESS) * 2;
 803dbfc:	88fb      	ldrh	r3, [r7, #6]
 803dbfe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 803dc02:	005b      	lsls	r3, r3, #1
 803dc04:	461a      	mov	r2, r3
 803dc06:	4b16      	ldr	r3, [pc, #88]	@ (803dc60 <MbUpgr_ReadRegisters+0x78>)
 803dc08:	4413      	add	r3, r2
 803dc0a:	60fb      	str	r3, [r7, #12]

  /* Copy and byte reverse */
  for (int i = 0; i < length; i++)
 803dc0c:	2300      	movs	r3, #0
 803dc0e:	617b      	str	r3, [r7, #20]
 803dc10:	e01a      	b.n	803dc48 <MbUpgr_ReadRegisters+0x60>
  {
    data[i * 2 + 1] = storage[i * 2 + 0];
 803dc12:	697b      	ldr	r3, [r7, #20]
 803dc14:	005b      	lsls	r3, r3, #1
 803dc16:	461a      	mov	r2, r3
 803dc18:	68fb      	ldr	r3, [r7, #12]
 803dc1a:	441a      	add	r2, r3
 803dc1c:	697b      	ldr	r3, [r7, #20]
 803dc1e:	005b      	lsls	r3, r3, #1
 803dc20:	3301      	adds	r3, #1
 803dc22:	6839      	ldr	r1, [r7, #0]
 803dc24:	440b      	add	r3, r1
 803dc26:	7812      	ldrb	r2, [r2, #0]
 803dc28:	701a      	strb	r2, [r3, #0]
    data[i * 2 + 0] = storage[i * 2 + 1];
 803dc2a:	697b      	ldr	r3, [r7, #20]
 803dc2c:	005b      	lsls	r3, r3, #1
 803dc2e:	3301      	adds	r3, #1
 803dc30:	68fa      	ldr	r2, [r7, #12]
 803dc32:	441a      	add	r2, r3
 803dc34:	697b      	ldr	r3, [r7, #20]
 803dc36:	005b      	lsls	r3, r3, #1
 803dc38:	4619      	mov	r1, r3
 803dc3a:	683b      	ldr	r3, [r7, #0]
 803dc3c:	440b      	add	r3, r1
 803dc3e:	7812      	ldrb	r2, [r2, #0]
 803dc40:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 803dc42:	697b      	ldr	r3, [r7, #20]
 803dc44:	3301      	adds	r3, #1
 803dc46:	617b      	str	r3, [r7, #20]
 803dc48:	88bb      	ldrh	r3, [r7, #4]
 803dc4a:	697a      	ldr	r2, [r7, #20]
 803dc4c:	429a      	cmp	r2, r3
 803dc4e:	dbe0      	blt.n	803dc12 <MbUpgr_ReadRegisters+0x2a>
  }

  return ret;
 803dc50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 803dc54:	4618      	mov	r0, r3
 803dc56:	371c      	adds	r7, #28
 803dc58:	46bd      	mov	sp, r7
 803dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803dc5e:	4770      	bx	lr
 803dc60:	200005e8 	.word	0x200005e8

0803dc64 <MbUpgr_HeaderClb>:
}

/* Private Functions ---------------------------------------------------------*/

__weak Status_t MbUpgr_HeaderClb(uint16_t type, uint16_t mode, uint32_t size)
{
 803dc64:	b480      	push	{r7}
 803dc66:	b085      	sub	sp, #20
 803dc68:	af00      	add	r7, sp, #0
 803dc6a:	4603      	mov	r3, r0
 803dc6c:	603a      	str	r2, [r7, #0]
 803dc6e:	80fb      	strh	r3, [r7, #6]
 803dc70:	460b      	mov	r3, r1
 803dc72:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 803dc74:	2300      	movs	r3, #0
 803dc76:	81fb      	strh	r3, [r7, #14]

  switch (mode)
 803dc78:	88bb      	ldrh	r3, [r7, #4]
 803dc7a:	2b01      	cmp	r3, #1
 803dc7c:	d002      	beq.n	803dc84 <MbUpgr_HeaderClb+0x20>
 803dc7e:	2b02      	cmp	r3, #2
 803dc80:	d002      	beq.n	803dc88 <MbUpgr_HeaderClb+0x24>
      break;
    case MB_UPGR_MODE_APPLY:
//      EventMngr_Event(ATT_SYS_RESTART_REQ, NULL);
      break;
    default:
      break;
 803dc82:	e002      	b.n	803dc8a <MbUpgr_HeaderClb+0x26>
      break;
 803dc84:	bf00      	nop
 803dc86:	e000      	b.n	803dc8a <MbUpgr_HeaderClb+0x26>
      break;
 803dc88:	bf00      	nop
  }

  return ret;
 803dc8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 803dc8e:	4618      	mov	r0, r3
 803dc90:	3714      	adds	r7, #20
 803dc92:	46bd      	mov	sp, r7
 803dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 803dc98:	4770      	bx	lr

0803dc9a <MbUpgr_WritePageClb>:


__weak Status_t MbUpgr_WritePageClb(uint32_t offset, uint8_t *data, uint16_t length)
{
 803dc9a:	b480      	push	{r7}
 803dc9c:	b087      	sub	sp, #28
 803dc9e:	af00      	add	r7, sp, #0
 803dca0:	60f8      	str	r0, [r7, #12]
 803dca2:	60b9      	str	r1, [r7, #8]
 803dca4:	4613      	mov	r3, r2
 803dca6:	80fb      	strh	r3, [r7, #6]
  Status_t ret = STATUS_OK;
 803dca8:	2300      	movs	r3, #0
 803dcaa:	82fb      	strh	r3, [r7, #22]

//  ret = System_FlashProgram((uint32_t)CONF_C_APP_BUFFER_OFFSET + offset, data, length);

  return ret;
 803dcac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 803dcb0:	4618      	mov	r0, r3
 803dcb2:	371c      	adds	r7, #28
 803dcb4:	46bd      	mov	sp, r7
 803dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 803dcba:	4770      	bx	lr

0803dcbc <MbUpgr_WriteDoneClb>:

__weak Status_t MbUpgr_WriteDoneClb(uint32_t length)
{
 803dcbc:	b480      	push	{r7}
 803dcbe:	b085      	sub	sp, #20
 803dcc0:	af00      	add	r7, sp, #0
 803dcc2:	6078      	str	r0, [r7, #4]
  Status_t ret = STATUS_OK;
 803dcc4:	2300      	movs	r3, #0
 803dcc6:	81fb      	strh	r3, [r7, #14]

  /* The very last packet, verify image */
//  ret = System_VerifyImage((uint32_t*) CONF_C_APP_BUFFER_OFFSET);

  return ret;
 803dcc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 803dccc:	4618      	mov	r0, r3
 803dcce:	3714      	adds	r7, #20
 803dcd0:	46bd      	mov	sp, r7
 803dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803dcd6:	4770      	bx	lr

0803dcd8 <MbSlave_Init>:

static void MbSlave_Rs485DirReceive(void);

/* Functions -----------------------------------------------------------------*/

Status_t MbSlave_Init(void) {
 803dcd8:	b580      	push	{r7, lr}
 803dcda:	b088      	sub	sp, #32
 803dcdc:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803dcde:	2300      	movs	r3, #0
 803dce0:	83fb      	strh	r3, [r7, #30]
	GPIO_InitTypeDef GPIO_InitStruct;

	MODBUS_CLK_ENABLE();
 803dce2:	2300      	movs	r3, #0
 803dce4:	607b      	str	r3, [r7, #4]
 803dce6:	4b25      	ldr	r3, [pc, #148]	@ (803dd7c <MbSlave_Init+0xa4>)
 803dce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803dcea:	4a24      	ldr	r2, [pc, #144]	@ (803dd7c <MbSlave_Init+0xa4>)
 803dcec:	f043 0310 	orr.w	r3, r3, #16
 803dcf0:	6453      	str	r3, [r2, #68]	@ 0x44
 803dcf2:	4b22      	ldr	r3, [pc, #136]	@ (803dd7c <MbSlave_Init+0xa4>)
 803dcf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803dcf6:	f003 0310 	and.w	r3, r3, #16
 803dcfa:	607b      	str	r3, [r7, #4]
 803dcfc:	687b      	ldr	r3, [r7, #4]
	outFram = 1;
 803dcfe:	4b20      	ldr	r3, [pc, #128]	@ (803dd80 <MbSlave_Init+0xa8>)
 803dd00:	2201      	movs	r2, #1
 803dd02:	701a      	strb	r2, [r3, #0]

	MbSlave_Rs485DirReceive();
 803dd04:	f000 fcc2 	bl	803e68c <MbSlave_Rs485DirReceive>

	/* MODBUS USART DE */
	GPIO_InitStruct.Pin = MODBUS_UART_DE_PIN;
 803dd08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 803dd0c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 803dd0e:	2301      	movs	r3, #1
 803dd10:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 803dd12:	2300      	movs	r3, #0
 803dd14:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 803dd16:	2302      	movs	r3, #2
 803dd18:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(MODBUS_UART_DE_PORT, &GPIO_InitStruct);
 803dd1a:	f107 0308 	add.w	r3, r7, #8
 803dd1e:	4619      	mov	r1, r3
 803dd20:	4818      	ldr	r0, [pc, #96]	@ (803dd84 <MbSlave_Init+0xac>)
 803dd22:	f002 fe61 	bl	80409e8 <HAL_GPIO_Init>

	/* MODBUS USART RX */
	GPIO_InitStruct.Pin = MODBUS_UART_RX_PIN;
 803dd26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803dd2a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803dd2c:	2302      	movs	r3, #2
 803dd2e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 803dd30:	2301      	movs	r3, #1
 803dd32:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 803dd34:	2302      	movs	r3, #2
 803dd36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = MODBUS_UART_ALTERNATE;
 803dd38:	2307      	movs	r3, #7
 803dd3a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MODBUS_UART_RX_PORT, &GPIO_InitStruct);
 803dd3c:	f107 0308 	add.w	r3, r7, #8
 803dd40:	4619      	mov	r1, r3
 803dd42:	4810      	ldr	r0, [pc, #64]	@ (803dd84 <MbSlave_Init+0xac>)
 803dd44:	f002 fe50 	bl	80409e8 <HAL_GPIO_Init>

	/* MODBUS USART TX */
	GPIO_InitStruct.Pin = MODBUS_UART_TX_PIN;
 803dd48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 803dd4c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803dd4e:	2302      	movs	r3, #2
 803dd50:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 803dd52:	2301      	movs	r3, #1
 803dd54:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 803dd56:	2302      	movs	r3, #2
 803dd58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = MODBUS_UART_ALTERNATE;
 803dd5a:	2307      	movs	r3, #7
 803dd5c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MODBUS_UART_TX_PORT, &GPIO_InitStruct);
 803dd5e:	f107 0308 	add.w	r3, r7, #8
 803dd62:	4619      	mov	r1, r3
 803dd64:	4807      	ldr	r0, [pc, #28]	@ (803dd84 <MbSlave_Init+0xac>)
 803dd66:	f002 fe3f 	bl	80409e8 <HAL_GPIO_Init>

	/* Initial UART settings */
	MbSlave_SettingsChanged();
 803dd6a:	f000 f80d 	bl	803dd88 <MbSlave_SettingsChanged>

	return ret;
 803dd6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 803dd72:	4618      	mov	r0, r3
 803dd74:	3720      	adds	r7, #32
 803dd76:	46bd      	mov	sp, r7
 803dd78:	bd80      	pop	{r7, pc}
 803dd7a:	bf00      	nop
 803dd7c:	40023800 	.word	0x40023800
 803dd80:	200007d6 	.word	0x200007d6
 803dd84:	40020000 	.word	0x40020000

0803dd88 <MbSlave_SettingsChanged>:

Status_t MbSlave_SettingsChanged(void) {
 803dd88:	b580      	push	{r7, lr}
 803dd8a:	b082      	sub	sp, #8
 803dd8c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803dd8e:	2300      	movs	r3, #0
 803dd90:	80fb      	strh	r3, [r7, #6]

	/* Disable interrupt */
	HAL_NVIC_DisableIRQ(MODBUS_UART_IRQ_NUMBER);
 803dd92:	2025      	movs	r0, #37	@ 0x25
 803dd94:	f001 ff83 	bl	803fc9e <HAL_NVIC_DisableIRQ>

	/* Set stop bits, parity, word length from configuration register */
	if (conf.com.mb_baud_rate < sizeof(tableSpeed) / sizeof(uint32_t)) {
 803dd98:	4b53      	ldr	r3, [pc, #332]	@ (803dee8 <MbSlave_SettingsChanged+0x160>)
 803dd9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 803dd9e:	2b04      	cmp	r3, #4
 803dda0:	d809      	bhi.n	803ddb6 <MbSlave_SettingsChanged+0x2e>
		mod.huart.Init.BaudRate = tableSpeed[conf.com.mb_baud_rate];
 803dda2:	4b51      	ldr	r3, [pc, #324]	@ (803dee8 <MbSlave_SettingsChanged+0x160>)
 803dda4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 803dda8:	461a      	mov	r2, r3
 803ddaa:	4b50      	ldr	r3, [pc, #320]	@ (803deec <MbSlave_SettingsChanged+0x164>)
 803ddac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ddb0:	4a4f      	ldr	r2, [pc, #316]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803ddb2:	6053      	str	r3, [r2, #4]
 803ddb4:	e005      	b.n	803ddc2 <MbSlave_SettingsChanged+0x3a>
	} else {
		mod.huart.Init.BaudRate = conf.com.mb_baud_rate;
 803ddb6:	4b4c      	ldr	r3, [pc, #304]	@ (803dee8 <MbSlave_SettingsChanged+0x160>)
 803ddb8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 803ddbc:	461a      	mov	r2, r3
 803ddbe:	4b4c      	ldr	r3, [pc, #304]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803ddc0:	605a      	str	r2, [r3, #4]
	}
	mod.huart.Init.StopBits = tableStopBits[conf.com.mb_stop_bits];
 803ddc2:	4b49      	ldr	r3, [pc, #292]	@ (803dee8 <MbSlave_SettingsChanged+0x160>)
 803ddc4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 803ddc8:	461a      	mov	r2, r3
 803ddca:	4b4a      	ldr	r3, [pc, #296]	@ (803def4 <MbSlave_SettingsChanged+0x16c>)
 803ddcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ddd0:	4a47      	ldr	r2, [pc, #284]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803ddd2:	60d3      	str	r3, [r2, #12]
	mod.huart.Init.Parity = tableParity[conf.com.mb_parity];
 803ddd4:	4b44      	ldr	r3, [pc, #272]	@ (803dee8 <MbSlave_SettingsChanged+0x160>)
 803ddd6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 803ddda:	461a      	mov	r2, r3
 803dddc:	4b46      	ldr	r3, [pc, #280]	@ (803def8 <MbSlave_SettingsChanged+0x170>)
 803ddde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803dde2:	4a43      	ldr	r2, [pc, #268]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803dde4:	6113      	str	r3, [r2, #16]
	mod.huart.Init.WordLength = tableLength[conf.com.mb_parity];
 803dde6:	4b40      	ldr	r3, [pc, #256]	@ (803dee8 <MbSlave_SettingsChanged+0x160>)
 803dde8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 803ddec:	461a      	mov	r2, r3
 803ddee:	4b43      	ldr	r3, [pc, #268]	@ (803defc <MbSlave_SettingsChanged+0x174>)
 803ddf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 803ddf4:	4a3e      	ldr	r2, [pc, #248]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803ddf6:	6093      	str	r3, [r2, #8]
	//baud rate change
	//mod.huart.Init.BaudRate = 19200;

	/* MODBUS USART init */
	mod.huart.Instance = MODBUS_UART_INSTANCE;
 803ddf8:	4b3d      	ldr	r3, [pc, #244]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803ddfa:	4a41      	ldr	r2, [pc, #260]	@ (803df00 <MbSlave_SettingsChanged+0x178>)
 803ddfc:	601a      	str	r2, [r3, #0]
	mod.huart.Init.Mode = UART_MODE_TX_RX;
 803ddfe:	4b3c      	ldr	r3, [pc, #240]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de00:	220c      	movs	r2, #12
 803de02:	615a      	str	r2, [r3, #20]
	mod.huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 803de04:	4b3a      	ldr	r3, [pc, #232]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de06:	2200      	movs	r2, #0
 803de08:	619a      	str	r2, [r3, #24]
	mod.huart.Init.OverSampling = UART_OVERSAMPLING_16;
 803de0a:	4b39      	ldr	r3, [pc, #228]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de0c:	2200      	movs	r2, #0
 803de0e:	61da      	str	r2, [r3, #28]
	//mod.huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	//mod.huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	HAL_UART_Init(&mod.huart);
 803de10:	4837      	ldr	r0, [pc, #220]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de12:	f004 fc45 	bl	80426a0 <HAL_UART_Init>

	MODBUS_TIM_CLK_ENABLE()
 803de16:	2300      	movs	r3, #0
 803de18:	603b      	str	r3, [r7, #0]
 803de1a:	4b3a      	ldr	r3, [pc, #232]	@ (803df04 <MbSlave_SettingsChanged+0x17c>)
 803de1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803de1e:	4a39      	ldr	r2, [pc, #228]	@ (803df04 <MbSlave_SettingsChanged+0x17c>)
 803de20:	f043 0302 	orr.w	r3, r3, #2
 803de24:	6413      	str	r3, [r2, #64]	@ 0x40
 803de26:	4b37      	ldr	r3, [pc, #220]	@ (803df04 <MbSlave_SettingsChanged+0x17c>)
 803de28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803de2a:	f003 0302 	and.w	r3, r3, #2
 803de2e:	603b      	str	r3, [r7, #0]
 803de30:	683b      	ldr	r3, [r7, #0]
	;

	/* MODBUS TIM Init */
	mod.htim.Instance = MODBUS_TIM_INSTANCE;
 803de32:	4b2f      	ldr	r3, [pc, #188]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de34:	4a34      	ldr	r2, [pc, #208]	@ (803df08 <MbSlave_SettingsChanged+0x180>)
 803de36:	649a      	str	r2, [r3, #72]	@ 0x48
	mod.htim.Init.Period = 9 * (8 + 2 + 1) * 100000 / 2
			/ mod.huart.Init.BaudRate; /* Timer period in 10 us, considering 8 data, 1 start, 2 stop bits */
 803de38:	4b2d      	ldr	r3, [pc, #180]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de3a:	685b      	ldr	r3, [r3, #4]
 803de3c:	4a33      	ldr	r2, [pc, #204]	@ (803df0c <MbSlave_SettingsChanged+0x184>)
 803de3e:	fbb2 f3f3 	udiv	r3, r2, r3
	mod.htim.Init.Period = 9 * (8 + 2 + 1) * 100000 / 2
 803de42:	4a2b      	ldr	r2, [pc, #172]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de44:	6553      	str	r3, [r2, #84]	@ 0x54
	SAT_DOWN(mod.htim.Init.Period, 175);
 803de46:	4b2a      	ldr	r3, [pc, #168]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 803de4a:	2baf      	cmp	r3, #175	@ 0xaf
 803de4c:	bf38      	it	cc
 803de4e:	23af      	movcc	r3, #175	@ 0xaf
 803de50:	4a27      	ldr	r2, [pc, #156]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de52:	6553      	str	r3, [r2, #84]	@ 0x54
	mod.htim.Init.Prescaler = (uint32_t) ((HAL_RCC_GetPCLK1Freq()) / 100000)
 803de54:	f003 fa8e 	bl	8041374 <HAL_RCC_GetPCLK1Freq>
 803de58:	4603      	mov	r3, r0
 803de5a:	095b      	lsrs	r3, r3, #5
 803de5c:	4a2c      	ldr	r2, [pc, #176]	@ (803df10 <MbSlave_SettingsChanged+0x188>)
 803de5e:	fba2 2303 	umull	r2, r3, r2, r3
 803de62:	09db      	lsrs	r3, r3, #7
			- 1; /* Timer step 10 us */
 803de64:	3b01      	subs	r3, #1
	mod.htim.Init.Prescaler = (uint32_t) ((HAL_RCC_GetPCLK1Freq()) / 100000)
 803de66:	4a22      	ldr	r2, [pc, #136]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de68:	64d3      	str	r3, [r2, #76]	@ 0x4c
	mod.htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 803de6a:	4b21      	ldr	r3, [pc, #132]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de6c:	2200      	movs	r2, #0
 803de6e:	651a      	str	r2, [r3, #80]	@ 0x50
	mod.htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 803de70:	4b1f      	ldr	r3, [pc, #124]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803de72:	2200      	movs	r2, #0
 803de74:	659a      	str	r2, [r3, #88]	@ 0x58
	HAL_TIM_Base_Init(&mod.htim);
 803de76:	4827      	ldr	r0, [pc, #156]	@ (803df14 <MbSlave_SettingsChanged+0x18c>)
 803de78:	f003 ff75 	bl	8041d66 <HAL_TIM_Base_Init>

	/* MODBUS USART interrupt Init */
	HAL_NVIC_SetPriority(MODBUS_UART_IRQ_NUMBER, PRIO_IRQ_MODBUS, 0);
 803de7c:	2200      	movs	r2, #0
 803de7e:	2103      	movs	r1, #3
 803de80:	2025      	movs	r0, #37	@ 0x25
 803de82:	f001 fee2 	bl	803fc4a <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(MODBUS_UART_IRQ_NUMBER);
 803de86:	2025      	movs	r0, #37	@ 0x25
 803de88:	f001 ff23 	bl	803fcd2 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(MODBUS_UART_IRQ_NUMBER);
 803de8c:	2025      	movs	r0, #37	@ 0x25
 803de8e:	f001 fef8 	bl	803fc82 <HAL_NVIC_EnableIRQ>

	/* MODBUS Timer interrupt Init */
	HAL_NVIC_SetPriority(MODBUS_TIM_IRQ_NUMBER, PRIO_IRQ_MODBUS, 0);
 803de92:	2200      	movs	r2, #0
 803de94:	2103      	movs	r1, #3
 803de96:	201d      	movs	r0, #29
 803de98:	f001 fed7 	bl	803fc4a <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(MODBUS_TIM_IRQ_NUMBER);
 803de9c:	201d      	movs	r0, #29
 803de9e:	f001 ff18 	bl	803fcd2 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(MODBUS_TIM_IRQ_NUMBER);
 803dea2:	201d      	movs	r0, #29
 803dea4:	f001 feed 	bl	803fc82 <HAL_NVIC_EnableIRQ>

	MbSlave_UpdateSlaveAddress();
 803dea8:	f000 f8cc 	bl	803e044 <MbSlave_UpdateSlaveAddress>

	/* default values */
	mod.frameOk = 0;
 803deac:	4b10      	ldr	r3, [pc, #64]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803deae:	2200      	movs	r2, #0
 803deb0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

	/* reset bus and wait for first packet */
	MbSlave_BusReset();
 803deb4:	f000 f8f4 	bl	803e0a0 <MbSlave_BusReset>

	/* Set initial timeout */
	mod.tick = HAL_GetTick() + conf.com.mb_timeout * 1000;
 803deb8:	f001 fb08 	bl	803f4cc <HAL_GetTick>
 803debc:	4603      	mov	r3, r0
 803debe:	4a0a      	ldr	r2, [pc, #40]	@ (803dee8 <MbSlave_SettingsChanged+0x160>)
 803dec0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 803dec4:	4611      	mov	r1, r2
 803dec6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 803deca:	fb01 f202 	mul.w	r2, r1, r2
 803dece:	4413      	add	r3, r2
 803ded0:	4a07      	ldr	r2, [pc, #28]	@ (803def0 <MbSlave_SettingsChanged+0x168>)
 803ded2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

#ifdef MODBUS_UPGRADE
	MbUpgr_Init();
 803ded6:	f7ff fdb5 	bl	803da44 <MbUpgr_Init>
#endif

	return ret;
 803deda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803dede:	4618      	mov	r0, r3
 803dee0:	3708      	adds	r7, #8
 803dee2:	46bd      	mov	sp, r7
 803dee4:	bd80      	pop	{r7, pc}
 803dee6:	bf00      	nop
 803dee8:	20000538 	.word	0x20000538
 803deec:	08043da8 	.word	0x08043da8
 803def0:	2000063c 	.word	0x2000063c
 803def4:	08043dd4 	.word	0x08043dd4
 803def8:	08043dbc 	.word	0x08043dbc
 803defc:	08043dc8 	.word	0x08043dc8
 803df00:	40011000 	.word	0x40011000
 803df04:	40023800 	.word	0x40023800
 803df08:	40000400 	.word	0x40000400
 803df0c:	004b87f0 	.word	0x004b87f0
 803df10:	0a7c5ac5 	.word	0x0a7c5ac5
 803df14:	20000684 	.word	0x20000684

0803df18 <MbSlave_Handle>:

Status_t MbSlave_Handle(void) {
 803df18:	b580      	push	{r7, lr}
 803df1a:	b082      	sub	sp, #8
 803df1c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803df1e:	2300      	movs	r3, #0
 803df20:	80fb      	strh	r3, [r7, #6]

	if (mod.frameOk) {
 803df22:	4b44      	ldr	r3, [pc, #272]	@ (803e034 <MbSlave_Handle+0x11c>)
 803df24:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 803df28:	2b00      	cmp	r3, #0
 803df2a:	d050      	beq.n	803dfce <MbSlave_Handle+0xb6>
		mod.frameOk = 0;
 803df2c:	4b41      	ldr	r3, [pc, #260]	@ (803e034 <MbSlave_Handle+0x11c>)
 803df2e:	2200      	movs	r2, #0
 803df30:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

		/* Process frame */
		MbSlave_ProcessFrame();
 803df34:	f000 f9ce 	bl	803e2d4 <MbSlave_ProcessFrame>

		/* Handle timeout */
		mod.tick = HAL_GetTick() + conf.com.mb_timeout * 1000;
 803df38:	f001 fac8 	bl	803f4cc <HAL_GetTick>
 803df3c:	4603      	mov	r3, r0
 803df3e:	4a3e      	ldr	r2, [pc, #248]	@ (803e038 <MbSlave_Handle+0x120>)
 803df40:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 803df44:	4611      	mov	r1, r2
 803df46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 803df4a:	fb01 f202 	mul.w	r2, r1, r2
 803df4e:	4413      	add	r3, r2
 803df50:	4a38      	ldr	r2, [pc, #224]	@ (803e034 <MbSlave_Handle+0x11c>)
 803df52:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
		CLEAR_BIT(conf.sys.status, STAT_BIT_MB_TIMEOUT);
 803df56:	4b38      	ldr	r3, [pc, #224]	@ (803e038 <MbSlave_Handle+0x120>)
 803df58:	689b      	ldr	r3, [r3, #8]
 803df5a:	f023 0308 	bic.w	r3, r3, #8
 803df5e:	4a36      	ldr	r2, [pc, #216]	@ (803e038 <MbSlave_Handle+0x120>)
 803df60:	6093      	str	r3, [r2, #8]

		/* Prepare and send response for unicast messages */
		if (inFrame.slaveAddr == mod.myAddress) {
 803df62:	4b36      	ldr	r3, [pc, #216]	@ (803e03c <MbSlave_Handle+0x124>)
 803df64:	781a      	ldrb	r2, [r3, #0]
 803df66:	4b33      	ldr	r3, [pc, #204]	@ (803e034 <MbSlave_Handle+0x11c>)
 803df68:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 803df6c:	429a      	cmp	r2, r3
 803df6e:	d12c      	bne.n	803dfca <MbSlave_Handle+0xb2>
			/* Compose response and send it */
			outFrame.slaveAddr = mod.myAddress;
 803df70:	4b30      	ldr	r3, [pc, #192]	@ (803e034 <MbSlave_Handle+0x11c>)
 803df72:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 803df76:	4b32      	ldr	r3, [pc, #200]	@ (803e040 <MbSlave_Handle+0x128>)
 803df78:	701a      	strb	r2, [r3, #0]
			MbSlave_CRC16(&outFrame);
 803df7a:	4831      	ldr	r0, [pc, #196]	@ (803e040 <MbSlave_Handle+0x128>)
 803df7c:	f000 fb0c 	bl	803e598 <MbSlave_CRC16>
			outFrame.data[outFrame.size] = outFrame.crc[0];
 803df80:	4b2f      	ldr	r3, [pc, #188]	@ (803e040 <MbSlave_Handle+0x128>)
 803df82:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803df86:	4619      	mov	r1, r3
 803df88:	4b2d      	ldr	r3, [pc, #180]	@ (803e040 <MbSlave_Handle+0x128>)
 803df8a:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 803df8e:	4b2c      	ldr	r3, [pc, #176]	@ (803e040 <MbSlave_Handle+0x128>)
 803df90:	440b      	add	r3, r1
 803df92:	709a      	strb	r2, [r3, #2]
			outFrame.data[outFrame.size + 1] = outFrame.crc[1];
 803df94:	4b2a      	ldr	r3, [pc, #168]	@ (803e040 <MbSlave_Handle+0x128>)
 803df96:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803df9a:	3301      	adds	r3, #1
 803df9c:	4a28      	ldr	r2, [pc, #160]	@ (803e040 <MbSlave_Handle+0x128>)
 803df9e:	f892 10ff 	ldrb.w	r1, [r2, #255]	@ 0xff
 803dfa2:	4a27      	ldr	r2, [pc, #156]	@ (803e040 <MbSlave_Handle+0x128>)
 803dfa4:	4413      	add	r3, r2
 803dfa6:	460a      	mov	r2, r1
 803dfa8:	709a      	strb	r2, [r3, #2]

			/* send packet response */
			HAL_UART_AbortReceive_IT(&mod.huart);
 803dfaa:	4822      	ldr	r0, [pc, #136]	@ (803e034 <MbSlave_Handle+0x11c>)
 803dfac:	f004 fd38 	bl	8042a20 <HAL_UART_AbortReceive_IT>
			MbSlave_Rs485DirTransmit();
 803dfb0:	f000 fb60 	bl	803e674 <MbSlave_Rs485DirTransmit>
			HAL_UART_Transmit_IT(&mod.huart, (uint8_t*) &outFrame,
					outFrame.size + MODBUS_CRC_LENGTH + MODBUS_HEADER_LENGTH);
 803dfb4:	4b22      	ldr	r3, [pc, #136]	@ (803e040 <MbSlave_Handle+0x128>)
 803dfb6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
			HAL_UART_Transmit_IT(&mod.huart, (uint8_t*) &outFrame,
 803dfba:	3304      	adds	r3, #4
 803dfbc:	b29b      	uxth	r3, r3
 803dfbe:	461a      	mov	r2, r3
 803dfc0:	491f      	ldr	r1, [pc, #124]	@ (803e040 <MbSlave_Handle+0x128>)
 803dfc2:	481c      	ldr	r0, [pc, #112]	@ (803e034 <MbSlave_Handle+0x11c>)
 803dfc4:	f004 fbbc 	bl	8042740 <HAL_UART_Transmit_IT>
 803dfc8:	e001      	b.n	803dfce <MbSlave_Handle+0xb6>
		} else {
			/* Prepare for next reception */
			MbSlave_BusReset();
 803dfca:	f000 f869 	bl	803e0a0 <MbSlave_BusReset>
		}
	}
	/* If apply was set and transmit state is ready, apply settings */
	if (conf.com.mb_apply != 0 && mod.huart.gState == HAL_UART_STATE_READY) {
 803dfce:	4b1a      	ldr	r3, [pc, #104]	@ (803e038 <MbSlave_Handle+0x120>)
 803dfd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 803dfd2:	2b00      	cmp	r3, #0
 803dfd4:	d00a      	beq.n	803dfec <MbSlave_Handle+0xd4>
 803dfd6:	4b17      	ldr	r3, [pc, #92]	@ (803e034 <MbSlave_Handle+0x11c>)
 803dfd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 803dfdc:	b2db      	uxtb	r3, r3
 803dfde:	2b20      	cmp	r3, #32
 803dfe0:	d104      	bne.n	803dfec <MbSlave_Handle+0xd4>
		conf.com.mb_apply = 0;
 803dfe2:	4b15      	ldr	r3, [pc, #84]	@ (803e038 <MbSlave_Handle+0x120>)
 803dfe4:	2200      	movs	r2, #0
 803dfe6:	87da      	strh	r2, [r3, #62]	@ 0x3e
		MbSlave_SettingsChanged();
 803dfe8:	f7ff fece 	bl	803dd88 <MbSlave_SettingsChanged>
	}
	/* Timeout management */
	if (conf.com.mb_timeout != 0) {
 803dfec:	4b12      	ldr	r3, [pc, #72]	@ (803e038 <MbSlave_Handle+0x120>)
 803dfee:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 803dff2:	2b00      	cmp	r3, #0
 803dff4:	d010      	beq.n	803e018 <MbSlave_Handle+0x100>
		/* Tick expired */
		if (TICK_EXPIRED(mod.tick)) {
 803dff6:	f001 fa69 	bl	803f4cc <HAL_GetTick>
 803dffa:	4602      	mov	r2, r0
 803dffc:	4b0d      	ldr	r3, [pc, #52]	@ (803e034 <MbSlave_Handle+0x11c>)
 803dffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 803e002:	1ad3      	subs	r3, r2, r3
 803e004:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 803e008:	4293      	cmp	r3, r2
 803e00a:	d205      	bcs.n	803e018 <MbSlave_Handle+0x100>
		SET_BIT(conf.sys.status, STAT_BIT_MB_TIMEOUT);
 803e00c:	4b0a      	ldr	r3, [pc, #40]	@ (803e038 <MbSlave_Handle+0x120>)
 803e00e:	689b      	ldr	r3, [r3, #8]
 803e010:	f043 0308 	orr.w	r3, r3, #8
 803e014:	4a08      	ldr	r2, [pc, #32]	@ (803e038 <MbSlave_Handle+0x120>)
 803e016:	6093      	str	r3, [r2, #8]
		}
	}

#ifdef MODBUS_UPGRADE
	if (mod.huart.gState == HAL_UART_STATE_READY) {
 803e018:	4b06      	ldr	r3, [pc, #24]	@ (803e034 <MbSlave_Handle+0x11c>)
 803e01a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 803e01e:	b2db      	uxtb	r3, r3
 803e020:	2b20      	cmp	r3, #32
 803e022:	d101      	bne.n	803e028 <MbSlave_Handle+0x110>
		MbUpgr_Handle();
 803e024:	f7ff fd26 	bl	803da74 <MbUpgr_Handle>
	}
#endif

	return ret;
 803e028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803e02c:	4618      	mov	r0, r3
 803e02e:	3708      	adds	r7, #8
 803e030:	46bd      	mov	sp, r7
 803e032:	bd80      	pop	{r7, pc}
 803e034:	2000063c 	.word	0x2000063c
 803e038:	20000538 	.word	0x20000538
 803e03c:	200006d4 	.word	0x200006d4
 803e040:	200007d8 	.word	0x200007d8

0803e044 <MbSlave_UpdateSlaveAddress>:
	if (huart->Instance == MODBUS_UART_INSTANCE) {
		MbSlave_BusReset();
	}
}

Status_t MbSlave_UpdateSlaveAddress(void) {
 803e044:	b480      	push	{r7}
 803e046:	b083      	sub	sp, #12
 803e048:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803e04a:	2300      	movs	r3, #0
 803e04c:	80fb      	strh	r3, [r7, #6]

	mod.myAddress = conf.com.mb_address;
 803e04e:	4b12      	ldr	r3, [pc, #72]	@ (803e098 <MbSlave_UpdateSlaveAddress+0x54>)
 803e050:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 803e052:	b2da      	uxtb	r2, r3
 803e054:	4b11      	ldr	r3, [pc, #68]	@ (803e09c <MbSlave_UpdateSlaveAddress+0x58>)
 803e056:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	SAT_DOWN(mod.myAddress, MODBUS_MIN_SLAVE_ADDR);
 803e05a:	4b10      	ldr	r3, [pc, #64]	@ (803e09c <MbSlave_UpdateSlaveAddress+0x58>)
 803e05c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 803e060:	2b00      	cmp	r3, #0
 803e062:	d003      	beq.n	803e06c <MbSlave_UpdateSlaveAddress+0x28>
 803e064:	4b0d      	ldr	r3, [pc, #52]	@ (803e09c <MbSlave_UpdateSlaveAddress+0x58>)
 803e066:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 803e06a:	e000      	b.n	803e06e <MbSlave_UpdateSlaveAddress+0x2a>
 803e06c:	2301      	movs	r3, #1
 803e06e:	4a0b      	ldr	r2, [pc, #44]	@ (803e09c <MbSlave_UpdateSlaveAddress+0x58>)
 803e070:	f882 3091 	strb.w	r3, [r2, #145]	@ 0x91
	SAT_UP(mod.myAddress, MODBUS_MAX_SLAVE_ADDR);
 803e074:	4b09      	ldr	r3, [pc, #36]	@ (803e09c <MbSlave_UpdateSlaveAddress+0x58>)
 803e076:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 803e07a:	2bf7      	cmp	r3, #247	@ 0xf7
 803e07c:	bf28      	it	cs
 803e07e:	23f7      	movcs	r3, #247	@ 0xf7
 803e080:	b2da      	uxtb	r2, r3
 803e082:	4b06      	ldr	r3, [pc, #24]	@ (803e09c <MbSlave_UpdateSlaveAddress+0x58>)
 803e084:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	return ret;
 803e088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803e08c:	4618      	mov	r0, r3
 803e08e:	370c      	adds	r7, #12
 803e090:	46bd      	mov	sp, r7
 803e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e096:	4770      	bx	lr
 803e098:	20000538 	.word	0x20000538
 803e09c:	2000063c 	.word	0x2000063c

0803e0a0 <MbSlave_BusReset>:

Status_t MbSlave_BusReset(void) {
 803e0a0:	b580      	push	{r7, lr}
 803e0a2:	b082      	sub	sp, #8
 803e0a4:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803e0a6:	2300      	movs	r3, #0
 803e0a8:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t outFram;

	/* Stop current transfer */
	HAL_UART_Abort_IT(&mod.huart);
 803e0aa:	480c      	ldr	r0, [pc, #48]	@ (803e0dc <MbSlave_BusReset+0x3c>)
 803e0ac:	f004 fba4 	bl	80427f8 <HAL_UART_Abort_IT>
	/* Read out data register for safety reasons */
	// změna outFram = mod.huart.Instance->RDR;
	outFram = mod.huart.Instance->DR;
 803e0b0:	4b0a      	ldr	r3, [pc, #40]	@ (803e0dc <MbSlave_BusReset+0x3c>)
 803e0b2:	681b      	ldr	r3, [r3, #0]
 803e0b4:	685b      	ldr	r3, [r3, #4]
 803e0b6:	b29b      	uxth	r3, r3
 803e0b8:	80bb      	strh	r3, [r7, #4]

	UNUSED(outFram);
 803e0ba:	88bb      	ldrh	r3, [r7, #4]

	/* wait for next packet */
	MbSlave_Rs485DirReceive();
 803e0bc:	f000 fae6 	bl	803e68c <MbSlave_Rs485DirReceive>
	ret = HAL_UART_Receive_IT(&mod.huart, (uint8_t*) &inFrame,
 803e0c0:	22fe      	movs	r2, #254	@ 0xfe
 803e0c2:	4907      	ldr	r1, [pc, #28]	@ (803e0e0 <MbSlave_BusReset+0x40>)
 803e0c4:	4805      	ldr	r0, [pc, #20]	@ (803e0dc <MbSlave_BusReset+0x3c>)
 803e0c6:	f004 fb71 	bl	80427ac <HAL_UART_Receive_IT>
 803e0ca:	4603      	mov	r3, r0
 803e0cc:	80fb      	strh	r3, [r7, #6]
	MODBUS_HEADER_LENGTH + MODBUS_DATA_LENGTH);

	return ret;
 803e0ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 803e0d2:	4618      	mov	r0, r3
 803e0d4:	3708      	adds	r7, #8
 803e0d6:	46bd      	mov	sp, r7
 803e0d8:	bd80      	pop	{r7, pc}
 803e0da:	bf00      	nop
 803e0dc:	2000063c 	.word	0x2000063c
 803e0e0:	200006d4 	.word	0x200006d4

0803e0e4 <USART1_IRQHandler>:

void MODBUS_UART_IRQ_HANDLER(void) {
 803e0e4:	b580      	push	{r7, lr}
 803e0e6:	af00      	add	r7, sp, #0
	/* If we received byte, restart receive timer */
	if (((mod.huart.Instance->SR & USART_SR_RXNE) != RESET)
 803e0e8:	4b0f      	ldr	r3, [pc, #60]	@ (803e128 <USART1_IRQHandler+0x44>)
 803e0ea:	681b      	ldr	r3, [r3, #0]
 803e0ec:	681b      	ldr	r3, [r3, #0]
 803e0ee:	f003 0320 	and.w	r3, r3, #32
 803e0f2:	2b00      	cmp	r3, #0
 803e0f4:	d012      	beq.n	803e11c <USART1_IRQHandler+0x38>
			&& ((mod.huart.Instance->CR1 & USART_CR1_RXNEIE) != RESET)) {
 803e0f6:	4b0c      	ldr	r3, [pc, #48]	@ (803e128 <USART1_IRQHandler+0x44>)
 803e0f8:	681b      	ldr	r3, [r3, #0]
 803e0fa:	68db      	ldr	r3, [r3, #12]
 803e0fc:	f003 0320 	and.w	r3, r3, #32
 803e100:	2b00      	cmp	r3, #0
 803e102:	d00b      	beq.n	803e11c <USART1_IRQHandler+0x38>
		/* clear timer */
		mod.htim.Instance->CNT = 0;
 803e104:	4b08      	ldr	r3, [pc, #32]	@ (803e128 <USART1_IRQHandler+0x44>)
 803e106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 803e108:	2200      	movs	r2, #0
 803e10a:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_CLEAR_IT(&mod.htim, TIM_IT_UPDATE);
 803e10c:	4b06      	ldr	r3, [pc, #24]	@ (803e128 <USART1_IRQHandler+0x44>)
 803e10e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 803e110:	f06f 0201 	mvn.w	r2, #1
 803e114:	611a      	str	r2, [r3, #16]
		/* start timer */
		HAL_TIM_Base_Start_IT(&mod.htim);
 803e116:	4805      	ldr	r0, [pc, #20]	@ (803e12c <USART1_IRQHandler+0x48>)
 803e118:	f003 fe74 	bl	8041e04 <HAL_TIM_Base_Start_IT>
	}
	HAL_UART_IRQHandler(&mod.huart);
 803e11c:	4802      	ldr	r0, [pc, #8]	@ (803e128 <USART1_IRQHandler+0x44>)
 803e11e:	f004 fd31 	bl	8042b84 <HAL_UART_IRQHandler>
}
 803e122:	bf00      	nop
 803e124:	bd80      	pop	{r7, pc}
 803e126:	bf00      	nop
 803e128:	2000063c 	.word	0x2000063c
 803e12c:	20000684 	.word	0x20000684

0803e130 <TIM3_IRQHandler>:

void MODBUS_TIM_IRQ_HANDLER(void) {
 803e130:	b580      	push	{r7, lr}
 803e132:	af00      	add	r7, sp, #0
	if (__HAL_TIM_GET_FLAG(&mod.htim, TIM_FLAG_UPDATE) != RESET) {
 803e134:	4b10      	ldr	r3, [pc, #64]	@ (803e178 <TIM3_IRQHandler+0x48>)
 803e136:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 803e138:	691b      	ldr	r3, [r3, #16]
 803e13a:	f003 0301 	and.w	r3, r3, #1
 803e13e:	2b01      	cmp	r3, #1
 803e140:	d117      	bne.n	803e172 <TIM3_IRQHandler+0x42>
		if (__HAL_TIM_GET_IT_SOURCE(&mod.htim, TIM_IT_UPDATE) != RESET) {
 803e142:	4b0d      	ldr	r3, [pc, #52]	@ (803e178 <TIM3_IRQHandler+0x48>)
 803e144:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 803e146:	68db      	ldr	r3, [r3, #12]
 803e148:	f003 0301 	and.w	r3, r3, #1
 803e14c:	2b01      	cmp	r3, #1
 803e14e:	d110      	bne.n	803e172 <TIM3_IRQHandler+0x42>
			/* Update event */
			__HAL_TIM_CLEAR_IT(&mod.htim, TIM_IT_UPDATE);
 803e150:	4b09      	ldr	r3, [pc, #36]	@ (803e178 <TIM3_IRQHandler+0x48>)
 803e152:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 803e154:	f06f 0201 	mvn.w	r2, #1
 803e158:	611a      	str	r2, [r3, #16]
			/* Stop timer */
			HAL_TIM_Base_Stop_IT(&mod.htim);
 803e15a:	4808      	ldr	r0, [pc, #32]	@ (803e17c <TIM3_IRQHandler+0x4c>)
 803e15c:	f003 fec2 	bl	8041ee4 <HAL_TIM_Base_Stop_IT>
			/* Check the frame that we need to process it */
			MbSlave_CheckFrame();
 803e160:	f000 f80e 	bl	803e180 <MbSlave_CheckFrame>
			if (mod.frameOk == 1) {
 803e164:	4b04      	ldr	r3, [pc, #16]	@ (803e178 <TIM3_IRQHandler+0x48>)
 803e166:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 803e16a:	2b01      	cmp	r3, #1
 803e16c:	d001      	beq.n	803e172 <TIM3_IRQHandler+0x42>
				/* Notify the waiting task */
			} else {
				MbSlave_BusReset();
 803e16e:	f7ff ff97 	bl	803e0a0 <MbSlave_BusReset>
			}
		}
	}
}
 803e172:	bf00      	nop
 803e174:	bd80      	pop	{r7, pc}
 803e176:	bf00      	nop
 803e178:	2000063c 	.word	0x2000063c
 803e17c:	20000684 	.word	0x20000684

0803e180 <MbSlave_CheckFrame>:

static Status_t MbSlave_CheckFrame(void) {
 803e180:	b580      	push	{r7, lr}
 803e182:	b082      	sub	sp, #8
 803e184:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803e186:	2300      	movs	r3, #0
 803e188:	80bb      	strh	r3, [r7, #4]
	uint8_t command;
	uint8_t supported = 0;
 803e18a:	2300      	movs	r3, #0
 803e18c:	71fb      	strb	r3, [r7, #7]

	/* Check address */
	if (inFrame.slaveAddr
 803e18e:	4b4f      	ldr	r3, [pc, #316]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e190:	781a      	ldrb	r2, [r3, #0]
			== mod.myAddress|| inFrame.slaveAddr == MODBUS_BROADCAST) {
 803e192:	4b4f      	ldr	r3, [pc, #316]	@ (803e2d0 <MbSlave_CheckFrame+0x150>)
 803e194:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
	if (inFrame.slaveAddr
 803e198:	429a      	cmp	r2, r3
 803e19a:	d004      	beq.n	803e1a6 <MbSlave_CheckFrame+0x26>
			== mod.myAddress|| inFrame.slaveAddr == MODBUS_BROADCAST) {
 803e19c:	4b4b      	ldr	r3, [pc, #300]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e19e:	781b      	ldrb	r3, [r3, #0]
 803e1a0:	2b00      	cmp	r3, #0
 803e1a2:	f040 808d 	bne.w	803e2c0 <MbSlave_CheckFrame+0x140>
		command = inFrame.funcCode;
 803e1a6:	4b49      	ldr	r3, [pc, #292]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e1a8:	785b      	ldrb	r3, [r3, #1]
 803e1aa:	70fb      	strb	r3, [r7, #3]
		/* Calculate size of data and check supported operation codes */
		if (command >= MB_READ_COILS && command <= MB_WRITE_SINGLE_REG) {
 803e1ac:	78fb      	ldrb	r3, [r7, #3]
 803e1ae:	2b00      	cmp	r3, #0
 803e1b0:	d009      	beq.n	803e1c6 <MbSlave_CheckFrame+0x46>
 803e1b2:	78fb      	ldrb	r3, [r7, #3]
 803e1b4:	2b06      	cmp	r3, #6
 803e1b6:	d806      	bhi.n	803e1c6 <MbSlave_CheckFrame+0x46>
			inFrame.size = 0;
 803e1b8:	4b44      	ldr	r3, [pc, #272]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e1ba:	2200      	movs	r2, #0
 803e1bc:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			supported = 1;
 803e1c0:	2301      	movs	r3, #1
 803e1c2:	71fb      	strb	r3, [r7, #7]
 803e1c4:	e04d      	b.n	803e262 <MbSlave_CheckFrame+0xe2>
		} else if (command == MB_WRITE_MULTIPLE_REGS
 803e1c6:	78fb      	ldrb	r3, [r7, #3]
 803e1c8:	2b10      	cmp	r3, #16
 803e1ca:	d002      	beq.n	803e1d2 <MbSlave_CheckFrame+0x52>
				|| command == MB_WRITE_MULTIPLE_COILS) {
 803e1cc:	78fb      	ldrb	r3, [r7, #3]
 803e1ce:	2b0f      	cmp	r3, #15
 803e1d0:	d147      	bne.n	803e262 <MbSlave_CheckFrame+0xe2>
			inFrame.size = inFrame.data[2];
 803e1d2:	4b3e      	ldr	r3, [pc, #248]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e1d4:	791b      	ldrb	r3, [r3, #4]
 803e1d6:	461a      	mov	r2, r3
 803e1d8:	4b3c      	ldr	r3, [pc, #240]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e1da:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			inFrame.size <<= 8;
 803e1de:	4b3b      	ldr	r3, [pc, #236]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e1e0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e1e4:	021b      	lsls	r3, r3, #8
 803e1e6:	b29a      	uxth	r2, r3
 803e1e8:	4b38      	ldr	r3, [pc, #224]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e1ea:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			inFrame.size |= inFrame.data[3];
 803e1ee:	4b37      	ldr	r3, [pc, #220]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e1f0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e1f4:	4a35      	ldr	r2, [pc, #212]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e1f6:	7952      	ldrb	r2, [r2, #5]
 803e1f8:	4313      	orrs	r3, r2
 803e1fa:	b29a      	uxth	r2, r3
 803e1fc:	4b33      	ldr	r3, [pc, #204]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e1fe:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100

			if (command == MB_WRITE_MULTIPLE_COILS) {
 803e202:	78fb      	ldrb	r3, [r7, #3]
 803e204:	2b0f      	cmp	r3, #15
 803e206:	d11d      	bne.n	803e244 <MbSlave_CheckFrame+0xc4>
				if (inFrame.size % 8) {
 803e208:	4b30      	ldr	r3, [pc, #192]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e20a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e20e:	f003 0307 	and.w	r3, r3, #7
 803e212:	b29b      	uxth	r3, r3
 803e214:	2b00      	cmp	r3, #0
 803e216:	d00a      	beq.n	803e22e <MbSlave_CheckFrame+0xae>
					inFrame.size = (inFrame.size / 8) + 2; /* 1 extra byte is for unaligned data, 1 byte for size */
 803e218:	4b2c      	ldr	r3, [pc, #176]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e21a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e21e:	08db      	lsrs	r3, r3, #3
 803e220:	b29b      	uxth	r3, r3
 803e222:	3302      	adds	r3, #2
 803e224:	b29a      	uxth	r2, r3
 803e226:	4b29      	ldr	r3, [pc, #164]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e228:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 803e22c:	e017      	b.n	803e25e <MbSlave_CheckFrame+0xde>
				} else {
					inFrame.size = (inFrame.size / 8) + 1; /* 1 byte for size */
 803e22e:	4b27      	ldr	r3, [pc, #156]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e230:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e234:	08db      	lsrs	r3, r3, #3
 803e236:	b29b      	uxth	r3, r3
 803e238:	3301      	adds	r3, #1
 803e23a:	b29a      	uxth	r2, r3
 803e23c:	4b23      	ldr	r3, [pc, #140]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e23e:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 803e242:	e00c      	b.n	803e25e <MbSlave_CheckFrame+0xde>
				}
			} else if (command == MB_WRITE_MULTIPLE_REGS) {
 803e244:	78fb      	ldrb	r3, [r7, #3]
 803e246:	2b10      	cmp	r3, #16
 803e248:	d109      	bne.n	803e25e <MbSlave_CheckFrame+0xde>
				inFrame.size = (inFrame.size * 2) + 1; /* registers are 16b, 1 byte for size */
 803e24a:	4b20      	ldr	r3, [pc, #128]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e24c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e250:	005b      	lsls	r3, r3, #1
 803e252:	b29b      	uxth	r3, r3
 803e254:	3301      	adds	r3, #1
 803e256:	b29a      	uxth	r2, r3
 803e258:	4b1c      	ldr	r3, [pc, #112]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e25a:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			}
			supported = 1;
 803e25e:	2301      	movs	r3, #1
 803e260:	71fb      	strb	r3, [r7, #7]
		}

		/* Add header of command to size variable */
		inFrame.size += MODBUS_MIN_PAYLOAD_LENGTH;
 803e262:	4b1a      	ldr	r3, [pc, #104]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e264:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e268:	3304      	adds	r3, #4
 803e26a:	b29a      	uxth	r2, r3
 803e26c:	4b17      	ldr	r3, [pc, #92]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e26e:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
		/* Check maximal length of modbus frame */
		if (inFrame.size < MODBUS_DATA_LENGTH - 2) // CRC must fit into received data
 803e272:	4b16      	ldr	r3, [pc, #88]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e274:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e278:	2bf9      	cmp	r3, #249	@ 0xf9
 803e27a:	d821      	bhi.n	803e2c0 <MbSlave_CheckFrame+0x140>
				{
			/* compute CRC16 from received packet */
			MbSlave_CRC16(&inFrame);
 803e27c:	4813      	ldr	r0, [pc, #76]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e27e:	f000 f98b 	bl	803e598 <MbSlave_CRC16>
			/* we have original CRC16 in received data */
			if (inFrame.crc[0] == inFrame.data[inFrame.size]
 803e282:	4b12      	ldr	r3, [pc, #72]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e284:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 803e288:	4b10      	ldr	r3, [pc, #64]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e28a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e28e:	4619      	mov	r1, r3
 803e290:	4b0e      	ldr	r3, [pc, #56]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e292:	440b      	add	r3, r1
 803e294:	789b      	ldrb	r3, [r3, #2]
 803e296:	429a      	cmp	r2, r3
 803e298:	d112      	bne.n	803e2c0 <MbSlave_CheckFrame+0x140>
					&& inFrame.crc[1] == inFrame.data[inFrame.size + 1]
 803e29a:	4b0c      	ldr	r3, [pc, #48]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e29c:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 803e2a0:	4b0a      	ldr	r3, [pc, #40]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e2a2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e2a6:	3301      	adds	r3, #1
 803e2a8:	4908      	ldr	r1, [pc, #32]	@ (803e2cc <MbSlave_CheckFrame+0x14c>)
 803e2aa:	440b      	add	r3, r1
 803e2ac:	789b      	ldrb	r3, [r3, #2]
 803e2ae:	429a      	cmp	r2, r3
 803e2b0:	d106      	bne.n	803e2c0 <MbSlave_CheckFrame+0x140>
					&& supported) {
 803e2b2:	79fb      	ldrb	r3, [r7, #7]
 803e2b4:	2b00      	cmp	r3, #0
 803e2b6:	d003      	beq.n	803e2c0 <MbSlave_CheckFrame+0x140>
				/* move to next step */
				mod.frameOk = 1;
 803e2b8:	4b05      	ldr	r3, [pc, #20]	@ (803e2d0 <MbSlave_CheckFrame+0x150>)
 803e2ba:	2201      	movs	r2, #1
 803e2bc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
			}
		}
	}

	return ret;
 803e2c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 803e2c4:	4618      	mov	r0, r3
 803e2c6:	3708      	adds	r7, #8
 803e2c8:	46bd      	mov	sp, r7
 803e2ca:	bd80      	pop	{r7, pc}
 803e2cc:	200006d4 	.word	0x200006d4
 803e2d0:	2000063c 	.word	0x2000063c

0803e2d4 <MbSlave_ProcessFrame>:

static Status_t MbSlave_ProcessFrame(void) {
 803e2d4:	b580      	push	{r7, lr}
 803e2d6:	b088      	sub	sp, #32
 803e2d8:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 803e2da:	2300      	movs	r3, #0
 803e2dc:	82fb      	strh	r3, [r7, #22]
	uint32_t i;
	uint16_t addr;
	uint16_t count;
	uint16_t size;
	uint16_t offset = 0;
 803e2de:	2300      	movs	r3, #0
 803e2e0:	833b      	strh	r3, [r7, #24]
	uint16_t val;

	/* prepare address for outframe */
	outFrame.funcCode = inFrame.funcCode;
 803e2e2:	4b85      	ldr	r3, [pc, #532]	@ (803e4f8 <MbSlave_ProcessFrame+0x224>)
 803e2e4:	785a      	ldrb	r2, [r3, #1]
 803e2e6:	4b85      	ldr	r3, [pc, #532]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e2e8:	705a      	strb	r2, [r3, #1]
	/* default size for error */
	outFrame.size = 1;
 803e2ea:	4b84      	ldr	r3, [pc, #528]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e2ec:	2201      	movs	r2, #1
 803e2ee:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	/* parse start address and count */
	addr = inFrame.data[0];
 803e2f2:	4b81      	ldr	r3, [pc, #516]	@ (803e4f8 <MbSlave_ProcessFrame+0x224>)
 803e2f4:	789b      	ldrb	r3, [r3, #2]
 803e2f6:	82bb      	strh	r3, [r7, #20]
	addr <<= 8;
 803e2f8:	8abb      	ldrh	r3, [r7, #20]
 803e2fa:	021b      	lsls	r3, r3, #8
 803e2fc:	82bb      	strh	r3, [r7, #20]
	addr |= inFrame.data[1];
 803e2fe:	4b7e      	ldr	r3, [pc, #504]	@ (803e4f8 <MbSlave_ProcessFrame+0x224>)
 803e300:	78db      	ldrb	r3, [r3, #3]
 803e302:	461a      	mov	r2, r3
 803e304:	8abb      	ldrh	r3, [r7, #20]
 803e306:	4313      	orrs	r3, r2
 803e308:	82bb      	strh	r3, [r7, #20]
	count = inFrame.data[2];
 803e30a:	4b7b      	ldr	r3, [pc, #492]	@ (803e4f8 <MbSlave_ProcessFrame+0x224>)
 803e30c:	791b      	ldrb	r3, [r3, #4]
 803e30e:	827b      	strh	r3, [r7, #18]
	count <<= 8;
 803e310:	8a7b      	ldrh	r3, [r7, #18]
 803e312:	021b      	lsls	r3, r3, #8
 803e314:	827b      	strh	r3, [r7, #18]
	count |= inFrame.data[3];
 803e316:	4b78      	ldr	r3, [pc, #480]	@ (803e4f8 <MbSlave_ProcessFrame+0x224>)
 803e318:	795b      	ldrb	r3, [r3, #5]
 803e31a:	461a      	mov	r2, r3
 803e31c:	8a7b      	ldrh	r3, [r7, #18]
 803e31e:	4313      	orrs	r3, r2
 803e320:	827b      	strh	r3, [r7, #18]

	switch (inFrame.funcCode) {
 803e322:	4b75      	ldr	r3, [pc, #468]	@ (803e4f8 <MbSlave_ProcessFrame+0x224>)
 803e324:	785b      	ldrb	r3, [r3, #1]
 803e326:	2b10      	cmp	r3, #16
 803e328:	d010      	beq.n	803e34c <MbSlave_ProcessFrame+0x78>
 803e32a:	2b10      	cmp	r3, #16
 803e32c:	dc13      	bgt.n	803e356 <MbSlave_ProcessFrame+0x82>
 803e32e:	2b03      	cmp	r3, #3
 803e330:	d002      	beq.n	803e338 <MbSlave_ProcessFrame+0x64>
 803e332:	2b04      	cmp	r3, #4
 803e334:	d005      	beq.n	803e342 <MbSlave_ProcessFrame+0x6e>
 803e336:	e00e      	b.n	803e356 <MbSlave_ProcessFrame+0x82>
	case MB_READ_HOLDING_REGS:
		offset = MODBUS_OFFSET_HOLDING;
 803e338:	2300      	movs	r3, #0
 803e33a:	833b      	strh	r3, [r7, #24]
		size = MB_HOLD_LAST;
 803e33c:	2365      	movs	r3, #101	@ 0x65
 803e33e:	837b      	strh	r3, [r7, #26]
		break;
 803e340:	e015      	b.n	803e36e <MbSlave_ProcessFrame+0x9a>
	case MB_READ_INPUT_REGS:
		offset = MODBUS_OFFSET_INPUT;
 803e342:	2300      	movs	r3, #0
 803e344:	833b      	strh	r3, [r7, #24]
		size = MB_INPUT_LAST;
 803e346:	2318      	movs	r3, #24
 803e348:	837b      	strh	r3, [r7, #26]
		break;
 803e34a:	e010      	b.n	803e36e <MbSlave_ProcessFrame+0x9a>
	case MB_WRITE_MULTIPLE_REGS:
		offset = MODBUS_OFFSET_HOLDING;
 803e34c:	2300      	movs	r3, #0
 803e34e:	833b      	strh	r3, [r7, #24]
		size = MB_HOLD_LAST;
 803e350:	2365      	movs	r3, #101	@ 0x65
 803e352:	837b      	strh	r3, [r7, #26]
		break;
 803e354:	e00b      	b.n	803e36e <MbSlave_ProcessFrame+0x9a>
	default:
		/* prepare exception */
		size = 0;
 803e356:	2300      	movs	r3, #0
 803e358:	837b      	strh	r3, [r7, #26]
		outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 803e35a:	4b67      	ldr	r3, [pc, #412]	@ (803e4f8 <MbSlave_ProcessFrame+0x224>)
 803e35c:	785b      	ldrb	r3, [r3, #1]
 803e35e:	3b80      	subs	r3, #128	@ 0x80
 803e360:	b2da      	uxtb	r2, r3
 803e362:	4b66      	ldr	r3, [pc, #408]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e364:	705a      	strb	r2, [r3, #1]
		outFrame.data[0] = MODBUS_EXCEPT_INVALID_COMMAND; /* invalid function code */
 803e366:	4b65      	ldr	r3, [pc, #404]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e368:	2201      	movs	r2, #1
 803e36a:	709a      	strb	r2, [r3, #2]
		break;
 803e36c:	bf00      	nop
	}

	/* some value checking */
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK
 803e36e:	4b63      	ldr	r3, [pc, #396]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e370:	785b      	ldrb	r3, [r3, #1]
 803e372:	b25b      	sxtb	r3, r3
 803e374:	2b00      	cmp	r3, #0
 803e376:	db0e      	blt.n	803e396 <MbSlave_ProcessFrame+0xc2>
			&& (count < 1 || count > 0x7b)) {
 803e378:	8a7b      	ldrh	r3, [r7, #18]
 803e37a:	2b00      	cmp	r3, #0
 803e37c:	d002      	beq.n	803e384 <MbSlave_ProcessFrame+0xb0>
 803e37e:	8a7b      	ldrh	r3, [r7, #18]
 803e380:	2b7b      	cmp	r3, #123	@ 0x7b
 803e382:	d908      	bls.n	803e396 <MbSlave_ProcessFrame+0xc2>
		outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 803e384:	4b5c      	ldr	r3, [pc, #368]	@ (803e4f8 <MbSlave_ProcessFrame+0x224>)
 803e386:	785b      	ldrb	r3, [r3, #1]
 803e388:	3b80      	subs	r3, #128	@ 0x80
 803e38a:	b2da      	uxtb	r2, r3
 803e38c:	4b5b      	ldr	r3, [pc, #364]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e38e:	705a      	strb	r2, [r3, #1]
		outFrame.data[0] = MODBUS_EXCEPT_INVALID_SIZE; /* invalid size/value */
 803e390:	4b5a      	ldr	r3, [pc, #360]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e392:	2203      	movs	r2, #3
 803e394:	709a      	strb	r2, [r3, #2]
	}

	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK
 803e396:	4b59      	ldr	r3, [pc, #356]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e398:	785b      	ldrb	r3, [r3, #1]
 803e39a:	b25b      	sxtb	r3, r3
 803e39c:	2b00      	cmp	r3, #0
 803e39e:	db26      	blt.n	803e3ee <MbSlave_ProcessFrame+0x11a>
			&& (addr > (offset + size) || (addr) < offset
 803e3a0:	8aba      	ldrh	r2, [r7, #20]
 803e3a2:	8b39      	ldrh	r1, [r7, #24]
 803e3a4:	8b7b      	ldrh	r3, [r7, #26]
 803e3a6:	440b      	add	r3, r1
 803e3a8:	429a      	cmp	r2, r3
 803e3aa:	dc0c      	bgt.n	803e3c6 <MbSlave_ProcessFrame+0xf2>
 803e3ac:	8aba      	ldrh	r2, [r7, #20]
 803e3ae:	8b3b      	ldrh	r3, [r7, #24]
 803e3b0:	429a      	cmp	r2, r3
 803e3b2:	d308      	bcc.n	803e3c6 <MbSlave_ProcessFrame+0xf2>
					|| (addr + count) > (offset + size + 1))) {
 803e3b4:	8aba      	ldrh	r2, [r7, #20]
 803e3b6:	8a7b      	ldrh	r3, [r7, #18]
 803e3b8:	441a      	add	r2, r3
 803e3ba:	8b39      	ldrh	r1, [r7, #24]
 803e3bc:	8b7b      	ldrh	r3, [r7, #26]
 803e3be:	440b      	add	r3, r1
 803e3c0:	3301      	adds	r3, #1
 803e3c2:	429a      	cmp	r2, r3
 803e3c4:	dd13      	ble.n	803e3ee <MbSlave_ProcessFrame+0x11a>
#ifdef MODBUS_UPGRADE
		if (addr < MB_UPGR_BASE_ADDRESS
 803e3c6:	8abb      	ldrh	r3, [r7, #20]
 803e3c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 803e3cc:	d306      	bcc.n	803e3dc <MbSlave_ProcessFrame+0x108>
				|| addr + count > MB_UPGR_END_ADDRESS + 1)
 803e3ce:	8aba      	ldrh	r2, [r7, #20]
 803e3d0:	8a7b      	ldrh	r3, [r7, #18]
 803e3d2:	4413      	add	r3, r2
 803e3d4:	f240 4212 	movw	r2, #1042	@ 0x412
 803e3d8:	4293      	cmp	r3, r2
 803e3da:	dd08      	ble.n	803e3ee <MbSlave_ProcessFrame+0x11a>
#endif
						{
			outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 803e3dc:	4b46      	ldr	r3, [pc, #280]	@ (803e4f8 <MbSlave_ProcessFrame+0x224>)
 803e3de:	785b      	ldrb	r3, [r3, #1]
 803e3e0:	3b80      	subs	r3, #128	@ 0x80
 803e3e2:	b2da      	uxtb	r2, r3
 803e3e4:	4b45      	ldr	r3, [pc, #276]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e3e6:	705a      	strb	r2, [r3, #1]
			outFrame.data[0] = MODBUS_EXCEPT_INVALID_ADDRESS; /* invalid address */
 803e3e8:	4b44      	ldr	r3, [pc, #272]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e3ea:	2202      	movs	r2, #2
 803e3ec:	709a      	strb	r2, [r3, #2]
		}
	}

	/* it looks ok so far */
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK) {
 803e3ee:	4b43      	ldr	r3, [pc, #268]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e3f0:	785b      	ldrb	r3, [r3, #1]
 803e3f2:	b25b      	sxtb	r3, r3
 803e3f4:	2b00      	cmp	r3, #0
 803e3f6:	f2c0 80c5 	blt.w	803e584 <MbSlave_ProcessFrame+0x2b0>
		/* Subtract offset from address */
		addr -= offset;
 803e3fa:	8aba      	ldrh	r2, [r7, #20]
 803e3fc:	8b3b      	ldrh	r3, [r7, #24]
 803e3fe:	1ad3      	subs	r3, r2, r3
 803e400:	82bb      	strh	r3, [r7, #20]

		/* do the register stuff */
		switch (inFrame.funcCode) {
 803e402:	4b3d      	ldr	r3, [pc, #244]	@ (803e4f8 <MbSlave_ProcessFrame+0x224>)
 803e404:	785b      	ldrb	r3, [r3, #1]
 803e406:	2b10      	cmp	r3, #16
 803e408:	d064      	beq.n	803e4d4 <MbSlave_ProcessFrame+0x200>
 803e40a:	2b10      	cmp	r3, #16
 803e40c:	f300 80ba 	bgt.w	803e584 <MbSlave_ProcessFrame+0x2b0>
 803e410:	2b03      	cmp	r3, #3
 803e412:	d002      	beq.n	803e41a <MbSlave_ProcessFrame+0x146>
 803e414:	2b04      	cmp	r3, #4
 803e416:	d034      	beq.n	803e482 <MbSlave_ProcessFrame+0x1ae>
 803e418:	e0b4      	b.n	803e584 <MbSlave_ProcessFrame+0x2b0>
		case MB_READ_HOLDING_REGS:
			outFrame.data[0] = count * 2;
 803e41a:	8a7b      	ldrh	r3, [r7, #18]
 803e41c:	b2db      	uxtb	r3, r3
 803e41e:	005b      	lsls	r3, r3, #1
 803e420:	b2da      	uxtb	r2, r3
 803e422:	4b36      	ldr	r3, [pc, #216]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e424:	709a      	strb	r2, [r3, #2]
			outFrame.size = outFrame.data[0] + 1;
 803e426:	4b35      	ldr	r3, [pc, #212]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e428:	789b      	ldrb	r3, [r3, #2]
 803e42a:	3301      	adds	r3, #1
 803e42c:	b29a      	uxth	r2, r3
 803e42e:	4b33      	ldr	r3, [pc, #204]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e430:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
#ifdef MODBUS_UPGRADE
			if (addr >= MB_UPGR_BASE_ADDRESS) {
 803e434:	8abb      	ldrh	r3, [r7, #20]
 803e436:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 803e43a:	d306      	bcc.n	803e44a <MbSlave_ProcessFrame+0x176>
				MbUpgr_ReadRegisters(addr, count, outFrame.data + 1);
 803e43c:	4a30      	ldr	r2, [pc, #192]	@ (803e500 <MbSlave_ProcessFrame+0x22c>)
 803e43e:	8a79      	ldrh	r1, [r7, #18]
 803e440:	8abb      	ldrh	r3, [r7, #20]
 803e442:	4618      	mov	r0, r3
 803e444:	f7ff fbd0 	bl	803dbe8 <MbUpgr_ReadRegisters>
				for (i = 0; i < count; i++) {
					MbRtu_ReadHoldingRegCallback(addr + i, &val);
					memcpy((outFrame.data + i * 2 + 1), &val, 2);
				}
			}
			break;
 803e448:	e09c      	b.n	803e584 <MbSlave_ProcessFrame+0x2b0>
				for (i = 0; i < count; i++) {
 803e44a:	2300      	movs	r3, #0
 803e44c:	61fb      	str	r3, [r7, #28]
 803e44e:	e013      	b.n	803e478 <MbSlave_ProcessFrame+0x1a4>
					MbRtu_ReadHoldingRegCallback(addr + i, &val);
 803e450:	69fb      	ldr	r3, [r7, #28]
 803e452:	b29a      	uxth	r2, r3
 803e454:	8abb      	ldrh	r3, [r7, #20]
 803e456:	4413      	add	r3, r2
 803e458:	b29b      	uxth	r3, r3
 803e45a:	1dba      	adds	r2, r7, #6
 803e45c:	4611      	mov	r1, r2
 803e45e:	4618      	mov	r0, r3
 803e460:	f7ff f9be 	bl	803d7e0 <MbRtu_ReadHoldingRegCallback>
					memcpy((outFrame.data + i * 2 + 1), &val, 2);
 803e464:	69fb      	ldr	r3, [r7, #28]
 803e466:	005b      	lsls	r3, r3, #1
 803e468:	3301      	adds	r3, #1
 803e46a:	4a26      	ldr	r2, [pc, #152]	@ (803e504 <MbSlave_ProcessFrame+0x230>)
 803e46c:	4413      	add	r3, r2
 803e46e:	88fa      	ldrh	r2, [r7, #6]
 803e470:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < count; i++) {
 803e472:	69fb      	ldr	r3, [r7, #28]
 803e474:	3301      	adds	r3, #1
 803e476:	61fb      	str	r3, [r7, #28]
 803e478:	8a7b      	ldrh	r3, [r7, #18]
 803e47a:	69fa      	ldr	r2, [r7, #28]
 803e47c:	429a      	cmp	r2, r3
 803e47e:	d3e7      	bcc.n	803e450 <MbSlave_ProcessFrame+0x17c>
			break;
 803e480:	e080      	b.n	803e584 <MbSlave_ProcessFrame+0x2b0>

		case MB_READ_INPUT_REGS:
			outFrame.data[0] = count * 2;
 803e482:	8a7b      	ldrh	r3, [r7, #18]
 803e484:	b2db      	uxtb	r3, r3
 803e486:	005b      	lsls	r3, r3, #1
 803e488:	b2da      	uxtb	r2, r3
 803e48a:	4b1c      	ldr	r3, [pc, #112]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e48c:	709a      	strb	r2, [r3, #2]
			outFrame.size = outFrame.data[0] + 1;
 803e48e:	4b1b      	ldr	r3, [pc, #108]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e490:	789b      	ldrb	r3, [r3, #2]
 803e492:	3301      	adds	r3, #1
 803e494:	b29a      	uxth	r2, r3
 803e496:	4b19      	ldr	r3, [pc, #100]	@ (803e4fc <MbSlave_ProcessFrame+0x228>)
 803e498:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			for (i = 0; i < count; i++) {
 803e49c:	2300      	movs	r3, #0
 803e49e:	61fb      	str	r3, [r7, #28]
 803e4a0:	e013      	b.n	803e4ca <MbSlave_ProcessFrame+0x1f6>
				MbRtu_ReadInputRegCallback(addr + i, &val);
 803e4a2:	69fb      	ldr	r3, [r7, #28]
 803e4a4:	b29a      	uxth	r2, r3
 803e4a6:	8abb      	ldrh	r3, [r7, #20]
 803e4a8:	4413      	add	r3, r2
 803e4aa:	b29b      	uxth	r3, r3
 803e4ac:	1dba      	adds	r2, r7, #6
 803e4ae:	4611      	mov	r1, r2
 803e4b0:	4618      	mov	r0, r3
 803e4b2:	f7ff f8a1 	bl	803d5f8 <MbRtu_ReadInputRegCallback>
				memcpy((outFrame.data + i * 2 + 1), &val, 2);
 803e4b6:	69fb      	ldr	r3, [r7, #28]
 803e4b8:	005b      	lsls	r3, r3, #1
 803e4ba:	3301      	adds	r3, #1
 803e4bc:	4a11      	ldr	r2, [pc, #68]	@ (803e504 <MbSlave_ProcessFrame+0x230>)
 803e4be:	4413      	add	r3, r2
 803e4c0:	88fa      	ldrh	r2, [r7, #6]
 803e4c2:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < count; i++) {
 803e4c4:	69fb      	ldr	r3, [r7, #28]
 803e4c6:	3301      	adds	r3, #1
 803e4c8:	61fb      	str	r3, [r7, #28]
 803e4ca:	8a7b      	ldrh	r3, [r7, #18]
 803e4cc:	69fa      	ldr	r2, [r7, #28]
 803e4ce:	429a      	cmp	r2, r3
 803e4d0:	d3e7      	bcc.n	803e4a2 <MbSlave_ProcessFrame+0x1ce>
			}

			break;
 803e4d2:	e057      	b.n	803e584 <MbSlave_ProcessFrame+0x2b0>

		case MB_WRITE_MULTIPLE_REGS:
			size = addr + count;
 803e4d4:	8aba      	ldrh	r2, [r7, #20]
 803e4d6:	8a7b      	ldrh	r3, [r7, #18]
 803e4d8:	4413      	add	r3, r2
 803e4da:	837b      	strh	r3, [r7, #26]
#ifdef MODBUS_UPGRADE
			if (addr >= MB_UPGR_BASE_ADDRESS) {
 803e4dc:	8abb      	ldrh	r3, [r7, #20]
 803e4de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 803e4e2:	d306      	bcc.n	803e4f2 <MbSlave_ProcessFrame+0x21e>
				MbUpgr_WriteRegisters(addr, count, inFrame.data + 5);
 803e4e4:	4a08      	ldr	r2, [pc, #32]	@ (803e508 <MbSlave_ProcessFrame+0x234>)
 803e4e6:	8a79      	ldrh	r1, [r7, #18]
 803e4e8:	8abb      	ldrh	r3, [r7, #20]
 803e4ea:	4618      	mov	r0, r3
 803e4ec:	f7ff fb36 	bl	803db5c <MbUpgr_WriteRegisters>
 803e4f0:	e02b      	b.n	803e54a <MbSlave_ProcessFrame+0x276>
			} else
#endif
			{
				for (i = 0; i < count; i++) {
 803e4f2:	2300      	movs	r3, #0
 803e4f4:	61fb      	str	r3, [r7, #28]
 803e4f6:	e024      	b.n	803e542 <MbSlave_ProcessFrame+0x26e>
 803e4f8:	200006d4 	.word	0x200006d4
 803e4fc:	200007d8 	.word	0x200007d8
 803e500:	200007db 	.word	0x200007db
 803e504:	200007da 	.word	0x200007da
 803e508:	200006db 	.word	0x200006db
					memcpy(&val,
							(inFrame.data + i * 2 + 1
 803e50c:	69fb      	ldr	r3, [r7, #28]
 803e50e:	005b      	lsls	r3, r3, #1
									+ MODBUS_MIN_PAYLOAD_LENGTH), 2);
 803e510:	3305      	adds	r3, #5
					memcpy(&val,
 803e512:	4a1f      	ldr	r2, [pc, #124]	@ (803e590 <MbSlave_ProcessFrame+0x2bc>)
 803e514:	4413      	add	r3, r2
 803e516:	881b      	ldrh	r3, [r3, #0]
 803e518:	b29b      	uxth	r3, r3
 803e51a:	80fb      	strh	r3, [r7, #6]
					MbRtu_WriteHoldingRegCallback(addr + i, __REV16(val));
 803e51c:	69fb      	ldr	r3, [r7, #28]
 803e51e:	b29a      	uxth	r2, r3
 803e520:	8abb      	ldrh	r3, [r7, #20]
 803e522:	4413      	add	r3, r2
 803e524:	b29a      	uxth	r2, r3
 803e526:	88fb      	ldrh	r3, [r7, #6]
 803e528:	60fb      	str	r3, [r7, #12]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 803e52a:	68fb      	ldr	r3, [r7, #12]
 803e52c:	ba5b      	rev16	r3, r3
 803e52e:	60bb      	str	r3, [r7, #8]
  return result;
 803e530:	68bb      	ldr	r3, [r7, #8]
 803e532:	b29b      	uxth	r3, r3
 803e534:	4619      	mov	r1, r3
 803e536:	4610      	mov	r0, r2
 803e538:	f7ff f9e0 	bl	803d8fc <MbRtu_WriteHoldingRegCallback>
				for (i = 0; i < count; i++) {
 803e53c:	69fb      	ldr	r3, [r7, #28]
 803e53e:	3301      	adds	r3, #1
 803e540:	61fb      	str	r3, [r7, #28]
 803e542:	8a7b      	ldrh	r3, [r7, #18]
 803e544:	69fa      	ldr	r2, [r7, #28]
 803e546:	429a      	cmp	r2, r3
 803e548:	d3e0      	bcc.n	803e50c <MbSlave_ProcessFrame+0x238>
				}
			}

			addr += offset;
 803e54a:	8aba      	ldrh	r2, [r7, #20]
 803e54c:	8b3b      	ldrh	r3, [r7, #24]
 803e54e:	4413      	add	r3, r2
 803e550:	82bb      	strh	r3, [r7, #20]
			outFrame.data[0] = (addr >> 8) & 0xff;
 803e552:	8abb      	ldrh	r3, [r7, #20]
 803e554:	0a1b      	lsrs	r3, r3, #8
 803e556:	b29b      	uxth	r3, r3
 803e558:	b2da      	uxtb	r2, r3
 803e55a:	4b0e      	ldr	r3, [pc, #56]	@ (803e594 <MbSlave_ProcessFrame+0x2c0>)
 803e55c:	709a      	strb	r2, [r3, #2]
			outFrame.data[1] = addr & 0xff;
 803e55e:	8abb      	ldrh	r3, [r7, #20]
 803e560:	b2da      	uxtb	r2, r3
 803e562:	4b0c      	ldr	r3, [pc, #48]	@ (803e594 <MbSlave_ProcessFrame+0x2c0>)
 803e564:	70da      	strb	r2, [r3, #3]
			outFrame.data[2] = (count >> 8) & 0xff;
 803e566:	8a7b      	ldrh	r3, [r7, #18]
 803e568:	0a1b      	lsrs	r3, r3, #8
 803e56a:	b29b      	uxth	r3, r3
 803e56c:	b2da      	uxtb	r2, r3
 803e56e:	4b09      	ldr	r3, [pc, #36]	@ (803e594 <MbSlave_ProcessFrame+0x2c0>)
 803e570:	711a      	strb	r2, [r3, #4]
			outFrame.data[3] = count & 0xff;
 803e572:	8a7b      	ldrh	r3, [r7, #18]
 803e574:	b2da      	uxtb	r2, r3
 803e576:	4b07      	ldr	r3, [pc, #28]	@ (803e594 <MbSlave_ProcessFrame+0x2c0>)
 803e578:	715a      	strb	r2, [r3, #5]
			outFrame.size = 4;
 803e57a:	4b06      	ldr	r3, [pc, #24]	@ (803e594 <MbSlave_ProcessFrame+0x2c0>)
 803e57c:	2204      	movs	r2, #4
 803e57e:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			break;
 803e582:	bf00      	nop
		}
	}

	return ret;
 803e584:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 803e588:	4618      	mov	r0, r3
 803e58a:	3720      	adds	r7, #32
 803e58c:	46bd      	mov	sp, r7
 803e58e:	bd80      	pop	{r7, pc}
 803e590:	200006d6 	.word	0x200006d6
 803e594:	200007d8 	.word	0x200007d8

0803e598 <MbSlave_CRC16>:
 * Computation of CRC16 using pre-computed tables.
 *
 * @param frame - data frame
 * @return Status - standard status code (0 - OK)
 */
static Status_t MbSlave_CRC16(MbSlave_Frame_t *frame) {
 803e598:	b480      	push	{r7}
 803e59a:	b085      	sub	sp, #20
 803e59c:	af00      	add	r7, sp, #0
 803e59e:	6078      	str	r0, [r7, #4]
	uint8_t index;
	frame->crc[0] = 0xFF;
 803e5a0:	687b      	ldr	r3, [r7, #4]
 803e5a2:	22ff      	movs	r2, #255	@ 0xff
 803e5a4:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	frame->crc[1] = 0xFF;
 803e5a8:	687b      	ldr	r3, [r7, #4]
 803e5aa:	22ff      	movs	r2, #255	@ 0xff
 803e5ac:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	uint16_t i;

	/* calculate the CRC */
	index = frame->crc[0] ^ frame->slaveAddr;
 803e5b0:	687b      	ldr	r3, [r7, #4]
 803e5b2:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 803e5b6:	687b      	ldr	r3, [r7, #4]
 803e5b8:	781b      	ldrb	r3, [r3, #0]
 803e5ba:	4053      	eors	r3, r2
 803e5bc:	737b      	strb	r3, [r7, #13]
	frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 803e5be:	687b      	ldr	r3, [r7, #4]
 803e5c0:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 803e5c4:	7b7b      	ldrb	r3, [r7, #13]
 803e5c6:	4929      	ldr	r1, [pc, #164]	@ (803e66c <MbSlave_CRC16+0xd4>)
 803e5c8:	5ccb      	ldrb	r3, [r1, r3]
 803e5ca:	4053      	eors	r3, r2
 803e5cc:	b2da      	uxtb	r2, r3
 803e5ce:	687b      	ldr	r3, [r7, #4]
 803e5d0:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	frame->crc[1] = tableCrcLo[index];
 803e5d4:	7b7b      	ldrb	r3, [r7, #13]
 803e5d6:	4a26      	ldr	r2, [pc, #152]	@ (803e670 <MbSlave_CRC16+0xd8>)
 803e5d8:	5cd2      	ldrb	r2, [r2, r3]
 803e5da:	687b      	ldr	r3, [r7, #4]
 803e5dc:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	index = frame->crc[0] ^ frame->funcCode;
 803e5e0:	687b      	ldr	r3, [r7, #4]
 803e5e2:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 803e5e6:	687b      	ldr	r3, [r7, #4]
 803e5e8:	785b      	ldrb	r3, [r3, #1]
 803e5ea:	4053      	eors	r3, r2
 803e5ec:	737b      	strb	r3, [r7, #13]
	frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 803e5ee:	687b      	ldr	r3, [r7, #4]
 803e5f0:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 803e5f4:	7b7b      	ldrb	r3, [r7, #13]
 803e5f6:	491d      	ldr	r1, [pc, #116]	@ (803e66c <MbSlave_CRC16+0xd4>)
 803e5f8:	5ccb      	ldrb	r3, [r1, r3]
 803e5fa:	4053      	eors	r3, r2
 803e5fc:	b2da      	uxtb	r2, r3
 803e5fe:	687b      	ldr	r3, [r7, #4]
 803e600:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	frame->crc[1] = tableCrcLo[index];
 803e604:	7b7b      	ldrb	r3, [r7, #13]
 803e606:	4a1a      	ldr	r2, [pc, #104]	@ (803e670 <MbSlave_CRC16+0xd8>)
 803e608:	5cd2      	ldrb	r2, [r2, r3]
 803e60a:	687b      	ldr	r3, [r7, #4]
 803e60c:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

	for (i = 0; i < frame->size; i++) {
 803e610:	2300      	movs	r3, #0
 803e612:	81fb      	strh	r3, [r7, #14]
 803e614:	e01c      	b.n	803e650 <MbSlave_CRC16+0xb8>
		index = frame->crc[0] ^ frame->data[i];
 803e616:	687b      	ldr	r3, [r7, #4]
 803e618:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 803e61c:	89fb      	ldrh	r3, [r7, #14]
 803e61e:	6879      	ldr	r1, [r7, #4]
 803e620:	440b      	add	r3, r1
 803e622:	789b      	ldrb	r3, [r3, #2]
 803e624:	4053      	eors	r3, r2
 803e626:	737b      	strb	r3, [r7, #13]
		frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 803e628:	687b      	ldr	r3, [r7, #4]
 803e62a:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 803e62e:	7b7b      	ldrb	r3, [r7, #13]
 803e630:	490e      	ldr	r1, [pc, #56]	@ (803e66c <MbSlave_CRC16+0xd4>)
 803e632:	5ccb      	ldrb	r3, [r1, r3]
 803e634:	4053      	eors	r3, r2
 803e636:	b2da      	uxtb	r2, r3
 803e638:	687b      	ldr	r3, [r7, #4]
 803e63a:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		frame->crc[1] = tableCrcLo[index];
 803e63e:	7b7b      	ldrb	r3, [r7, #13]
 803e640:	4a0b      	ldr	r2, [pc, #44]	@ (803e670 <MbSlave_CRC16+0xd8>)
 803e642:	5cd2      	ldrb	r2, [r2, r3]
 803e644:	687b      	ldr	r3, [r7, #4]
 803e646:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	for (i = 0; i < frame->size; i++) {
 803e64a:	89fb      	ldrh	r3, [r7, #14]
 803e64c:	3301      	adds	r3, #1
 803e64e:	81fb      	strh	r3, [r7, #14]
 803e650:	687b      	ldr	r3, [r7, #4]
 803e652:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 803e656:	89fa      	ldrh	r2, [r7, #14]
 803e658:	429a      	cmp	r2, r3
 803e65a:	d3dc      	bcc.n	803e616 <MbSlave_CRC16+0x7e>
	}

	return STATUS_OK;
 803e65c:	2300      	movs	r3, #0
}
 803e65e:	4618      	mov	r0, r3
 803e660:	3714      	adds	r7, #20
 803e662:	46bd      	mov	sp, r7
 803e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 803e668:	4770      	bx	lr
 803e66a:	bf00      	nop
 803e66c:	0803c1c4 	.word	0x0803c1c4
 803e670:	08043ca8 	.word	0x08043ca8

0803e674 <MbSlave_Rs485DirTransmit>:

static void MbSlave_Rs485DirTransmit(void) {
 803e674:	b580      	push	{r7, lr}
 803e676:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MODBUS_UART_DE_PORT, MODBUS_UART_DE_PIN, GPIO_PIN_SET);
 803e678:	2201      	movs	r2, #1
 803e67a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 803e67e:	4802      	ldr	r0, [pc, #8]	@ (803e688 <MbSlave_Rs485DirTransmit+0x14>)
 803e680:	f002 fb46 	bl	8040d10 <HAL_GPIO_WritePin>
}
 803e684:	bf00      	nop
 803e686:	bd80      	pop	{r7, pc}
 803e688:	40020000 	.word	0x40020000

0803e68c <MbSlave_Rs485DirReceive>:

static void MbSlave_Rs485DirReceive(void) {
 803e68c:	b580      	push	{r7, lr}
 803e68e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MODBUS_UART_DE_PORT, MODBUS_UART_DE_PIN, GPIO_PIN_RESET);
 803e690:	2200      	movs	r2, #0
 803e692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 803e696:	4802      	ldr	r0, [pc, #8]	@ (803e6a0 <MbSlave_Rs485DirReceive+0x14>)
 803e698:	f002 fb3a 	bl	8040d10 <HAL_GPIO_WritePin>
}
 803e69c:	bf00      	nop
 803e69e:	bd80      	pop	{r7, pc}
 803e6a0:	40020000 	.word	0x40020000

0803e6a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 803e6a4:	b580      	push	{r7, lr}
 803e6a6:	b084      	sub	sp, #16
 803e6a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    Status_t ret = STATUS_OK;
 803e6aa:	2300      	movs	r3, #0
 803e6ac:	81fb      	strh	r3, [r7, #14]
    uint32_t tick_med = 0;
 803e6ae:	2300      	movs	r3, #0
 803e6b0:	60bb      	str	r3, [r7, #8]
    uint32_t tick_slow = 0;
 803e6b2:	2300      	movs	r3, #0
 803e6b4:	607b      	str	r3, [r7, #4]
    uint32_t start = 0;
 803e6b6:	2300      	movs	r3, #0
 803e6b8:	603b      	str	r3, [r7, #0]

    /* Remap reset vector and enable interrupts */
    System_RemapApplicationVector();
 803e6ba:	f7fe ff11 	bl	803d4e0 <System_RemapApplicationVector>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 803e6be:	b662      	cpsie	i
}
 803e6c0:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 803e6c2:	f000 fe9d 	bl	803f400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 803e6c6:	f000 f8cb 	bl	803e860 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
    MX_USART1_UART_Init();
 803e6ca:	f000 fa99 	bl	803ec00 <MX_USART1_UART_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 803e6ce:	f000 fae1 	bl	803ec94 <MX_GPIO_Init>
  MX_DMA_Init();
 803e6d2:	f000 fabf 	bl	803ec54 <MX_DMA_Init>
  MX_USART1_UART_Init();
 803e6d6:	f000 fa93 	bl	803ec00 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 803e6da:	f000 f99b 	bl	803ea14 <MX_I2C1_Init>
  MX_SPI2_Init();
 803e6de:	f000 f9e1 	bl	803eaa4 <MX_SPI2_Init>
  MX_UART5_Init();
 803e6e2:	f000 fa63 	bl	803ebac <MX_UART5_Init>
  MX_CRC_Init();
 803e6e6:	f000 f981 	bl	803e9ec <MX_CRC_Init>
  MX_TIM2_Init();
 803e6ea:	f000 fa11 	bl	803eb10 <MX_TIM2_Init>
  MX_IWDG_Init();
 803e6ee:	f000 f9bf 	bl	803ea70 <MX_IWDG_Init>
  MX_ADC1_Init();
 803e6f2:	f000 f929 	bl	803e948 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    /* Initialize system modules */
    ret |= System_InitWdg();
 803e6f6:	f7fe fdd5 	bl	803d2a4 <System_InitWdg>
 803e6fa:	4603      	mov	r3, r0
 803e6fc:	461a      	mov	r2, r3
 803e6fe:	89fb      	ldrh	r3, [r7, #14]
 803e700:	4313      	orrs	r3, r2
 803e702:	81fb      	strh	r3, [r7, #14]
    ret |= System_ReloadWdg();
 803e704:	f7fe fdf2 	bl	803d2ec <System_ReloadWdg>
 803e708:	4603      	mov	r3, r0
 803e70a:	461a      	mov	r2, r3
 803e70c:	89fb      	ldrh	r3, [r7, #14]
 803e70e:	4313      	orrs	r3, r2
 803e710:	81fb      	strh	r3, [r7, #14]
    System_CrcInit();
 803e712:	f7fe fd99 	bl	803d248 <System_CrcInit>
    ret |= Config_Init();
 803e716:	f7fe f83c 	bl	803c792 <Config_Init>
 803e71a:	4603      	mov	r3, r0
 803e71c:	461a      	mov	r2, r3
 803e71e:	89fb      	ldrh	r3, [r7, #14]
 803e720:	4313      	orrs	r3, r2
 803e722:	81fb      	strh	r3, [r7, #14]
    ret |= Control_Init();
 803e724:	f7fe f91c 	bl	803c960 <Control_Init>
 803e728:	4603      	mov	r3, r0
 803e72a:	461a      	mov	r2, r3
 803e72c:	89fb      	ldrh	r3, [r7, #14]
 803e72e:	4313      	orrs	r3, r2
 803e730:	81fb      	strh	r3, [r7, #14]

    /* Initialize flash memory module */
    ret |= FlashApp_Init();
 803e732:	f7fe f9d7 	bl	803cae4 <FlashApp_Init>
 803e736:	4603      	mov	r3, r0
 803e738:	461a      	mov	r2, r3
 803e73a:	89fb      	ldrh	r3, [r7, #14]
 803e73c:	4313      	orrs	r3, r2
 803e73e:	81fb      	strh	r3, [r7, #14]

    /* Initialize communication modules */
    ret |= MbSlave_Init();
 803e740:	f7ff faca 	bl	803dcd8 <MbSlave_Init>
 803e744:	4603      	mov	r3, r0
 803e746:	461a      	mov	r2, r3
 803e748:	89fb      	ldrh	r3, [r7, #14]
 803e74a:	4313      	orrs	r3, r2
 803e74c:	81fb      	strh	r3, [r7, #14]

    /* Initialize test modules */
    /* TODO */
    ret |= Probe_Init();
 803e74e:	f005 f9c1 	bl	8043ad4 <Probe_Init>
 803e752:	4603      	mov	r3, r0
 803e754:	b21a      	sxth	r2, r3
 803e756:	89fb      	ldrh	r3, [r7, #14]
 803e758:	4313      	orrs	r3, r2
 803e75a:	81fb      	strh	r3, [r7, #14]
    /* Reload watchdog and check for errors in the initialization process */
    ret |= System_ReloadWdg();
 803e75c:	f7fe fdc6 	bl	803d2ec <System_ReloadWdg>
 803e760:	4603      	mov	r3, r0
 803e762:	461a      	mov	r2, r3
 803e764:	89fb      	ldrh	r3, [r7, #14]
 803e766:	4313      	orrs	r3, r2
 803e768:	81fb      	strh	r3, [r7, #14]

    //Switch_Init();

    // CHECK_ERROR(ret, ERROR_CODE_init);
    tick_med = HAL_GetTick();
 803e76a:	f000 feaf 	bl	803f4cc <HAL_GetTick>
 803e76e:	60b8      	str	r0, [r7, #8]
    tick_slow = HAL_GetTick();
 803e770:	f000 feac 	bl	803f4cc <HAL_GetTick>
 803e774:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        /* High priority - real-time handles */
        MbSlave_Handle();
 803e776:	f7ff fbcf 	bl	803df18 <MbSlave_Handle>
        Probe_Handle();
 803e77a:	f005 f9bc 	bl	8043af6 <Probe_Handle>

        /* Medium priority - fast handles */
        if (TICK_EXPIRED(tick_med))
 803e77e:	f000 fea5 	bl	803f4cc <HAL_GetTick>
 803e782:	4602      	mov	r2, r0
 803e784:	68bb      	ldr	r3, [r7, #8]
 803e786:	1ad3      	subs	r3, r2, r3
 803e788:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 803e78c:	4293      	cmp	r3, r2
 803e78e:	d218      	bcs.n	803e7c2 <main+0x11e>
        {
            tick_med += PERIOD_HANDLE_MED_PRIO;
 803e790:	68bb      	ldr	r3, [r7, #8]
 803e792:	3305      	adds	r3, #5
 803e794:	60bb      	str	r3, [r7, #8]
            start = HAL_GetTick();
 803e796:	f000 fe99 	bl	803f4cc <HAL_GetTick>
 803e79a:	6038      	str	r0, [r7, #0]

            /* Test modules handles */
            /* TODO */

            /* Medium priority time measurement */
            max_med = MAX(max_med, HAL_GetTick() - start);
 803e79c:	f000 fe96 	bl	803f4cc <HAL_GetTick>
 803e7a0:	4602      	mov	r2, r0
 803e7a2:	683b      	ldr	r3, [r7, #0]
 803e7a4:	1ad2      	subs	r2, r2, r3
 803e7a6:	4b2b      	ldr	r3, [pc, #172]	@ (803e854 <main+0x1b0>)
 803e7a8:	681b      	ldr	r3, [r3, #0]
 803e7aa:	429a      	cmp	r2, r3
 803e7ac:	d905      	bls.n	803e7ba <main+0x116>
 803e7ae:	f000 fe8d 	bl	803f4cc <HAL_GetTick>
 803e7b2:	4602      	mov	r2, r0
 803e7b4:	683b      	ldr	r3, [r7, #0]
 803e7b6:	1ad3      	subs	r3, r2, r3
 803e7b8:	e001      	b.n	803e7be <main+0x11a>
 803e7ba:	4b26      	ldr	r3, [pc, #152]	@ (803e854 <main+0x1b0>)
 803e7bc:	681b      	ldr	r3, [r3, #0]
 803e7be:	4a25      	ldr	r2, [pc, #148]	@ (803e854 <main+0x1b0>)
 803e7c0:	6013      	str	r3, [r2, #0]
        }

        /* Low priority - slow handles */
        if (TICK_EXPIRED(tick_slow))
 803e7c2:	f000 fe83 	bl	803f4cc <HAL_GetTick>
 803e7c6:	4602      	mov	r2, r0
 803e7c8:	687b      	ldr	r3, [r7, #4]
 803e7ca:	1ad3      	subs	r3, r2, r3
 803e7cc:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 803e7d0:	4293      	cmp	r3, r2
 803e7d2:	d2d0      	bcs.n	803e776 <main+0xd2>
//            if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_valuess, 1) != HAL_OK)
//            {
//                Error_Handler();
//            }

            tick_slow = HAL_GetTick() + PERIOD_HANDLE_LOW_PRIO;
 803e7d4:	f000 fe7a 	bl	803f4cc <HAL_GetTick>
 803e7d8:	4603      	mov	r3, r0
 803e7da:	3332      	adds	r3, #50	@ 0x32
 803e7dc:	607b      	str	r3, [r7, #4]
            start = HAL_GetTick();
 803e7de:	f000 fe75 	bl	803f4cc <HAL_GetTick>
 803e7e2:	6038      	str	r0, [r7, #0]

            /* Communication handles */
            ret |= Control_Handle();
 803e7e4:	f7fe f8ca 	bl	803c97c <Control_Handle>
 803e7e8:	4603      	mov	r3, r0
 803e7ea:	461a      	mov	r2, r3
 803e7ec:	89fb      	ldrh	r3, [r7, #14]
 803e7ee:	4313      	orrs	r3, r2
 803e7f0:	81fb      	strh	r3, [r7, #14]
            ret |= MbSlave_UpdateSlaveAddress();
 803e7f2:	f7ff fc27 	bl	803e044 <MbSlave_UpdateSlaveAddress>
 803e7f6:	4603      	mov	r3, r0
 803e7f8:	461a      	mov	r2, r3
 803e7fa:	89fb      	ldrh	r3, [r7, #14]
 803e7fc:	4313      	orrs	r3, r2
 803e7fe:	81fb      	strh	r3, [r7, #14]

            /* Flash memory handle */
            ret |= FlashApp_Handle();
 803e800:	f7fe f98a 	bl	803cb18 <FlashApp_Handle>
 803e804:	4603      	mov	r3, r0
 803e806:	461a      	mov	r2, r3
 803e808:	89fb      	ldrh	r3, [r7, #14]
 803e80a:	4313      	orrs	r3, r2
 803e80c:	81fb      	strh	r3, [r7, #14]

            /* Test modules handles */
            /* TODO */

            /* Low-priority time measurement */
            max_low = MAX(max_low, HAL_GetTick() - start);
 803e80e:	f000 fe5d 	bl	803f4cc <HAL_GetTick>
 803e812:	4602      	mov	r2, r0
 803e814:	683b      	ldr	r3, [r7, #0]
 803e816:	1ad2      	subs	r2, r2, r3
 803e818:	4b0f      	ldr	r3, [pc, #60]	@ (803e858 <main+0x1b4>)
 803e81a:	681b      	ldr	r3, [r3, #0]
 803e81c:	429a      	cmp	r2, r3
 803e81e:	d905      	bls.n	803e82c <main+0x188>
 803e820:	f000 fe54 	bl	803f4cc <HAL_GetTick>
 803e824:	4602      	mov	r2, r0
 803e826:	683b      	ldr	r3, [r7, #0]
 803e828:	1ad3      	subs	r3, r2, r3
 803e82a:	e001      	b.n	803e830 <main+0x18c>
 803e82c:	4b0a      	ldr	r3, [pc, #40]	@ (803e858 <main+0x1b4>)
 803e82e:	681b      	ldr	r3, [r3, #0]
 803e830:	4a09      	ldr	r2, [pc, #36]	@ (803e858 <main+0x1b4>)
 803e832:	6013      	str	r3, [r2, #0]

            /* Watchdog reload */
            ret |= System_ReloadWdg();
 803e834:	f7fe fd5a 	bl	803d2ec <System_ReloadWdg>
 803e838:	4603      	mov	r3, r0
 803e83a:	461a      	mov	r2, r3
 803e83c:	89fb      	ldrh	r3, [r7, #14]
 803e83e:	4313      	orrs	r3, r2
 803e840:	81fb      	strh	r3, [r7, #14]
            HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 803e842:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 803e846:	4805      	ldr	r0, [pc, #20]	@ (803e85c <main+0x1b8>)
 803e848:	f002 fa7b 	bl	8040d42 <HAL_GPIO_TogglePin>
            //conf.sys.io_input = Switch_GetAll();
            MbSlave_UpdateSlaveAddress();
 803e84c:	f7ff fbfa 	bl	803e044 <MbSlave_UpdateSlaveAddress>
    {
 803e850:	e791      	b.n	803e776 <main+0xd2>
 803e852:	bf00      	nop
 803e854:	20000b20 	.word	0x20000b20
 803e858:	20000b1c 	.word	0x20000b1c
 803e85c:	40020400 	.word	0x40020400

0803e860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 803e860:	b580      	push	{r7, lr}
 803e862:	b094      	sub	sp, #80	@ 0x50
 803e864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 803e866:	f107 031c 	add.w	r3, r7, #28
 803e86a:	2234      	movs	r2, #52	@ 0x34
 803e86c:	2100      	movs	r1, #0
 803e86e:	4618      	mov	r0, r3
 803e870:	f005 f974 	bl	8043b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 803e874:	f107 0308 	add.w	r3, r7, #8
 803e878:	2200      	movs	r2, #0
 803e87a:	601a      	str	r2, [r3, #0]
 803e87c:	605a      	str	r2, [r3, #4]
 803e87e:	609a      	str	r2, [r3, #8]
 803e880:	60da      	str	r2, [r3, #12]
 803e882:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 803e884:	2300      	movs	r3, #0
 803e886:	607b      	str	r3, [r7, #4]
 803e888:	4b2d      	ldr	r3, [pc, #180]	@ (803e940 <SystemClock_Config+0xe0>)
 803e88a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803e88c:	4a2c      	ldr	r2, [pc, #176]	@ (803e940 <SystemClock_Config+0xe0>)
 803e88e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 803e892:	6413      	str	r3, [r2, #64]	@ 0x40
 803e894:	4b2a      	ldr	r3, [pc, #168]	@ (803e940 <SystemClock_Config+0xe0>)
 803e896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803e898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 803e89c:	607b      	str	r3, [r7, #4]
 803e89e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 803e8a0:	2300      	movs	r3, #0
 803e8a2:	603b      	str	r3, [r7, #0]
 803e8a4:	4b27      	ldr	r3, [pc, #156]	@ (803e944 <SystemClock_Config+0xe4>)
 803e8a6:	681b      	ldr	r3, [r3, #0]
 803e8a8:	4a26      	ldr	r2, [pc, #152]	@ (803e944 <SystemClock_Config+0xe4>)
 803e8aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 803e8ae:	6013      	str	r3, [r2, #0]
 803e8b0:	4b24      	ldr	r3, [pc, #144]	@ (803e944 <SystemClock_Config+0xe4>)
 803e8b2:	681b      	ldr	r3, [r3, #0]
 803e8b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 803e8b8:	603b      	str	r3, [r7, #0]
 803e8ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 803e8bc:	230a      	movs	r3, #10
 803e8be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 803e8c0:	2301      	movs	r3, #1
 803e8c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 803e8c4:	2310      	movs	r3, #16
 803e8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 803e8c8:	2301      	movs	r3, #1
 803e8ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 803e8cc:	2302      	movs	r3, #2
 803e8ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 803e8d0:	2300      	movs	r3, #0
 803e8d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 803e8d4:	2308      	movs	r3, #8
 803e8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 803e8d8:	23b4      	movs	r3, #180	@ 0xb4
 803e8da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 803e8dc:	2302      	movs	r3, #2
 803e8de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 803e8e0:	2302      	movs	r3, #2
 803e8e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 803e8e4:	2302      	movs	r3, #2
 803e8e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 803e8e8:	f107 031c 	add.w	r3, r7, #28
 803e8ec:	4618      	mov	r0, r3
 803e8ee:	f002 ff13 	bl	8041718 <HAL_RCC_OscConfig>
 803e8f2:	4603      	mov	r3, r0
 803e8f4:	2b00      	cmp	r3, #0
 803e8f6:	d001      	beq.n	803e8fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 803e8f8:	f000 fa98 	bl	803ee2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 803e8fc:	f002 fbf8 	bl	80410f0 <HAL_PWREx_EnableOverDrive>
 803e900:	4603      	mov	r3, r0
 803e902:	2b00      	cmp	r3, #0
 803e904:	d001      	beq.n	803e90a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 803e906:	f000 fa91 	bl	803ee2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 803e90a:	230f      	movs	r3, #15
 803e90c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 803e90e:	2302      	movs	r3, #2
 803e910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 803e912:	2300      	movs	r3, #0
 803e914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 803e916:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 803e91a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 803e91c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 803e920:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 803e922:	f107 0308 	add.w	r3, r7, #8
 803e926:	2105      	movs	r1, #5
 803e928:	4618      	mov	r0, r3
 803e92a:	f002 fc31 	bl	8041190 <HAL_RCC_ClockConfig>
 803e92e:	4603      	mov	r3, r0
 803e930:	2b00      	cmp	r3, #0
 803e932:	d001      	beq.n	803e938 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 803e934:	f000 fa7a 	bl	803ee2c <Error_Handler>
  }
}
 803e938:	bf00      	nop
 803e93a:	3750      	adds	r7, #80	@ 0x50
 803e93c:	46bd      	mov	sp, r7
 803e93e:	bd80      	pop	{r7, pc}
 803e940:	40023800 	.word	0x40023800
 803e944:	40007000 	.word	0x40007000

0803e948 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 803e948:	b580      	push	{r7, lr}
 803e94a:	b084      	sub	sp, #16
 803e94c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 803e94e:	463b      	mov	r3, r7
 803e950:	2200      	movs	r2, #0
 803e952:	601a      	str	r2, [r3, #0]
 803e954:	605a      	str	r2, [r3, #4]
 803e956:	609a      	str	r2, [r3, #8]
 803e958:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 803e95a:	4b21      	ldr	r3, [pc, #132]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e95c:	4a21      	ldr	r2, [pc, #132]	@ (803e9e4 <MX_ADC1_Init+0x9c>)
 803e95e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 803e960:	4b1f      	ldr	r3, [pc, #124]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e962:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 803e966:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 803e968:	4b1d      	ldr	r3, [pc, #116]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e96a:	2200      	movs	r2, #0
 803e96c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 803e96e:	4b1c      	ldr	r3, [pc, #112]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e970:	2200      	movs	r2, #0
 803e972:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 803e974:	4b1a      	ldr	r3, [pc, #104]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e976:	2200      	movs	r2, #0
 803e978:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 803e97a:	4b19      	ldr	r3, [pc, #100]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e97c:	2200      	movs	r2, #0
 803e97e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 803e982:	4b17      	ldr	r3, [pc, #92]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e984:	2200      	movs	r2, #0
 803e986:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 803e988:	4b15      	ldr	r3, [pc, #84]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e98a:	4a17      	ldr	r2, [pc, #92]	@ (803e9e8 <MX_ADC1_Init+0xa0>)
 803e98c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 803e98e:	4b14      	ldr	r3, [pc, #80]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e990:	2200      	movs	r2, #0
 803e992:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 803e994:	4b12      	ldr	r3, [pc, #72]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e996:	2201      	movs	r2, #1
 803e998:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 803e99a:	4b11      	ldr	r3, [pc, #68]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e99c:	2200      	movs	r2, #0
 803e99e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 803e9a2:	4b0f      	ldr	r3, [pc, #60]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e9a4:	2201      	movs	r2, #1
 803e9a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 803e9a8:	480d      	ldr	r0, [pc, #52]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e9aa:	f000 fdbf 	bl	803f52c <HAL_ADC_Init>
 803e9ae:	4603      	mov	r3, r0
 803e9b0:	2b00      	cmp	r3, #0
 803e9b2:	d001      	beq.n	803e9b8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 803e9b4:	f000 fa3a 	bl	803ee2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 803e9b8:	2301      	movs	r3, #1
 803e9ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 803e9bc:	2301      	movs	r3, #1
 803e9be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 803e9c0:	2300      	movs	r3, #0
 803e9c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 803e9c4:	463b      	mov	r3, r7
 803e9c6:	4619      	mov	r1, r3
 803e9c8:	4805      	ldr	r0, [pc, #20]	@ (803e9e0 <MX_ADC1_Init+0x98>)
 803e9ca:	f000 fdf3 	bl	803f5b4 <HAL_ADC_ConfigChannel>
 803e9ce:	4603      	mov	r3, r0
 803e9d0:	2b00      	cmp	r3, #0
 803e9d2:	d001      	beq.n	803e9d8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 803e9d4:	f000 fa2a 	bl	803ee2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 803e9d8:	bf00      	nop
 803e9da:	3710      	adds	r7, #16
 803e9dc:	46bd      	mov	sp, r7
 803e9de:	bd80      	pop	{r7, pc}
 803e9e0:	200008dc 	.word	0x200008dc
 803e9e4:	40012000 	.word	0x40012000
 803e9e8:	0f000001 	.word	0x0f000001

0803e9ec <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 803e9ec:	b580      	push	{r7, lr}
 803e9ee:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 803e9f0:	4b06      	ldr	r3, [pc, #24]	@ (803ea0c <MX_CRC_Init+0x20>)
 803e9f2:	4a07      	ldr	r2, [pc, #28]	@ (803ea10 <MX_CRC_Init+0x24>)
 803e9f4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 803e9f6:	4805      	ldr	r0, [pc, #20]	@ (803ea0c <MX_CRC_Init+0x20>)
 803e9f8:	f001 f979 	bl	803fcee <HAL_CRC_Init>
 803e9fc:	4603      	mov	r3, r0
 803e9fe:	2b00      	cmp	r3, #0
 803ea00:	d001      	beq.n	803ea06 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 803ea02:	f000 fa13 	bl	803ee2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 803ea06:	bf00      	nop
 803ea08:	bd80      	pop	{r7, pc}
 803ea0a:	bf00      	nop
 803ea0c:	20000984 	.word	0x20000984
 803ea10:	40023000 	.word	0x40023000

0803ea14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 803ea14:	b580      	push	{r7, lr}
 803ea16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 803ea18:	4b12      	ldr	r3, [pc, #72]	@ (803ea64 <MX_I2C1_Init+0x50>)
 803ea1a:	4a13      	ldr	r2, [pc, #76]	@ (803ea68 <MX_I2C1_Init+0x54>)
 803ea1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 803ea1e:	4b11      	ldr	r3, [pc, #68]	@ (803ea64 <MX_I2C1_Init+0x50>)
 803ea20:	4a12      	ldr	r2, [pc, #72]	@ (803ea6c <MX_I2C1_Init+0x58>)
 803ea22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 803ea24:	4b0f      	ldr	r3, [pc, #60]	@ (803ea64 <MX_I2C1_Init+0x50>)
 803ea26:	2200      	movs	r2, #0
 803ea28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 803ea2a:	4b0e      	ldr	r3, [pc, #56]	@ (803ea64 <MX_I2C1_Init+0x50>)
 803ea2c:	2200      	movs	r2, #0
 803ea2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 803ea30:	4b0c      	ldr	r3, [pc, #48]	@ (803ea64 <MX_I2C1_Init+0x50>)
 803ea32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 803ea36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 803ea38:	4b0a      	ldr	r3, [pc, #40]	@ (803ea64 <MX_I2C1_Init+0x50>)
 803ea3a:	2200      	movs	r2, #0
 803ea3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 803ea3e:	4b09      	ldr	r3, [pc, #36]	@ (803ea64 <MX_I2C1_Init+0x50>)
 803ea40:	2200      	movs	r2, #0
 803ea42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 803ea44:	4b07      	ldr	r3, [pc, #28]	@ (803ea64 <MX_I2C1_Init+0x50>)
 803ea46:	2200      	movs	r2, #0
 803ea48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 803ea4a:	4b06      	ldr	r3, [pc, #24]	@ (803ea64 <MX_I2C1_Init+0x50>)
 803ea4c:	2200      	movs	r2, #0
 803ea4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 803ea50:	4804      	ldr	r0, [pc, #16]	@ (803ea64 <MX_I2C1_Init+0x50>)
 803ea52:	f002 f9b5 	bl	8040dc0 <HAL_I2C_Init>
 803ea56:	4603      	mov	r3, r0
 803ea58:	2b00      	cmp	r3, #0
 803ea5a:	d001      	beq.n	803ea60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 803ea5c:	f000 f9e6 	bl	803ee2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 803ea60:	bf00      	nop
 803ea62:	bd80      	pop	{r7, pc}
 803ea64:	2000098c 	.word	0x2000098c
 803ea68:	40005400 	.word	0x40005400
 803ea6c:	000186a0 	.word	0x000186a0

0803ea70 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 803ea70:	b580      	push	{r7, lr}
 803ea72:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 803ea74:	4b09      	ldr	r3, [pc, #36]	@ (803ea9c <MX_IWDG_Init+0x2c>)
 803ea76:	4a0a      	ldr	r2, [pc, #40]	@ (803eaa0 <MX_IWDG_Init+0x30>)
 803ea78:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 803ea7a:	4b08      	ldr	r3, [pc, #32]	@ (803ea9c <MX_IWDG_Init+0x2c>)
 803ea7c:	2200      	movs	r2, #0
 803ea7e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 803ea80:	4b06      	ldr	r3, [pc, #24]	@ (803ea9c <MX_IWDG_Init+0x2c>)
 803ea82:	f640 72ff 	movw	r2, #4095	@ 0xfff
 803ea86:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 803ea88:	4804      	ldr	r0, [pc, #16]	@ (803ea9c <MX_IWDG_Init+0x2c>)
 803ea8a:	f002 fadd 	bl	8041048 <HAL_IWDG_Init>
 803ea8e:	4603      	mov	r3, r0
 803ea90:	2b00      	cmp	r3, #0
 803ea92:	d001      	beq.n	803ea98 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 803ea94:	f000 f9ca 	bl	803ee2c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 803ea98:	bf00      	nop
 803ea9a:	bd80      	pop	{r7, pc}
 803ea9c:	200009e0 	.word	0x200009e0
 803eaa0:	40003000 	.word	0x40003000

0803eaa4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 803eaa4:	b580      	push	{r7, lr}
 803eaa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 803eaa8:	4b17      	ldr	r3, [pc, #92]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eaaa:	4a18      	ldr	r2, [pc, #96]	@ (803eb0c <MX_SPI2_Init+0x68>)
 803eaac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 803eaae:	4b16      	ldr	r3, [pc, #88]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eab0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 803eab4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 803eab6:	4b14      	ldr	r3, [pc, #80]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eab8:	2200      	movs	r2, #0
 803eaba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 803eabc:	4b12      	ldr	r3, [pc, #72]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eabe:	2200      	movs	r2, #0
 803eac0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 803eac2:	4b11      	ldr	r3, [pc, #68]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eac4:	2200      	movs	r2, #0
 803eac6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 803eac8:	4b0f      	ldr	r3, [pc, #60]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eaca:	2200      	movs	r2, #0
 803eacc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 803eace:	4b0e      	ldr	r3, [pc, #56]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803ead0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 803ead4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 803ead6:	4b0c      	ldr	r3, [pc, #48]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803ead8:	2200      	movs	r2, #0
 803eada:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 803eadc:	4b0a      	ldr	r3, [pc, #40]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eade:	2200      	movs	r2, #0
 803eae0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 803eae2:	4b09      	ldr	r3, [pc, #36]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eae4:	2200      	movs	r2, #0
 803eae6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 803eae8:	4b07      	ldr	r3, [pc, #28]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eaea:	2200      	movs	r2, #0
 803eaec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 803eaee:	4b06      	ldr	r3, [pc, #24]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eaf0:	220a      	movs	r2, #10
 803eaf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 803eaf4:	4804      	ldr	r0, [pc, #16]	@ (803eb08 <MX_SPI2_Init+0x64>)
 803eaf6:	f003 f8ad 	bl	8041c54 <HAL_SPI_Init>
 803eafa:	4603      	mov	r3, r0
 803eafc:	2b00      	cmp	r3, #0
 803eafe:	d001      	beq.n	803eb04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 803eb00:	f000 f994 	bl	803ee2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 803eb04:	bf00      	nop
 803eb06:	bd80      	pop	{r7, pc}
 803eb08:	200009ec 	.word	0x200009ec
 803eb0c:	40003800 	.word	0x40003800

0803eb10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 803eb10:	b580      	push	{r7, lr}
 803eb12:	b086      	sub	sp, #24
 803eb14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 803eb16:	f107 0308 	add.w	r3, r7, #8
 803eb1a:	2200      	movs	r2, #0
 803eb1c:	601a      	str	r2, [r3, #0]
 803eb1e:	605a      	str	r2, [r3, #4]
 803eb20:	609a      	str	r2, [r3, #8]
 803eb22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 803eb24:	463b      	mov	r3, r7
 803eb26:	2200      	movs	r2, #0
 803eb28:	601a      	str	r2, [r3, #0]
 803eb2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 803eb2c:	4b1e      	ldr	r3, [pc, #120]	@ (803eba8 <MX_TIM2_Init+0x98>)
 803eb2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 803eb32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18000-1;
 803eb34:	4b1c      	ldr	r3, [pc, #112]	@ (803eba8 <MX_TIM2_Init+0x98>)
 803eb36:	f244 624f 	movw	r2, #17999	@ 0x464f
 803eb3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 803eb3c:	4b1a      	ldr	r3, [pc, #104]	@ (803eba8 <MX_TIM2_Init+0x98>)
 803eb3e:	2200      	movs	r2, #0
 803eb40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 803eb42:	4b19      	ldr	r3, [pc, #100]	@ (803eba8 <MX_TIM2_Init+0x98>)
 803eb44:	f242 720f 	movw	r2, #9999	@ 0x270f
 803eb48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 803eb4a:	4b17      	ldr	r3, [pc, #92]	@ (803eba8 <MX_TIM2_Init+0x98>)
 803eb4c:	2200      	movs	r2, #0
 803eb4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 803eb50:	4b15      	ldr	r3, [pc, #84]	@ (803eba8 <MX_TIM2_Init+0x98>)
 803eb52:	2200      	movs	r2, #0
 803eb54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 803eb56:	4814      	ldr	r0, [pc, #80]	@ (803eba8 <MX_TIM2_Init+0x98>)
 803eb58:	f003 f905 	bl	8041d66 <HAL_TIM_Base_Init>
 803eb5c:	4603      	mov	r3, r0
 803eb5e:	2b00      	cmp	r3, #0
 803eb60:	d001      	beq.n	803eb66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 803eb62:	f000 f963 	bl	803ee2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 803eb66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 803eb6a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 803eb6c:	f107 0308 	add.w	r3, r7, #8
 803eb70:	4619      	mov	r1, r3
 803eb72:	480d      	ldr	r0, [pc, #52]	@ (803eba8 <MX_TIM2_Init+0x98>)
 803eb74:	f003 fad5 	bl	8042122 <HAL_TIM_ConfigClockSource>
 803eb78:	4603      	mov	r3, r0
 803eb7a:	2b00      	cmp	r3, #0
 803eb7c:	d001      	beq.n	803eb82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 803eb7e:	f000 f955 	bl	803ee2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 803eb82:	2300      	movs	r3, #0
 803eb84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 803eb86:	2300      	movs	r3, #0
 803eb88:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 803eb8a:	463b      	mov	r3, r7
 803eb8c:	4619      	mov	r1, r3
 803eb8e:	4806      	ldr	r0, [pc, #24]	@ (803eba8 <MX_TIM2_Init+0x98>)
 803eb90:	f003 fcf6 	bl	8042580 <HAL_TIMEx_MasterConfigSynchronization>
 803eb94:	4603      	mov	r3, r0
 803eb96:	2b00      	cmp	r3, #0
 803eb98:	d001      	beq.n	803eb9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 803eb9a:	f000 f947 	bl	803ee2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 803eb9e:	bf00      	nop
 803eba0:	3718      	adds	r7, #24
 803eba2:	46bd      	mov	sp, r7
 803eba4:	bd80      	pop	{r7, pc}
 803eba6:	bf00      	nop
 803eba8:	20000a44 	.word	0x20000a44

0803ebac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 803ebac:	b580      	push	{r7, lr}
 803ebae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 803ebb0:	4b11      	ldr	r3, [pc, #68]	@ (803ebf8 <MX_UART5_Init+0x4c>)
 803ebb2:	4a12      	ldr	r2, [pc, #72]	@ (803ebfc <MX_UART5_Init+0x50>)
 803ebb4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 803ebb6:	4b10      	ldr	r3, [pc, #64]	@ (803ebf8 <MX_UART5_Init+0x4c>)
 803ebb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 803ebbc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 803ebbe:	4b0e      	ldr	r3, [pc, #56]	@ (803ebf8 <MX_UART5_Init+0x4c>)
 803ebc0:	2200      	movs	r2, #0
 803ebc2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 803ebc4:	4b0c      	ldr	r3, [pc, #48]	@ (803ebf8 <MX_UART5_Init+0x4c>)
 803ebc6:	2200      	movs	r2, #0
 803ebc8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 803ebca:	4b0b      	ldr	r3, [pc, #44]	@ (803ebf8 <MX_UART5_Init+0x4c>)
 803ebcc:	2200      	movs	r2, #0
 803ebce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 803ebd0:	4b09      	ldr	r3, [pc, #36]	@ (803ebf8 <MX_UART5_Init+0x4c>)
 803ebd2:	220c      	movs	r2, #12
 803ebd4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 803ebd6:	4b08      	ldr	r3, [pc, #32]	@ (803ebf8 <MX_UART5_Init+0x4c>)
 803ebd8:	2200      	movs	r2, #0
 803ebda:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 803ebdc:	4b06      	ldr	r3, [pc, #24]	@ (803ebf8 <MX_UART5_Init+0x4c>)
 803ebde:	2200      	movs	r2, #0
 803ebe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 803ebe2:	4805      	ldr	r0, [pc, #20]	@ (803ebf8 <MX_UART5_Init+0x4c>)
 803ebe4:	f003 fd5c 	bl	80426a0 <HAL_UART_Init>
 803ebe8:	4603      	mov	r3, r0
 803ebea:	2b00      	cmp	r3, #0
 803ebec:	d001      	beq.n	803ebf2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 803ebee:	f000 f91d 	bl	803ee2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 803ebf2:	bf00      	nop
 803ebf4:	bd80      	pop	{r7, pc}
 803ebf6:	bf00      	nop
 803ebf8:	20000a8c 	.word	0x20000a8c
 803ebfc:	40005000 	.word	0x40005000

0803ec00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 803ec00:	b580      	push	{r7, lr}
 803ec02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 803ec04:	4b11      	ldr	r3, [pc, #68]	@ (803ec4c <MX_USART1_UART_Init+0x4c>)
 803ec06:	4a12      	ldr	r2, [pc, #72]	@ (803ec50 <MX_USART1_UART_Init+0x50>)
 803ec08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 803ec0a:	4b10      	ldr	r3, [pc, #64]	@ (803ec4c <MX_USART1_UART_Init+0x4c>)
 803ec0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 803ec10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 803ec12:	4b0e      	ldr	r3, [pc, #56]	@ (803ec4c <MX_USART1_UART_Init+0x4c>)
 803ec14:	2200      	movs	r2, #0
 803ec16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 803ec18:	4b0c      	ldr	r3, [pc, #48]	@ (803ec4c <MX_USART1_UART_Init+0x4c>)
 803ec1a:	2200      	movs	r2, #0
 803ec1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 803ec1e:	4b0b      	ldr	r3, [pc, #44]	@ (803ec4c <MX_USART1_UART_Init+0x4c>)
 803ec20:	2200      	movs	r2, #0
 803ec22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 803ec24:	4b09      	ldr	r3, [pc, #36]	@ (803ec4c <MX_USART1_UART_Init+0x4c>)
 803ec26:	220c      	movs	r2, #12
 803ec28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 803ec2a:	4b08      	ldr	r3, [pc, #32]	@ (803ec4c <MX_USART1_UART_Init+0x4c>)
 803ec2c:	2200      	movs	r2, #0
 803ec2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 803ec30:	4b06      	ldr	r3, [pc, #24]	@ (803ec4c <MX_USART1_UART_Init+0x4c>)
 803ec32:	2200      	movs	r2, #0
 803ec34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 803ec36:	4805      	ldr	r0, [pc, #20]	@ (803ec4c <MX_USART1_UART_Init+0x4c>)
 803ec38:	f003 fd32 	bl	80426a0 <HAL_UART_Init>
 803ec3c:	4603      	mov	r3, r0
 803ec3e:	2b00      	cmp	r3, #0
 803ec40:	d001      	beq.n	803ec46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 803ec42:	f000 f8f3 	bl	803ee2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 803ec46:	bf00      	nop
 803ec48:	bd80      	pop	{r7, pc}
 803ec4a:	bf00      	nop
 803ec4c:	20000ad4 	.word	0x20000ad4
 803ec50:	40011000 	.word	0x40011000

0803ec54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 803ec54:	b580      	push	{r7, lr}
 803ec56:	b082      	sub	sp, #8
 803ec58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 803ec5a:	2300      	movs	r3, #0
 803ec5c:	607b      	str	r3, [r7, #4]
 803ec5e:	4b0c      	ldr	r3, [pc, #48]	@ (803ec90 <MX_DMA_Init+0x3c>)
 803ec60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ec62:	4a0b      	ldr	r2, [pc, #44]	@ (803ec90 <MX_DMA_Init+0x3c>)
 803ec64:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 803ec68:	6313      	str	r3, [r2, #48]	@ 0x30
 803ec6a:	4b09      	ldr	r3, [pc, #36]	@ (803ec90 <MX_DMA_Init+0x3c>)
 803ec6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ec6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 803ec72:	607b      	str	r3, [r7, #4]
 803ec74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 803ec76:	2200      	movs	r2, #0
 803ec78:	2100      	movs	r1, #0
 803ec7a:	2038      	movs	r0, #56	@ 0x38
 803ec7c:	f000 ffe5 	bl	803fc4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 803ec80:	2038      	movs	r0, #56	@ 0x38
 803ec82:	f000 fffe 	bl	803fc82 <HAL_NVIC_EnableIRQ>

}
 803ec86:	bf00      	nop
 803ec88:	3708      	adds	r7, #8
 803ec8a:	46bd      	mov	sp, r7
 803ec8c:	bd80      	pop	{r7, pc}
 803ec8e:	bf00      	nop
 803ec90:	40023800 	.word	0x40023800

0803ec94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 803ec94:	b580      	push	{r7, lr}
 803ec96:	b08a      	sub	sp, #40	@ 0x28
 803ec98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803ec9a:	f107 0314 	add.w	r3, r7, #20
 803ec9e:	2200      	movs	r2, #0
 803eca0:	601a      	str	r2, [r3, #0]
 803eca2:	605a      	str	r2, [r3, #4]
 803eca4:	609a      	str	r2, [r3, #8]
 803eca6:	60da      	str	r2, [r3, #12]
 803eca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 803ecaa:	2300      	movs	r3, #0
 803ecac:	613b      	str	r3, [r7, #16]
 803ecae:	4b5b      	ldr	r3, [pc, #364]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ecb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ecb2:	4a5a      	ldr	r2, [pc, #360]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ecb4:	f043 0304 	orr.w	r3, r3, #4
 803ecb8:	6313      	str	r3, [r2, #48]	@ 0x30
 803ecba:	4b58      	ldr	r3, [pc, #352]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ecbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ecbe:	f003 0304 	and.w	r3, r3, #4
 803ecc2:	613b      	str	r3, [r7, #16]
 803ecc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 803ecc6:	2300      	movs	r3, #0
 803ecc8:	60fb      	str	r3, [r7, #12]
 803ecca:	4b54      	ldr	r3, [pc, #336]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803eccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ecce:	4a53      	ldr	r2, [pc, #332]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ecd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 803ecd4:	6313      	str	r3, [r2, #48]	@ 0x30
 803ecd6:	4b51      	ldr	r3, [pc, #324]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ecd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ecda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 803ecde:	60fb      	str	r3, [r7, #12]
 803ece0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 803ece2:	2300      	movs	r3, #0
 803ece4:	60bb      	str	r3, [r7, #8]
 803ece6:	4b4d      	ldr	r3, [pc, #308]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ece8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ecea:	4a4c      	ldr	r2, [pc, #304]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ecec:	f043 0301 	orr.w	r3, r3, #1
 803ecf0:	6313      	str	r3, [r2, #48]	@ 0x30
 803ecf2:	4b4a      	ldr	r3, [pc, #296]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ecf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ecf6:	f003 0301 	and.w	r3, r3, #1
 803ecfa:	60bb      	str	r3, [r7, #8]
 803ecfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 803ecfe:	2300      	movs	r3, #0
 803ed00:	607b      	str	r3, [r7, #4]
 803ed02:	4b46      	ldr	r3, [pc, #280]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ed04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ed06:	4a45      	ldr	r2, [pc, #276]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ed08:	f043 0302 	orr.w	r3, r3, #2
 803ed0c:	6313      	str	r3, [r2, #48]	@ 0x30
 803ed0e:	4b43      	ldr	r3, [pc, #268]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ed10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ed12:	f003 0302 	and.w	r3, r3, #2
 803ed16:	607b      	str	r3, [r7, #4]
 803ed18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 803ed1a:	2300      	movs	r3, #0
 803ed1c:	603b      	str	r3, [r7, #0]
 803ed1e:	4b3f      	ldr	r3, [pc, #252]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ed20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ed22:	4a3e      	ldr	r2, [pc, #248]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ed24:	f043 0308 	orr.w	r3, r3, #8
 803ed28:	6313      	str	r3, [r2, #48]	@ 0x30
 803ed2a:	4b3c      	ldr	r3, [pc, #240]	@ (803ee1c <MX_GPIO_Init+0x188>)
 803ed2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ed2e:	f003 0308 	and.w	r3, r3, #8
 803ed32:	603b      	str	r3, [r7, #0]
 803ed34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 803ed36:	2200      	movs	r2, #0
 803ed38:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 803ed3c:	4838      	ldr	r0, [pc, #224]	@ (803ee20 <MX_GPIO_Init+0x18c>)
 803ed3e:	f001 ffe7 	bl	8040d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 803ed42:	2201      	movs	r2, #1
 803ed44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 803ed48:	4836      	ldr	r0, [pc, #216]	@ (803ee24 <MX_GPIO_Init+0x190>)
 803ed4a:	f001 ffe1 	bl	8040d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 803ed4e:	2200      	movs	r2, #0
 803ed50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 803ed54:	4834      	ldr	r0, [pc, #208]	@ (803ee28 <MX_GPIO_Init+0x194>)
 803ed56:	f001 ffdb 	bl	8040d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 803ed5a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 803ed5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 803ed60:	2301      	movs	r3, #1
 803ed62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803ed64:	2300      	movs	r3, #0
 803ed66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803ed68:	2300      	movs	r3, #0
 803ed6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 803ed6c:	f107 0314 	add.w	r3, r7, #20
 803ed70:	4619      	mov	r1, r3
 803ed72:	482b      	ldr	r0, [pc, #172]	@ (803ee20 <MX_GPIO_Init+0x18c>)
 803ed74:	f001 fe38 	bl	80409e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 803ed78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 803ed7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 803ed7e:	2301      	movs	r3, #1
 803ed80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803ed82:	2300      	movs	r3, #0
 803ed84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803ed86:	2300      	movs	r3, #0
 803ed88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 803ed8a:	f107 0314 	add.w	r3, r7, #20
 803ed8e:	4619      	mov	r1, r3
 803ed90:	4824      	ldr	r0, [pc, #144]	@ (803ee24 <MX_GPIO_Init+0x190>)
 803ed92:	f001 fe29 	bl	80409e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 803ed96:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 803ed9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 803ed9c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 803eda0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803eda2:	2300      	movs	r3, #0
 803eda4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 803eda6:	f107 0314 	add.w	r3, r7, #20
 803edaa:	4619      	mov	r1, r3
 803edac:	481d      	ldr	r0, [pc, #116]	@ (803ee24 <MX_GPIO_Init+0x190>)
 803edae:	f001 fe1b 	bl	80409e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 803edb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 803edb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 803edb8:	2300      	movs	r3, #0
 803edba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803edbc:	2300      	movs	r3, #0
 803edbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 803edc0:	f107 0314 	add.w	r3, r7, #20
 803edc4:	4619      	mov	r1, r3
 803edc6:	4817      	ldr	r0, [pc, #92]	@ (803ee24 <MX_GPIO_Init+0x190>)
 803edc8:	f001 fe0e 	bl	80409e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 803edcc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 803edd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 803edd2:	2300      	movs	r3, #0
 803edd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803edd6:	2300      	movs	r3, #0
 803edd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 803edda:	f107 0314 	add.w	r3, r7, #20
 803edde:	4619      	mov	r1, r3
 803ede0:	480f      	ldr	r0, [pc, #60]	@ (803ee20 <MX_GPIO_Init+0x18c>)
 803ede2:	f001 fe01 	bl	80409e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 803ede6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 803edea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 803edec:	2301      	movs	r3, #1
 803edee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 803edf0:	2300      	movs	r3, #0
 803edf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 803edf4:	2300      	movs	r3, #0
 803edf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803edf8:	f107 0314 	add.w	r3, r7, #20
 803edfc:	4619      	mov	r1, r3
 803edfe:	480a      	ldr	r0, [pc, #40]	@ (803ee28 <MX_GPIO_Init+0x194>)
 803ee00:	f001 fdf2 	bl	80409e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 803ee04:	2200      	movs	r2, #0
 803ee06:	2100      	movs	r1, #0
 803ee08:	2028      	movs	r0, #40	@ 0x28
 803ee0a:	f000 ff1e 	bl	803fc4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 803ee0e:	2028      	movs	r0, #40	@ 0x28
 803ee10:	f000 ff37 	bl	803fc82 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 803ee14:	bf00      	nop
 803ee16:	3728      	adds	r7, #40	@ 0x28
 803ee18:	46bd      	mov	sp, r7
 803ee1a:	bd80      	pop	{r7, pc}
 803ee1c:	40023800 	.word	0x40023800
 803ee20:	40020800 	.word	0x40020800
 803ee24:	40020400 	.word	0x40020400
 803ee28:	40020000 	.word	0x40020000

0803ee2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 803ee2c:	b480      	push	{r7}
 803ee2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 803ee30:	b672      	cpsid	i
}
 803ee32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 803ee34:	bf00      	nop
 803ee36:	e7fd      	b.n	803ee34 <Error_Handler+0x8>

0803ee38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 803ee38:	b480      	push	{r7}
 803ee3a:	b083      	sub	sp, #12
 803ee3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 803ee3e:	2300      	movs	r3, #0
 803ee40:	607b      	str	r3, [r7, #4]
 803ee42:	4b10      	ldr	r3, [pc, #64]	@ (803ee84 <HAL_MspInit+0x4c>)
 803ee44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803ee46:	4a0f      	ldr	r2, [pc, #60]	@ (803ee84 <HAL_MspInit+0x4c>)
 803ee48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 803ee4c:	6453      	str	r3, [r2, #68]	@ 0x44
 803ee4e:	4b0d      	ldr	r3, [pc, #52]	@ (803ee84 <HAL_MspInit+0x4c>)
 803ee50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803ee52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 803ee56:	607b      	str	r3, [r7, #4]
 803ee58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 803ee5a:	2300      	movs	r3, #0
 803ee5c:	603b      	str	r3, [r7, #0]
 803ee5e:	4b09      	ldr	r3, [pc, #36]	@ (803ee84 <HAL_MspInit+0x4c>)
 803ee60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803ee62:	4a08      	ldr	r2, [pc, #32]	@ (803ee84 <HAL_MspInit+0x4c>)
 803ee64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 803ee68:	6413      	str	r3, [r2, #64]	@ 0x40
 803ee6a:	4b06      	ldr	r3, [pc, #24]	@ (803ee84 <HAL_MspInit+0x4c>)
 803ee6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803ee6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 803ee72:	603b      	str	r3, [r7, #0]
 803ee74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 803ee76:	bf00      	nop
 803ee78:	370c      	adds	r7, #12
 803ee7a:	46bd      	mov	sp, r7
 803ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ee80:	4770      	bx	lr
 803ee82:	bf00      	nop
 803ee84:	40023800 	.word	0x40023800

0803ee88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 803ee88:	b580      	push	{r7, lr}
 803ee8a:	b08a      	sub	sp, #40	@ 0x28
 803ee8c:	af00      	add	r7, sp, #0
 803ee8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803ee90:	f107 0314 	add.w	r3, r7, #20
 803ee94:	2200      	movs	r2, #0
 803ee96:	601a      	str	r2, [r3, #0]
 803ee98:	605a      	str	r2, [r3, #4]
 803ee9a:	609a      	str	r2, [r3, #8]
 803ee9c:	60da      	str	r2, [r3, #12]
 803ee9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 803eea0:	687b      	ldr	r3, [r7, #4]
 803eea2:	681b      	ldr	r3, [r3, #0]
 803eea4:	4a2e      	ldr	r2, [pc, #184]	@ (803ef60 <HAL_ADC_MspInit+0xd8>)
 803eea6:	4293      	cmp	r3, r2
 803eea8:	d156      	bne.n	803ef58 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 803eeaa:	2300      	movs	r3, #0
 803eeac:	613b      	str	r3, [r7, #16]
 803eeae:	4b2d      	ldr	r3, [pc, #180]	@ (803ef64 <HAL_ADC_MspInit+0xdc>)
 803eeb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803eeb2:	4a2c      	ldr	r2, [pc, #176]	@ (803ef64 <HAL_ADC_MspInit+0xdc>)
 803eeb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 803eeb8:	6453      	str	r3, [r2, #68]	@ 0x44
 803eeba:	4b2a      	ldr	r3, [pc, #168]	@ (803ef64 <HAL_ADC_MspInit+0xdc>)
 803eebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803eebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 803eec2:	613b      	str	r3, [r7, #16]
 803eec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 803eec6:	2300      	movs	r3, #0
 803eec8:	60fb      	str	r3, [r7, #12]
 803eeca:	4b26      	ldr	r3, [pc, #152]	@ (803ef64 <HAL_ADC_MspInit+0xdc>)
 803eecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803eece:	4a25      	ldr	r2, [pc, #148]	@ (803ef64 <HAL_ADC_MspInit+0xdc>)
 803eed0:	f043 0301 	orr.w	r3, r3, #1
 803eed4:	6313      	str	r3, [r2, #48]	@ 0x30
 803eed6:	4b23      	ldr	r3, [pc, #140]	@ (803ef64 <HAL_ADC_MspInit+0xdc>)
 803eed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803eeda:	f003 0301 	and.w	r3, r3, #1
 803eede:	60fb      	str	r3, [r7, #12]
 803eee0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 803eee2:	2302      	movs	r3, #2
 803eee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 803eee6:	2303      	movs	r3, #3
 803eee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803eeea:	2300      	movs	r3, #0
 803eeec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803eeee:	f107 0314 	add.w	r3, r7, #20
 803eef2:	4619      	mov	r1, r3
 803eef4:	481c      	ldr	r0, [pc, #112]	@ (803ef68 <HAL_ADC_MspInit+0xe0>)
 803eef6:	f001 fd77 	bl	80409e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 803eefa:	4b1c      	ldr	r3, [pc, #112]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803eefc:	4a1c      	ldr	r2, [pc, #112]	@ (803ef70 <HAL_ADC_MspInit+0xe8>)
 803eefe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 803ef00:	4b1a      	ldr	r3, [pc, #104]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef02:	2200      	movs	r2, #0
 803ef04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 803ef06:	4b19      	ldr	r3, [pc, #100]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef08:	2200      	movs	r2, #0
 803ef0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 803ef0c:	4b17      	ldr	r3, [pc, #92]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef0e:	2200      	movs	r2, #0
 803ef10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 803ef12:	4b16      	ldr	r3, [pc, #88]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef14:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 803ef18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 803ef1a:	4b14      	ldr	r3, [pc, #80]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 803ef20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 803ef22:	4b12      	ldr	r3, [pc, #72]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 803ef28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 803ef2a:	4b10      	ldr	r3, [pc, #64]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef2c:	2200      	movs	r2, #0
 803ef2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 803ef30:	4b0e      	ldr	r3, [pc, #56]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef32:	2200      	movs	r2, #0
 803ef34:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 803ef36:	4b0d      	ldr	r3, [pc, #52]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef38:	2200      	movs	r2, #0
 803ef3a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 803ef3c:	480b      	ldr	r0, [pc, #44]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef3e:	f000 fef3 	bl	803fd28 <HAL_DMA_Init>
 803ef42:	4603      	mov	r3, r0
 803ef44:	2b00      	cmp	r3, #0
 803ef46:	d001      	beq.n	803ef4c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 803ef48:	f7ff ff70 	bl	803ee2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 803ef4c:	687b      	ldr	r3, [r7, #4]
 803ef4e:	4a07      	ldr	r2, [pc, #28]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef50:	639a      	str	r2, [r3, #56]	@ 0x38
 803ef52:	4a06      	ldr	r2, [pc, #24]	@ (803ef6c <HAL_ADC_MspInit+0xe4>)
 803ef54:	687b      	ldr	r3, [r7, #4]
 803ef56:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 803ef58:	bf00      	nop
 803ef5a:	3728      	adds	r7, #40	@ 0x28
 803ef5c:	46bd      	mov	sp, r7
 803ef5e:	bd80      	pop	{r7, pc}
 803ef60:	40012000 	.word	0x40012000
 803ef64:	40023800 	.word	0x40023800
 803ef68:	40020000 	.word	0x40020000
 803ef6c:	20000924 	.word	0x20000924
 803ef70:	40026410 	.word	0x40026410

0803ef74 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 803ef74:	b480      	push	{r7}
 803ef76:	b085      	sub	sp, #20
 803ef78:	af00      	add	r7, sp, #0
 803ef7a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 803ef7c:	687b      	ldr	r3, [r7, #4]
 803ef7e:	681b      	ldr	r3, [r3, #0]
 803ef80:	4a0b      	ldr	r2, [pc, #44]	@ (803efb0 <HAL_CRC_MspInit+0x3c>)
 803ef82:	4293      	cmp	r3, r2
 803ef84:	d10d      	bne.n	803efa2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 803ef86:	2300      	movs	r3, #0
 803ef88:	60fb      	str	r3, [r7, #12]
 803ef8a:	4b0a      	ldr	r3, [pc, #40]	@ (803efb4 <HAL_CRC_MspInit+0x40>)
 803ef8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ef8e:	4a09      	ldr	r2, [pc, #36]	@ (803efb4 <HAL_CRC_MspInit+0x40>)
 803ef90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 803ef94:	6313      	str	r3, [r2, #48]	@ 0x30
 803ef96:	4b07      	ldr	r3, [pc, #28]	@ (803efb4 <HAL_CRC_MspInit+0x40>)
 803ef98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803ef9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 803ef9e:	60fb      	str	r3, [r7, #12]
 803efa0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 803efa2:	bf00      	nop
 803efa4:	3714      	adds	r7, #20
 803efa6:	46bd      	mov	sp, r7
 803efa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803efac:	4770      	bx	lr
 803efae:	bf00      	nop
 803efb0:	40023000 	.word	0x40023000
 803efb4:	40023800 	.word	0x40023800

0803efb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 803efb8:	b580      	push	{r7, lr}
 803efba:	b08a      	sub	sp, #40	@ 0x28
 803efbc:	af00      	add	r7, sp, #0
 803efbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803efc0:	f107 0314 	add.w	r3, r7, #20
 803efc4:	2200      	movs	r2, #0
 803efc6:	601a      	str	r2, [r3, #0]
 803efc8:	605a      	str	r2, [r3, #4]
 803efca:	609a      	str	r2, [r3, #8]
 803efcc:	60da      	str	r2, [r3, #12]
 803efce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 803efd0:	687b      	ldr	r3, [r7, #4]
 803efd2:	681b      	ldr	r3, [r3, #0]
 803efd4:	4a19      	ldr	r2, [pc, #100]	@ (803f03c <HAL_I2C_MspInit+0x84>)
 803efd6:	4293      	cmp	r3, r2
 803efd8:	d12b      	bne.n	803f032 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 803efda:	2300      	movs	r3, #0
 803efdc:	613b      	str	r3, [r7, #16]
 803efde:	4b18      	ldr	r3, [pc, #96]	@ (803f040 <HAL_I2C_MspInit+0x88>)
 803efe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803efe2:	4a17      	ldr	r2, [pc, #92]	@ (803f040 <HAL_I2C_MspInit+0x88>)
 803efe4:	f043 0302 	orr.w	r3, r3, #2
 803efe8:	6313      	str	r3, [r2, #48]	@ 0x30
 803efea:	4b15      	ldr	r3, [pc, #84]	@ (803f040 <HAL_I2C_MspInit+0x88>)
 803efec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803efee:	f003 0302 	and.w	r3, r3, #2
 803eff2:	613b      	str	r3, [r7, #16]
 803eff4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 803eff6:	23c0      	movs	r3, #192	@ 0xc0
 803eff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 803effa:	2312      	movs	r3, #18
 803effc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803effe:	2300      	movs	r3, #0
 803f000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803f002:	2303      	movs	r3, #3
 803f004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 803f006:	2304      	movs	r3, #4
 803f008:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 803f00a:	f107 0314 	add.w	r3, r7, #20
 803f00e:	4619      	mov	r1, r3
 803f010:	480c      	ldr	r0, [pc, #48]	@ (803f044 <HAL_I2C_MspInit+0x8c>)
 803f012:	f001 fce9 	bl	80409e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 803f016:	2300      	movs	r3, #0
 803f018:	60fb      	str	r3, [r7, #12]
 803f01a:	4b09      	ldr	r3, [pc, #36]	@ (803f040 <HAL_I2C_MspInit+0x88>)
 803f01c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f01e:	4a08      	ldr	r2, [pc, #32]	@ (803f040 <HAL_I2C_MspInit+0x88>)
 803f020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 803f024:	6413      	str	r3, [r2, #64]	@ 0x40
 803f026:	4b06      	ldr	r3, [pc, #24]	@ (803f040 <HAL_I2C_MspInit+0x88>)
 803f028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f02a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 803f02e:	60fb      	str	r3, [r7, #12]
 803f030:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 803f032:	bf00      	nop
 803f034:	3728      	adds	r7, #40	@ 0x28
 803f036:	46bd      	mov	sp, r7
 803f038:	bd80      	pop	{r7, pc}
 803f03a:	bf00      	nop
 803f03c:	40005400 	.word	0x40005400
 803f040:	40023800 	.word	0x40023800
 803f044:	40020400 	.word	0x40020400

0803f048 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 803f048:	b580      	push	{r7, lr}
 803f04a:	b08a      	sub	sp, #40	@ 0x28
 803f04c:	af00      	add	r7, sp, #0
 803f04e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803f050:	f107 0314 	add.w	r3, r7, #20
 803f054:	2200      	movs	r2, #0
 803f056:	601a      	str	r2, [r3, #0]
 803f058:	605a      	str	r2, [r3, #4]
 803f05a:	609a      	str	r2, [r3, #8]
 803f05c:	60da      	str	r2, [r3, #12]
 803f05e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 803f060:	687b      	ldr	r3, [r7, #4]
 803f062:	681b      	ldr	r3, [r3, #0]
 803f064:	4a30      	ldr	r2, [pc, #192]	@ (803f128 <HAL_SPI_MspInit+0xe0>)
 803f066:	4293      	cmp	r3, r2
 803f068:	d15a      	bne.n	803f120 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 803f06a:	2300      	movs	r3, #0
 803f06c:	613b      	str	r3, [r7, #16]
 803f06e:	4b2f      	ldr	r3, [pc, #188]	@ (803f12c <HAL_SPI_MspInit+0xe4>)
 803f070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f072:	4a2e      	ldr	r2, [pc, #184]	@ (803f12c <HAL_SPI_MspInit+0xe4>)
 803f074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 803f078:	6413      	str	r3, [r2, #64]	@ 0x40
 803f07a:	4b2c      	ldr	r3, [pc, #176]	@ (803f12c <HAL_SPI_MspInit+0xe4>)
 803f07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f07e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 803f082:	613b      	str	r3, [r7, #16]
 803f084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 803f086:	2300      	movs	r3, #0
 803f088:	60fb      	str	r3, [r7, #12]
 803f08a:	4b28      	ldr	r3, [pc, #160]	@ (803f12c <HAL_SPI_MspInit+0xe4>)
 803f08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803f08e:	4a27      	ldr	r2, [pc, #156]	@ (803f12c <HAL_SPI_MspInit+0xe4>)
 803f090:	f043 0304 	orr.w	r3, r3, #4
 803f094:	6313      	str	r3, [r2, #48]	@ 0x30
 803f096:	4b25      	ldr	r3, [pc, #148]	@ (803f12c <HAL_SPI_MspInit+0xe4>)
 803f098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803f09a:	f003 0304 	and.w	r3, r3, #4
 803f09e:	60fb      	str	r3, [r7, #12]
 803f0a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 803f0a2:	2300      	movs	r3, #0
 803f0a4:	60bb      	str	r3, [r7, #8]
 803f0a6:	4b21      	ldr	r3, [pc, #132]	@ (803f12c <HAL_SPI_MspInit+0xe4>)
 803f0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803f0aa:	4a20      	ldr	r2, [pc, #128]	@ (803f12c <HAL_SPI_MspInit+0xe4>)
 803f0ac:	f043 0302 	orr.w	r3, r3, #2
 803f0b0:	6313      	str	r3, [r2, #48]	@ 0x30
 803f0b2:	4b1e      	ldr	r3, [pc, #120]	@ (803f12c <HAL_SPI_MspInit+0xe4>)
 803f0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803f0b6:	f003 0302 	and.w	r3, r3, #2
 803f0ba:	60bb      	str	r3, [r7, #8]
 803f0bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 803f0be:	2302      	movs	r3, #2
 803f0c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803f0c2:	2302      	movs	r3, #2
 803f0c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803f0c6:	2300      	movs	r3, #0
 803f0c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803f0ca:	2303      	movs	r3, #3
 803f0cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 803f0ce:	2307      	movs	r3, #7
 803f0d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 803f0d2:	f107 0314 	add.w	r3, r7, #20
 803f0d6:	4619      	mov	r1, r3
 803f0d8:	4815      	ldr	r0, [pc, #84]	@ (803f130 <HAL_SPI_MspInit+0xe8>)
 803f0da:	f001 fc85 	bl	80409e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 803f0de:	2304      	movs	r3, #4
 803f0e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803f0e2:	2302      	movs	r3, #2
 803f0e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803f0e6:	2300      	movs	r3, #0
 803f0e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803f0ea:	2303      	movs	r3, #3
 803f0ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 803f0ee:	2305      	movs	r3, #5
 803f0f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 803f0f2:	f107 0314 	add.w	r3, r7, #20
 803f0f6:	4619      	mov	r1, r3
 803f0f8:	480d      	ldr	r0, [pc, #52]	@ (803f130 <HAL_SPI_MspInit+0xe8>)
 803f0fa:	f001 fc75 	bl	80409e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 803f0fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 803f102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803f104:	2302      	movs	r3, #2
 803f106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803f108:	2300      	movs	r3, #0
 803f10a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803f10c:	2303      	movs	r3, #3
 803f10e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 803f110:	2305      	movs	r3, #5
 803f112:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 803f114:	f107 0314 	add.w	r3, r7, #20
 803f118:	4619      	mov	r1, r3
 803f11a:	4806      	ldr	r0, [pc, #24]	@ (803f134 <HAL_SPI_MspInit+0xec>)
 803f11c:	f001 fc64 	bl	80409e8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 803f120:	bf00      	nop
 803f122:	3728      	adds	r7, #40	@ 0x28
 803f124:	46bd      	mov	sp, r7
 803f126:	bd80      	pop	{r7, pc}
 803f128:	40003800 	.word	0x40003800
 803f12c:	40023800 	.word	0x40023800
 803f130:	40020800 	.word	0x40020800
 803f134:	40020400 	.word	0x40020400

0803f138 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 803f138:	b580      	push	{r7, lr}
 803f13a:	b084      	sub	sp, #16
 803f13c:	af00      	add	r7, sp, #0
 803f13e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 803f140:	687b      	ldr	r3, [r7, #4]
 803f142:	681b      	ldr	r3, [r3, #0]
 803f144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 803f148:	d115      	bne.n	803f176 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 803f14a:	2300      	movs	r3, #0
 803f14c:	60fb      	str	r3, [r7, #12]
 803f14e:	4b0c      	ldr	r3, [pc, #48]	@ (803f180 <HAL_TIM_Base_MspInit+0x48>)
 803f150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f152:	4a0b      	ldr	r2, [pc, #44]	@ (803f180 <HAL_TIM_Base_MspInit+0x48>)
 803f154:	f043 0301 	orr.w	r3, r3, #1
 803f158:	6413      	str	r3, [r2, #64]	@ 0x40
 803f15a:	4b09      	ldr	r3, [pc, #36]	@ (803f180 <HAL_TIM_Base_MspInit+0x48>)
 803f15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f15e:	f003 0301 	and.w	r3, r3, #1
 803f162:	60fb      	str	r3, [r7, #12]
 803f164:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 803f166:	2200      	movs	r2, #0
 803f168:	2100      	movs	r1, #0
 803f16a:	201c      	movs	r0, #28
 803f16c:	f000 fd6d 	bl	803fc4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 803f170:	201c      	movs	r0, #28
 803f172:	f000 fd86 	bl	803fc82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 803f176:	bf00      	nop
 803f178:	3710      	adds	r7, #16
 803f17a:	46bd      	mov	sp, r7
 803f17c:	bd80      	pop	{r7, pc}
 803f17e:	bf00      	nop
 803f180:	40023800 	.word	0x40023800

0803f184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 803f184:	b580      	push	{r7, lr}
 803f186:	b08c      	sub	sp, #48	@ 0x30
 803f188:	af00      	add	r7, sp, #0
 803f18a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 803f18c:	f107 031c 	add.w	r3, r7, #28
 803f190:	2200      	movs	r2, #0
 803f192:	601a      	str	r2, [r3, #0]
 803f194:	605a      	str	r2, [r3, #4]
 803f196:	609a      	str	r2, [r3, #8]
 803f198:	60da      	str	r2, [r3, #12]
 803f19a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 803f19c:	687b      	ldr	r3, [r7, #4]
 803f19e:	681b      	ldr	r3, [r3, #0]
 803f1a0:	4a46      	ldr	r2, [pc, #280]	@ (803f2bc <HAL_UART_MspInit+0x138>)
 803f1a2:	4293      	cmp	r3, r2
 803f1a4:	d153      	bne.n	803f24e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 803f1a6:	2300      	movs	r3, #0
 803f1a8:	61bb      	str	r3, [r7, #24]
 803f1aa:	4b45      	ldr	r3, [pc, #276]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f1ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f1ae:	4a44      	ldr	r2, [pc, #272]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f1b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 803f1b4:	6413      	str	r3, [r2, #64]	@ 0x40
 803f1b6:	4b42      	ldr	r3, [pc, #264]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f1ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 803f1be:	61bb      	str	r3, [r7, #24]
 803f1c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 803f1c2:	2300      	movs	r3, #0
 803f1c4:	617b      	str	r3, [r7, #20]
 803f1c6:	4b3e      	ldr	r3, [pc, #248]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f1c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803f1ca:	4a3d      	ldr	r2, [pc, #244]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f1cc:	f043 0304 	orr.w	r3, r3, #4
 803f1d0:	6313      	str	r3, [r2, #48]	@ 0x30
 803f1d2:	4b3b      	ldr	r3, [pc, #236]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f1d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803f1d6:	f003 0304 	and.w	r3, r3, #4
 803f1da:	617b      	str	r3, [r7, #20]
 803f1dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 803f1de:	2300      	movs	r3, #0
 803f1e0:	613b      	str	r3, [r7, #16]
 803f1e2:	4b37      	ldr	r3, [pc, #220]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f1e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803f1e6:	4a36      	ldr	r2, [pc, #216]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f1e8:	f043 0308 	orr.w	r3, r3, #8
 803f1ec:	6313      	str	r3, [r2, #48]	@ 0x30
 803f1ee:	4b34      	ldr	r3, [pc, #208]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f1f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803f1f2:	f003 0308 	and.w	r3, r3, #8
 803f1f6:	613b      	str	r3, [r7, #16]
 803f1f8:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 803f1fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 803f1fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803f200:	2302      	movs	r3, #2
 803f202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803f204:	2300      	movs	r3, #0
 803f206:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803f208:	2303      	movs	r3, #3
 803f20a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 803f20c:	2308      	movs	r3, #8
 803f20e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 803f210:	f107 031c 	add.w	r3, r7, #28
 803f214:	4619      	mov	r1, r3
 803f216:	482b      	ldr	r0, [pc, #172]	@ (803f2c4 <HAL_UART_MspInit+0x140>)
 803f218:	f001 fbe6 	bl	80409e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 803f21c:	2304      	movs	r3, #4
 803f21e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803f220:	2302      	movs	r3, #2
 803f222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803f224:	2300      	movs	r3, #0
 803f226:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803f228:	2303      	movs	r3, #3
 803f22a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 803f22c:	2308      	movs	r3, #8
 803f22e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 803f230:	f107 031c 	add.w	r3, r7, #28
 803f234:	4619      	mov	r1, r3
 803f236:	4824      	ldr	r0, [pc, #144]	@ (803f2c8 <HAL_UART_MspInit+0x144>)
 803f238:	f001 fbd6 	bl	80409e8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 803f23c:	2200      	movs	r2, #0
 803f23e:	2100      	movs	r1, #0
 803f240:	2035      	movs	r0, #53	@ 0x35
 803f242:	f000 fd02 	bl	803fc4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 803f246:	2035      	movs	r0, #53	@ 0x35
 803f248:	f000 fd1b 	bl	803fc82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 803f24c:	e031      	b.n	803f2b2 <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 803f24e:	687b      	ldr	r3, [r7, #4]
 803f250:	681b      	ldr	r3, [r3, #0]
 803f252:	4a1e      	ldr	r2, [pc, #120]	@ (803f2cc <HAL_UART_MspInit+0x148>)
 803f254:	4293      	cmp	r3, r2
 803f256:	d12c      	bne.n	803f2b2 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 803f258:	2300      	movs	r3, #0
 803f25a:	60fb      	str	r3, [r7, #12]
 803f25c:	4b18      	ldr	r3, [pc, #96]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f25e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803f260:	4a17      	ldr	r2, [pc, #92]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f262:	f043 0310 	orr.w	r3, r3, #16
 803f266:	6453      	str	r3, [r2, #68]	@ 0x44
 803f268:	4b15      	ldr	r3, [pc, #84]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f26a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 803f26c:	f003 0310 	and.w	r3, r3, #16
 803f270:	60fb      	str	r3, [r7, #12]
 803f272:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 803f274:	2300      	movs	r3, #0
 803f276:	60bb      	str	r3, [r7, #8]
 803f278:	4b11      	ldr	r3, [pc, #68]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f27a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803f27c:	4a10      	ldr	r2, [pc, #64]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f27e:	f043 0301 	orr.w	r3, r3, #1
 803f282:	6313      	str	r3, [r2, #48]	@ 0x30
 803f284:	4b0e      	ldr	r3, [pc, #56]	@ (803f2c0 <HAL_UART_MspInit+0x13c>)
 803f286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803f288:	f003 0301 	and.w	r3, r3, #1
 803f28c:	60bb      	str	r3, [r7, #8]
 803f28e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 803f290:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 803f294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 803f296:	2302      	movs	r3, #2
 803f298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 803f29a:	2300      	movs	r3, #0
 803f29c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 803f29e:	2303      	movs	r3, #3
 803f2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 803f2a2:	2307      	movs	r3, #7
 803f2a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 803f2a6:	f107 031c 	add.w	r3, r7, #28
 803f2aa:	4619      	mov	r1, r3
 803f2ac:	4808      	ldr	r0, [pc, #32]	@ (803f2d0 <HAL_UART_MspInit+0x14c>)
 803f2ae:	f001 fb9b 	bl	80409e8 <HAL_GPIO_Init>
}
 803f2b2:	bf00      	nop
 803f2b4:	3730      	adds	r7, #48	@ 0x30
 803f2b6:	46bd      	mov	sp, r7
 803f2b8:	bd80      	pop	{r7, pc}
 803f2ba:	bf00      	nop
 803f2bc:	40005000 	.word	0x40005000
 803f2c0:	40023800 	.word	0x40023800
 803f2c4:	40020800 	.word	0x40020800
 803f2c8:	40020c00 	.word	0x40020c00
 803f2cc:	40011000 	.word	0x40011000
 803f2d0:	40020000 	.word	0x40020000

0803f2d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 803f2d4:	b480      	push	{r7}
 803f2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) { }
 803f2d8:	bf00      	nop
 803f2da:	e7fd      	b.n	803f2d8 <NMI_Handler+0x4>

0803f2dc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 803f2dc:	bf00      	nop
 803f2de:	e7fd      	b.n	803f2dc <HardFault_Handler>

0803f2e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 803f2e0:	b580      	push	{r7, lr}
 803f2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* Přesměruj do HardFault pro konzistentní log (většina projektů stejně resetuje). */
  HardFault_Handler();
 803f2e4:	f7ff fffa 	bl	803f2dc <HardFault_Handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 803f2e8:	bf00      	nop
 803f2ea:	e7fd      	b.n	803f2e8 <MemManage_Handler+0x8>

0803f2ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 803f2ec:	b580      	push	{r7, lr}
 803f2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  HardFault_Handler();
 803f2f0:	f7ff fff4 	bl	803f2dc <HardFault_Handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 803f2f4:	bf00      	nop
 803f2f6:	e7fd      	b.n	803f2f4 <BusFault_Handler+0x8>

0803f2f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 803f2f8:	b580      	push	{r7, lr}
 803f2fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  HardFault_Handler();
 803f2fc:	f7ff ffee 	bl	803f2dc <HardFault_Handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 803f300:	bf00      	nop
 803f302:	e7fd      	b.n	803f300 <UsageFault_Handler+0x8>

0803f304 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 803f304:	b480      	push	{r7}
 803f306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 803f308:	bf00      	nop
 803f30a:	46bd      	mov	sp, r7
 803f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f310:	4770      	bx	lr

0803f312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 803f312:	b480      	push	{r7}
 803f314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 803f316:	bf00      	nop
 803f318:	46bd      	mov	sp, r7
 803f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f31e:	4770      	bx	lr

0803f320 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 803f320:	b480      	push	{r7}
 803f322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 803f324:	bf00      	nop
 803f326:	46bd      	mov	sp, r7
 803f328:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f32c:	4770      	bx	lr

0803f32e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 803f32e:	b580      	push	{r7, lr}
 803f330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 803f332:	f000 f8b7 	bl	803f4a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 803f336:	bf00      	nop
 803f338:	bd80      	pop	{r7, pc}
	...

0803f33c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 803f33c:	b580      	push	{r7, lr}
 803f33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 803f340:	4802      	ldr	r0, [pc, #8]	@ (803f34c <TIM2_IRQHandler+0x10>)
 803f342:	f002 fdfe 	bl	8041f42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 803f346:	bf00      	nop
 803f348:	bd80      	pop	{r7, pc}
 803f34a:	bf00      	nop
 803f34c:	20000a44 	.word	0x20000a44

0803f350 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 803f350:	b580      	push	{r7, lr}
 803f352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 803f354:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 803f358:	f001 fd0e 	bl	8040d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 803f35c:	bf00      	nop
 803f35e:	bd80      	pop	{r7, pc}

0803f360 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 803f360:	b580      	push	{r7, lr}
 803f362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 803f364:	4802      	ldr	r0, [pc, #8]	@ (803f370 <UART5_IRQHandler+0x10>)
 803f366:	f003 fc0d 	bl	8042b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 803f36a:	bf00      	nop
 803f36c:	bd80      	pop	{r7, pc}
 803f36e:	bf00      	nop
 803f370:	20000a8c 	.word	0x20000a8c

0803f374 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 803f374:	b580      	push	{r7, lr}
 803f376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 803f378:	4802      	ldr	r0, [pc, #8]	@ (803f384 <DMA2_Stream0_IRQHandler+0x10>)
 803f37a:	f000 fe15 	bl	803ffa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 803f37e:	bf00      	nop
 803f380:	bd80      	pop	{r7, pc}
 803f382:	bf00      	nop
 803f384:	20000924 	.word	0x20000924

0803f388 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 803f388:	b480      	push	{r7}
 803f38a:	af00      	add	r7, sp, #0
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 803f38c:	4b06      	ldr	r3, [pc, #24]	@ (803f3a8 <SystemInit+0x20>)
 803f38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 803f392:	4a05      	ldr	r2, [pc, #20]	@ (803f3a8 <SystemInit+0x20>)
 803f394:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 803f398:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 803f39c:	bf00      	nop
 803f39e:	46bd      	mov	sp, r7
 803f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f3a4:	4770      	bx	lr
 803f3a6:	bf00      	nop
 803f3a8:	e000ed00 	.word	0xe000ed00

0803f3ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 803f3ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 803f3e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 803f3b0:	f7ff ffea 	bl	803f388 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 803f3b4:	480c      	ldr	r0, [pc, #48]	@ (803f3e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 803f3b6:	490d      	ldr	r1, [pc, #52]	@ (803f3ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 803f3b8:	4a0d      	ldr	r2, [pc, #52]	@ (803f3f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 803f3ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 803f3bc:	e002      	b.n	803f3c4 <LoopCopyDataInit>

0803f3be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 803f3be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 803f3c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 803f3c2:	3304      	adds	r3, #4

0803f3c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 803f3c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 803f3c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 803f3c8:	d3f9      	bcc.n	803f3be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 803f3ca:	4a0a      	ldr	r2, [pc, #40]	@ (803f3f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 803f3cc:	4c0a      	ldr	r4, [pc, #40]	@ (803f3f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 803f3ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 803f3d0:	e001      	b.n	803f3d6 <LoopFillZerobss>

0803f3d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 803f3d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 803f3d4:	3204      	adds	r2, #4

0803f3d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 803f3d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 803f3d8:	d3fb      	bcc.n	803f3d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 803f3da:	f004 fbc7 	bl	8043b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 803f3de:	f7ff f961 	bl	803e6a4 <main>
  bx  lr    
 803f3e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 803f3e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 803f3e8:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 803f3ec:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 803f3f0:	08043e0c 	.word	0x08043e0c
  ldr r2, =_sbss
 803f3f4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 803f3f8:	20000b48 	.word	0x20000b48

0803f3fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 803f3fc:	e7fe      	b.n	803f3fc <ADC_IRQHandler>
	...

0803f400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 803f400:	b580      	push	{r7, lr}
 803f402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 803f404:	4b0e      	ldr	r3, [pc, #56]	@ (803f440 <HAL_Init+0x40>)
 803f406:	681b      	ldr	r3, [r3, #0]
 803f408:	4a0d      	ldr	r2, [pc, #52]	@ (803f440 <HAL_Init+0x40>)
 803f40a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 803f40e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 803f410:	4b0b      	ldr	r3, [pc, #44]	@ (803f440 <HAL_Init+0x40>)
 803f412:	681b      	ldr	r3, [r3, #0]
 803f414:	4a0a      	ldr	r2, [pc, #40]	@ (803f440 <HAL_Init+0x40>)
 803f416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 803f41a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 803f41c:	4b08      	ldr	r3, [pc, #32]	@ (803f440 <HAL_Init+0x40>)
 803f41e:	681b      	ldr	r3, [r3, #0]
 803f420:	4a07      	ldr	r2, [pc, #28]	@ (803f440 <HAL_Init+0x40>)
 803f422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 803f426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 803f428:	2003      	movs	r0, #3
 803f42a:	f000 fc03 	bl	803fc34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 803f42e:	200f      	movs	r0, #15
 803f430:	f000 f808 	bl	803f444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 803f434:	f7ff fd00 	bl	803ee38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 803f438:	2300      	movs	r3, #0
}
 803f43a:	4618      	mov	r0, r3
 803f43c:	bd80      	pop	{r7, pc}
 803f43e:	bf00      	nop
 803f440:	40023c00 	.word	0x40023c00

0803f444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 803f444:	b580      	push	{r7, lr}
 803f446:	b082      	sub	sp, #8
 803f448:	af00      	add	r7, sp, #0
 803f44a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 803f44c:	4b12      	ldr	r3, [pc, #72]	@ (803f498 <HAL_InitTick+0x54>)
 803f44e:	681a      	ldr	r2, [r3, #0]
 803f450:	4b12      	ldr	r3, [pc, #72]	@ (803f49c <HAL_InitTick+0x58>)
 803f452:	781b      	ldrb	r3, [r3, #0]
 803f454:	4619      	mov	r1, r3
 803f456:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 803f45a:	fbb3 f3f1 	udiv	r3, r3, r1
 803f45e:	fbb2 f3f3 	udiv	r3, r2, r3
 803f462:	4618      	mov	r0, r3
 803f464:	f000 fc29 	bl	803fcba <HAL_SYSTICK_Config>
 803f468:	4603      	mov	r3, r0
 803f46a:	2b00      	cmp	r3, #0
 803f46c:	d001      	beq.n	803f472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 803f46e:	2301      	movs	r3, #1
 803f470:	e00e      	b.n	803f490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 803f472:	687b      	ldr	r3, [r7, #4]
 803f474:	2b0f      	cmp	r3, #15
 803f476:	d80a      	bhi.n	803f48e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 803f478:	2200      	movs	r2, #0
 803f47a:	6879      	ldr	r1, [r7, #4]
 803f47c:	f04f 30ff 	mov.w	r0, #4294967295
 803f480:	f000 fbe3 	bl	803fc4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 803f484:	4a06      	ldr	r2, [pc, #24]	@ (803f4a0 <HAL_InitTick+0x5c>)
 803f486:	687b      	ldr	r3, [r7, #4]
 803f488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 803f48a:	2300      	movs	r3, #0
 803f48c:	e000      	b.n	803f490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 803f48e:	2301      	movs	r3, #1
}
 803f490:	4618      	mov	r0, r3
 803f492:	3708      	adds	r7, #8
 803f494:	46bd      	mov	sp, r7
 803f496:	bd80      	pop	{r7, pc}
 803f498:	200000c0 	.word	0x200000c0
 803f49c:	200000c8 	.word	0x200000c8
 803f4a0:	200000c4 	.word	0x200000c4

0803f4a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 803f4a4:	b480      	push	{r7}
 803f4a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 803f4a8:	4b06      	ldr	r3, [pc, #24]	@ (803f4c4 <HAL_IncTick+0x20>)
 803f4aa:	781b      	ldrb	r3, [r3, #0]
 803f4ac:	461a      	mov	r2, r3
 803f4ae:	4b06      	ldr	r3, [pc, #24]	@ (803f4c8 <HAL_IncTick+0x24>)
 803f4b0:	681b      	ldr	r3, [r3, #0]
 803f4b2:	4413      	add	r3, r2
 803f4b4:	4a04      	ldr	r2, [pc, #16]	@ (803f4c8 <HAL_IncTick+0x24>)
 803f4b6:	6013      	str	r3, [r2, #0]
}
 803f4b8:	bf00      	nop
 803f4ba:	46bd      	mov	sp, r7
 803f4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f4c0:	4770      	bx	lr
 803f4c2:	bf00      	nop
 803f4c4:	200000c8 	.word	0x200000c8
 803f4c8:	20000b24 	.word	0x20000b24

0803f4cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 803f4cc:	b480      	push	{r7}
 803f4ce:	af00      	add	r7, sp, #0
  return uwTick;
 803f4d0:	4b03      	ldr	r3, [pc, #12]	@ (803f4e0 <HAL_GetTick+0x14>)
 803f4d2:	681b      	ldr	r3, [r3, #0]
}
 803f4d4:	4618      	mov	r0, r3
 803f4d6:	46bd      	mov	sp, r7
 803f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f4dc:	4770      	bx	lr
 803f4de:	bf00      	nop
 803f4e0:	20000b24 	.word	0x20000b24

0803f4e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 803f4e4:	b580      	push	{r7, lr}
 803f4e6:	b084      	sub	sp, #16
 803f4e8:	af00      	add	r7, sp, #0
 803f4ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 803f4ec:	f7ff ffee 	bl	803f4cc <HAL_GetTick>
 803f4f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 803f4f2:	687b      	ldr	r3, [r7, #4]
 803f4f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 803f4f6:	68fb      	ldr	r3, [r7, #12]
 803f4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 803f4fc:	d005      	beq.n	803f50a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 803f4fe:	4b0a      	ldr	r3, [pc, #40]	@ (803f528 <HAL_Delay+0x44>)
 803f500:	781b      	ldrb	r3, [r3, #0]
 803f502:	461a      	mov	r2, r3
 803f504:	68fb      	ldr	r3, [r7, #12]
 803f506:	4413      	add	r3, r2
 803f508:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 803f50a:	bf00      	nop
 803f50c:	f7ff ffde 	bl	803f4cc <HAL_GetTick>
 803f510:	4602      	mov	r2, r0
 803f512:	68bb      	ldr	r3, [r7, #8]
 803f514:	1ad3      	subs	r3, r2, r3
 803f516:	68fa      	ldr	r2, [r7, #12]
 803f518:	429a      	cmp	r2, r3
 803f51a:	d8f7      	bhi.n	803f50c <HAL_Delay+0x28>
  {
  }
}
 803f51c:	bf00      	nop
 803f51e:	bf00      	nop
 803f520:	3710      	adds	r7, #16
 803f522:	46bd      	mov	sp, r7
 803f524:	bd80      	pop	{r7, pc}
 803f526:	bf00      	nop
 803f528:	200000c8 	.word	0x200000c8

0803f52c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 803f52c:	b580      	push	{r7, lr}
 803f52e:	b084      	sub	sp, #16
 803f530:	af00      	add	r7, sp, #0
 803f532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 803f534:	2300      	movs	r3, #0
 803f536:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 803f538:	687b      	ldr	r3, [r7, #4]
 803f53a:	2b00      	cmp	r3, #0
 803f53c:	d101      	bne.n	803f542 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 803f53e:	2301      	movs	r3, #1
 803f540:	e033      	b.n	803f5aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 803f542:	687b      	ldr	r3, [r7, #4]
 803f544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f546:	2b00      	cmp	r3, #0
 803f548:	d109      	bne.n	803f55e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 803f54a:	6878      	ldr	r0, [r7, #4]
 803f54c:	f7ff fc9c 	bl	803ee88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 803f550:	687b      	ldr	r3, [r7, #4]
 803f552:	2200      	movs	r2, #0
 803f554:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 803f556:	687b      	ldr	r3, [r7, #4]
 803f558:	2200      	movs	r2, #0
 803f55a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 803f55e:	687b      	ldr	r3, [r7, #4]
 803f560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f562:	f003 0310 	and.w	r3, r3, #16
 803f566:	2b00      	cmp	r3, #0
 803f568:	d118      	bne.n	803f59c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 803f56a:	687b      	ldr	r3, [r7, #4]
 803f56c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f56e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 803f572:	f023 0302 	bic.w	r3, r3, #2
 803f576:	f043 0202 	orr.w	r2, r3, #2
 803f57a:	687b      	ldr	r3, [r7, #4]
 803f57c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 803f57e:	6878      	ldr	r0, [r7, #4]
 803f580:	f000 f94a 	bl	803f818 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 803f584:	687b      	ldr	r3, [r7, #4]
 803f586:	2200      	movs	r2, #0
 803f588:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 803f58a:	687b      	ldr	r3, [r7, #4]
 803f58c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803f58e:	f023 0303 	bic.w	r3, r3, #3
 803f592:	f043 0201 	orr.w	r2, r3, #1
 803f596:	687b      	ldr	r3, [r7, #4]
 803f598:	641a      	str	r2, [r3, #64]	@ 0x40
 803f59a:	e001      	b.n	803f5a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 803f59c:	2301      	movs	r3, #1
 803f59e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 803f5a0:	687b      	ldr	r3, [r7, #4]
 803f5a2:	2200      	movs	r2, #0
 803f5a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 803f5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 803f5aa:	4618      	mov	r0, r3
 803f5ac:	3710      	adds	r7, #16
 803f5ae:	46bd      	mov	sp, r7
 803f5b0:	bd80      	pop	{r7, pc}
	...

0803f5b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 803f5b4:	b480      	push	{r7}
 803f5b6:	b085      	sub	sp, #20
 803f5b8:	af00      	add	r7, sp, #0
 803f5ba:	6078      	str	r0, [r7, #4]
 803f5bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 803f5be:	2300      	movs	r3, #0
 803f5c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 803f5c2:	687b      	ldr	r3, [r7, #4]
 803f5c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 803f5c8:	2b01      	cmp	r3, #1
 803f5ca:	d101      	bne.n	803f5d0 <HAL_ADC_ConfigChannel+0x1c>
 803f5cc:	2302      	movs	r3, #2
 803f5ce:	e113      	b.n	803f7f8 <HAL_ADC_ConfigChannel+0x244>
 803f5d0:	687b      	ldr	r3, [r7, #4]
 803f5d2:	2201      	movs	r2, #1
 803f5d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 803f5d8:	683b      	ldr	r3, [r7, #0]
 803f5da:	681b      	ldr	r3, [r3, #0]
 803f5dc:	2b09      	cmp	r3, #9
 803f5de:	d925      	bls.n	803f62c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 803f5e0:	687b      	ldr	r3, [r7, #4]
 803f5e2:	681b      	ldr	r3, [r3, #0]
 803f5e4:	68d9      	ldr	r1, [r3, #12]
 803f5e6:	683b      	ldr	r3, [r7, #0]
 803f5e8:	681b      	ldr	r3, [r3, #0]
 803f5ea:	b29b      	uxth	r3, r3
 803f5ec:	461a      	mov	r2, r3
 803f5ee:	4613      	mov	r3, r2
 803f5f0:	005b      	lsls	r3, r3, #1
 803f5f2:	4413      	add	r3, r2
 803f5f4:	3b1e      	subs	r3, #30
 803f5f6:	2207      	movs	r2, #7
 803f5f8:	fa02 f303 	lsl.w	r3, r2, r3
 803f5fc:	43da      	mvns	r2, r3
 803f5fe:	687b      	ldr	r3, [r7, #4]
 803f600:	681b      	ldr	r3, [r3, #0]
 803f602:	400a      	ands	r2, r1
 803f604:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 803f606:	687b      	ldr	r3, [r7, #4]
 803f608:	681b      	ldr	r3, [r3, #0]
 803f60a:	68d9      	ldr	r1, [r3, #12]
 803f60c:	683b      	ldr	r3, [r7, #0]
 803f60e:	689a      	ldr	r2, [r3, #8]
 803f610:	683b      	ldr	r3, [r7, #0]
 803f612:	681b      	ldr	r3, [r3, #0]
 803f614:	b29b      	uxth	r3, r3
 803f616:	4618      	mov	r0, r3
 803f618:	4603      	mov	r3, r0
 803f61a:	005b      	lsls	r3, r3, #1
 803f61c:	4403      	add	r3, r0
 803f61e:	3b1e      	subs	r3, #30
 803f620:	409a      	lsls	r2, r3
 803f622:	687b      	ldr	r3, [r7, #4]
 803f624:	681b      	ldr	r3, [r3, #0]
 803f626:	430a      	orrs	r2, r1
 803f628:	60da      	str	r2, [r3, #12]
 803f62a:	e022      	b.n	803f672 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 803f62c:	687b      	ldr	r3, [r7, #4]
 803f62e:	681b      	ldr	r3, [r3, #0]
 803f630:	6919      	ldr	r1, [r3, #16]
 803f632:	683b      	ldr	r3, [r7, #0]
 803f634:	681b      	ldr	r3, [r3, #0]
 803f636:	b29b      	uxth	r3, r3
 803f638:	461a      	mov	r2, r3
 803f63a:	4613      	mov	r3, r2
 803f63c:	005b      	lsls	r3, r3, #1
 803f63e:	4413      	add	r3, r2
 803f640:	2207      	movs	r2, #7
 803f642:	fa02 f303 	lsl.w	r3, r2, r3
 803f646:	43da      	mvns	r2, r3
 803f648:	687b      	ldr	r3, [r7, #4]
 803f64a:	681b      	ldr	r3, [r3, #0]
 803f64c:	400a      	ands	r2, r1
 803f64e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 803f650:	687b      	ldr	r3, [r7, #4]
 803f652:	681b      	ldr	r3, [r3, #0]
 803f654:	6919      	ldr	r1, [r3, #16]
 803f656:	683b      	ldr	r3, [r7, #0]
 803f658:	689a      	ldr	r2, [r3, #8]
 803f65a:	683b      	ldr	r3, [r7, #0]
 803f65c:	681b      	ldr	r3, [r3, #0]
 803f65e:	b29b      	uxth	r3, r3
 803f660:	4618      	mov	r0, r3
 803f662:	4603      	mov	r3, r0
 803f664:	005b      	lsls	r3, r3, #1
 803f666:	4403      	add	r3, r0
 803f668:	409a      	lsls	r2, r3
 803f66a:	687b      	ldr	r3, [r7, #4]
 803f66c:	681b      	ldr	r3, [r3, #0]
 803f66e:	430a      	orrs	r2, r1
 803f670:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 803f672:	683b      	ldr	r3, [r7, #0]
 803f674:	685b      	ldr	r3, [r3, #4]
 803f676:	2b06      	cmp	r3, #6
 803f678:	d824      	bhi.n	803f6c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 803f67a:	687b      	ldr	r3, [r7, #4]
 803f67c:	681b      	ldr	r3, [r3, #0]
 803f67e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 803f680:	683b      	ldr	r3, [r7, #0]
 803f682:	685a      	ldr	r2, [r3, #4]
 803f684:	4613      	mov	r3, r2
 803f686:	009b      	lsls	r3, r3, #2
 803f688:	4413      	add	r3, r2
 803f68a:	3b05      	subs	r3, #5
 803f68c:	221f      	movs	r2, #31
 803f68e:	fa02 f303 	lsl.w	r3, r2, r3
 803f692:	43da      	mvns	r2, r3
 803f694:	687b      	ldr	r3, [r7, #4]
 803f696:	681b      	ldr	r3, [r3, #0]
 803f698:	400a      	ands	r2, r1
 803f69a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 803f69c:	687b      	ldr	r3, [r7, #4]
 803f69e:	681b      	ldr	r3, [r3, #0]
 803f6a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 803f6a2:	683b      	ldr	r3, [r7, #0]
 803f6a4:	681b      	ldr	r3, [r3, #0]
 803f6a6:	b29b      	uxth	r3, r3
 803f6a8:	4618      	mov	r0, r3
 803f6aa:	683b      	ldr	r3, [r7, #0]
 803f6ac:	685a      	ldr	r2, [r3, #4]
 803f6ae:	4613      	mov	r3, r2
 803f6b0:	009b      	lsls	r3, r3, #2
 803f6b2:	4413      	add	r3, r2
 803f6b4:	3b05      	subs	r3, #5
 803f6b6:	fa00 f203 	lsl.w	r2, r0, r3
 803f6ba:	687b      	ldr	r3, [r7, #4]
 803f6bc:	681b      	ldr	r3, [r3, #0]
 803f6be:	430a      	orrs	r2, r1
 803f6c0:	635a      	str	r2, [r3, #52]	@ 0x34
 803f6c2:	e04c      	b.n	803f75e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 803f6c4:	683b      	ldr	r3, [r7, #0]
 803f6c6:	685b      	ldr	r3, [r3, #4]
 803f6c8:	2b0c      	cmp	r3, #12
 803f6ca:	d824      	bhi.n	803f716 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 803f6cc:	687b      	ldr	r3, [r7, #4]
 803f6ce:	681b      	ldr	r3, [r3, #0]
 803f6d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 803f6d2:	683b      	ldr	r3, [r7, #0]
 803f6d4:	685a      	ldr	r2, [r3, #4]
 803f6d6:	4613      	mov	r3, r2
 803f6d8:	009b      	lsls	r3, r3, #2
 803f6da:	4413      	add	r3, r2
 803f6dc:	3b23      	subs	r3, #35	@ 0x23
 803f6de:	221f      	movs	r2, #31
 803f6e0:	fa02 f303 	lsl.w	r3, r2, r3
 803f6e4:	43da      	mvns	r2, r3
 803f6e6:	687b      	ldr	r3, [r7, #4]
 803f6e8:	681b      	ldr	r3, [r3, #0]
 803f6ea:	400a      	ands	r2, r1
 803f6ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 803f6ee:	687b      	ldr	r3, [r7, #4]
 803f6f0:	681b      	ldr	r3, [r3, #0]
 803f6f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 803f6f4:	683b      	ldr	r3, [r7, #0]
 803f6f6:	681b      	ldr	r3, [r3, #0]
 803f6f8:	b29b      	uxth	r3, r3
 803f6fa:	4618      	mov	r0, r3
 803f6fc:	683b      	ldr	r3, [r7, #0]
 803f6fe:	685a      	ldr	r2, [r3, #4]
 803f700:	4613      	mov	r3, r2
 803f702:	009b      	lsls	r3, r3, #2
 803f704:	4413      	add	r3, r2
 803f706:	3b23      	subs	r3, #35	@ 0x23
 803f708:	fa00 f203 	lsl.w	r2, r0, r3
 803f70c:	687b      	ldr	r3, [r7, #4]
 803f70e:	681b      	ldr	r3, [r3, #0]
 803f710:	430a      	orrs	r2, r1
 803f712:	631a      	str	r2, [r3, #48]	@ 0x30
 803f714:	e023      	b.n	803f75e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 803f716:	687b      	ldr	r3, [r7, #4]
 803f718:	681b      	ldr	r3, [r3, #0]
 803f71a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 803f71c:	683b      	ldr	r3, [r7, #0]
 803f71e:	685a      	ldr	r2, [r3, #4]
 803f720:	4613      	mov	r3, r2
 803f722:	009b      	lsls	r3, r3, #2
 803f724:	4413      	add	r3, r2
 803f726:	3b41      	subs	r3, #65	@ 0x41
 803f728:	221f      	movs	r2, #31
 803f72a:	fa02 f303 	lsl.w	r3, r2, r3
 803f72e:	43da      	mvns	r2, r3
 803f730:	687b      	ldr	r3, [r7, #4]
 803f732:	681b      	ldr	r3, [r3, #0]
 803f734:	400a      	ands	r2, r1
 803f736:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 803f738:	687b      	ldr	r3, [r7, #4]
 803f73a:	681b      	ldr	r3, [r3, #0]
 803f73c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 803f73e:	683b      	ldr	r3, [r7, #0]
 803f740:	681b      	ldr	r3, [r3, #0]
 803f742:	b29b      	uxth	r3, r3
 803f744:	4618      	mov	r0, r3
 803f746:	683b      	ldr	r3, [r7, #0]
 803f748:	685a      	ldr	r2, [r3, #4]
 803f74a:	4613      	mov	r3, r2
 803f74c:	009b      	lsls	r3, r3, #2
 803f74e:	4413      	add	r3, r2
 803f750:	3b41      	subs	r3, #65	@ 0x41
 803f752:	fa00 f203 	lsl.w	r2, r0, r3
 803f756:	687b      	ldr	r3, [r7, #4]
 803f758:	681b      	ldr	r3, [r3, #0]
 803f75a:	430a      	orrs	r2, r1
 803f75c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 803f75e:	4b29      	ldr	r3, [pc, #164]	@ (803f804 <HAL_ADC_ConfigChannel+0x250>)
 803f760:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 803f762:	687b      	ldr	r3, [r7, #4]
 803f764:	681b      	ldr	r3, [r3, #0]
 803f766:	4a28      	ldr	r2, [pc, #160]	@ (803f808 <HAL_ADC_ConfigChannel+0x254>)
 803f768:	4293      	cmp	r3, r2
 803f76a:	d10f      	bne.n	803f78c <HAL_ADC_ConfigChannel+0x1d8>
 803f76c:	683b      	ldr	r3, [r7, #0]
 803f76e:	681b      	ldr	r3, [r3, #0]
 803f770:	2b12      	cmp	r3, #18
 803f772:	d10b      	bne.n	803f78c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 803f774:	68fb      	ldr	r3, [r7, #12]
 803f776:	685b      	ldr	r3, [r3, #4]
 803f778:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 803f77c:	68fb      	ldr	r3, [r7, #12]
 803f77e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 803f780:	68fb      	ldr	r3, [r7, #12]
 803f782:	685b      	ldr	r3, [r3, #4]
 803f784:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 803f788:	68fb      	ldr	r3, [r7, #12]
 803f78a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 803f78c:	687b      	ldr	r3, [r7, #4]
 803f78e:	681b      	ldr	r3, [r3, #0]
 803f790:	4a1d      	ldr	r2, [pc, #116]	@ (803f808 <HAL_ADC_ConfigChannel+0x254>)
 803f792:	4293      	cmp	r3, r2
 803f794:	d12b      	bne.n	803f7ee <HAL_ADC_ConfigChannel+0x23a>
 803f796:	683b      	ldr	r3, [r7, #0]
 803f798:	681b      	ldr	r3, [r3, #0]
 803f79a:	4a1c      	ldr	r2, [pc, #112]	@ (803f80c <HAL_ADC_ConfigChannel+0x258>)
 803f79c:	4293      	cmp	r3, r2
 803f79e:	d003      	beq.n	803f7a8 <HAL_ADC_ConfigChannel+0x1f4>
 803f7a0:	683b      	ldr	r3, [r7, #0]
 803f7a2:	681b      	ldr	r3, [r3, #0]
 803f7a4:	2b11      	cmp	r3, #17
 803f7a6:	d122      	bne.n	803f7ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 803f7a8:	68fb      	ldr	r3, [r7, #12]
 803f7aa:	685b      	ldr	r3, [r3, #4]
 803f7ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 803f7b0:	68fb      	ldr	r3, [r7, #12]
 803f7b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 803f7b4:	68fb      	ldr	r3, [r7, #12]
 803f7b6:	685b      	ldr	r3, [r3, #4]
 803f7b8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 803f7bc:	68fb      	ldr	r3, [r7, #12]
 803f7be:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 803f7c0:	683b      	ldr	r3, [r7, #0]
 803f7c2:	681b      	ldr	r3, [r3, #0]
 803f7c4:	4a11      	ldr	r2, [pc, #68]	@ (803f80c <HAL_ADC_ConfigChannel+0x258>)
 803f7c6:	4293      	cmp	r3, r2
 803f7c8:	d111      	bne.n	803f7ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 803f7ca:	4b11      	ldr	r3, [pc, #68]	@ (803f810 <HAL_ADC_ConfigChannel+0x25c>)
 803f7cc:	681b      	ldr	r3, [r3, #0]
 803f7ce:	4a11      	ldr	r2, [pc, #68]	@ (803f814 <HAL_ADC_ConfigChannel+0x260>)
 803f7d0:	fba2 2303 	umull	r2, r3, r2, r3
 803f7d4:	0c9a      	lsrs	r2, r3, #18
 803f7d6:	4613      	mov	r3, r2
 803f7d8:	009b      	lsls	r3, r3, #2
 803f7da:	4413      	add	r3, r2
 803f7dc:	005b      	lsls	r3, r3, #1
 803f7de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 803f7e0:	e002      	b.n	803f7e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 803f7e2:	68bb      	ldr	r3, [r7, #8]
 803f7e4:	3b01      	subs	r3, #1
 803f7e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 803f7e8:	68bb      	ldr	r3, [r7, #8]
 803f7ea:	2b00      	cmp	r3, #0
 803f7ec:	d1f9      	bne.n	803f7e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 803f7ee:	687b      	ldr	r3, [r7, #4]
 803f7f0:	2200      	movs	r2, #0
 803f7f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 803f7f6:	2300      	movs	r3, #0
}
 803f7f8:	4618      	mov	r0, r3
 803f7fa:	3714      	adds	r7, #20
 803f7fc:	46bd      	mov	sp, r7
 803f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 803f802:	4770      	bx	lr
 803f804:	40012300 	.word	0x40012300
 803f808:	40012000 	.word	0x40012000
 803f80c:	10000012 	.word	0x10000012
 803f810:	200000c0 	.word	0x200000c0
 803f814:	431bde83 	.word	0x431bde83

0803f818 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 803f818:	b480      	push	{r7}
 803f81a:	b085      	sub	sp, #20
 803f81c:	af00      	add	r7, sp, #0
 803f81e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 803f820:	4b79      	ldr	r3, [pc, #484]	@ (803fa08 <ADC_Init+0x1f0>)
 803f822:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 803f824:	68fb      	ldr	r3, [r7, #12]
 803f826:	685b      	ldr	r3, [r3, #4]
 803f828:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 803f82c:	68fb      	ldr	r3, [r7, #12]
 803f82e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 803f830:	68fb      	ldr	r3, [r7, #12]
 803f832:	685a      	ldr	r2, [r3, #4]
 803f834:	687b      	ldr	r3, [r7, #4]
 803f836:	685b      	ldr	r3, [r3, #4]
 803f838:	431a      	orrs	r2, r3
 803f83a:	68fb      	ldr	r3, [r7, #12]
 803f83c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 803f83e:	687b      	ldr	r3, [r7, #4]
 803f840:	681b      	ldr	r3, [r3, #0]
 803f842:	685a      	ldr	r2, [r3, #4]
 803f844:	687b      	ldr	r3, [r7, #4]
 803f846:	681b      	ldr	r3, [r3, #0]
 803f848:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 803f84c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 803f84e:	687b      	ldr	r3, [r7, #4]
 803f850:	681b      	ldr	r3, [r3, #0]
 803f852:	6859      	ldr	r1, [r3, #4]
 803f854:	687b      	ldr	r3, [r7, #4]
 803f856:	691b      	ldr	r3, [r3, #16]
 803f858:	021a      	lsls	r2, r3, #8
 803f85a:	687b      	ldr	r3, [r7, #4]
 803f85c:	681b      	ldr	r3, [r3, #0]
 803f85e:	430a      	orrs	r2, r1
 803f860:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 803f862:	687b      	ldr	r3, [r7, #4]
 803f864:	681b      	ldr	r3, [r3, #0]
 803f866:	685a      	ldr	r2, [r3, #4]
 803f868:	687b      	ldr	r3, [r7, #4]
 803f86a:	681b      	ldr	r3, [r3, #0]
 803f86c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 803f870:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 803f872:	687b      	ldr	r3, [r7, #4]
 803f874:	681b      	ldr	r3, [r3, #0]
 803f876:	6859      	ldr	r1, [r3, #4]
 803f878:	687b      	ldr	r3, [r7, #4]
 803f87a:	689a      	ldr	r2, [r3, #8]
 803f87c:	687b      	ldr	r3, [r7, #4]
 803f87e:	681b      	ldr	r3, [r3, #0]
 803f880:	430a      	orrs	r2, r1
 803f882:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 803f884:	687b      	ldr	r3, [r7, #4]
 803f886:	681b      	ldr	r3, [r3, #0]
 803f888:	689a      	ldr	r2, [r3, #8]
 803f88a:	687b      	ldr	r3, [r7, #4]
 803f88c:	681b      	ldr	r3, [r3, #0]
 803f88e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 803f892:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 803f894:	687b      	ldr	r3, [r7, #4]
 803f896:	681b      	ldr	r3, [r3, #0]
 803f898:	6899      	ldr	r1, [r3, #8]
 803f89a:	687b      	ldr	r3, [r7, #4]
 803f89c:	68da      	ldr	r2, [r3, #12]
 803f89e:	687b      	ldr	r3, [r7, #4]
 803f8a0:	681b      	ldr	r3, [r3, #0]
 803f8a2:	430a      	orrs	r2, r1
 803f8a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 803f8a6:	687b      	ldr	r3, [r7, #4]
 803f8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803f8aa:	4a58      	ldr	r2, [pc, #352]	@ (803fa0c <ADC_Init+0x1f4>)
 803f8ac:	4293      	cmp	r3, r2
 803f8ae:	d022      	beq.n	803f8f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 803f8b0:	687b      	ldr	r3, [r7, #4]
 803f8b2:	681b      	ldr	r3, [r3, #0]
 803f8b4:	689a      	ldr	r2, [r3, #8]
 803f8b6:	687b      	ldr	r3, [r7, #4]
 803f8b8:	681b      	ldr	r3, [r3, #0]
 803f8ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 803f8be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 803f8c0:	687b      	ldr	r3, [r7, #4]
 803f8c2:	681b      	ldr	r3, [r3, #0]
 803f8c4:	6899      	ldr	r1, [r3, #8]
 803f8c6:	687b      	ldr	r3, [r7, #4]
 803f8c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 803f8ca:	687b      	ldr	r3, [r7, #4]
 803f8cc:	681b      	ldr	r3, [r3, #0]
 803f8ce:	430a      	orrs	r2, r1
 803f8d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 803f8d2:	687b      	ldr	r3, [r7, #4]
 803f8d4:	681b      	ldr	r3, [r3, #0]
 803f8d6:	689a      	ldr	r2, [r3, #8]
 803f8d8:	687b      	ldr	r3, [r7, #4]
 803f8da:	681b      	ldr	r3, [r3, #0]
 803f8dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 803f8e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 803f8e2:	687b      	ldr	r3, [r7, #4]
 803f8e4:	681b      	ldr	r3, [r3, #0]
 803f8e6:	6899      	ldr	r1, [r3, #8]
 803f8e8:	687b      	ldr	r3, [r7, #4]
 803f8ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 803f8ec:	687b      	ldr	r3, [r7, #4]
 803f8ee:	681b      	ldr	r3, [r3, #0]
 803f8f0:	430a      	orrs	r2, r1
 803f8f2:	609a      	str	r2, [r3, #8]
 803f8f4:	e00f      	b.n	803f916 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 803f8f6:	687b      	ldr	r3, [r7, #4]
 803f8f8:	681b      	ldr	r3, [r3, #0]
 803f8fa:	689a      	ldr	r2, [r3, #8]
 803f8fc:	687b      	ldr	r3, [r7, #4]
 803f8fe:	681b      	ldr	r3, [r3, #0]
 803f900:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 803f904:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 803f906:	687b      	ldr	r3, [r7, #4]
 803f908:	681b      	ldr	r3, [r3, #0]
 803f90a:	689a      	ldr	r2, [r3, #8]
 803f90c:	687b      	ldr	r3, [r7, #4]
 803f90e:	681b      	ldr	r3, [r3, #0]
 803f910:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 803f914:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 803f916:	687b      	ldr	r3, [r7, #4]
 803f918:	681b      	ldr	r3, [r3, #0]
 803f91a:	689a      	ldr	r2, [r3, #8]
 803f91c:	687b      	ldr	r3, [r7, #4]
 803f91e:	681b      	ldr	r3, [r3, #0]
 803f920:	f022 0202 	bic.w	r2, r2, #2
 803f924:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 803f926:	687b      	ldr	r3, [r7, #4]
 803f928:	681b      	ldr	r3, [r3, #0]
 803f92a:	6899      	ldr	r1, [r3, #8]
 803f92c:	687b      	ldr	r3, [r7, #4]
 803f92e:	7e1b      	ldrb	r3, [r3, #24]
 803f930:	005a      	lsls	r2, r3, #1
 803f932:	687b      	ldr	r3, [r7, #4]
 803f934:	681b      	ldr	r3, [r3, #0]
 803f936:	430a      	orrs	r2, r1
 803f938:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 803f93a:	687b      	ldr	r3, [r7, #4]
 803f93c:	f893 3020 	ldrb.w	r3, [r3, #32]
 803f940:	2b00      	cmp	r3, #0
 803f942:	d01b      	beq.n	803f97c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 803f944:	687b      	ldr	r3, [r7, #4]
 803f946:	681b      	ldr	r3, [r3, #0]
 803f948:	685a      	ldr	r2, [r3, #4]
 803f94a:	687b      	ldr	r3, [r7, #4]
 803f94c:	681b      	ldr	r3, [r3, #0]
 803f94e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 803f952:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 803f954:	687b      	ldr	r3, [r7, #4]
 803f956:	681b      	ldr	r3, [r3, #0]
 803f958:	685a      	ldr	r2, [r3, #4]
 803f95a:	687b      	ldr	r3, [r7, #4]
 803f95c:	681b      	ldr	r3, [r3, #0]
 803f95e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 803f962:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 803f964:	687b      	ldr	r3, [r7, #4]
 803f966:	681b      	ldr	r3, [r3, #0]
 803f968:	6859      	ldr	r1, [r3, #4]
 803f96a:	687b      	ldr	r3, [r7, #4]
 803f96c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803f96e:	3b01      	subs	r3, #1
 803f970:	035a      	lsls	r2, r3, #13
 803f972:	687b      	ldr	r3, [r7, #4]
 803f974:	681b      	ldr	r3, [r3, #0]
 803f976:	430a      	orrs	r2, r1
 803f978:	605a      	str	r2, [r3, #4]
 803f97a:	e007      	b.n	803f98c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 803f97c:	687b      	ldr	r3, [r7, #4]
 803f97e:	681b      	ldr	r3, [r3, #0]
 803f980:	685a      	ldr	r2, [r3, #4]
 803f982:	687b      	ldr	r3, [r7, #4]
 803f984:	681b      	ldr	r3, [r3, #0]
 803f986:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 803f98a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 803f98c:	687b      	ldr	r3, [r7, #4]
 803f98e:	681b      	ldr	r3, [r3, #0]
 803f990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 803f992:	687b      	ldr	r3, [r7, #4]
 803f994:	681b      	ldr	r3, [r3, #0]
 803f996:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 803f99a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 803f99c:	687b      	ldr	r3, [r7, #4]
 803f99e:	681b      	ldr	r3, [r3, #0]
 803f9a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 803f9a2:	687b      	ldr	r3, [r7, #4]
 803f9a4:	69db      	ldr	r3, [r3, #28]
 803f9a6:	3b01      	subs	r3, #1
 803f9a8:	051a      	lsls	r2, r3, #20
 803f9aa:	687b      	ldr	r3, [r7, #4]
 803f9ac:	681b      	ldr	r3, [r3, #0]
 803f9ae:	430a      	orrs	r2, r1
 803f9b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 803f9b2:	687b      	ldr	r3, [r7, #4]
 803f9b4:	681b      	ldr	r3, [r3, #0]
 803f9b6:	689a      	ldr	r2, [r3, #8]
 803f9b8:	687b      	ldr	r3, [r7, #4]
 803f9ba:	681b      	ldr	r3, [r3, #0]
 803f9bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 803f9c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 803f9c2:	687b      	ldr	r3, [r7, #4]
 803f9c4:	681b      	ldr	r3, [r3, #0]
 803f9c6:	6899      	ldr	r1, [r3, #8]
 803f9c8:	687b      	ldr	r3, [r7, #4]
 803f9ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 803f9ce:	025a      	lsls	r2, r3, #9
 803f9d0:	687b      	ldr	r3, [r7, #4]
 803f9d2:	681b      	ldr	r3, [r3, #0]
 803f9d4:	430a      	orrs	r2, r1
 803f9d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 803f9d8:	687b      	ldr	r3, [r7, #4]
 803f9da:	681b      	ldr	r3, [r3, #0]
 803f9dc:	689a      	ldr	r2, [r3, #8]
 803f9de:	687b      	ldr	r3, [r7, #4]
 803f9e0:	681b      	ldr	r3, [r3, #0]
 803f9e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 803f9e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 803f9e8:	687b      	ldr	r3, [r7, #4]
 803f9ea:	681b      	ldr	r3, [r3, #0]
 803f9ec:	6899      	ldr	r1, [r3, #8]
 803f9ee:	687b      	ldr	r3, [r7, #4]
 803f9f0:	695b      	ldr	r3, [r3, #20]
 803f9f2:	029a      	lsls	r2, r3, #10
 803f9f4:	687b      	ldr	r3, [r7, #4]
 803f9f6:	681b      	ldr	r3, [r3, #0]
 803f9f8:	430a      	orrs	r2, r1
 803f9fa:	609a      	str	r2, [r3, #8]
}
 803f9fc:	bf00      	nop
 803f9fe:	3714      	adds	r7, #20
 803fa00:	46bd      	mov	sp, r7
 803fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 803fa06:	4770      	bx	lr
 803fa08:	40012300 	.word	0x40012300
 803fa0c:	0f000001 	.word	0x0f000001

0803fa10 <__NVIC_SetPriorityGrouping>:
{
 803fa10:	b480      	push	{r7}
 803fa12:	b085      	sub	sp, #20
 803fa14:	af00      	add	r7, sp, #0
 803fa16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 803fa18:	687b      	ldr	r3, [r7, #4]
 803fa1a:	f003 0307 	and.w	r3, r3, #7
 803fa1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 803fa20:	4b0c      	ldr	r3, [pc, #48]	@ (803fa54 <__NVIC_SetPriorityGrouping+0x44>)
 803fa22:	68db      	ldr	r3, [r3, #12]
 803fa24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 803fa26:	68ba      	ldr	r2, [r7, #8]
 803fa28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 803fa2c:	4013      	ands	r3, r2
 803fa2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 803fa30:	68fb      	ldr	r3, [r7, #12]
 803fa32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 803fa34:	68bb      	ldr	r3, [r7, #8]
 803fa36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 803fa38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 803fa3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 803fa40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 803fa42:	4a04      	ldr	r2, [pc, #16]	@ (803fa54 <__NVIC_SetPriorityGrouping+0x44>)
 803fa44:	68bb      	ldr	r3, [r7, #8]
 803fa46:	60d3      	str	r3, [r2, #12]
}
 803fa48:	bf00      	nop
 803fa4a:	3714      	adds	r7, #20
 803fa4c:	46bd      	mov	sp, r7
 803fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 803fa52:	4770      	bx	lr
 803fa54:	e000ed00 	.word	0xe000ed00

0803fa58 <__NVIC_GetPriorityGrouping>:
{
 803fa58:	b480      	push	{r7}
 803fa5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 803fa5c:	4b04      	ldr	r3, [pc, #16]	@ (803fa70 <__NVIC_GetPriorityGrouping+0x18>)
 803fa5e:	68db      	ldr	r3, [r3, #12]
 803fa60:	0a1b      	lsrs	r3, r3, #8
 803fa62:	f003 0307 	and.w	r3, r3, #7
}
 803fa66:	4618      	mov	r0, r3
 803fa68:	46bd      	mov	sp, r7
 803fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803fa6e:	4770      	bx	lr
 803fa70:	e000ed00 	.word	0xe000ed00

0803fa74 <__NVIC_EnableIRQ>:
{
 803fa74:	b480      	push	{r7}
 803fa76:	b083      	sub	sp, #12
 803fa78:	af00      	add	r7, sp, #0
 803fa7a:	4603      	mov	r3, r0
 803fa7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 803fa7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803fa82:	2b00      	cmp	r3, #0
 803fa84:	db0b      	blt.n	803fa9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 803fa86:	79fb      	ldrb	r3, [r7, #7]
 803fa88:	f003 021f 	and.w	r2, r3, #31
 803fa8c:	4907      	ldr	r1, [pc, #28]	@ (803faac <__NVIC_EnableIRQ+0x38>)
 803fa8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803fa92:	095b      	lsrs	r3, r3, #5
 803fa94:	2001      	movs	r0, #1
 803fa96:	fa00 f202 	lsl.w	r2, r0, r2
 803fa9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 803fa9e:	bf00      	nop
 803faa0:	370c      	adds	r7, #12
 803faa2:	46bd      	mov	sp, r7
 803faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 803faa8:	4770      	bx	lr
 803faaa:	bf00      	nop
 803faac:	e000e100 	.word	0xe000e100

0803fab0 <__NVIC_DisableIRQ>:
{
 803fab0:	b480      	push	{r7}
 803fab2:	b083      	sub	sp, #12
 803fab4:	af00      	add	r7, sp, #0
 803fab6:	4603      	mov	r3, r0
 803fab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 803faba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803fabe:	2b00      	cmp	r3, #0
 803fac0:	db12      	blt.n	803fae8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 803fac2:	79fb      	ldrb	r3, [r7, #7]
 803fac4:	f003 021f 	and.w	r2, r3, #31
 803fac8:	490a      	ldr	r1, [pc, #40]	@ (803faf4 <__NVIC_DisableIRQ+0x44>)
 803faca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803face:	095b      	lsrs	r3, r3, #5
 803fad0:	2001      	movs	r0, #1
 803fad2:	fa00 f202 	lsl.w	r2, r0, r2
 803fad6:	3320      	adds	r3, #32
 803fad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 803fadc:	f3bf 8f4f 	dsb	sy
}
 803fae0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 803fae2:	f3bf 8f6f 	isb	sy
}
 803fae6:	bf00      	nop
}
 803fae8:	bf00      	nop
 803faea:	370c      	adds	r7, #12
 803faec:	46bd      	mov	sp, r7
 803faee:	f85d 7b04 	ldr.w	r7, [sp], #4
 803faf2:	4770      	bx	lr
 803faf4:	e000e100 	.word	0xe000e100

0803faf8 <__NVIC_ClearPendingIRQ>:
{
 803faf8:	b480      	push	{r7}
 803fafa:	b083      	sub	sp, #12
 803fafc:	af00      	add	r7, sp, #0
 803fafe:	4603      	mov	r3, r0
 803fb00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 803fb02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803fb06:	2b00      	cmp	r3, #0
 803fb08:	db0c      	blt.n	803fb24 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 803fb0a:	79fb      	ldrb	r3, [r7, #7]
 803fb0c:	f003 021f 	and.w	r2, r3, #31
 803fb10:	4907      	ldr	r1, [pc, #28]	@ (803fb30 <__NVIC_ClearPendingIRQ+0x38>)
 803fb12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803fb16:	095b      	lsrs	r3, r3, #5
 803fb18:	2001      	movs	r0, #1
 803fb1a:	fa00 f202 	lsl.w	r2, r0, r2
 803fb1e:	3360      	adds	r3, #96	@ 0x60
 803fb20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 803fb24:	bf00      	nop
 803fb26:	370c      	adds	r7, #12
 803fb28:	46bd      	mov	sp, r7
 803fb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803fb2e:	4770      	bx	lr
 803fb30:	e000e100 	.word	0xe000e100

0803fb34 <__NVIC_SetPriority>:
{
 803fb34:	b480      	push	{r7}
 803fb36:	b083      	sub	sp, #12
 803fb38:	af00      	add	r7, sp, #0
 803fb3a:	4603      	mov	r3, r0
 803fb3c:	6039      	str	r1, [r7, #0]
 803fb3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 803fb40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803fb44:	2b00      	cmp	r3, #0
 803fb46:	db0a      	blt.n	803fb5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 803fb48:	683b      	ldr	r3, [r7, #0]
 803fb4a:	b2da      	uxtb	r2, r3
 803fb4c:	490c      	ldr	r1, [pc, #48]	@ (803fb80 <__NVIC_SetPriority+0x4c>)
 803fb4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803fb52:	0112      	lsls	r2, r2, #4
 803fb54:	b2d2      	uxtb	r2, r2
 803fb56:	440b      	add	r3, r1
 803fb58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 803fb5c:	e00a      	b.n	803fb74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 803fb5e:	683b      	ldr	r3, [r7, #0]
 803fb60:	b2da      	uxtb	r2, r3
 803fb62:	4908      	ldr	r1, [pc, #32]	@ (803fb84 <__NVIC_SetPriority+0x50>)
 803fb64:	79fb      	ldrb	r3, [r7, #7]
 803fb66:	f003 030f 	and.w	r3, r3, #15
 803fb6a:	3b04      	subs	r3, #4
 803fb6c:	0112      	lsls	r2, r2, #4
 803fb6e:	b2d2      	uxtb	r2, r2
 803fb70:	440b      	add	r3, r1
 803fb72:	761a      	strb	r2, [r3, #24]
}
 803fb74:	bf00      	nop
 803fb76:	370c      	adds	r7, #12
 803fb78:	46bd      	mov	sp, r7
 803fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 803fb7e:	4770      	bx	lr
 803fb80:	e000e100 	.word	0xe000e100
 803fb84:	e000ed00 	.word	0xe000ed00

0803fb88 <NVIC_EncodePriority>:
{
 803fb88:	b480      	push	{r7}
 803fb8a:	b089      	sub	sp, #36	@ 0x24
 803fb8c:	af00      	add	r7, sp, #0
 803fb8e:	60f8      	str	r0, [r7, #12]
 803fb90:	60b9      	str	r1, [r7, #8]
 803fb92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 803fb94:	68fb      	ldr	r3, [r7, #12]
 803fb96:	f003 0307 	and.w	r3, r3, #7
 803fb9a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 803fb9c:	69fb      	ldr	r3, [r7, #28]
 803fb9e:	f1c3 0307 	rsb	r3, r3, #7
 803fba2:	2b04      	cmp	r3, #4
 803fba4:	bf28      	it	cs
 803fba6:	2304      	movcs	r3, #4
 803fba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 803fbaa:	69fb      	ldr	r3, [r7, #28]
 803fbac:	3304      	adds	r3, #4
 803fbae:	2b06      	cmp	r3, #6
 803fbb0:	d902      	bls.n	803fbb8 <NVIC_EncodePriority+0x30>
 803fbb2:	69fb      	ldr	r3, [r7, #28]
 803fbb4:	3b03      	subs	r3, #3
 803fbb6:	e000      	b.n	803fbba <NVIC_EncodePriority+0x32>
 803fbb8:	2300      	movs	r3, #0
 803fbba:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 803fbbc:	f04f 32ff 	mov.w	r2, #4294967295
 803fbc0:	69bb      	ldr	r3, [r7, #24]
 803fbc2:	fa02 f303 	lsl.w	r3, r2, r3
 803fbc6:	43da      	mvns	r2, r3
 803fbc8:	68bb      	ldr	r3, [r7, #8]
 803fbca:	401a      	ands	r2, r3
 803fbcc:	697b      	ldr	r3, [r7, #20]
 803fbce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 803fbd0:	f04f 31ff 	mov.w	r1, #4294967295
 803fbd4:	697b      	ldr	r3, [r7, #20]
 803fbd6:	fa01 f303 	lsl.w	r3, r1, r3
 803fbda:	43d9      	mvns	r1, r3
 803fbdc:	687b      	ldr	r3, [r7, #4]
 803fbde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 803fbe0:	4313      	orrs	r3, r2
}
 803fbe2:	4618      	mov	r0, r3
 803fbe4:	3724      	adds	r7, #36	@ 0x24
 803fbe6:	46bd      	mov	sp, r7
 803fbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 803fbec:	4770      	bx	lr
	...

0803fbf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 803fbf0:	b580      	push	{r7, lr}
 803fbf2:	b082      	sub	sp, #8
 803fbf4:	af00      	add	r7, sp, #0
 803fbf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 803fbf8:	687b      	ldr	r3, [r7, #4]
 803fbfa:	3b01      	subs	r3, #1
 803fbfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 803fc00:	d301      	bcc.n	803fc06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 803fc02:	2301      	movs	r3, #1
 803fc04:	e00f      	b.n	803fc26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 803fc06:	4a0a      	ldr	r2, [pc, #40]	@ (803fc30 <SysTick_Config+0x40>)
 803fc08:	687b      	ldr	r3, [r7, #4]
 803fc0a:	3b01      	subs	r3, #1
 803fc0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 803fc0e:	210f      	movs	r1, #15
 803fc10:	f04f 30ff 	mov.w	r0, #4294967295
 803fc14:	f7ff ff8e 	bl	803fb34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 803fc18:	4b05      	ldr	r3, [pc, #20]	@ (803fc30 <SysTick_Config+0x40>)
 803fc1a:	2200      	movs	r2, #0
 803fc1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 803fc1e:	4b04      	ldr	r3, [pc, #16]	@ (803fc30 <SysTick_Config+0x40>)
 803fc20:	2207      	movs	r2, #7
 803fc22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 803fc24:	2300      	movs	r3, #0
}
 803fc26:	4618      	mov	r0, r3
 803fc28:	3708      	adds	r7, #8
 803fc2a:	46bd      	mov	sp, r7
 803fc2c:	bd80      	pop	{r7, pc}
 803fc2e:	bf00      	nop
 803fc30:	e000e010 	.word	0xe000e010

0803fc34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 803fc34:	b580      	push	{r7, lr}
 803fc36:	b082      	sub	sp, #8
 803fc38:	af00      	add	r7, sp, #0
 803fc3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 803fc3c:	6878      	ldr	r0, [r7, #4]
 803fc3e:	f7ff fee7 	bl	803fa10 <__NVIC_SetPriorityGrouping>
}
 803fc42:	bf00      	nop
 803fc44:	3708      	adds	r7, #8
 803fc46:	46bd      	mov	sp, r7
 803fc48:	bd80      	pop	{r7, pc}

0803fc4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 803fc4a:	b580      	push	{r7, lr}
 803fc4c:	b086      	sub	sp, #24
 803fc4e:	af00      	add	r7, sp, #0
 803fc50:	4603      	mov	r3, r0
 803fc52:	60b9      	str	r1, [r7, #8]
 803fc54:	607a      	str	r2, [r7, #4]
 803fc56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 803fc58:	2300      	movs	r3, #0
 803fc5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 803fc5c:	f7ff fefc 	bl	803fa58 <__NVIC_GetPriorityGrouping>
 803fc60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 803fc62:	687a      	ldr	r2, [r7, #4]
 803fc64:	68b9      	ldr	r1, [r7, #8]
 803fc66:	6978      	ldr	r0, [r7, #20]
 803fc68:	f7ff ff8e 	bl	803fb88 <NVIC_EncodePriority>
 803fc6c:	4602      	mov	r2, r0
 803fc6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 803fc72:	4611      	mov	r1, r2
 803fc74:	4618      	mov	r0, r3
 803fc76:	f7ff ff5d 	bl	803fb34 <__NVIC_SetPriority>
}
 803fc7a:	bf00      	nop
 803fc7c:	3718      	adds	r7, #24
 803fc7e:	46bd      	mov	sp, r7
 803fc80:	bd80      	pop	{r7, pc}

0803fc82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 803fc82:	b580      	push	{r7, lr}
 803fc84:	b082      	sub	sp, #8
 803fc86:	af00      	add	r7, sp, #0
 803fc88:	4603      	mov	r3, r0
 803fc8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 803fc8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803fc90:	4618      	mov	r0, r3
 803fc92:	f7ff feef 	bl	803fa74 <__NVIC_EnableIRQ>
}
 803fc96:	bf00      	nop
 803fc98:	3708      	adds	r7, #8
 803fc9a:	46bd      	mov	sp, r7
 803fc9c:	bd80      	pop	{r7, pc}

0803fc9e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 803fc9e:	b580      	push	{r7, lr}
 803fca0:	b082      	sub	sp, #8
 803fca2:	af00      	add	r7, sp, #0
 803fca4:	4603      	mov	r3, r0
 803fca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 803fca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803fcac:	4618      	mov	r0, r3
 803fcae:	f7ff feff 	bl	803fab0 <__NVIC_DisableIRQ>
}
 803fcb2:	bf00      	nop
 803fcb4:	3708      	adds	r7, #8
 803fcb6:	46bd      	mov	sp, r7
 803fcb8:	bd80      	pop	{r7, pc}

0803fcba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 803fcba:	b580      	push	{r7, lr}
 803fcbc:	b082      	sub	sp, #8
 803fcbe:	af00      	add	r7, sp, #0
 803fcc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 803fcc2:	6878      	ldr	r0, [r7, #4]
 803fcc4:	f7ff ff94 	bl	803fbf0 <SysTick_Config>
 803fcc8:	4603      	mov	r3, r0
}
 803fcca:	4618      	mov	r0, r3
 803fccc:	3708      	adds	r7, #8
 803fcce:	46bd      	mov	sp, r7
 803fcd0:	bd80      	pop	{r7, pc}

0803fcd2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 803fcd2:	b580      	push	{r7, lr}
 803fcd4:	b082      	sub	sp, #8
 803fcd6:	af00      	add	r7, sp, #0
 803fcd8:	4603      	mov	r3, r0
 803fcda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 803fcdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 803fce0:	4618      	mov	r0, r3
 803fce2:	f7ff ff09 	bl	803faf8 <__NVIC_ClearPendingIRQ>
}
 803fce6:	bf00      	nop
 803fce8:	3708      	adds	r7, #8
 803fcea:	46bd      	mov	sp, r7
 803fcec:	bd80      	pop	{r7, pc}

0803fcee <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 803fcee:	b580      	push	{r7, lr}
 803fcf0:	b082      	sub	sp, #8
 803fcf2:	af00      	add	r7, sp, #0
 803fcf4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 803fcf6:	687b      	ldr	r3, [r7, #4]
 803fcf8:	2b00      	cmp	r3, #0
 803fcfa:	d101      	bne.n	803fd00 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 803fcfc:	2301      	movs	r3, #1
 803fcfe:	e00e      	b.n	803fd1e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 803fd00:	687b      	ldr	r3, [r7, #4]
 803fd02:	795b      	ldrb	r3, [r3, #5]
 803fd04:	b2db      	uxtb	r3, r3
 803fd06:	2b00      	cmp	r3, #0
 803fd08:	d105      	bne.n	803fd16 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 803fd0a:	687b      	ldr	r3, [r7, #4]
 803fd0c:	2200      	movs	r2, #0
 803fd0e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 803fd10:	6878      	ldr	r0, [r7, #4]
 803fd12:	f7ff f92f 	bl	803ef74 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 803fd16:	687b      	ldr	r3, [r7, #4]
 803fd18:	2201      	movs	r2, #1
 803fd1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 803fd1c:	2300      	movs	r3, #0
}
 803fd1e:	4618      	mov	r0, r3
 803fd20:	3708      	adds	r7, #8
 803fd22:	46bd      	mov	sp, r7
 803fd24:	bd80      	pop	{r7, pc}
	...

0803fd28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 803fd28:	b580      	push	{r7, lr}
 803fd2a:	b086      	sub	sp, #24
 803fd2c:	af00      	add	r7, sp, #0
 803fd2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 803fd30:	2300      	movs	r3, #0
 803fd32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 803fd34:	f7ff fbca 	bl	803f4cc <HAL_GetTick>
 803fd38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 803fd3a:	687b      	ldr	r3, [r7, #4]
 803fd3c:	2b00      	cmp	r3, #0
 803fd3e:	d101      	bne.n	803fd44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 803fd40:	2301      	movs	r3, #1
 803fd42:	e099      	b.n	803fe78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 803fd44:	687b      	ldr	r3, [r7, #4]
 803fd46:	2202      	movs	r2, #2
 803fd48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 803fd4c:	687b      	ldr	r3, [r7, #4]
 803fd4e:	2200      	movs	r2, #0
 803fd50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 803fd54:	687b      	ldr	r3, [r7, #4]
 803fd56:	681b      	ldr	r3, [r3, #0]
 803fd58:	681a      	ldr	r2, [r3, #0]
 803fd5a:	687b      	ldr	r3, [r7, #4]
 803fd5c:	681b      	ldr	r3, [r3, #0]
 803fd5e:	f022 0201 	bic.w	r2, r2, #1
 803fd62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 803fd64:	e00f      	b.n	803fd86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 803fd66:	f7ff fbb1 	bl	803f4cc <HAL_GetTick>
 803fd6a:	4602      	mov	r2, r0
 803fd6c:	693b      	ldr	r3, [r7, #16]
 803fd6e:	1ad3      	subs	r3, r2, r3
 803fd70:	2b05      	cmp	r3, #5
 803fd72:	d908      	bls.n	803fd86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 803fd74:	687b      	ldr	r3, [r7, #4]
 803fd76:	2220      	movs	r2, #32
 803fd78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 803fd7a:	687b      	ldr	r3, [r7, #4]
 803fd7c:	2203      	movs	r2, #3
 803fd7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 803fd82:	2303      	movs	r3, #3
 803fd84:	e078      	b.n	803fe78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 803fd86:	687b      	ldr	r3, [r7, #4]
 803fd88:	681b      	ldr	r3, [r3, #0]
 803fd8a:	681b      	ldr	r3, [r3, #0]
 803fd8c:	f003 0301 	and.w	r3, r3, #1
 803fd90:	2b00      	cmp	r3, #0
 803fd92:	d1e8      	bne.n	803fd66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 803fd94:	687b      	ldr	r3, [r7, #4]
 803fd96:	681b      	ldr	r3, [r3, #0]
 803fd98:	681b      	ldr	r3, [r3, #0]
 803fd9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 803fd9c:	697a      	ldr	r2, [r7, #20]
 803fd9e:	4b38      	ldr	r3, [pc, #224]	@ (803fe80 <HAL_DMA_Init+0x158>)
 803fda0:	4013      	ands	r3, r2
 803fda2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 803fda4:	687b      	ldr	r3, [r7, #4]
 803fda6:	685a      	ldr	r2, [r3, #4]
 803fda8:	687b      	ldr	r3, [r7, #4]
 803fdaa:	689b      	ldr	r3, [r3, #8]
 803fdac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 803fdae:	687b      	ldr	r3, [r7, #4]
 803fdb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 803fdb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 803fdb4:	687b      	ldr	r3, [r7, #4]
 803fdb6:	691b      	ldr	r3, [r3, #16]
 803fdb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 803fdba:	687b      	ldr	r3, [r7, #4]
 803fdbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 803fdbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 803fdc0:	687b      	ldr	r3, [r7, #4]
 803fdc2:	699b      	ldr	r3, [r3, #24]
 803fdc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 803fdc6:	687b      	ldr	r3, [r7, #4]
 803fdc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 803fdca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 803fdcc:	687b      	ldr	r3, [r7, #4]
 803fdce:	6a1b      	ldr	r3, [r3, #32]
 803fdd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 803fdd2:	697a      	ldr	r2, [r7, #20]
 803fdd4:	4313      	orrs	r3, r2
 803fdd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 803fdd8:	687b      	ldr	r3, [r7, #4]
 803fdda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803fddc:	2b04      	cmp	r3, #4
 803fdde:	d107      	bne.n	803fdf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 803fde0:	687b      	ldr	r3, [r7, #4]
 803fde2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 803fde4:	687b      	ldr	r3, [r7, #4]
 803fde6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 803fde8:	4313      	orrs	r3, r2
 803fdea:	697a      	ldr	r2, [r7, #20]
 803fdec:	4313      	orrs	r3, r2
 803fdee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 803fdf0:	687b      	ldr	r3, [r7, #4]
 803fdf2:	681b      	ldr	r3, [r3, #0]
 803fdf4:	697a      	ldr	r2, [r7, #20]
 803fdf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 803fdf8:	687b      	ldr	r3, [r7, #4]
 803fdfa:	681b      	ldr	r3, [r3, #0]
 803fdfc:	695b      	ldr	r3, [r3, #20]
 803fdfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 803fe00:	697b      	ldr	r3, [r7, #20]
 803fe02:	f023 0307 	bic.w	r3, r3, #7
 803fe06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 803fe08:	687b      	ldr	r3, [r7, #4]
 803fe0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803fe0c:	697a      	ldr	r2, [r7, #20]
 803fe0e:	4313      	orrs	r3, r2
 803fe10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 803fe12:	687b      	ldr	r3, [r7, #4]
 803fe14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 803fe16:	2b04      	cmp	r3, #4
 803fe18:	d117      	bne.n	803fe4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 803fe1a:	687b      	ldr	r3, [r7, #4]
 803fe1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 803fe1e:	697a      	ldr	r2, [r7, #20]
 803fe20:	4313      	orrs	r3, r2
 803fe22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 803fe24:	687b      	ldr	r3, [r7, #4]
 803fe26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 803fe28:	2b00      	cmp	r3, #0
 803fe2a:	d00e      	beq.n	803fe4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 803fe2c:	6878      	ldr	r0, [r7, #4]
 803fe2e:	f000 fa7b 	bl	8040328 <DMA_CheckFifoParam>
 803fe32:	4603      	mov	r3, r0
 803fe34:	2b00      	cmp	r3, #0
 803fe36:	d008      	beq.n	803fe4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 803fe38:	687b      	ldr	r3, [r7, #4]
 803fe3a:	2240      	movs	r2, #64	@ 0x40
 803fe3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 803fe3e:	687b      	ldr	r3, [r7, #4]
 803fe40:	2201      	movs	r2, #1
 803fe42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 803fe46:	2301      	movs	r3, #1
 803fe48:	e016      	b.n	803fe78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 803fe4a:	687b      	ldr	r3, [r7, #4]
 803fe4c:	681b      	ldr	r3, [r3, #0]
 803fe4e:	697a      	ldr	r2, [r7, #20]
 803fe50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 803fe52:	6878      	ldr	r0, [r7, #4]
 803fe54:	f000 fa32 	bl	80402bc <DMA_CalcBaseAndBitshift>
 803fe58:	4603      	mov	r3, r0
 803fe5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 803fe5c:	687b      	ldr	r3, [r7, #4]
 803fe5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 803fe60:	223f      	movs	r2, #63	@ 0x3f
 803fe62:	409a      	lsls	r2, r3
 803fe64:	68fb      	ldr	r3, [r7, #12]
 803fe66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 803fe68:	687b      	ldr	r3, [r7, #4]
 803fe6a:	2200      	movs	r2, #0
 803fe6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 803fe6e:	687b      	ldr	r3, [r7, #4]
 803fe70:	2201      	movs	r2, #1
 803fe72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 803fe76:	2300      	movs	r3, #0
}
 803fe78:	4618      	mov	r0, r3
 803fe7a:	3718      	adds	r7, #24
 803fe7c:	46bd      	mov	sp, r7
 803fe7e:	bd80      	pop	{r7, pc}
 803fe80:	f010803f 	.word	0xf010803f

0803fe84 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 803fe84:	b580      	push	{r7, lr}
 803fe86:	b084      	sub	sp, #16
 803fe88:	af00      	add	r7, sp, #0
 803fe8a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 803fe8c:	687b      	ldr	r3, [r7, #4]
 803fe8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 803fe90:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 803fe92:	f7ff fb1b 	bl	803f4cc <HAL_GetTick>
 803fe96:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 803fe98:	687b      	ldr	r3, [r7, #4]
 803fe9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 803fe9e:	b2db      	uxtb	r3, r3
 803fea0:	2b02      	cmp	r3, #2
 803fea2:	d008      	beq.n	803feb6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 803fea4:	687b      	ldr	r3, [r7, #4]
 803fea6:	2280      	movs	r2, #128	@ 0x80
 803fea8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 803feaa:	687b      	ldr	r3, [r7, #4]
 803feac:	2200      	movs	r2, #0
 803feae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 803feb2:	2301      	movs	r3, #1
 803feb4:	e052      	b.n	803ff5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 803feb6:	687b      	ldr	r3, [r7, #4]
 803feb8:	681b      	ldr	r3, [r3, #0]
 803feba:	681a      	ldr	r2, [r3, #0]
 803febc:	687b      	ldr	r3, [r7, #4]
 803febe:	681b      	ldr	r3, [r3, #0]
 803fec0:	f022 0216 	bic.w	r2, r2, #22
 803fec4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 803fec6:	687b      	ldr	r3, [r7, #4]
 803fec8:	681b      	ldr	r3, [r3, #0]
 803feca:	695a      	ldr	r2, [r3, #20]
 803fecc:	687b      	ldr	r3, [r7, #4]
 803fece:	681b      	ldr	r3, [r3, #0]
 803fed0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 803fed4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 803fed6:	687b      	ldr	r3, [r7, #4]
 803fed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 803feda:	2b00      	cmp	r3, #0
 803fedc:	d103      	bne.n	803fee6 <HAL_DMA_Abort+0x62>
 803fede:	687b      	ldr	r3, [r7, #4]
 803fee0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 803fee2:	2b00      	cmp	r3, #0
 803fee4:	d007      	beq.n	803fef6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 803fee6:	687b      	ldr	r3, [r7, #4]
 803fee8:	681b      	ldr	r3, [r3, #0]
 803feea:	681a      	ldr	r2, [r3, #0]
 803feec:	687b      	ldr	r3, [r7, #4]
 803feee:	681b      	ldr	r3, [r3, #0]
 803fef0:	f022 0208 	bic.w	r2, r2, #8
 803fef4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 803fef6:	687b      	ldr	r3, [r7, #4]
 803fef8:	681b      	ldr	r3, [r3, #0]
 803fefa:	681a      	ldr	r2, [r3, #0]
 803fefc:	687b      	ldr	r3, [r7, #4]
 803fefe:	681b      	ldr	r3, [r3, #0]
 803ff00:	f022 0201 	bic.w	r2, r2, #1
 803ff04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 803ff06:	e013      	b.n	803ff30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 803ff08:	f7ff fae0 	bl	803f4cc <HAL_GetTick>
 803ff0c:	4602      	mov	r2, r0
 803ff0e:	68bb      	ldr	r3, [r7, #8]
 803ff10:	1ad3      	subs	r3, r2, r3
 803ff12:	2b05      	cmp	r3, #5
 803ff14:	d90c      	bls.n	803ff30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 803ff16:	687b      	ldr	r3, [r7, #4]
 803ff18:	2220      	movs	r2, #32
 803ff1a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 803ff1c:	687b      	ldr	r3, [r7, #4]
 803ff1e:	2203      	movs	r2, #3
 803ff20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 803ff24:	687b      	ldr	r3, [r7, #4]
 803ff26:	2200      	movs	r2, #0
 803ff28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 803ff2c:	2303      	movs	r3, #3
 803ff2e:	e015      	b.n	803ff5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 803ff30:	687b      	ldr	r3, [r7, #4]
 803ff32:	681b      	ldr	r3, [r3, #0]
 803ff34:	681b      	ldr	r3, [r3, #0]
 803ff36:	f003 0301 	and.w	r3, r3, #1
 803ff3a:	2b00      	cmp	r3, #0
 803ff3c:	d1e4      	bne.n	803ff08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 803ff3e:	687b      	ldr	r3, [r7, #4]
 803ff40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 803ff42:	223f      	movs	r2, #63	@ 0x3f
 803ff44:	409a      	lsls	r2, r3
 803ff46:	68fb      	ldr	r3, [r7, #12]
 803ff48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 803ff4a:	687b      	ldr	r3, [r7, #4]
 803ff4c:	2201      	movs	r2, #1
 803ff4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 803ff52:	687b      	ldr	r3, [r7, #4]
 803ff54:	2200      	movs	r2, #0
 803ff56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 803ff5a:	2300      	movs	r3, #0
}
 803ff5c:	4618      	mov	r0, r3
 803ff5e:	3710      	adds	r7, #16
 803ff60:	46bd      	mov	sp, r7
 803ff62:	bd80      	pop	{r7, pc}

0803ff64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 803ff64:	b480      	push	{r7}
 803ff66:	b083      	sub	sp, #12
 803ff68:	af00      	add	r7, sp, #0
 803ff6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 803ff6c:	687b      	ldr	r3, [r7, #4]
 803ff6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 803ff72:	b2db      	uxtb	r3, r3
 803ff74:	2b02      	cmp	r3, #2
 803ff76:	d004      	beq.n	803ff82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 803ff78:	687b      	ldr	r3, [r7, #4]
 803ff7a:	2280      	movs	r2, #128	@ 0x80
 803ff7c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 803ff7e:	2301      	movs	r3, #1
 803ff80:	e00c      	b.n	803ff9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 803ff82:	687b      	ldr	r3, [r7, #4]
 803ff84:	2205      	movs	r2, #5
 803ff86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 803ff8a:	687b      	ldr	r3, [r7, #4]
 803ff8c:	681b      	ldr	r3, [r3, #0]
 803ff8e:	681a      	ldr	r2, [r3, #0]
 803ff90:	687b      	ldr	r3, [r7, #4]
 803ff92:	681b      	ldr	r3, [r3, #0]
 803ff94:	f022 0201 	bic.w	r2, r2, #1
 803ff98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 803ff9a:	2300      	movs	r3, #0
}
 803ff9c:	4618      	mov	r0, r3
 803ff9e:	370c      	adds	r7, #12
 803ffa0:	46bd      	mov	sp, r7
 803ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 803ffa6:	4770      	bx	lr

0803ffa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 803ffa8:	b580      	push	{r7, lr}
 803ffaa:	b086      	sub	sp, #24
 803ffac:	af00      	add	r7, sp, #0
 803ffae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 803ffb0:	2300      	movs	r3, #0
 803ffb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 803ffb4:	4b8e      	ldr	r3, [pc, #568]	@ (80401f0 <HAL_DMA_IRQHandler+0x248>)
 803ffb6:	681b      	ldr	r3, [r3, #0]
 803ffb8:	4a8e      	ldr	r2, [pc, #568]	@ (80401f4 <HAL_DMA_IRQHandler+0x24c>)
 803ffba:	fba2 2303 	umull	r2, r3, r2, r3
 803ffbe:	0a9b      	lsrs	r3, r3, #10
 803ffc0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 803ffc2:	687b      	ldr	r3, [r7, #4]
 803ffc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 803ffc6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 803ffc8:	693b      	ldr	r3, [r7, #16]
 803ffca:	681b      	ldr	r3, [r3, #0]
 803ffcc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 803ffce:	687b      	ldr	r3, [r7, #4]
 803ffd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 803ffd2:	2208      	movs	r2, #8
 803ffd4:	409a      	lsls	r2, r3
 803ffd6:	68fb      	ldr	r3, [r7, #12]
 803ffd8:	4013      	ands	r3, r2
 803ffda:	2b00      	cmp	r3, #0
 803ffdc:	d01a      	beq.n	8040014 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 803ffde:	687b      	ldr	r3, [r7, #4]
 803ffe0:	681b      	ldr	r3, [r3, #0]
 803ffe2:	681b      	ldr	r3, [r3, #0]
 803ffe4:	f003 0304 	and.w	r3, r3, #4
 803ffe8:	2b00      	cmp	r3, #0
 803ffea:	d013      	beq.n	8040014 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 803ffec:	687b      	ldr	r3, [r7, #4]
 803ffee:	681b      	ldr	r3, [r3, #0]
 803fff0:	681a      	ldr	r2, [r3, #0]
 803fff2:	687b      	ldr	r3, [r7, #4]
 803fff4:	681b      	ldr	r3, [r3, #0]
 803fff6:	f022 0204 	bic.w	r2, r2, #4
 803fffa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 803fffc:	687b      	ldr	r3, [r7, #4]
 803fffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8040000:	2208      	movs	r2, #8
 8040002:	409a      	lsls	r2, r3
 8040004:	693b      	ldr	r3, [r7, #16]
 8040006:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8040008:	687b      	ldr	r3, [r7, #4]
 804000a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804000c:	f043 0201 	orr.w	r2, r3, #1
 8040010:	687b      	ldr	r3, [r7, #4]
 8040012:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8040014:	687b      	ldr	r3, [r7, #4]
 8040016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8040018:	2201      	movs	r2, #1
 804001a:	409a      	lsls	r2, r3
 804001c:	68fb      	ldr	r3, [r7, #12]
 804001e:	4013      	ands	r3, r2
 8040020:	2b00      	cmp	r3, #0
 8040022:	d012      	beq.n	804004a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8040024:	687b      	ldr	r3, [r7, #4]
 8040026:	681b      	ldr	r3, [r3, #0]
 8040028:	695b      	ldr	r3, [r3, #20]
 804002a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804002e:	2b00      	cmp	r3, #0
 8040030:	d00b      	beq.n	804004a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8040032:	687b      	ldr	r3, [r7, #4]
 8040034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8040036:	2201      	movs	r2, #1
 8040038:	409a      	lsls	r2, r3
 804003a:	693b      	ldr	r3, [r7, #16]
 804003c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 804003e:	687b      	ldr	r3, [r7, #4]
 8040040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8040042:	f043 0202 	orr.w	r2, r3, #2
 8040046:	687b      	ldr	r3, [r7, #4]
 8040048:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 804004a:	687b      	ldr	r3, [r7, #4]
 804004c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 804004e:	2204      	movs	r2, #4
 8040050:	409a      	lsls	r2, r3
 8040052:	68fb      	ldr	r3, [r7, #12]
 8040054:	4013      	ands	r3, r2
 8040056:	2b00      	cmp	r3, #0
 8040058:	d012      	beq.n	8040080 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 804005a:	687b      	ldr	r3, [r7, #4]
 804005c:	681b      	ldr	r3, [r3, #0]
 804005e:	681b      	ldr	r3, [r3, #0]
 8040060:	f003 0302 	and.w	r3, r3, #2
 8040064:	2b00      	cmp	r3, #0
 8040066:	d00b      	beq.n	8040080 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8040068:	687b      	ldr	r3, [r7, #4]
 804006a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 804006c:	2204      	movs	r2, #4
 804006e:	409a      	lsls	r2, r3
 8040070:	693b      	ldr	r3, [r7, #16]
 8040072:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8040074:	687b      	ldr	r3, [r7, #4]
 8040076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8040078:	f043 0204 	orr.w	r2, r3, #4
 804007c:	687b      	ldr	r3, [r7, #4]
 804007e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8040080:	687b      	ldr	r3, [r7, #4]
 8040082:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8040084:	2210      	movs	r2, #16
 8040086:	409a      	lsls	r2, r3
 8040088:	68fb      	ldr	r3, [r7, #12]
 804008a:	4013      	ands	r3, r2
 804008c:	2b00      	cmp	r3, #0
 804008e:	d043      	beq.n	8040118 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8040090:	687b      	ldr	r3, [r7, #4]
 8040092:	681b      	ldr	r3, [r3, #0]
 8040094:	681b      	ldr	r3, [r3, #0]
 8040096:	f003 0308 	and.w	r3, r3, #8
 804009a:	2b00      	cmp	r3, #0
 804009c:	d03c      	beq.n	8040118 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 804009e:	687b      	ldr	r3, [r7, #4]
 80400a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80400a2:	2210      	movs	r2, #16
 80400a4:	409a      	lsls	r2, r3
 80400a6:	693b      	ldr	r3, [r7, #16]
 80400a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80400aa:	687b      	ldr	r3, [r7, #4]
 80400ac:	681b      	ldr	r3, [r3, #0]
 80400ae:	681b      	ldr	r3, [r3, #0]
 80400b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80400b4:	2b00      	cmp	r3, #0
 80400b6:	d018      	beq.n	80400ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80400b8:	687b      	ldr	r3, [r7, #4]
 80400ba:	681b      	ldr	r3, [r3, #0]
 80400bc:	681b      	ldr	r3, [r3, #0]
 80400be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80400c2:	2b00      	cmp	r3, #0
 80400c4:	d108      	bne.n	80400d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80400c6:	687b      	ldr	r3, [r7, #4]
 80400c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80400ca:	2b00      	cmp	r3, #0
 80400cc:	d024      	beq.n	8040118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80400ce:	687b      	ldr	r3, [r7, #4]
 80400d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80400d2:	6878      	ldr	r0, [r7, #4]
 80400d4:	4798      	blx	r3
 80400d6:	e01f      	b.n	8040118 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80400d8:	687b      	ldr	r3, [r7, #4]
 80400da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80400dc:	2b00      	cmp	r3, #0
 80400de:	d01b      	beq.n	8040118 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80400e0:	687b      	ldr	r3, [r7, #4]
 80400e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80400e4:	6878      	ldr	r0, [r7, #4]
 80400e6:	4798      	blx	r3
 80400e8:	e016      	b.n	8040118 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80400ea:	687b      	ldr	r3, [r7, #4]
 80400ec:	681b      	ldr	r3, [r3, #0]
 80400ee:	681b      	ldr	r3, [r3, #0]
 80400f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80400f4:	2b00      	cmp	r3, #0
 80400f6:	d107      	bne.n	8040108 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80400f8:	687b      	ldr	r3, [r7, #4]
 80400fa:	681b      	ldr	r3, [r3, #0]
 80400fc:	681a      	ldr	r2, [r3, #0]
 80400fe:	687b      	ldr	r3, [r7, #4]
 8040100:	681b      	ldr	r3, [r3, #0]
 8040102:	f022 0208 	bic.w	r2, r2, #8
 8040106:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8040108:	687b      	ldr	r3, [r7, #4]
 804010a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804010c:	2b00      	cmp	r3, #0
 804010e:	d003      	beq.n	8040118 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8040110:	687b      	ldr	r3, [r7, #4]
 8040112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040114:	6878      	ldr	r0, [r7, #4]
 8040116:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8040118:	687b      	ldr	r3, [r7, #4]
 804011a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 804011c:	2220      	movs	r2, #32
 804011e:	409a      	lsls	r2, r3
 8040120:	68fb      	ldr	r3, [r7, #12]
 8040122:	4013      	ands	r3, r2
 8040124:	2b00      	cmp	r3, #0
 8040126:	f000 808f 	beq.w	8040248 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 804012a:	687b      	ldr	r3, [r7, #4]
 804012c:	681b      	ldr	r3, [r3, #0]
 804012e:	681b      	ldr	r3, [r3, #0]
 8040130:	f003 0310 	and.w	r3, r3, #16
 8040134:	2b00      	cmp	r3, #0
 8040136:	f000 8087 	beq.w	8040248 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 804013a:	687b      	ldr	r3, [r7, #4]
 804013c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 804013e:	2220      	movs	r2, #32
 8040140:	409a      	lsls	r2, r3
 8040142:	693b      	ldr	r3, [r7, #16]
 8040144:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8040146:	687b      	ldr	r3, [r7, #4]
 8040148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 804014c:	b2db      	uxtb	r3, r3
 804014e:	2b05      	cmp	r3, #5
 8040150:	d136      	bne.n	80401c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8040152:	687b      	ldr	r3, [r7, #4]
 8040154:	681b      	ldr	r3, [r3, #0]
 8040156:	681a      	ldr	r2, [r3, #0]
 8040158:	687b      	ldr	r3, [r7, #4]
 804015a:	681b      	ldr	r3, [r3, #0]
 804015c:	f022 0216 	bic.w	r2, r2, #22
 8040160:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8040162:	687b      	ldr	r3, [r7, #4]
 8040164:	681b      	ldr	r3, [r3, #0]
 8040166:	695a      	ldr	r2, [r3, #20]
 8040168:	687b      	ldr	r3, [r7, #4]
 804016a:	681b      	ldr	r3, [r3, #0]
 804016c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8040170:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8040172:	687b      	ldr	r3, [r7, #4]
 8040174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8040176:	2b00      	cmp	r3, #0
 8040178:	d103      	bne.n	8040182 <HAL_DMA_IRQHandler+0x1da>
 804017a:	687b      	ldr	r3, [r7, #4]
 804017c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 804017e:	2b00      	cmp	r3, #0
 8040180:	d007      	beq.n	8040192 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8040182:	687b      	ldr	r3, [r7, #4]
 8040184:	681b      	ldr	r3, [r3, #0]
 8040186:	681a      	ldr	r2, [r3, #0]
 8040188:	687b      	ldr	r3, [r7, #4]
 804018a:	681b      	ldr	r3, [r3, #0]
 804018c:	f022 0208 	bic.w	r2, r2, #8
 8040190:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8040192:	687b      	ldr	r3, [r7, #4]
 8040194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8040196:	223f      	movs	r2, #63	@ 0x3f
 8040198:	409a      	lsls	r2, r3
 804019a:	693b      	ldr	r3, [r7, #16]
 804019c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 804019e:	687b      	ldr	r3, [r7, #4]
 80401a0:	2201      	movs	r2, #1
 80401a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80401a6:	687b      	ldr	r3, [r7, #4]
 80401a8:	2200      	movs	r2, #0
 80401aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80401ae:	687b      	ldr	r3, [r7, #4]
 80401b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80401b2:	2b00      	cmp	r3, #0
 80401b4:	d07e      	beq.n	80402b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80401b6:	687b      	ldr	r3, [r7, #4]
 80401b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80401ba:	6878      	ldr	r0, [r7, #4]
 80401bc:	4798      	blx	r3
        }
        return;
 80401be:	e079      	b.n	80402b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80401c0:	687b      	ldr	r3, [r7, #4]
 80401c2:	681b      	ldr	r3, [r3, #0]
 80401c4:	681b      	ldr	r3, [r3, #0]
 80401c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80401ca:	2b00      	cmp	r3, #0
 80401cc:	d01d      	beq.n	804020a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80401ce:	687b      	ldr	r3, [r7, #4]
 80401d0:	681b      	ldr	r3, [r3, #0]
 80401d2:	681b      	ldr	r3, [r3, #0]
 80401d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80401d8:	2b00      	cmp	r3, #0
 80401da:	d10d      	bne.n	80401f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80401dc:	687b      	ldr	r3, [r7, #4]
 80401de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80401e0:	2b00      	cmp	r3, #0
 80401e2:	d031      	beq.n	8040248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80401e4:	687b      	ldr	r3, [r7, #4]
 80401e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80401e8:	6878      	ldr	r0, [r7, #4]
 80401ea:	4798      	blx	r3
 80401ec:	e02c      	b.n	8040248 <HAL_DMA_IRQHandler+0x2a0>
 80401ee:	bf00      	nop
 80401f0:	200000c0 	.word	0x200000c0
 80401f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80401f8:	687b      	ldr	r3, [r7, #4]
 80401fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80401fc:	2b00      	cmp	r3, #0
 80401fe:	d023      	beq.n	8040248 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8040200:	687b      	ldr	r3, [r7, #4]
 8040202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8040204:	6878      	ldr	r0, [r7, #4]
 8040206:	4798      	blx	r3
 8040208:	e01e      	b.n	8040248 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 804020a:	687b      	ldr	r3, [r7, #4]
 804020c:	681b      	ldr	r3, [r3, #0]
 804020e:	681b      	ldr	r3, [r3, #0]
 8040210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8040214:	2b00      	cmp	r3, #0
 8040216:	d10f      	bne.n	8040238 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8040218:	687b      	ldr	r3, [r7, #4]
 804021a:	681b      	ldr	r3, [r3, #0]
 804021c:	681a      	ldr	r2, [r3, #0]
 804021e:	687b      	ldr	r3, [r7, #4]
 8040220:	681b      	ldr	r3, [r3, #0]
 8040222:	f022 0210 	bic.w	r2, r2, #16
 8040226:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8040228:	687b      	ldr	r3, [r7, #4]
 804022a:	2201      	movs	r2, #1
 804022c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8040230:	687b      	ldr	r3, [r7, #4]
 8040232:	2200      	movs	r2, #0
 8040234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8040238:	687b      	ldr	r3, [r7, #4]
 804023a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 804023c:	2b00      	cmp	r3, #0
 804023e:	d003      	beq.n	8040248 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8040240:	687b      	ldr	r3, [r7, #4]
 8040242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8040244:	6878      	ldr	r0, [r7, #4]
 8040246:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8040248:	687b      	ldr	r3, [r7, #4]
 804024a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 804024c:	2b00      	cmp	r3, #0
 804024e:	d032      	beq.n	80402b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8040250:	687b      	ldr	r3, [r7, #4]
 8040252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8040254:	f003 0301 	and.w	r3, r3, #1
 8040258:	2b00      	cmp	r3, #0
 804025a:	d022      	beq.n	80402a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 804025c:	687b      	ldr	r3, [r7, #4]
 804025e:	2205      	movs	r2, #5
 8040260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8040264:	687b      	ldr	r3, [r7, #4]
 8040266:	681b      	ldr	r3, [r3, #0]
 8040268:	681a      	ldr	r2, [r3, #0]
 804026a:	687b      	ldr	r3, [r7, #4]
 804026c:	681b      	ldr	r3, [r3, #0]
 804026e:	f022 0201 	bic.w	r2, r2, #1
 8040272:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8040274:	68bb      	ldr	r3, [r7, #8]
 8040276:	3301      	adds	r3, #1
 8040278:	60bb      	str	r3, [r7, #8]
 804027a:	697a      	ldr	r2, [r7, #20]
 804027c:	429a      	cmp	r2, r3
 804027e:	d307      	bcc.n	8040290 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8040280:	687b      	ldr	r3, [r7, #4]
 8040282:	681b      	ldr	r3, [r3, #0]
 8040284:	681b      	ldr	r3, [r3, #0]
 8040286:	f003 0301 	and.w	r3, r3, #1
 804028a:	2b00      	cmp	r3, #0
 804028c:	d1f2      	bne.n	8040274 <HAL_DMA_IRQHandler+0x2cc>
 804028e:	e000      	b.n	8040292 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8040290:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8040292:	687b      	ldr	r3, [r7, #4]
 8040294:	2201      	movs	r2, #1
 8040296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 804029a:	687b      	ldr	r3, [r7, #4]
 804029c:	2200      	movs	r2, #0
 804029e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80402a2:	687b      	ldr	r3, [r7, #4]
 80402a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80402a6:	2b00      	cmp	r3, #0
 80402a8:	d005      	beq.n	80402b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80402aa:	687b      	ldr	r3, [r7, #4]
 80402ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80402ae:	6878      	ldr	r0, [r7, #4]
 80402b0:	4798      	blx	r3
 80402b2:	e000      	b.n	80402b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80402b4:	bf00      	nop
    }
  }
}
 80402b6:	3718      	adds	r7, #24
 80402b8:	46bd      	mov	sp, r7
 80402ba:	bd80      	pop	{r7, pc}

080402bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80402bc:	b480      	push	{r7}
 80402be:	b085      	sub	sp, #20
 80402c0:	af00      	add	r7, sp, #0
 80402c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80402c4:	687b      	ldr	r3, [r7, #4]
 80402c6:	681b      	ldr	r3, [r3, #0]
 80402c8:	b2db      	uxtb	r3, r3
 80402ca:	3b10      	subs	r3, #16
 80402cc:	4a14      	ldr	r2, [pc, #80]	@ (8040320 <DMA_CalcBaseAndBitshift+0x64>)
 80402ce:	fba2 2303 	umull	r2, r3, r2, r3
 80402d2:	091b      	lsrs	r3, r3, #4
 80402d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80402d6:	4a13      	ldr	r2, [pc, #76]	@ (8040324 <DMA_CalcBaseAndBitshift+0x68>)
 80402d8:	68fb      	ldr	r3, [r7, #12]
 80402da:	4413      	add	r3, r2
 80402dc:	781b      	ldrb	r3, [r3, #0]
 80402de:	461a      	mov	r2, r3
 80402e0:	687b      	ldr	r3, [r7, #4]
 80402e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80402e4:	68fb      	ldr	r3, [r7, #12]
 80402e6:	2b03      	cmp	r3, #3
 80402e8:	d909      	bls.n	80402fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80402ea:	687b      	ldr	r3, [r7, #4]
 80402ec:	681b      	ldr	r3, [r3, #0]
 80402ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80402f2:	f023 0303 	bic.w	r3, r3, #3
 80402f6:	1d1a      	adds	r2, r3, #4
 80402f8:	687b      	ldr	r3, [r7, #4]
 80402fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80402fc:	e007      	b.n	804030e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80402fe:	687b      	ldr	r3, [r7, #4]
 8040300:	681b      	ldr	r3, [r3, #0]
 8040302:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8040306:	f023 0303 	bic.w	r3, r3, #3
 804030a:	687a      	ldr	r2, [r7, #4]
 804030c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 804030e:	687b      	ldr	r3, [r7, #4]
 8040310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8040312:	4618      	mov	r0, r3
 8040314:	3714      	adds	r7, #20
 8040316:	46bd      	mov	sp, r7
 8040318:	f85d 7b04 	ldr.w	r7, [sp], #4
 804031c:	4770      	bx	lr
 804031e:	bf00      	nop
 8040320:	aaaaaaab 	.word	0xaaaaaaab
 8040324:	08043df4 	.word	0x08043df4

08040328 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8040328:	b480      	push	{r7}
 804032a:	b085      	sub	sp, #20
 804032c:	af00      	add	r7, sp, #0
 804032e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8040330:	2300      	movs	r3, #0
 8040332:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8040334:	687b      	ldr	r3, [r7, #4]
 8040336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8040338:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 804033a:	687b      	ldr	r3, [r7, #4]
 804033c:	699b      	ldr	r3, [r3, #24]
 804033e:	2b00      	cmp	r3, #0
 8040340:	d11f      	bne.n	8040382 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8040342:	68bb      	ldr	r3, [r7, #8]
 8040344:	2b03      	cmp	r3, #3
 8040346:	d856      	bhi.n	80403f6 <DMA_CheckFifoParam+0xce>
 8040348:	a201      	add	r2, pc, #4	@ (adr r2, 8040350 <DMA_CheckFifoParam+0x28>)
 804034a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804034e:	bf00      	nop
 8040350:	08040361 	.word	0x08040361
 8040354:	08040373 	.word	0x08040373
 8040358:	08040361 	.word	0x08040361
 804035c:	080403f7 	.word	0x080403f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8040360:	687b      	ldr	r3, [r7, #4]
 8040362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8040364:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8040368:	2b00      	cmp	r3, #0
 804036a:	d046      	beq.n	80403fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 804036c:	2301      	movs	r3, #1
 804036e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8040370:	e043      	b.n	80403fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8040372:	687b      	ldr	r3, [r7, #4]
 8040374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8040376:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 804037a:	d140      	bne.n	80403fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 804037c:	2301      	movs	r3, #1
 804037e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8040380:	e03d      	b.n	80403fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8040382:	687b      	ldr	r3, [r7, #4]
 8040384:	699b      	ldr	r3, [r3, #24]
 8040386:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 804038a:	d121      	bne.n	80403d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 804038c:	68bb      	ldr	r3, [r7, #8]
 804038e:	2b03      	cmp	r3, #3
 8040390:	d837      	bhi.n	8040402 <DMA_CheckFifoParam+0xda>
 8040392:	a201      	add	r2, pc, #4	@ (adr r2, 8040398 <DMA_CheckFifoParam+0x70>)
 8040394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8040398:	080403a9 	.word	0x080403a9
 804039c:	080403af 	.word	0x080403af
 80403a0:	080403a9 	.word	0x080403a9
 80403a4:	080403c1 	.word	0x080403c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80403a8:	2301      	movs	r3, #1
 80403aa:	73fb      	strb	r3, [r7, #15]
      break;
 80403ac:	e030      	b.n	8040410 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80403ae:	687b      	ldr	r3, [r7, #4]
 80403b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80403b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80403b6:	2b00      	cmp	r3, #0
 80403b8:	d025      	beq.n	8040406 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80403ba:	2301      	movs	r3, #1
 80403bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80403be:	e022      	b.n	8040406 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80403c0:	687b      	ldr	r3, [r7, #4]
 80403c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80403c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80403c8:	d11f      	bne.n	804040a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80403ca:	2301      	movs	r3, #1
 80403cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80403ce:	e01c      	b.n	804040a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80403d0:	68bb      	ldr	r3, [r7, #8]
 80403d2:	2b02      	cmp	r3, #2
 80403d4:	d903      	bls.n	80403de <DMA_CheckFifoParam+0xb6>
 80403d6:	68bb      	ldr	r3, [r7, #8]
 80403d8:	2b03      	cmp	r3, #3
 80403da:	d003      	beq.n	80403e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80403dc:	e018      	b.n	8040410 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80403de:	2301      	movs	r3, #1
 80403e0:	73fb      	strb	r3, [r7, #15]
      break;
 80403e2:	e015      	b.n	8040410 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80403e4:	687b      	ldr	r3, [r7, #4]
 80403e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80403e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80403ec:	2b00      	cmp	r3, #0
 80403ee:	d00e      	beq.n	804040e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80403f0:	2301      	movs	r3, #1
 80403f2:	73fb      	strb	r3, [r7, #15]
      break;
 80403f4:	e00b      	b.n	804040e <DMA_CheckFifoParam+0xe6>
      break;
 80403f6:	bf00      	nop
 80403f8:	e00a      	b.n	8040410 <DMA_CheckFifoParam+0xe8>
      break;
 80403fa:	bf00      	nop
 80403fc:	e008      	b.n	8040410 <DMA_CheckFifoParam+0xe8>
      break;
 80403fe:	bf00      	nop
 8040400:	e006      	b.n	8040410 <DMA_CheckFifoParam+0xe8>
      break;
 8040402:	bf00      	nop
 8040404:	e004      	b.n	8040410 <DMA_CheckFifoParam+0xe8>
      break;
 8040406:	bf00      	nop
 8040408:	e002      	b.n	8040410 <DMA_CheckFifoParam+0xe8>
      break;   
 804040a:	bf00      	nop
 804040c:	e000      	b.n	8040410 <DMA_CheckFifoParam+0xe8>
      break;
 804040e:	bf00      	nop
    }
  } 
  
  return status; 
 8040410:	7bfb      	ldrb	r3, [r7, #15]
}
 8040412:	4618      	mov	r0, r3
 8040414:	3714      	adds	r7, #20
 8040416:	46bd      	mov	sp, r7
 8040418:	f85d 7b04 	ldr.w	r7, [sp], #4
 804041c:	4770      	bx	lr
 804041e:	bf00      	nop

08040420 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8040420:	b580      	push	{r7, lr}
 8040422:	b086      	sub	sp, #24
 8040424:	af00      	add	r7, sp, #0
 8040426:	60f8      	str	r0, [r7, #12]
 8040428:	60b9      	str	r1, [r7, #8]
 804042a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 804042e:	4b23      	ldr	r3, [pc, #140]	@ (80404bc <HAL_FLASH_Program+0x9c>)
 8040430:	7e1b      	ldrb	r3, [r3, #24]
 8040432:	2b01      	cmp	r3, #1
 8040434:	d101      	bne.n	804043a <HAL_FLASH_Program+0x1a>
 8040436:	2302      	movs	r3, #2
 8040438:	e03b      	b.n	80404b2 <HAL_FLASH_Program+0x92>
 804043a:	4b20      	ldr	r3, [pc, #128]	@ (80404bc <HAL_FLASH_Program+0x9c>)
 804043c:	2201      	movs	r2, #1
 804043e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8040440:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8040444:	f000 f870 	bl	8040528 <FLASH_WaitForLastOperation>
 8040448:	4603      	mov	r3, r0
 804044a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 804044c:	7dfb      	ldrb	r3, [r7, #23]
 804044e:	2b00      	cmp	r3, #0
 8040450:	d12b      	bne.n	80404aa <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8040452:	68fb      	ldr	r3, [r7, #12]
 8040454:	2b00      	cmp	r3, #0
 8040456:	d105      	bne.n	8040464 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8040458:	783b      	ldrb	r3, [r7, #0]
 804045a:	4619      	mov	r1, r3
 804045c:	68b8      	ldr	r0, [r7, #8]
 804045e:	f000 f91b 	bl	8040698 <FLASH_Program_Byte>
 8040462:	e016      	b.n	8040492 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8040464:	68fb      	ldr	r3, [r7, #12]
 8040466:	2b01      	cmp	r3, #1
 8040468:	d105      	bne.n	8040476 <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 804046a:	883b      	ldrh	r3, [r7, #0]
 804046c:	4619      	mov	r1, r3
 804046e:	68b8      	ldr	r0, [r7, #8]
 8040470:	f000 f8ee 	bl	8040650 <FLASH_Program_HalfWord>
 8040474:	e00d      	b.n	8040492 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8040476:	68fb      	ldr	r3, [r7, #12]
 8040478:	2b02      	cmp	r3, #2
 804047a:	d105      	bne.n	8040488 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 804047c:	683b      	ldr	r3, [r7, #0]
 804047e:	4619      	mov	r1, r3
 8040480:	68b8      	ldr	r0, [r7, #8]
 8040482:	f000 f8c3 	bl	804060c <FLASH_Program_Word>
 8040486:	e004      	b.n	8040492 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8040488:	e9d7 2300 	ldrd	r2, r3, [r7]
 804048c:	68b8      	ldr	r0, [r7, #8]
 804048e:	f000 f88b 	bl	80405a8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8040492:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8040496:	f000 f847 	bl	8040528 <FLASH_WaitForLastOperation>
 804049a:	4603      	mov	r3, r0
 804049c:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 804049e:	4b08      	ldr	r3, [pc, #32]	@ (80404c0 <HAL_FLASH_Program+0xa0>)
 80404a0:	691b      	ldr	r3, [r3, #16]
 80404a2:	4a07      	ldr	r2, [pc, #28]	@ (80404c0 <HAL_FLASH_Program+0xa0>)
 80404a4:	f023 0301 	bic.w	r3, r3, #1
 80404a8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80404aa:	4b04      	ldr	r3, [pc, #16]	@ (80404bc <HAL_FLASH_Program+0x9c>)
 80404ac:	2200      	movs	r2, #0
 80404ae:	761a      	strb	r2, [r3, #24]

  return status;
 80404b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80404b2:	4618      	mov	r0, r3
 80404b4:	3718      	adds	r7, #24
 80404b6:	46bd      	mov	sp, r7
 80404b8:	bd80      	pop	{r7, pc}
 80404ba:	bf00      	nop
 80404bc:	20000b28 	.word	0x20000b28
 80404c0:	40023c00 	.word	0x40023c00

080404c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80404c4:	b480      	push	{r7}
 80404c6:	b083      	sub	sp, #12
 80404c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80404ca:	2300      	movs	r3, #0
 80404cc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80404ce:	4b0b      	ldr	r3, [pc, #44]	@ (80404fc <HAL_FLASH_Unlock+0x38>)
 80404d0:	691b      	ldr	r3, [r3, #16]
 80404d2:	2b00      	cmp	r3, #0
 80404d4:	da0b      	bge.n	80404ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80404d6:	4b09      	ldr	r3, [pc, #36]	@ (80404fc <HAL_FLASH_Unlock+0x38>)
 80404d8:	4a09      	ldr	r2, [pc, #36]	@ (8040500 <HAL_FLASH_Unlock+0x3c>)
 80404da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80404dc:	4b07      	ldr	r3, [pc, #28]	@ (80404fc <HAL_FLASH_Unlock+0x38>)
 80404de:	4a09      	ldr	r2, [pc, #36]	@ (8040504 <HAL_FLASH_Unlock+0x40>)
 80404e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80404e2:	4b06      	ldr	r3, [pc, #24]	@ (80404fc <HAL_FLASH_Unlock+0x38>)
 80404e4:	691b      	ldr	r3, [r3, #16]
 80404e6:	2b00      	cmp	r3, #0
 80404e8:	da01      	bge.n	80404ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80404ea:	2301      	movs	r3, #1
 80404ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80404ee:	79fb      	ldrb	r3, [r7, #7]
}
 80404f0:	4618      	mov	r0, r3
 80404f2:	370c      	adds	r7, #12
 80404f4:	46bd      	mov	sp, r7
 80404f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80404fa:	4770      	bx	lr
 80404fc:	40023c00 	.word	0x40023c00
 8040500:	45670123 	.word	0x45670123
 8040504:	cdef89ab 	.word	0xcdef89ab

08040508 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8040508:	b480      	push	{r7}
 804050a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 804050c:	4b05      	ldr	r3, [pc, #20]	@ (8040524 <HAL_FLASH_Lock+0x1c>)
 804050e:	691b      	ldr	r3, [r3, #16]
 8040510:	4a04      	ldr	r2, [pc, #16]	@ (8040524 <HAL_FLASH_Lock+0x1c>)
 8040512:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8040516:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8040518:	2300      	movs	r3, #0
}
 804051a:	4618      	mov	r0, r3
 804051c:	46bd      	mov	sp, r7
 804051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040522:	4770      	bx	lr
 8040524:	40023c00 	.word	0x40023c00

08040528 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8040528:	b580      	push	{r7, lr}
 804052a:	b084      	sub	sp, #16
 804052c:	af00      	add	r7, sp, #0
 804052e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8040530:	2300      	movs	r3, #0
 8040532:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8040534:	4b1a      	ldr	r3, [pc, #104]	@ (80405a0 <FLASH_WaitForLastOperation+0x78>)
 8040536:	2200      	movs	r2, #0
 8040538:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 804053a:	f7fe ffc7 	bl	803f4cc <HAL_GetTick>
 804053e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8040540:	e010      	b.n	8040564 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8040542:	687b      	ldr	r3, [r7, #4]
 8040544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040548:	d00c      	beq.n	8040564 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 804054a:	687b      	ldr	r3, [r7, #4]
 804054c:	2b00      	cmp	r3, #0
 804054e:	d007      	beq.n	8040560 <FLASH_WaitForLastOperation+0x38>
 8040550:	f7fe ffbc 	bl	803f4cc <HAL_GetTick>
 8040554:	4602      	mov	r2, r0
 8040556:	68fb      	ldr	r3, [r7, #12]
 8040558:	1ad3      	subs	r3, r2, r3
 804055a:	687a      	ldr	r2, [r7, #4]
 804055c:	429a      	cmp	r2, r3
 804055e:	d201      	bcs.n	8040564 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8040560:	2303      	movs	r3, #3
 8040562:	e019      	b.n	8040598 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8040564:	4b0f      	ldr	r3, [pc, #60]	@ (80405a4 <FLASH_WaitForLastOperation+0x7c>)
 8040566:	68db      	ldr	r3, [r3, #12]
 8040568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 804056c:	2b00      	cmp	r3, #0
 804056e:	d1e8      	bne.n	8040542 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8040570:	4b0c      	ldr	r3, [pc, #48]	@ (80405a4 <FLASH_WaitForLastOperation+0x7c>)
 8040572:	68db      	ldr	r3, [r3, #12]
 8040574:	f003 0301 	and.w	r3, r3, #1
 8040578:	2b00      	cmp	r3, #0
 804057a:	d002      	beq.n	8040582 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 804057c:	4b09      	ldr	r3, [pc, #36]	@ (80405a4 <FLASH_WaitForLastOperation+0x7c>)
 804057e:	2201      	movs	r2, #1
 8040580:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8040582:	4b08      	ldr	r3, [pc, #32]	@ (80405a4 <FLASH_WaitForLastOperation+0x7c>)
 8040584:	68db      	ldr	r3, [r3, #12]
 8040586:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 804058a:	2b00      	cmp	r3, #0
 804058c:	d003      	beq.n	8040596 <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 804058e:	f000 f8a5 	bl	80406dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8040592:	2301      	movs	r3, #1
 8040594:	e000      	b.n	8040598 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8040596:	2300      	movs	r3, #0

}
 8040598:	4618      	mov	r0, r3
 804059a:	3710      	adds	r7, #16
 804059c:	46bd      	mov	sp, r7
 804059e:	bd80      	pop	{r7, pc}
 80405a0:	20000b28 	.word	0x20000b28
 80405a4:	40023c00 	.word	0x40023c00

080405a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80405a8:	b480      	push	{r7}
 80405aa:	b085      	sub	sp, #20
 80405ac:	af00      	add	r7, sp, #0
 80405ae:	60f8      	str	r0, [r7, #12]
 80405b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80405b4:	4b14      	ldr	r3, [pc, #80]	@ (8040608 <FLASH_Program_DoubleWord+0x60>)
 80405b6:	691b      	ldr	r3, [r3, #16]
 80405b8:	4a13      	ldr	r2, [pc, #76]	@ (8040608 <FLASH_Program_DoubleWord+0x60>)
 80405ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80405be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80405c0:	4b11      	ldr	r3, [pc, #68]	@ (8040608 <FLASH_Program_DoubleWord+0x60>)
 80405c2:	691b      	ldr	r3, [r3, #16]
 80405c4:	4a10      	ldr	r2, [pc, #64]	@ (8040608 <FLASH_Program_DoubleWord+0x60>)
 80405c6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80405ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80405cc:	4b0e      	ldr	r3, [pc, #56]	@ (8040608 <FLASH_Program_DoubleWord+0x60>)
 80405ce:	691b      	ldr	r3, [r3, #16]
 80405d0:	4a0d      	ldr	r2, [pc, #52]	@ (8040608 <FLASH_Program_DoubleWord+0x60>)
 80405d2:	f043 0301 	orr.w	r3, r3, #1
 80405d6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80405d8:	68fb      	ldr	r3, [r7, #12]
 80405da:	683a      	ldr	r2, [r7, #0]
 80405dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80405de:	f3bf 8f6f 	isb	sy
}
 80405e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 80405e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80405e8:	f04f 0200 	mov.w	r2, #0
 80405ec:	f04f 0300 	mov.w	r3, #0
 80405f0:	000a      	movs	r2, r1
 80405f2:	2300      	movs	r3, #0
 80405f4:	68f9      	ldr	r1, [r7, #12]
 80405f6:	3104      	adds	r1, #4
 80405f8:	4613      	mov	r3, r2
 80405fa:	600b      	str	r3, [r1, #0]
}
 80405fc:	bf00      	nop
 80405fe:	3714      	adds	r7, #20
 8040600:	46bd      	mov	sp, r7
 8040602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040606:	4770      	bx	lr
 8040608:	40023c00 	.word	0x40023c00

0804060c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 804060c:	b480      	push	{r7}
 804060e:	b083      	sub	sp, #12
 8040610:	af00      	add	r7, sp, #0
 8040612:	6078      	str	r0, [r7, #4]
 8040614:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8040616:	4b0d      	ldr	r3, [pc, #52]	@ (804064c <FLASH_Program_Word+0x40>)
 8040618:	691b      	ldr	r3, [r3, #16]
 804061a:	4a0c      	ldr	r2, [pc, #48]	@ (804064c <FLASH_Program_Word+0x40>)
 804061c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8040620:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8040622:	4b0a      	ldr	r3, [pc, #40]	@ (804064c <FLASH_Program_Word+0x40>)
 8040624:	691b      	ldr	r3, [r3, #16]
 8040626:	4a09      	ldr	r2, [pc, #36]	@ (804064c <FLASH_Program_Word+0x40>)
 8040628:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 804062c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 804062e:	4b07      	ldr	r3, [pc, #28]	@ (804064c <FLASH_Program_Word+0x40>)
 8040630:	691b      	ldr	r3, [r3, #16]
 8040632:	4a06      	ldr	r2, [pc, #24]	@ (804064c <FLASH_Program_Word+0x40>)
 8040634:	f043 0301 	orr.w	r3, r3, #1
 8040638:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 804063a:	687b      	ldr	r3, [r7, #4]
 804063c:	683a      	ldr	r2, [r7, #0]
 804063e:	601a      	str	r2, [r3, #0]
}
 8040640:	bf00      	nop
 8040642:	370c      	adds	r7, #12
 8040644:	46bd      	mov	sp, r7
 8040646:	f85d 7b04 	ldr.w	r7, [sp], #4
 804064a:	4770      	bx	lr
 804064c:	40023c00 	.word	0x40023c00

08040650 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8040650:	b480      	push	{r7}
 8040652:	b083      	sub	sp, #12
 8040654:	af00      	add	r7, sp, #0
 8040656:	6078      	str	r0, [r7, #4]
 8040658:	460b      	mov	r3, r1
 804065a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804065c:	4b0d      	ldr	r3, [pc, #52]	@ (8040694 <FLASH_Program_HalfWord+0x44>)
 804065e:	691b      	ldr	r3, [r3, #16]
 8040660:	4a0c      	ldr	r2, [pc, #48]	@ (8040694 <FLASH_Program_HalfWord+0x44>)
 8040662:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8040666:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8040668:	4b0a      	ldr	r3, [pc, #40]	@ (8040694 <FLASH_Program_HalfWord+0x44>)
 804066a:	691b      	ldr	r3, [r3, #16]
 804066c:	4a09      	ldr	r2, [pc, #36]	@ (8040694 <FLASH_Program_HalfWord+0x44>)
 804066e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8040672:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8040674:	4b07      	ldr	r3, [pc, #28]	@ (8040694 <FLASH_Program_HalfWord+0x44>)
 8040676:	691b      	ldr	r3, [r3, #16]
 8040678:	4a06      	ldr	r2, [pc, #24]	@ (8040694 <FLASH_Program_HalfWord+0x44>)
 804067a:	f043 0301 	orr.w	r3, r3, #1
 804067e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8040680:	687b      	ldr	r3, [r7, #4]
 8040682:	887a      	ldrh	r2, [r7, #2]
 8040684:	801a      	strh	r2, [r3, #0]
}
 8040686:	bf00      	nop
 8040688:	370c      	adds	r7, #12
 804068a:	46bd      	mov	sp, r7
 804068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040690:	4770      	bx	lr
 8040692:	bf00      	nop
 8040694:	40023c00 	.word	0x40023c00

08040698 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8040698:	b480      	push	{r7}
 804069a:	b083      	sub	sp, #12
 804069c:	af00      	add	r7, sp, #0
 804069e:	6078      	str	r0, [r7, #4]
 80406a0:	460b      	mov	r3, r1
 80406a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80406a4:	4b0c      	ldr	r3, [pc, #48]	@ (80406d8 <FLASH_Program_Byte+0x40>)
 80406a6:	691b      	ldr	r3, [r3, #16]
 80406a8:	4a0b      	ldr	r2, [pc, #44]	@ (80406d8 <FLASH_Program_Byte+0x40>)
 80406aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80406ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80406b0:	4b09      	ldr	r3, [pc, #36]	@ (80406d8 <FLASH_Program_Byte+0x40>)
 80406b2:	4a09      	ldr	r2, [pc, #36]	@ (80406d8 <FLASH_Program_Byte+0x40>)
 80406b4:	691b      	ldr	r3, [r3, #16]
 80406b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80406b8:	4b07      	ldr	r3, [pc, #28]	@ (80406d8 <FLASH_Program_Byte+0x40>)
 80406ba:	691b      	ldr	r3, [r3, #16]
 80406bc:	4a06      	ldr	r2, [pc, #24]	@ (80406d8 <FLASH_Program_Byte+0x40>)
 80406be:	f043 0301 	orr.w	r3, r3, #1
 80406c2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80406c4:	687b      	ldr	r3, [r7, #4]
 80406c6:	78fa      	ldrb	r2, [r7, #3]
 80406c8:	701a      	strb	r2, [r3, #0]
}
 80406ca:	bf00      	nop
 80406cc:	370c      	adds	r7, #12
 80406ce:	46bd      	mov	sp, r7
 80406d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80406d4:	4770      	bx	lr
 80406d6:	bf00      	nop
 80406d8:	40023c00 	.word	0x40023c00

080406dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80406dc:	b480      	push	{r7}
 80406de:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80406e0:	4b2f      	ldr	r3, [pc, #188]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 80406e2:	68db      	ldr	r3, [r3, #12]
 80406e4:	f003 0310 	and.w	r3, r3, #16
 80406e8:	2b00      	cmp	r3, #0
 80406ea:	d008      	beq.n	80406fe <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80406ec:	4b2d      	ldr	r3, [pc, #180]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 80406ee:	69db      	ldr	r3, [r3, #28]
 80406f0:	f043 0310 	orr.w	r3, r3, #16
 80406f4:	4a2b      	ldr	r2, [pc, #172]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 80406f6:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80406f8:	4b29      	ldr	r3, [pc, #164]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 80406fa:	2210      	movs	r2, #16
 80406fc:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80406fe:	4b28      	ldr	r3, [pc, #160]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 8040700:	68db      	ldr	r3, [r3, #12]
 8040702:	f003 0320 	and.w	r3, r3, #32
 8040706:	2b00      	cmp	r3, #0
 8040708:	d008      	beq.n	804071c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 804070a:	4b26      	ldr	r3, [pc, #152]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 804070c:	69db      	ldr	r3, [r3, #28]
 804070e:	f043 0308 	orr.w	r3, r3, #8
 8040712:	4a24      	ldr	r2, [pc, #144]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 8040714:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8040716:	4b22      	ldr	r3, [pc, #136]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 8040718:	2220      	movs	r2, #32
 804071a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 804071c:	4b20      	ldr	r3, [pc, #128]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 804071e:	68db      	ldr	r3, [r3, #12]
 8040720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8040724:	2b00      	cmp	r3, #0
 8040726:	d008      	beq.n	804073a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8040728:	4b1e      	ldr	r3, [pc, #120]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 804072a:	69db      	ldr	r3, [r3, #28]
 804072c:	f043 0304 	orr.w	r3, r3, #4
 8040730:	4a1c      	ldr	r2, [pc, #112]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 8040732:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8040734:	4b1a      	ldr	r3, [pc, #104]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 8040736:	2240      	movs	r2, #64	@ 0x40
 8040738:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 804073a:	4b19      	ldr	r3, [pc, #100]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 804073c:	68db      	ldr	r3, [r3, #12]
 804073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8040742:	2b00      	cmp	r3, #0
 8040744:	d008      	beq.n	8040758 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8040746:	4b17      	ldr	r3, [pc, #92]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 8040748:	69db      	ldr	r3, [r3, #28]
 804074a:	f043 0302 	orr.w	r3, r3, #2
 804074e:	4a15      	ldr	r2, [pc, #84]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 8040750:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8040752:	4b13      	ldr	r3, [pc, #76]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 8040754:	2280      	movs	r2, #128	@ 0x80
 8040756:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8040758:	4b11      	ldr	r3, [pc, #68]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 804075a:	68db      	ldr	r3, [r3, #12]
 804075c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8040760:	2b00      	cmp	r3, #0
 8040762:	d009      	beq.n	8040778 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8040764:	4b0f      	ldr	r3, [pc, #60]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 8040766:	69db      	ldr	r3, [r3, #28]
 8040768:	f043 0301 	orr.w	r3, r3, #1
 804076c:	4a0d      	ldr	r2, [pc, #52]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 804076e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8040770:	4b0b      	ldr	r3, [pc, #44]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 8040772:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8040776:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8040778:	4b09      	ldr	r3, [pc, #36]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 804077a:	68db      	ldr	r3, [r3, #12]
 804077c:	f003 0302 	and.w	r3, r3, #2
 8040780:	2b00      	cmp	r3, #0
 8040782:	d008      	beq.n	8040796 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8040784:	4b07      	ldr	r3, [pc, #28]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 8040786:	69db      	ldr	r3, [r3, #28]
 8040788:	f043 0320 	orr.w	r3, r3, #32
 804078c:	4a05      	ldr	r2, [pc, #20]	@ (80407a4 <FLASH_SetErrorCode+0xc8>)
 804078e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8040790:	4b03      	ldr	r3, [pc, #12]	@ (80407a0 <FLASH_SetErrorCode+0xc4>)
 8040792:	2202      	movs	r2, #2
 8040794:	60da      	str	r2, [r3, #12]
  }
}
 8040796:	bf00      	nop
 8040798:	46bd      	mov	sp, r7
 804079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804079e:	4770      	bx	lr
 80407a0:	40023c00 	.word	0x40023c00
 80407a4:	20000b28 	.word	0x20000b28

080407a8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80407a8:	b580      	push	{r7, lr}
 80407aa:	b084      	sub	sp, #16
 80407ac:	af00      	add	r7, sp, #0
 80407ae:	6078      	str	r0, [r7, #4]
 80407b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 80407b2:	2300      	movs	r3, #0
 80407b4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80407b6:	4b31      	ldr	r3, [pc, #196]	@ (804087c <HAL_FLASHEx_Erase+0xd4>)
 80407b8:	7e1b      	ldrb	r3, [r3, #24]
 80407ba:	2b01      	cmp	r3, #1
 80407bc:	d101      	bne.n	80407c2 <HAL_FLASHEx_Erase+0x1a>
 80407be:	2302      	movs	r3, #2
 80407c0:	e058      	b.n	8040874 <HAL_FLASHEx_Erase+0xcc>
 80407c2:	4b2e      	ldr	r3, [pc, #184]	@ (804087c <HAL_FLASHEx_Erase+0xd4>)
 80407c4:	2201      	movs	r2, #1
 80407c6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80407c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80407cc:	f7ff feac 	bl	8040528 <FLASH_WaitForLastOperation>
 80407d0:	4603      	mov	r3, r0
 80407d2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80407d4:	7bfb      	ldrb	r3, [r7, #15]
 80407d6:	2b00      	cmp	r3, #0
 80407d8:	d148      	bne.n	804086c <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80407da:	683b      	ldr	r3, [r7, #0]
 80407dc:	f04f 32ff 	mov.w	r2, #4294967295
 80407e0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80407e2:	687b      	ldr	r3, [r7, #4]
 80407e4:	681b      	ldr	r3, [r3, #0]
 80407e6:	2b01      	cmp	r3, #1
 80407e8:	d115      	bne.n	8040816 <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80407ea:	687b      	ldr	r3, [r7, #4]
 80407ec:	691b      	ldr	r3, [r3, #16]
 80407ee:	b2da      	uxtb	r2, r3
 80407f0:	687b      	ldr	r3, [r7, #4]
 80407f2:	685b      	ldr	r3, [r3, #4]
 80407f4:	4619      	mov	r1, r3
 80407f6:	4610      	mov	r0, r2
 80407f8:	f000 f844 	bl	8040884 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80407fc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8040800:	f7ff fe92 	bl	8040528 <FLASH_WaitForLastOperation>
 8040804:	4603      	mov	r3, r0
 8040806:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8040808:	4b1d      	ldr	r3, [pc, #116]	@ (8040880 <HAL_FLASHEx_Erase+0xd8>)
 804080a:	691b      	ldr	r3, [r3, #16]
 804080c:	4a1c      	ldr	r2, [pc, #112]	@ (8040880 <HAL_FLASHEx_Erase+0xd8>)
 804080e:	f023 0304 	bic.w	r3, r3, #4
 8040812:	6113      	str	r3, [r2, #16]
 8040814:	e028      	b.n	8040868 <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8040816:	687b      	ldr	r3, [r7, #4]
 8040818:	689b      	ldr	r3, [r3, #8]
 804081a:	60bb      	str	r3, [r7, #8]
 804081c:	e01c      	b.n	8040858 <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 804081e:	687b      	ldr	r3, [r7, #4]
 8040820:	691b      	ldr	r3, [r3, #16]
 8040822:	b2db      	uxtb	r3, r3
 8040824:	4619      	mov	r1, r3
 8040826:	68b8      	ldr	r0, [r7, #8]
 8040828:	f000 f850 	bl	80408cc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 804082c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8040830:	f7ff fe7a 	bl	8040528 <FLASH_WaitForLastOperation>
 8040834:	4603      	mov	r3, r0
 8040836:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8040838:	4b11      	ldr	r3, [pc, #68]	@ (8040880 <HAL_FLASHEx_Erase+0xd8>)
 804083a:	691b      	ldr	r3, [r3, #16]
 804083c:	4a10      	ldr	r2, [pc, #64]	@ (8040880 <HAL_FLASHEx_Erase+0xd8>)
 804083e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8040842:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8040844:	7bfb      	ldrb	r3, [r7, #15]
 8040846:	2b00      	cmp	r3, #0
 8040848:	d003      	beq.n	8040852 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 804084a:	683b      	ldr	r3, [r7, #0]
 804084c:	68ba      	ldr	r2, [r7, #8]
 804084e:	601a      	str	r2, [r3, #0]
          break;
 8040850:	e00a      	b.n	8040868 <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8040852:	68bb      	ldr	r3, [r7, #8]
 8040854:	3301      	adds	r3, #1
 8040856:	60bb      	str	r3, [r7, #8]
 8040858:	687b      	ldr	r3, [r7, #4]
 804085a:	68da      	ldr	r2, [r3, #12]
 804085c:	687b      	ldr	r3, [r7, #4]
 804085e:	689b      	ldr	r3, [r3, #8]
 8040860:	4413      	add	r3, r2
 8040862:	68ba      	ldr	r2, [r7, #8]
 8040864:	429a      	cmp	r2, r3
 8040866:	d3da      	bcc.n	804081e <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8040868:	f000 f878 	bl	804095c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 804086c:	4b03      	ldr	r3, [pc, #12]	@ (804087c <HAL_FLASHEx_Erase+0xd4>)
 804086e:	2200      	movs	r2, #0
 8040870:	761a      	strb	r2, [r3, #24]

  return status;
 8040872:	7bfb      	ldrb	r3, [r7, #15]
}
 8040874:	4618      	mov	r0, r3
 8040876:	3710      	adds	r7, #16
 8040878:	46bd      	mov	sp, r7
 804087a:	bd80      	pop	{r7, pc}
 804087c:	20000b28 	.word	0x20000b28
 8040880:	40023c00 	.word	0x40023c00

08040884 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8040884:	b480      	push	{r7}
 8040886:	b083      	sub	sp, #12
 8040888:	af00      	add	r7, sp, #0
 804088a:	4603      	mov	r3, r0
 804088c:	6039      	str	r1, [r7, #0]
 804088e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8040890:	4b0d      	ldr	r3, [pc, #52]	@ (80408c8 <FLASH_MassErase+0x44>)
 8040892:	691b      	ldr	r3, [r3, #16]
 8040894:	4a0c      	ldr	r2, [pc, #48]	@ (80408c8 <FLASH_MassErase+0x44>)
 8040896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 804089a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 804089c:	4b0a      	ldr	r3, [pc, #40]	@ (80408c8 <FLASH_MassErase+0x44>)
 804089e:	691b      	ldr	r3, [r3, #16]
 80408a0:	4a09      	ldr	r2, [pc, #36]	@ (80408c8 <FLASH_MassErase+0x44>)
 80408a2:	f043 0304 	orr.w	r3, r3, #4
 80408a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80408a8:	4b07      	ldr	r3, [pc, #28]	@ (80408c8 <FLASH_MassErase+0x44>)
 80408aa:	691a      	ldr	r2, [r3, #16]
 80408ac:	79fb      	ldrb	r3, [r7, #7]
 80408ae:	021b      	lsls	r3, r3, #8
 80408b0:	4313      	orrs	r3, r2
 80408b2:	4a05      	ldr	r2, [pc, #20]	@ (80408c8 <FLASH_MassErase+0x44>)
 80408b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80408b8:	6113      	str	r3, [r2, #16]
}
 80408ba:	bf00      	nop
 80408bc:	370c      	adds	r7, #12
 80408be:	46bd      	mov	sp, r7
 80408c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80408c4:	4770      	bx	lr
 80408c6:	bf00      	nop
 80408c8:	40023c00 	.word	0x40023c00

080408cc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80408cc:	b480      	push	{r7}
 80408ce:	b085      	sub	sp, #20
 80408d0:	af00      	add	r7, sp, #0
 80408d2:	6078      	str	r0, [r7, #4]
 80408d4:	460b      	mov	r3, r1
 80408d6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80408d8:	2300      	movs	r3, #0
 80408da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80408dc:	78fb      	ldrb	r3, [r7, #3]
 80408de:	2b00      	cmp	r3, #0
 80408e0:	d102      	bne.n	80408e8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80408e2:	2300      	movs	r3, #0
 80408e4:	60fb      	str	r3, [r7, #12]
 80408e6:	e010      	b.n	804090a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80408e8:	78fb      	ldrb	r3, [r7, #3]
 80408ea:	2b01      	cmp	r3, #1
 80408ec:	d103      	bne.n	80408f6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80408ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80408f2:	60fb      	str	r3, [r7, #12]
 80408f4:	e009      	b.n	804090a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80408f6:	78fb      	ldrb	r3, [r7, #3]
 80408f8:	2b02      	cmp	r3, #2
 80408fa:	d103      	bne.n	8040904 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80408fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8040900:	60fb      	str	r3, [r7, #12]
 8040902:	e002      	b.n	804090a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8040904:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8040908:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 804090a:	4b13      	ldr	r3, [pc, #76]	@ (8040958 <FLASH_Erase_Sector+0x8c>)
 804090c:	691b      	ldr	r3, [r3, #16]
 804090e:	4a12      	ldr	r2, [pc, #72]	@ (8040958 <FLASH_Erase_Sector+0x8c>)
 8040910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8040914:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8040916:	4b10      	ldr	r3, [pc, #64]	@ (8040958 <FLASH_Erase_Sector+0x8c>)
 8040918:	691a      	ldr	r2, [r3, #16]
 804091a:	490f      	ldr	r1, [pc, #60]	@ (8040958 <FLASH_Erase_Sector+0x8c>)
 804091c:	68fb      	ldr	r3, [r7, #12]
 804091e:	4313      	orrs	r3, r2
 8040920:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8040922:	4b0d      	ldr	r3, [pc, #52]	@ (8040958 <FLASH_Erase_Sector+0x8c>)
 8040924:	691b      	ldr	r3, [r3, #16]
 8040926:	4a0c      	ldr	r2, [pc, #48]	@ (8040958 <FLASH_Erase_Sector+0x8c>)
 8040928:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 804092c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 804092e:	4b0a      	ldr	r3, [pc, #40]	@ (8040958 <FLASH_Erase_Sector+0x8c>)
 8040930:	691a      	ldr	r2, [r3, #16]
 8040932:	687b      	ldr	r3, [r7, #4]
 8040934:	00db      	lsls	r3, r3, #3
 8040936:	4313      	orrs	r3, r2
 8040938:	4a07      	ldr	r2, [pc, #28]	@ (8040958 <FLASH_Erase_Sector+0x8c>)
 804093a:	f043 0302 	orr.w	r3, r3, #2
 804093e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8040940:	4b05      	ldr	r3, [pc, #20]	@ (8040958 <FLASH_Erase_Sector+0x8c>)
 8040942:	691b      	ldr	r3, [r3, #16]
 8040944:	4a04      	ldr	r2, [pc, #16]	@ (8040958 <FLASH_Erase_Sector+0x8c>)
 8040946:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 804094a:	6113      	str	r3, [r2, #16]
}
 804094c:	bf00      	nop
 804094e:	3714      	adds	r7, #20
 8040950:	46bd      	mov	sp, r7
 8040952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040956:	4770      	bx	lr
 8040958:	40023c00 	.word	0x40023c00

0804095c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 804095c:	b480      	push	{r7}
 804095e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8040960:	4b20      	ldr	r3, [pc, #128]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 8040962:	681b      	ldr	r3, [r3, #0]
 8040964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8040968:	2b00      	cmp	r3, #0
 804096a:	d017      	beq.n	804099c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 804096c:	4b1d      	ldr	r3, [pc, #116]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 804096e:	681b      	ldr	r3, [r3, #0]
 8040970:	4a1c      	ldr	r2, [pc, #112]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 8040972:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8040976:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8040978:	4b1a      	ldr	r3, [pc, #104]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 804097a:	681b      	ldr	r3, [r3, #0]
 804097c:	4a19      	ldr	r2, [pc, #100]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 804097e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8040982:	6013      	str	r3, [r2, #0]
 8040984:	4b17      	ldr	r3, [pc, #92]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 8040986:	681b      	ldr	r3, [r3, #0]
 8040988:	4a16      	ldr	r2, [pc, #88]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 804098a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 804098e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8040990:	4b14      	ldr	r3, [pc, #80]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 8040992:	681b      	ldr	r3, [r3, #0]
 8040994:	4a13      	ldr	r2, [pc, #76]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 8040996:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 804099a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 804099c:	4b11      	ldr	r3, [pc, #68]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 804099e:	681b      	ldr	r3, [r3, #0]
 80409a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80409a4:	2b00      	cmp	r3, #0
 80409a6:	d017      	beq.n	80409d8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80409a8:	4b0e      	ldr	r3, [pc, #56]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 80409aa:	681b      	ldr	r3, [r3, #0]
 80409ac:	4a0d      	ldr	r2, [pc, #52]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 80409ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80409b2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80409b4:	4b0b      	ldr	r3, [pc, #44]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 80409b6:	681b      	ldr	r3, [r3, #0]
 80409b8:	4a0a      	ldr	r2, [pc, #40]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 80409ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80409be:	6013      	str	r3, [r2, #0]
 80409c0:	4b08      	ldr	r3, [pc, #32]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 80409c2:	681b      	ldr	r3, [r3, #0]
 80409c4:	4a07      	ldr	r2, [pc, #28]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 80409c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80409ca:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80409cc:	4b05      	ldr	r3, [pc, #20]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 80409ce:	681b      	ldr	r3, [r3, #0]
 80409d0:	4a04      	ldr	r2, [pc, #16]	@ (80409e4 <FLASH_FlushCaches+0x88>)
 80409d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80409d6:	6013      	str	r3, [r2, #0]
  }
}
 80409d8:	bf00      	nop
 80409da:	46bd      	mov	sp, r7
 80409dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409e0:	4770      	bx	lr
 80409e2:	bf00      	nop
 80409e4:	40023c00 	.word	0x40023c00

080409e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80409e8:	b480      	push	{r7}
 80409ea:	b089      	sub	sp, #36	@ 0x24
 80409ec:	af00      	add	r7, sp, #0
 80409ee:	6078      	str	r0, [r7, #4]
 80409f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80409f2:	2300      	movs	r3, #0
 80409f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80409f6:	2300      	movs	r3, #0
 80409f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80409fa:	2300      	movs	r3, #0
 80409fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80409fe:	2300      	movs	r3, #0
 8040a00:	61fb      	str	r3, [r7, #28]
 8040a02:	e165      	b.n	8040cd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8040a04:	2201      	movs	r2, #1
 8040a06:	69fb      	ldr	r3, [r7, #28]
 8040a08:	fa02 f303 	lsl.w	r3, r2, r3
 8040a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8040a0e:	683b      	ldr	r3, [r7, #0]
 8040a10:	681b      	ldr	r3, [r3, #0]
 8040a12:	697a      	ldr	r2, [r7, #20]
 8040a14:	4013      	ands	r3, r2
 8040a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8040a18:	693a      	ldr	r2, [r7, #16]
 8040a1a:	697b      	ldr	r3, [r7, #20]
 8040a1c:	429a      	cmp	r2, r3
 8040a1e:	f040 8154 	bne.w	8040cca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040a22:	683b      	ldr	r3, [r7, #0]
 8040a24:	685b      	ldr	r3, [r3, #4]
 8040a26:	f003 0303 	and.w	r3, r3, #3
 8040a2a:	2b01      	cmp	r3, #1
 8040a2c:	d005      	beq.n	8040a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040a2e:	683b      	ldr	r3, [r7, #0]
 8040a30:	685b      	ldr	r3, [r3, #4]
 8040a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8040a36:	2b02      	cmp	r3, #2
 8040a38:	d130      	bne.n	8040a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8040a3a:	687b      	ldr	r3, [r7, #4]
 8040a3c:	689b      	ldr	r3, [r3, #8]
 8040a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8040a40:	69fb      	ldr	r3, [r7, #28]
 8040a42:	005b      	lsls	r3, r3, #1
 8040a44:	2203      	movs	r2, #3
 8040a46:	fa02 f303 	lsl.w	r3, r2, r3
 8040a4a:	43db      	mvns	r3, r3
 8040a4c:	69ba      	ldr	r2, [r7, #24]
 8040a4e:	4013      	ands	r3, r2
 8040a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040a52:	683b      	ldr	r3, [r7, #0]
 8040a54:	68da      	ldr	r2, [r3, #12]
 8040a56:	69fb      	ldr	r3, [r7, #28]
 8040a58:	005b      	lsls	r3, r3, #1
 8040a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8040a5e:	69ba      	ldr	r2, [r7, #24]
 8040a60:	4313      	orrs	r3, r2
 8040a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8040a64:	687b      	ldr	r3, [r7, #4]
 8040a66:	69ba      	ldr	r2, [r7, #24]
 8040a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040a6a:	687b      	ldr	r3, [r7, #4]
 8040a6c:	685b      	ldr	r3, [r3, #4]
 8040a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8040a70:	2201      	movs	r2, #1
 8040a72:	69fb      	ldr	r3, [r7, #28]
 8040a74:	fa02 f303 	lsl.w	r3, r2, r3
 8040a78:	43db      	mvns	r3, r3
 8040a7a:	69ba      	ldr	r2, [r7, #24]
 8040a7c:	4013      	ands	r3, r2
 8040a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040a80:	683b      	ldr	r3, [r7, #0]
 8040a82:	685b      	ldr	r3, [r3, #4]
 8040a84:	091b      	lsrs	r3, r3, #4
 8040a86:	f003 0201 	and.w	r2, r3, #1
 8040a8a:	69fb      	ldr	r3, [r7, #28]
 8040a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8040a90:	69ba      	ldr	r2, [r7, #24]
 8040a92:	4313      	orrs	r3, r2
 8040a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8040a96:	687b      	ldr	r3, [r7, #4]
 8040a98:	69ba      	ldr	r2, [r7, #24]
 8040a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040a9c:	683b      	ldr	r3, [r7, #0]
 8040a9e:	685b      	ldr	r3, [r3, #4]
 8040aa0:	f003 0303 	and.w	r3, r3, #3
 8040aa4:	2b03      	cmp	r3, #3
 8040aa6:	d017      	beq.n	8040ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8040aa8:	687b      	ldr	r3, [r7, #4]
 8040aaa:	68db      	ldr	r3, [r3, #12]
 8040aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8040aae:	69fb      	ldr	r3, [r7, #28]
 8040ab0:	005b      	lsls	r3, r3, #1
 8040ab2:	2203      	movs	r2, #3
 8040ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8040ab8:	43db      	mvns	r3, r3
 8040aba:	69ba      	ldr	r2, [r7, #24]
 8040abc:	4013      	ands	r3, r2
 8040abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040ac0:	683b      	ldr	r3, [r7, #0]
 8040ac2:	689a      	ldr	r2, [r3, #8]
 8040ac4:	69fb      	ldr	r3, [r7, #28]
 8040ac6:	005b      	lsls	r3, r3, #1
 8040ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8040acc:	69ba      	ldr	r2, [r7, #24]
 8040ace:	4313      	orrs	r3, r2
 8040ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8040ad2:	687b      	ldr	r3, [r7, #4]
 8040ad4:	69ba      	ldr	r2, [r7, #24]
 8040ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040ad8:	683b      	ldr	r3, [r7, #0]
 8040ada:	685b      	ldr	r3, [r3, #4]
 8040adc:	f003 0303 	and.w	r3, r3, #3
 8040ae0:	2b02      	cmp	r3, #2
 8040ae2:	d123      	bne.n	8040b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040ae4:	69fb      	ldr	r3, [r7, #28]
 8040ae6:	08da      	lsrs	r2, r3, #3
 8040ae8:	687b      	ldr	r3, [r7, #4]
 8040aea:	3208      	adds	r2, #8
 8040aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8040af2:	69fb      	ldr	r3, [r7, #28]
 8040af4:	f003 0307 	and.w	r3, r3, #7
 8040af8:	009b      	lsls	r3, r3, #2
 8040afa:	220f      	movs	r2, #15
 8040afc:	fa02 f303 	lsl.w	r3, r2, r3
 8040b00:	43db      	mvns	r3, r3
 8040b02:	69ba      	ldr	r2, [r7, #24]
 8040b04:	4013      	ands	r3, r2
 8040b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8040b08:	683b      	ldr	r3, [r7, #0]
 8040b0a:	691a      	ldr	r2, [r3, #16]
 8040b0c:	69fb      	ldr	r3, [r7, #28]
 8040b0e:	f003 0307 	and.w	r3, r3, #7
 8040b12:	009b      	lsls	r3, r3, #2
 8040b14:	fa02 f303 	lsl.w	r3, r2, r3
 8040b18:	69ba      	ldr	r2, [r7, #24]
 8040b1a:	4313      	orrs	r3, r2
 8040b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8040b1e:	69fb      	ldr	r3, [r7, #28]
 8040b20:	08da      	lsrs	r2, r3, #3
 8040b22:	687b      	ldr	r3, [r7, #4]
 8040b24:	3208      	adds	r2, #8
 8040b26:	69b9      	ldr	r1, [r7, #24]
 8040b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040b2c:	687b      	ldr	r3, [r7, #4]
 8040b2e:	681b      	ldr	r3, [r3, #0]
 8040b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8040b32:	69fb      	ldr	r3, [r7, #28]
 8040b34:	005b      	lsls	r3, r3, #1
 8040b36:	2203      	movs	r2, #3
 8040b38:	fa02 f303 	lsl.w	r3, r2, r3
 8040b3c:	43db      	mvns	r3, r3
 8040b3e:	69ba      	ldr	r2, [r7, #24]
 8040b40:	4013      	ands	r3, r2
 8040b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040b44:	683b      	ldr	r3, [r7, #0]
 8040b46:	685b      	ldr	r3, [r3, #4]
 8040b48:	f003 0203 	and.w	r2, r3, #3
 8040b4c:	69fb      	ldr	r3, [r7, #28]
 8040b4e:	005b      	lsls	r3, r3, #1
 8040b50:	fa02 f303 	lsl.w	r3, r2, r3
 8040b54:	69ba      	ldr	r2, [r7, #24]
 8040b56:	4313      	orrs	r3, r2
 8040b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8040b5a:	687b      	ldr	r3, [r7, #4]
 8040b5c:	69ba      	ldr	r2, [r7, #24]
 8040b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8040b60:	683b      	ldr	r3, [r7, #0]
 8040b62:	685b      	ldr	r3, [r3, #4]
 8040b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8040b68:	2b00      	cmp	r3, #0
 8040b6a:	f000 80ae 	beq.w	8040cca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040b6e:	2300      	movs	r3, #0
 8040b70:	60fb      	str	r3, [r7, #12]
 8040b72:	4b5d      	ldr	r3, [pc, #372]	@ (8040ce8 <HAL_GPIO_Init+0x300>)
 8040b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040b76:	4a5c      	ldr	r2, [pc, #368]	@ (8040ce8 <HAL_GPIO_Init+0x300>)
 8040b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8040b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8040b7e:	4b5a      	ldr	r3, [pc, #360]	@ (8040ce8 <HAL_GPIO_Init+0x300>)
 8040b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8040b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8040b86:	60fb      	str	r3, [r7, #12]
 8040b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8040b8a:	4a58      	ldr	r2, [pc, #352]	@ (8040cec <HAL_GPIO_Init+0x304>)
 8040b8c:	69fb      	ldr	r3, [r7, #28]
 8040b8e:	089b      	lsrs	r3, r3, #2
 8040b90:	3302      	adds	r3, #2
 8040b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8040b98:	69fb      	ldr	r3, [r7, #28]
 8040b9a:	f003 0303 	and.w	r3, r3, #3
 8040b9e:	009b      	lsls	r3, r3, #2
 8040ba0:	220f      	movs	r2, #15
 8040ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8040ba6:	43db      	mvns	r3, r3
 8040ba8:	69ba      	ldr	r2, [r7, #24]
 8040baa:	4013      	ands	r3, r2
 8040bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8040bae:	687b      	ldr	r3, [r7, #4]
 8040bb0:	4a4f      	ldr	r2, [pc, #316]	@ (8040cf0 <HAL_GPIO_Init+0x308>)
 8040bb2:	4293      	cmp	r3, r2
 8040bb4:	d025      	beq.n	8040c02 <HAL_GPIO_Init+0x21a>
 8040bb6:	687b      	ldr	r3, [r7, #4]
 8040bb8:	4a4e      	ldr	r2, [pc, #312]	@ (8040cf4 <HAL_GPIO_Init+0x30c>)
 8040bba:	4293      	cmp	r3, r2
 8040bbc:	d01f      	beq.n	8040bfe <HAL_GPIO_Init+0x216>
 8040bbe:	687b      	ldr	r3, [r7, #4]
 8040bc0:	4a4d      	ldr	r2, [pc, #308]	@ (8040cf8 <HAL_GPIO_Init+0x310>)
 8040bc2:	4293      	cmp	r3, r2
 8040bc4:	d019      	beq.n	8040bfa <HAL_GPIO_Init+0x212>
 8040bc6:	687b      	ldr	r3, [r7, #4]
 8040bc8:	4a4c      	ldr	r2, [pc, #304]	@ (8040cfc <HAL_GPIO_Init+0x314>)
 8040bca:	4293      	cmp	r3, r2
 8040bcc:	d013      	beq.n	8040bf6 <HAL_GPIO_Init+0x20e>
 8040bce:	687b      	ldr	r3, [r7, #4]
 8040bd0:	4a4b      	ldr	r2, [pc, #300]	@ (8040d00 <HAL_GPIO_Init+0x318>)
 8040bd2:	4293      	cmp	r3, r2
 8040bd4:	d00d      	beq.n	8040bf2 <HAL_GPIO_Init+0x20a>
 8040bd6:	687b      	ldr	r3, [r7, #4]
 8040bd8:	4a4a      	ldr	r2, [pc, #296]	@ (8040d04 <HAL_GPIO_Init+0x31c>)
 8040bda:	4293      	cmp	r3, r2
 8040bdc:	d007      	beq.n	8040bee <HAL_GPIO_Init+0x206>
 8040bde:	687b      	ldr	r3, [r7, #4]
 8040be0:	4a49      	ldr	r2, [pc, #292]	@ (8040d08 <HAL_GPIO_Init+0x320>)
 8040be2:	4293      	cmp	r3, r2
 8040be4:	d101      	bne.n	8040bea <HAL_GPIO_Init+0x202>
 8040be6:	2306      	movs	r3, #6
 8040be8:	e00c      	b.n	8040c04 <HAL_GPIO_Init+0x21c>
 8040bea:	2307      	movs	r3, #7
 8040bec:	e00a      	b.n	8040c04 <HAL_GPIO_Init+0x21c>
 8040bee:	2305      	movs	r3, #5
 8040bf0:	e008      	b.n	8040c04 <HAL_GPIO_Init+0x21c>
 8040bf2:	2304      	movs	r3, #4
 8040bf4:	e006      	b.n	8040c04 <HAL_GPIO_Init+0x21c>
 8040bf6:	2303      	movs	r3, #3
 8040bf8:	e004      	b.n	8040c04 <HAL_GPIO_Init+0x21c>
 8040bfa:	2302      	movs	r3, #2
 8040bfc:	e002      	b.n	8040c04 <HAL_GPIO_Init+0x21c>
 8040bfe:	2301      	movs	r3, #1
 8040c00:	e000      	b.n	8040c04 <HAL_GPIO_Init+0x21c>
 8040c02:	2300      	movs	r3, #0
 8040c04:	69fa      	ldr	r2, [r7, #28]
 8040c06:	f002 0203 	and.w	r2, r2, #3
 8040c0a:	0092      	lsls	r2, r2, #2
 8040c0c:	4093      	lsls	r3, r2
 8040c0e:	69ba      	ldr	r2, [r7, #24]
 8040c10:	4313      	orrs	r3, r2
 8040c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8040c14:	4935      	ldr	r1, [pc, #212]	@ (8040cec <HAL_GPIO_Init+0x304>)
 8040c16:	69fb      	ldr	r3, [r7, #28]
 8040c18:	089b      	lsrs	r3, r3, #2
 8040c1a:	3302      	adds	r3, #2
 8040c1c:	69ba      	ldr	r2, [r7, #24]
 8040c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8040c22:	4b3a      	ldr	r3, [pc, #232]	@ (8040d0c <HAL_GPIO_Init+0x324>)
 8040c24:	689b      	ldr	r3, [r3, #8]
 8040c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040c28:	693b      	ldr	r3, [r7, #16]
 8040c2a:	43db      	mvns	r3, r3
 8040c2c:	69ba      	ldr	r2, [r7, #24]
 8040c2e:	4013      	ands	r3, r2
 8040c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8040c32:	683b      	ldr	r3, [r7, #0]
 8040c34:	685b      	ldr	r3, [r3, #4]
 8040c36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8040c3a:	2b00      	cmp	r3, #0
 8040c3c:	d003      	beq.n	8040c46 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8040c3e:	69ba      	ldr	r2, [r7, #24]
 8040c40:	693b      	ldr	r3, [r7, #16]
 8040c42:	4313      	orrs	r3, r2
 8040c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8040c46:	4a31      	ldr	r2, [pc, #196]	@ (8040d0c <HAL_GPIO_Init+0x324>)
 8040c48:	69bb      	ldr	r3, [r7, #24]
 8040c4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8040c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8040d0c <HAL_GPIO_Init+0x324>)
 8040c4e:	68db      	ldr	r3, [r3, #12]
 8040c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040c52:	693b      	ldr	r3, [r7, #16]
 8040c54:	43db      	mvns	r3, r3
 8040c56:	69ba      	ldr	r2, [r7, #24]
 8040c58:	4013      	ands	r3, r2
 8040c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8040c5c:	683b      	ldr	r3, [r7, #0]
 8040c5e:	685b      	ldr	r3, [r3, #4]
 8040c60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8040c64:	2b00      	cmp	r3, #0
 8040c66:	d003      	beq.n	8040c70 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8040c68:	69ba      	ldr	r2, [r7, #24]
 8040c6a:	693b      	ldr	r3, [r7, #16]
 8040c6c:	4313      	orrs	r3, r2
 8040c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8040c70:	4a26      	ldr	r2, [pc, #152]	@ (8040d0c <HAL_GPIO_Init+0x324>)
 8040c72:	69bb      	ldr	r3, [r7, #24]
 8040c74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8040c76:	4b25      	ldr	r3, [pc, #148]	@ (8040d0c <HAL_GPIO_Init+0x324>)
 8040c78:	685b      	ldr	r3, [r3, #4]
 8040c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040c7c:	693b      	ldr	r3, [r7, #16]
 8040c7e:	43db      	mvns	r3, r3
 8040c80:	69ba      	ldr	r2, [r7, #24]
 8040c82:	4013      	ands	r3, r2
 8040c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8040c86:	683b      	ldr	r3, [r7, #0]
 8040c88:	685b      	ldr	r3, [r3, #4]
 8040c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8040c8e:	2b00      	cmp	r3, #0
 8040c90:	d003      	beq.n	8040c9a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8040c92:	69ba      	ldr	r2, [r7, #24]
 8040c94:	693b      	ldr	r3, [r7, #16]
 8040c96:	4313      	orrs	r3, r2
 8040c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8040c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8040d0c <HAL_GPIO_Init+0x324>)
 8040c9c:	69bb      	ldr	r3, [r7, #24]
 8040c9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8040ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8040d0c <HAL_GPIO_Init+0x324>)
 8040ca2:	681b      	ldr	r3, [r3, #0]
 8040ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8040ca6:	693b      	ldr	r3, [r7, #16]
 8040ca8:	43db      	mvns	r3, r3
 8040caa:	69ba      	ldr	r2, [r7, #24]
 8040cac:	4013      	ands	r3, r2
 8040cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8040cb0:	683b      	ldr	r3, [r7, #0]
 8040cb2:	685b      	ldr	r3, [r3, #4]
 8040cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8040cb8:	2b00      	cmp	r3, #0
 8040cba:	d003      	beq.n	8040cc4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8040cbc:	69ba      	ldr	r2, [r7, #24]
 8040cbe:	693b      	ldr	r3, [r7, #16]
 8040cc0:	4313      	orrs	r3, r2
 8040cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8040cc4:	4a11      	ldr	r2, [pc, #68]	@ (8040d0c <HAL_GPIO_Init+0x324>)
 8040cc6:	69bb      	ldr	r3, [r7, #24]
 8040cc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8040cca:	69fb      	ldr	r3, [r7, #28]
 8040ccc:	3301      	adds	r3, #1
 8040cce:	61fb      	str	r3, [r7, #28]
 8040cd0:	69fb      	ldr	r3, [r7, #28]
 8040cd2:	2b0f      	cmp	r3, #15
 8040cd4:	f67f ae96 	bls.w	8040a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8040cd8:	bf00      	nop
 8040cda:	bf00      	nop
 8040cdc:	3724      	adds	r7, #36	@ 0x24
 8040cde:	46bd      	mov	sp, r7
 8040ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ce4:	4770      	bx	lr
 8040ce6:	bf00      	nop
 8040ce8:	40023800 	.word	0x40023800
 8040cec:	40013800 	.word	0x40013800
 8040cf0:	40020000 	.word	0x40020000
 8040cf4:	40020400 	.word	0x40020400
 8040cf8:	40020800 	.word	0x40020800
 8040cfc:	40020c00 	.word	0x40020c00
 8040d00:	40021000 	.word	0x40021000
 8040d04:	40021400 	.word	0x40021400
 8040d08:	40021800 	.word	0x40021800
 8040d0c:	40013c00 	.word	0x40013c00

08040d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040d10:	b480      	push	{r7}
 8040d12:	b083      	sub	sp, #12
 8040d14:	af00      	add	r7, sp, #0
 8040d16:	6078      	str	r0, [r7, #4]
 8040d18:	460b      	mov	r3, r1
 8040d1a:	807b      	strh	r3, [r7, #2]
 8040d1c:	4613      	mov	r3, r2
 8040d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8040d20:	787b      	ldrb	r3, [r7, #1]
 8040d22:	2b00      	cmp	r3, #0
 8040d24:	d003      	beq.n	8040d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8040d26:	887a      	ldrh	r2, [r7, #2]
 8040d28:	687b      	ldr	r3, [r7, #4]
 8040d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8040d2c:	e003      	b.n	8040d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8040d2e:	887b      	ldrh	r3, [r7, #2]
 8040d30:	041a      	lsls	r2, r3, #16
 8040d32:	687b      	ldr	r3, [r7, #4]
 8040d34:	619a      	str	r2, [r3, #24]
}
 8040d36:	bf00      	nop
 8040d38:	370c      	adds	r7, #12
 8040d3a:	46bd      	mov	sp, r7
 8040d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d40:	4770      	bx	lr

08040d42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8040d42:	b480      	push	{r7}
 8040d44:	b085      	sub	sp, #20
 8040d46:	af00      	add	r7, sp, #0
 8040d48:	6078      	str	r0, [r7, #4]
 8040d4a:	460b      	mov	r3, r1
 8040d4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8040d4e:	687b      	ldr	r3, [r7, #4]
 8040d50:	695b      	ldr	r3, [r3, #20]
 8040d52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8040d54:	887a      	ldrh	r2, [r7, #2]
 8040d56:	68fb      	ldr	r3, [r7, #12]
 8040d58:	4013      	ands	r3, r2
 8040d5a:	041a      	lsls	r2, r3, #16
 8040d5c:	68fb      	ldr	r3, [r7, #12]
 8040d5e:	43d9      	mvns	r1, r3
 8040d60:	887b      	ldrh	r3, [r7, #2]
 8040d62:	400b      	ands	r3, r1
 8040d64:	431a      	orrs	r2, r3
 8040d66:	687b      	ldr	r3, [r7, #4]
 8040d68:	619a      	str	r2, [r3, #24]
}
 8040d6a:	bf00      	nop
 8040d6c:	3714      	adds	r7, #20
 8040d6e:	46bd      	mov	sp, r7
 8040d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d74:	4770      	bx	lr
	...

08040d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8040d78:	b580      	push	{r7, lr}
 8040d7a:	b082      	sub	sp, #8
 8040d7c:	af00      	add	r7, sp, #0
 8040d7e:	4603      	mov	r3, r0
 8040d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8040d82:	4b08      	ldr	r3, [pc, #32]	@ (8040da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8040d84:	695a      	ldr	r2, [r3, #20]
 8040d86:	88fb      	ldrh	r3, [r7, #6]
 8040d88:	4013      	ands	r3, r2
 8040d8a:	2b00      	cmp	r3, #0
 8040d8c:	d006      	beq.n	8040d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8040d8e:	4a05      	ldr	r2, [pc, #20]	@ (8040da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8040d90:	88fb      	ldrh	r3, [r7, #6]
 8040d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8040d94:	88fb      	ldrh	r3, [r7, #6]
 8040d96:	4618      	mov	r0, r3
 8040d98:	f000 f806 	bl	8040da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8040d9c:	bf00      	nop
 8040d9e:	3708      	adds	r7, #8
 8040da0:	46bd      	mov	sp, r7
 8040da2:	bd80      	pop	{r7, pc}
 8040da4:	40013c00 	.word	0x40013c00

08040da8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8040da8:	b480      	push	{r7}
 8040daa:	b083      	sub	sp, #12
 8040dac:	af00      	add	r7, sp, #0
 8040dae:	4603      	mov	r3, r0
 8040db0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8040db2:	bf00      	nop
 8040db4:	370c      	adds	r7, #12
 8040db6:	46bd      	mov	sp, r7
 8040db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040dbc:	4770      	bx	lr
	...

08040dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8040dc0:	b580      	push	{r7, lr}
 8040dc2:	b084      	sub	sp, #16
 8040dc4:	af00      	add	r7, sp, #0
 8040dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8040dc8:	687b      	ldr	r3, [r7, #4]
 8040dca:	2b00      	cmp	r3, #0
 8040dcc:	d101      	bne.n	8040dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8040dce:	2301      	movs	r3, #1
 8040dd0:	e12b      	b.n	804102a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8040dd2:	687b      	ldr	r3, [r7, #4]
 8040dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8040dd8:	b2db      	uxtb	r3, r3
 8040dda:	2b00      	cmp	r3, #0
 8040ddc:	d106      	bne.n	8040dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8040dde:	687b      	ldr	r3, [r7, #4]
 8040de0:	2200      	movs	r2, #0
 8040de2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8040de6:	6878      	ldr	r0, [r7, #4]
 8040de8:	f7fe f8e6 	bl	803efb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8040dec:	687b      	ldr	r3, [r7, #4]
 8040dee:	2224      	movs	r2, #36	@ 0x24
 8040df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8040df4:	687b      	ldr	r3, [r7, #4]
 8040df6:	681b      	ldr	r3, [r3, #0]
 8040df8:	681a      	ldr	r2, [r3, #0]
 8040dfa:	687b      	ldr	r3, [r7, #4]
 8040dfc:	681b      	ldr	r3, [r3, #0]
 8040dfe:	f022 0201 	bic.w	r2, r2, #1
 8040e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8040e04:	687b      	ldr	r3, [r7, #4]
 8040e06:	681b      	ldr	r3, [r3, #0]
 8040e08:	681a      	ldr	r2, [r3, #0]
 8040e0a:	687b      	ldr	r3, [r7, #4]
 8040e0c:	681b      	ldr	r3, [r3, #0]
 8040e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8040e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8040e14:	687b      	ldr	r3, [r7, #4]
 8040e16:	681b      	ldr	r3, [r3, #0]
 8040e18:	681a      	ldr	r2, [r3, #0]
 8040e1a:	687b      	ldr	r3, [r7, #4]
 8040e1c:	681b      	ldr	r3, [r3, #0]
 8040e1e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8040e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8040e24:	f000 faa6 	bl	8041374 <HAL_RCC_GetPCLK1Freq>
 8040e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8040e2a:	687b      	ldr	r3, [r7, #4]
 8040e2c:	685b      	ldr	r3, [r3, #4]
 8040e2e:	4a81      	ldr	r2, [pc, #516]	@ (8041034 <HAL_I2C_Init+0x274>)
 8040e30:	4293      	cmp	r3, r2
 8040e32:	d807      	bhi.n	8040e44 <HAL_I2C_Init+0x84>
 8040e34:	68fb      	ldr	r3, [r7, #12]
 8040e36:	4a80      	ldr	r2, [pc, #512]	@ (8041038 <HAL_I2C_Init+0x278>)
 8040e38:	4293      	cmp	r3, r2
 8040e3a:	bf94      	ite	ls
 8040e3c:	2301      	movls	r3, #1
 8040e3e:	2300      	movhi	r3, #0
 8040e40:	b2db      	uxtb	r3, r3
 8040e42:	e006      	b.n	8040e52 <HAL_I2C_Init+0x92>
 8040e44:	68fb      	ldr	r3, [r7, #12]
 8040e46:	4a7d      	ldr	r2, [pc, #500]	@ (804103c <HAL_I2C_Init+0x27c>)
 8040e48:	4293      	cmp	r3, r2
 8040e4a:	bf94      	ite	ls
 8040e4c:	2301      	movls	r3, #1
 8040e4e:	2300      	movhi	r3, #0
 8040e50:	b2db      	uxtb	r3, r3
 8040e52:	2b00      	cmp	r3, #0
 8040e54:	d001      	beq.n	8040e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8040e56:	2301      	movs	r3, #1
 8040e58:	e0e7      	b.n	804102a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8040e5a:	68fb      	ldr	r3, [r7, #12]
 8040e5c:	4a78      	ldr	r2, [pc, #480]	@ (8041040 <HAL_I2C_Init+0x280>)
 8040e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8040e62:	0c9b      	lsrs	r3, r3, #18
 8040e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8040e66:	687b      	ldr	r3, [r7, #4]
 8040e68:	681b      	ldr	r3, [r3, #0]
 8040e6a:	685b      	ldr	r3, [r3, #4]
 8040e6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8040e70:	687b      	ldr	r3, [r7, #4]
 8040e72:	681b      	ldr	r3, [r3, #0]
 8040e74:	68ba      	ldr	r2, [r7, #8]
 8040e76:	430a      	orrs	r2, r1
 8040e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8040e7a:	687b      	ldr	r3, [r7, #4]
 8040e7c:	681b      	ldr	r3, [r3, #0]
 8040e7e:	6a1b      	ldr	r3, [r3, #32]
 8040e80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8040e84:	687b      	ldr	r3, [r7, #4]
 8040e86:	685b      	ldr	r3, [r3, #4]
 8040e88:	4a6a      	ldr	r2, [pc, #424]	@ (8041034 <HAL_I2C_Init+0x274>)
 8040e8a:	4293      	cmp	r3, r2
 8040e8c:	d802      	bhi.n	8040e94 <HAL_I2C_Init+0xd4>
 8040e8e:	68bb      	ldr	r3, [r7, #8]
 8040e90:	3301      	adds	r3, #1
 8040e92:	e009      	b.n	8040ea8 <HAL_I2C_Init+0xe8>
 8040e94:	68bb      	ldr	r3, [r7, #8]
 8040e96:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8040e9a:	fb02 f303 	mul.w	r3, r2, r3
 8040e9e:	4a69      	ldr	r2, [pc, #420]	@ (8041044 <HAL_I2C_Init+0x284>)
 8040ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8040ea4:	099b      	lsrs	r3, r3, #6
 8040ea6:	3301      	adds	r3, #1
 8040ea8:	687a      	ldr	r2, [r7, #4]
 8040eaa:	6812      	ldr	r2, [r2, #0]
 8040eac:	430b      	orrs	r3, r1
 8040eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8040eb0:	687b      	ldr	r3, [r7, #4]
 8040eb2:	681b      	ldr	r3, [r3, #0]
 8040eb4:	69db      	ldr	r3, [r3, #28]
 8040eb6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8040eba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8040ebe:	687b      	ldr	r3, [r7, #4]
 8040ec0:	685b      	ldr	r3, [r3, #4]
 8040ec2:	495c      	ldr	r1, [pc, #368]	@ (8041034 <HAL_I2C_Init+0x274>)
 8040ec4:	428b      	cmp	r3, r1
 8040ec6:	d819      	bhi.n	8040efc <HAL_I2C_Init+0x13c>
 8040ec8:	68fb      	ldr	r3, [r7, #12]
 8040eca:	1e59      	subs	r1, r3, #1
 8040ecc:	687b      	ldr	r3, [r7, #4]
 8040ece:	685b      	ldr	r3, [r3, #4]
 8040ed0:	005b      	lsls	r3, r3, #1
 8040ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8040ed6:	1c59      	adds	r1, r3, #1
 8040ed8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8040edc:	400b      	ands	r3, r1
 8040ede:	2b00      	cmp	r3, #0
 8040ee0:	d00a      	beq.n	8040ef8 <HAL_I2C_Init+0x138>
 8040ee2:	68fb      	ldr	r3, [r7, #12]
 8040ee4:	1e59      	subs	r1, r3, #1
 8040ee6:	687b      	ldr	r3, [r7, #4]
 8040ee8:	685b      	ldr	r3, [r3, #4]
 8040eea:	005b      	lsls	r3, r3, #1
 8040eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8040ef0:	3301      	adds	r3, #1
 8040ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8040ef6:	e051      	b.n	8040f9c <HAL_I2C_Init+0x1dc>
 8040ef8:	2304      	movs	r3, #4
 8040efa:	e04f      	b.n	8040f9c <HAL_I2C_Init+0x1dc>
 8040efc:	687b      	ldr	r3, [r7, #4]
 8040efe:	689b      	ldr	r3, [r3, #8]
 8040f00:	2b00      	cmp	r3, #0
 8040f02:	d111      	bne.n	8040f28 <HAL_I2C_Init+0x168>
 8040f04:	68fb      	ldr	r3, [r7, #12]
 8040f06:	1e58      	subs	r0, r3, #1
 8040f08:	687b      	ldr	r3, [r7, #4]
 8040f0a:	6859      	ldr	r1, [r3, #4]
 8040f0c:	460b      	mov	r3, r1
 8040f0e:	005b      	lsls	r3, r3, #1
 8040f10:	440b      	add	r3, r1
 8040f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8040f16:	3301      	adds	r3, #1
 8040f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8040f1c:	2b00      	cmp	r3, #0
 8040f1e:	bf0c      	ite	eq
 8040f20:	2301      	moveq	r3, #1
 8040f22:	2300      	movne	r3, #0
 8040f24:	b2db      	uxtb	r3, r3
 8040f26:	e012      	b.n	8040f4e <HAL_I2C_Init+0x18e>
 8040f28:	68fb      	ldr	r3, [r7, #12]
 8040f2a:	1e58      	subs	r0, r3, #1
 8040f2c:	687b      	ldr	r3, [r7, #4]
 8040f2e:	6859      	ldr	r1, [r3, #4]
 8040f30:	460b      	mov	r3, r1
 8040f32:	009b      	lsls	r3, r3, #2
 8040f34:	440b      	add	r3, r1
 8040f36:	0099      	lsls	r1, r3, #2
 8040f38:	440b      	add	r3, r1
 8040f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8040f3e:	3301      	adds	r3, #1
 8040f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8040f44:	2b00      	cmp	r3, #0
 8040f46:	bf0c      	ite	eq
 8040f48:	2301      	moveq	r3, #1
 8040f4a:	2300      	movne	r3, #0
 8040f4c:	b2db      	uxtb	r3, r3
 8040f4e:	2b00      	cmp	r3, #0
 8040f50:	d001      	beq.n	8040f56 <HAL_I2C_Init+0x196>
 8040f52:	2301      	movs	r3, #1
 8040f54:	e022      	b.n	8040f9c <HAL_I2C_Init+0x1dc>
 8040f56:	687b      	ldr	r3, [r7, #4]
 8040f58:	689b      	ldr	r3, [r3, #8]
 8040f5a:	2b00      	cmp	r3, #0
 8040f5c:	d10e      	bne.n	8040f7c <HAL_I2C_Init+0x1bc>
 8040f5e:	68fb      	ldr	r3, [r7, #12]
 8040f60:	1e58      	subs	r0, r3, #1
 8040f62:	687b      	ldr	r3, [r7, #4]
 8040f64:	6859      	ldr	r1, [r3, #4]
 8040f66:	460b      	mov	r3, r1
 8040f68:	005b      	lsls	r3, r3, #1
 8040f6a:	440b      	add	r3, r1
 8040f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8040f70:	3301      	adds	r3, #1
 8040f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8040f76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8040f7a:	e00f      	b.n	8040f9c <HAL_I2C_Init+0x1dc>
 8040f7c:	68fb      	ldr	r3, [r7, #12]
 8040f7e:	1e58      	subs	r0, r3, #1
 8040f80:	687b      	ldr	r3, [r7, #4]
 8040f82:	6859      	ldr	r1, [r3, #4]
 8040f84:	460b      	mov	r3, r1
 8040f86:	009b      	lsls	r3, r3, #2
 8040f88:	440b      	add	r3, r1
 8040f8a:	0099      	lsls	r1, r3, #2
 8040f8c:	440b      	add	r3, r1
 8040f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8040f92:	3301      	adds	r3, #1
 8040f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8040f98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8040f9c:	6879      	ldr	r1, [r7, #4]
 8040f9e:	6809      	ldr	r1, [r1, #0]
 8040fa0:	4313      	orrs	r3, r2
 8040fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8040fa4:	687b      	ldr	r3, [r7, #4]
 8040fa6:	681b      	ldr	r3, [r3, #0]
 8040fa8:	681b      	ldr	r3, [r3, #0]
 8040faa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8040fae:	687b      	ldr	r3, [r7, #4]
 8040fb0:	69da      	ldr	r2, [r3, #28]
 8040fb2:	687b      	ldr	r3, [r7, #4]
 8040fb4:	6a1b      	ldr	r3, [r3, #32]
 8040fb6:	431a      	orrs	r2, r3
 8040fb8:	687b      	ldr	r3, [r7, #4]
 8040fba:	681b      	ldr	r3, [r3, #0]
 8040fbc:	430a      	orrs	r2, r1
 8040fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8040fc0:	687b      	ldr	r3, [r7, #4]
 8040fc2:	681b      	ldr	r3, [r3, #0]
 8040fc4:	689b      	ldr	r3, [r3, #8]
 8040fc6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8040fca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8040fce:	687a      	ldr	r2, [r7, #4]
 8040fd0:	6911      	ldr	r1, [r2, #16]
 8040fd2:	687a      	ldr	r2, [r7, #4]
 8040fd4:	68d2      	ldr	r2, [r2, #12]
 8040fd6:	4311      	orrs	r1, r2
 8040fd8:	687a      	ldr	r2, [r7, #4]
 8040fda:	6812      	ldr	r2, [r2, #0]
 8040fdc:	430b      	orrs	r3, r1
 8040fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8040fe0:	687b      	ldr	r3, [r7, #4]
 8040fe2:	681b      	ldr	r3, [r3, #0]
 8040fe4:	68db      	ldr	r3, [r3, #12]
 8040fe6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8040fea:	687b      	ldr	r3, [r7, #4]
 8040fec:	695a      	ldr	r2, [r3, #20]
 8040fee:	687b      	ldr	r3, [r7, #4]
 8040ff0:	699b      	ldr	r3, [r3, #24]
 8040ff2:	431a      	orrs	r2, r3
 8040ff4:	687b      	ldr	r3, [r7, #4]
 8040ff6:	681b      	ldr	r3, [r3, #0]
 8040ff8:	430a      	orrs	r2, r1
 8040ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8040ffc:	687b      	ldr	r3, [r7, #4]
 8040ffe:	681b      	ldr	r3, [r3, #0]
 8041000:	681a      	ldr	r2, [r3, #0]
 8041002:	687b      	ldr	r3, [r7, #4]
 8041004:	681b      	ldr	r3, [r3, #0]
 8041006:	f042 0201 	orr.w	r2, r2, #1
 804100a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 804100c:	687b      	ldr	r3, [r7, #4]
 804100e:	2200      	movs	r2, #0
 8041010:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8041012:	687b      	ldr	r3, [r7, #4]
 8041014:	2220      	movs	r2, #32
 8041016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 804101a:	687b      	ldr	r3, [r7, #4]
 804101c:	2200      	movs	r2, #0
 804101e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8041020:	687b      	ldr	r3, [r7, #4]
 8041022:	2200      	movs	r2, #0
 8041024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8041028:	2300      	movs	r3, #0
}
 804102a:	4618      	mov	r0, r3
 804102c:	3710      	adds	r7, #16
 804102e:	46bd      	mov	sp, r7
 8041030:	bd80      	pop	{r7, pc}
 8041032:	bf00      	nop
 8041034:	000186a0 	.word	0x000186a0
 8041038:	001e847f 	.word	0x001e847f
 804103c:	003d08ff 	.word	0x003d08ff
 8041040:	431bde83 	.word	0x431bde83
 8041044:	10624dd3 	.word	0x10624dd3

08041048 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8041048:	b580      	push	{r7, lr}
 804104a:	b084      	sub	sp, #16
 804104c:	af00      	add	r7, sp, #0
 804104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8041050:	687b      	ldr	r3, [r7, #4]
 8041052:	2b00      	cmp	r3, #0
 8041054:	d101      	bne.n	804105a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8041056:	2301      	movs	r3, #1
 8041058:	e036      	b.n	80410c8 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 804105a:	687b      	ldr	r3, [r7, #4]
 804105c:	681b      	ldr	r3, [r3, #0]
 804105e:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8041062:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8041064:	687b      	ldr	r3, [r7, #4]
 8041066:	681b      	ldr	r3, [r3, #0]
 8041068:	f245 5255 	movw	r2, #21845	@ 0x5555
 804106c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 804106e:	687b      	ldr	r3, [r7, #4]
 8041070:	681b      	ldr	r3, [r3, #0]
 8041072:	687a      	ldr	r2, [r7, #4]
 8041074:	6852      	ldr	r2, [r2, #4]
 8041076:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8041078:	687b      	ldr	r3, [r7, #4]
 804107a:	681b      	ldr	r3, [r3, #0]
 804107c:	687a      	ldr	r2, [r7, #4]
 804107e:	6892      	ldr	r2, [r2, #8]
 8041080:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8041082:	f7fe fa23 	bl	803f4cc <HAL_GetTick>
 8041086:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8041088:	e011      	b.n	80410ae <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 804108a:	f7fe fa1f 	bl	803f4cc <HAL_GetTick>
 804108e:	4602      	mov	r2, r0
 8041090:	68fb      	ldr	r3, [r7, #12]
 8041092:	1ad3      	subs	r3, r2, r3
 8041094:	f641 0201 	movw	r2, #6145	@ 0x1801
 8041098:	4293      	cmp	r3, r2
 804109a:	d908      	bls.n	80410ae <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 804109c:	687b      	ldr	r3, [r7, #4]
 804109e:	681b      	ldr	r3, [r3, #0]
 80410a0:	68db      	ldr	r3, [r3, #12]
 80410a2:	f003 0303 	and.w	r3, r3, #3
 80410a6:	2b00      	cmp	r3, #0
 80410a8:	d001      	beq.n	80410ae <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80410aa:	2303      	movs	r3, #3
 80410ac:	e00c      	b.n	80410c8 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80410ae:	687b      	ldr	r3, [r7, #4]
 80410b0:	681b      	ldr	r3, [r3, #0]
 80410b2:	68db      	ldr	r3, [r3, #12]
 80410b4:	f003 0303 	and.w	r3, r3, #3
 80410b8:	2b00      	cmp	r3, #0
 80410ba:	d1e6      	bne.n	804108a <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80410bc:	687b      	ldr	r3, [r7, #4]
 80410be:	681b      	ldr	r3, [r3, #0]
 80410c0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80410c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80410c6:	2300      	movs	r3, #0
}
 80410c8:	4618      	mov	r0, r3
 80410ca:	3710      	adds	r7, #16
 80410cc:	46bd      	mov	sp, r7
 80410ce:	bd80      	pop	{r7, pc}

080410d0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80410d0:	b480      	push	{r7}
 80410d2:	b083      	sub	sp, #12
 80410d4:	af00      	add	r7, sp, #0
 80410d6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80410d8:	687b      	ldr	r3, [r7, #4]
 80410da:	681b      	ldr	r3, [r3, #0]
 80410dc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80410e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80410e2:	2300      	movs	r3, #0
}
 80410e4:	4618      	mov	r0, r3
 80410e6:	370c      	adds	r7, #12
 80410e8:	46bd      	mov	sp, r7
 80410ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410ee:	4770      	bx	lr

080410f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80410f0:	b580      	push	{r7, lr}
 80410f2:	b082      	sub	sp, #8
 80410f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80410f6:	2300      	movs	r3, #0
 80410f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80410fa:	2300      	movs	r3, #0
 80410fc:	603b      	str	r3, [r7, #0]
 80410fe:	4b20      	ldr	r3, [pc, #128]	@ (8041180 <HAL_PWREx_EnableOverDrive+0x90>)
 8041100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041102:	4a1f      	ldr	r2, [pc, #124]	@ (8041180 <HAL_PWREx_EnableOverDrive+0x90>)
 8041104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8041108:	6413      	str	r3, [r2, #64]	@ 0x40
 804110a:	4b1d      	ldr	r3, [pc, #116]	@ (8041180 <HAL_PWREx_EnableOverDrive+0x90>)
 804110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 804110e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8041112:	603b      	str	r3, [r7, #0]
 8041114:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8041116:	4b1b      	ldr	r3, [pc, #108]	@ (8041184 <HAL_PWREx_EnableOverDrive+0x94>)
 8041118:	2201      	movs	r2, #1
 804111a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 804111c:	f7fe f9d6 	bl	803f4cc <HAL_GetTick>
 8041120:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8041122:	e009      	b.n	8041138 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8041124:	f7fe f9d2 	bl	803f4cc <HAL_GetTick>
 8041128:	4602      	mov	r2, r0
 804112a:	687b      	ldr	r3, [r7, #4]
 804112c:	1ad3      	subs	r3, r2, r3
 804112e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8041132:	d901      	bls.n	8041138 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8041134:	2303      	movs	r3, #3
 8041136:	e01f      	b.n	8041178 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8041138:	4b13      	ldr	r3, [pc, #76]	@ (8041188 <HAL_PWREx_EnableOverDrive+0x98>)
 804113a:	685b      	ldr	r3, [r3, #4]
 804113c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8041140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8041144:	d1ee      	bne.n	8041124 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8041146:	4b11      	ldr	r3, [pc, #68]	@ (804118c <HAL_PWREx_EnableOverDrive+0x9c>)
 8041148:	2201      	movs	r2, #1
 804114a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 804114c:	f7fe f9be 	bl	803f4cc <HAL_GetTick>
 8041150:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8041152:	e009      	b.n	8041168 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8041154:	f7fe f9ba 	bl	803f4cc <HAL_GetTick>
 8041158:	4602      	mov	r2, r0
 804115a:	687b      	ldr	r3, [r7, #4]
 804115c:	1ad3      	subs	r3, r2, r3
 804115e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8041162:	d901      	bls.n	8041168 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8041164:	2303      	movs	r3, #3
 8041166:	e007      	b.n	8041178 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8041168:	4b07      	ldr	r3, [pc, #28]	@ (8041188 <HAL_PWREx_EnableOverDrive+0x98>)
 804116a:	685b      	ldr	r3, [r3, #4]
 804116c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8041174:	d1ee      	bne.n	8041154 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8041176:	2300      	movs	r3, #0
}
 8041178:	4618      	mov	r0, r3
 804117a:	3708      	adds	r7, #8
 804117c:	46bd      	mov	sp, r7
 804117e:	bd80      	pop	{r7, pc}
 8041180:	40023800 	.word	0x40023800
 8041184:	420e0040 	.word	0x420e0040
 8041188:	40007000 	.word	0x40007000
 804118c:	420e0044 	.word	0x420e0044

08041190 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041190:	b580      	push	{r7, lr}
 8041192:	b084      	sub	sp, #16
 8041194:	af00      	add	r7, sp, #0
 8041196:	6078      	str	r0, [r7, #4]
 8041198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 804119a:	687b      	ldr	r3, [r7, #4]
 804119c:	2b00      	cmp	r3, #0
 804119e:	d101      	bne.n	80411a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80411a0:	2301      	movs	r3, #1
 80411a2:	e0cc      	b.n	804133e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80411a4:	4b68      	ldr	r3, [pc, #416]	@ (8041348 <HAL_RCC_ClockConfig+0x1b8>)
 80411a6:	681b      	ldr	r3, [r3, #0]
 80411a8:	f003 030f 	and.w	r3, r3, #15
 80411ac:	683a      	ldr	r2, [r7, #0]
 80411ae:	429a      	cmp	r2, r3
 80411b0:	d90c      	bls.n	80411cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80411b2:	4b65      	ldr	r3, [pc, #404]	@ (8041348 <HAL_RCC_ClockConfig+0x1b8>)
 80411b4:	683a      	ldr	r2, [r7, #0]
 80411b6:	b2d2      	uxtb	r2, r2
 80411b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80411ba:	4b63      	ldr	r3, [pc, #396]	@ (8041348 <HAL_RCC_ClockConfig+0x1b8>)
 80411bc:	681b      	ldr	r3, [r3, #0]
 80411be:	f003 030f 	and.w	r3, r3, #15
 80411c2:	683a      	ldr	r2, [r7, #0]
 80411c4:	429a      	cmp	r2, r3
 80411c6:	d001      	beq.n	80411cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80411c8:	2301      	movs	r3, #1
 80411ca:	e0b8      	b.n	804133e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80411cc:	687b      	ldr	r3, [r7, #4]
 80411ce:	681b      	ldr	r3, [r3, #0]
 80411d0:	f003 0302 	and.w	r3, r3, #2
 80411d4:	2b00      	cmp	r3, #0
 80411d6:	d020      	beq.n	804121a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80411d8:	687b      	ldr	r3, [r7, #4]
 80411da:	681b      	ldr	r3, [r3, #0]
 80411dc:	f003 0304 	and.w	r3, r3, #4
 80411e0:	2b00      	cmp	r3, #0
 80411e2:	d005      	beq.n	80411f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80411e4:	4b59      	ldr	r3, [pc, #356]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 80411e6:	689b      	ldr	r3, [r3, #8]
 80411e8:	4a58      	ldr	r2, [pc, #352]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 80411ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80411ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80411f0:	687b      	ldr	r3, [r7, #4]
 80411f2:	681b      	ldr	r3, [r3, #0]
 80411f4:	f003 0308 	and.w	r3, r3, #8
 80411f8:	2b00      	cmp	r3, #0
 80411fa:	d005      	beq.n	8041208 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80411fc:	4b53      	ldr	r3, [pc, #332]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 80411fe:	689b      	ldr	r3, [r3, #8]
 8041200:	4a52      	ldr	r2, [pc, #328]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 8041202:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8041206:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041208:	4b50      	ldr	r3, [pc, #320]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 804120a:	689b      	ldr	r3, [r3, #8]
 804120c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8041210:	687b      	ldr	r3, [r7, #4]
 8041212:	689b      	ldr	r3, [r3, #8]
 8041214:	494d      	ldr	r1, [pc, #308]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 8041216:	4313      	orrs	r3, r2
 8041218:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 804121a:	687b      	ldr	r3, [r7, #4]
 804121c:	681b      	ldr	r3, [r3, #0]
 804121e:	f003 0301 	and.w	r3, r3, #1
 8041222:	2b00      	cmp	r3, #0
 8041224:	d044      	beq.n	80412b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041226:	687b      	ldr	r3, [r7, #4]
 8041228:	685b      	ldr	r3, [r3, #4]
 804122a:	2b01      	cmp	r3, #1
 804122c:	d107      	bne.n	804123e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 804122e:	4b47      	ldr	r3, [pc, #284]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 8041230:	681b      	ldr	r3, [r3, #0]
 8041232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041236:	2b00      	cmp	r3, #0
 8041238:	d119      	bne.n	804126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804123a:	2301      	movs	r3, #1
 804123c:	e07f      	b.n	804133e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804123e:	687b      	ldr	r3, [r7, #4]
 8041240:	685b      	ldr	r3, [r3, #4]
 8041242:	2b02      	cmp	r3, #2
 8041244:	d003      	beq.n	804124e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8041246:	687b      	ldr	r3, [r7, #4]
 8041248:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 804124a:	2b03      	cmp	r3, #3
 804124c:	d107      	bne.n	804125e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 804124e:	4b3f      	ldr	r3, [pc, #252]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 8041250:	681b      	ldr	r3, [r3, #0]
 8041252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041256:	2b00      	cmp	r3, #0
 8041258:	d109      	bne.n	804126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804125a:	2301      	movs	r3, #1
 804125c:	e06f      	b.n	804133e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 804125e:	4b3b      	ldr	r3, [pc, #236]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 8041260:	681b      	ldr	r3, [r3, #0]
 8041262:	f003 0302 	and.w	r3, r3, #2
 8041266:	2b00      	cmp	r3, #0
 8041268:	d101      	bne.n	804126e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 804126a:	2301      	movs	r3, #1
 804126c:	e067      	b.n	804133e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 804126e:	4b37      	ldr	r3, [pc, #220]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 8041270:	689b      	ldr	r3, [r3, #8]
 8041272:	f023 0203 	bic.w	r2, r3, #3
 8041276:	687b      	ldr	r3, [r7, #4]
 8041278:	685b      	ldr	r3, [r3, #4]
 804127a:	4934      	ldr	r1, [pc, #208]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 804127c:	4313      	orrs	r3, r2
 804127e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8041280:	f7fe f924 	bl	803f4cc <HAL_GetTick>
 8041284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041286:	e00a      	b.n	804129e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041288:	f7fe f920 	bl	803f4cc <HAL_GetTick>
 804128c:	4602      	mov	r2, r0
 804128e:	68fb      	ldr	r3, [r7, #12]
 8041290:	1ad3      	subs	r3, r2, r3
 8041292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041296:	4293      	cmp	r3, r2
 8041298:	d901      	bls.n	804129e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 804129a:	2303      	movs	r3, #3
 804129c:	e04f      	b.n	804133e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 804129e:	4b2b      	ldr	r3, [pc, #172]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 80412a0:	689b      	ldr	r3, [r3, #8]
 80412a2:	f003 020c 	and.w	r2, r3, #12
 80412a6:	687b      	ldr	r3, [r7, #4]
 80412a8:	685b      	ldr	r3, [r3, #4]
 80412aa:	009b      	lsls	r3, r3, #2
 80412ac:	429a      	cmp	r2, r3
 80412ae:	d1eb      	bne.n	8041288 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80412b0:	4b25      	ldr	r3, [pc, #148]	@ (8041348 <HAL_RCC_ClockConfig+0x1b8>)
 80412b2:	681b      	ldr	r3, [r3, #0]
 80412b4:	f003 030f 	and.w	r3, r3, #15
 80412b8:	683a      	ldr	r2, [r7, #0]
 80412ba:	429a      	cmp	r2, r3
 80412bc:	d20c      	bcs.n	80412d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80412be:	4b22      	ldr	r3, [pc, #136]	@ (8041348 <HAL_RCC_ClockConfig+0x1b8>)
 80412c0:	683a      	ldr	r2, [r7, #0]
 80412c2:	b2d2      	uxtb	r2, r2
 80412c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80412c6:	4b20      	ldr	r3, [pc, #128]	@ (8041348 <HAL_RCC_ClockConfig+0x1b8>)
 80412c8:	681b      	ldr	r3, [r3, #0]
 80412ca:	f003 030f 	and.w	r3, r3, #15
 80412ce:	683a      	ldr	r2, [r7, #0]
 80412d0:	429a      	cmp	r2, r3
 80412d2:	d001      	beq.n	80412d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80412d4:	2301      	movs	r3, #1
 80412d6:	e032      	b.n	804133e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80412d8:	687b      	ldr	r3, [r7, #4]
 80412da:	681b      	ldr	r3, [r3, #0]
 80412dc:	f003 0304 	and.w	r3, r3, #4
 80412e0:	2b00      	cmp	r3, #0
 80412e2:	d008      	beq.n	80412f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80412e4:	4b19      	ldr	r3, [pc, #100]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 80412e6:	689b      	ldr	r3, [r3, #8]
 80412e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80412ec:	687b      	ldr	r3, [r7, #4]
 80412ee:	68db      	ldr	r3, [r3, #12]
 80412f0:	4916      	ldr	r1, [pc, #88]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 80412f2:	4313      	orrs	r3, r2
 80412f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80412f6:	687b      	ldr	r3, [r7, #4]
 80412f8:	681b      	ldr	r3, [r3, #0]
 80412fa:	f003 0308 	and.w	r3, r3, #8
 80412fe:	2b00      	cmp	r3, #0
 8041300:	d009      	beq.n	8041316 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8041302:	4b12      	ldr	r3, [pc, #72]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 8041304:	689b      	ldr	r3, [r3, #8]
 8041306:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 804130a:	687b      	ldr	r3, [r7, #4]
 804130c:	691b      	ldr	r3, [r3, #16]
 804130e:	00db      	lsls	r3, r3, #3
 8041310:	490e      	ldr	r1, [pc, #56]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 8041312:	4313      	orrs	r3, r2
 8041314:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8041316:	f000 f855 	bl	80413c4 <HAL_RCC_GetSysClockFreq>
 804131a:	4602      	mov	r2, r0
 804131c:	4b0b      	ldr	r3, [pc, #44]	@ (804134c <HAL_RCC_ClockConfig+0x1bc>)
 804131e:	689b      	ldr	r3, [r3, #8]
 8041320:	091b      	lsrs	r3, r3, #4
 8041322:	f003 030f 	and.w	r3, r3, #15
 8041326:	490a      	ldr	r1, [pc, #40]	@ (8041350 <HAL_RCC_ClockConfig+0x1c0>)
 8041328:	5ccb      	ldrb	r3, [r1, r3]
 804132a:	fa22 f303 	lsr.w	r3, r2, r3
 804132e:	4a09      	ldr	r2, [pc, #36]	@ (8041354 <HAL_RCC_ClockConfig+0x1c4>)
 8041330:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8041332:	4b09      	ldr	r3, [pc, #36]	@ (8041358 <HAL_RCC_ClockConfig+0x1c8>)
 8041334:	681b      	ldr	r3, [r3, #0]
 8041336:	4618      	mov	r0, r3
 8041338:	f7fe f884 	bl	803f444 <HAL_InitTick>

  return HAL_OK;
 804133c:	2300      	movs	r3, #0
}
 804133e:	4618      	mov	r0, r3
 8041340:	3710      	adds	r7, #16
 8041342:	46bd      	mov	sp, r7
 8041344:	bd80      	pop	{r7, pc}
 8041346:	bf00      	nop
 8041348:	40023c00 	.word	0x40023c00
 804134c:	40023800 	.word	0x40023800
 8041350:	08043ddc 	.word	0x08043ddc
 8041354:	200000c0 	.word	0x200000c0
 8041358:	200000c4 	.word	0x200000c4

0804135c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804135c:	b480      	push	{r7}
 804135e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8041360:	4b03      	ldr	r3, [pc, #12]	@ (8041370 <HAL_RCC_GetHCLKFreq+0x14>)
 8041362:	681b      	ldr	r3, [r3, #0]
}
 8041364:	4618      	mov	r0, r3
 8041366:	46bd      	mov	sp, r7
 8041368:	f85d 7b04 	ldr.w	r7, [sp], #4
 804136c:	4770      	bx	lr
 804136e:	bf00      	nop
 8041370:	200000c0 	.word	0x200000c0

08041374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041374:	b580      	push	{r7, lr}
 8041376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8041378:	f7ff fff0 	bl	804135c <HAL_RCC_GetHCLKFreq>
 804137c:	4602      	mov	r2, r0
 804137e:	4b05      	ldr	r3, [pc, #20]	@ (8041394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8041380:	689b      	ldr	r3, [r3, #8]
 8041382:	0a9b      	lsrs	r3, r3, #10
 8041384:	f003 0307 	and.w	r3, r3, #7
 8041388:	4903      	ldr	r1, [pc, #12]	@ (8041398 <HAL_RCC_GetPCLK1Freq+0x24>)
 804138a:	5ccb      	ldrb	r3, [r1, r3]
 804138c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041390:	4618      	mov	r0, r3
 8041392:	bd80      	pop	{r7, pc}
 8041394:	40023800 	.word	0x40023800
 8041398:	08043dec 	.word	0x08043dec

0804139c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 804139c:	b580      	push	{r7, lr}
 804139e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80413a0:	f7ff ffdc 	bl	804135c <HAL_RCC_GetHCLKFreq>
 80413a4:	4602      	mov	r2, r0
 80413a6:	4b05      	ldr	r3, [pc, #20]	@ (80413bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80413a8:	689b      	ldr	r3, [r3, #8]
 80413aa:	0b5b      	lsrs	r3, r3, #13
 80413ac:	f003 0307 	and.w	r3, r3, #7
 80413b0:	4903      	ldr	r1, [pc, #12]	@ (80413c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80413b2:	5ccb      	ldrb	r3, [r1, r3]
 80413b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80413b8:	4618      	mov	r0, r3
 80413ba:	bd80      	pop	{r7, pc}
 80413bc:	40023800 	.word	0x40023800
 80413c0:	08043dec 	.word	0x08043dec

080413c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80413c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80413c8:	b0a6      	sub	sp, #152	@ 0x98
 80413ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80413cc:	2300      	movs	r3, #0
 80413ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80413d2:	2300      	movs	r3, #0
 80413d4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80413d8:	2300      	movs	r3, #0
 80413da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80413de:	2300      	movs	r3, #0
 80413e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80413e4:	2300      	movs	r3, #0
 80413e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80413ea:	4bc8      	ldr	r3, [pc, #800]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 80413ec:	689b      	ldr	r3, [r3, #8]
 80413ee:	f003 030c 	and.w	r3, r3, #12
 80413f2:	2b0c      	cmp	r3, #12
 80413f4:	f200 817e 	bhi.w	80416f4 <HAL_RCC_GetSysClockFreq+0x330>
 80413f8:	a201      	add	r2, pc, #4	@ (adr r2, 8041400 <HAL_RCC_GetSysClockFreq+0x3c>)
 80413fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80413fe:	bf00      	nop
 8041400:	08041435 	.word	0x08041435
 8041404:	080416f5 	.word	0x080416f5
 8041408:	080416f5 	.word	0x080416f5
 804140c:	080416f5 	.word	0x080416f5
 8041410:	0804143d 	.word	0x0804143d
 8041414:	080416f5 	.word	0x080416f5
 8041418:	080416f5 	.word	0x080416f5
 804141c:	080416f5 	.word	0x080416f5
 8041420:	08041445 	.word	0x08041445
 8041424:	080416f5 	.word	0x080416f5
 8041428:	080416f5 	.word	0x080416f5
 804142c:	080416f5 	.word	0x080416f5
 8041430:	080415af 	.word	0x080415af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8041434:	4bb6      	ldr	r3, [pc, #728]	@ (8041710 <HAL_RCC_GetSysClockFreq+0x34c>)
 8041436:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 804143a:	e15f      	b.n	80416fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 804143c:	4bb5      	ldr	r3, [pc, #724]	@ (8041714 <HAL_RCC_GetSysClockFreq+0x350>)
 804143e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8041442:	e15b      	b.n	80416fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8041444:	4bb1      	ldr	r3, [pc, #708]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 8041446:	685b      	ldr	r3, [r3, #4]
 8041448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 804144c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8041450:	4bae      	ldr	r3, [pc, #696]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 8041452:	685b      	ldr	r3, [r3, #4]
 8041454:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041458:	2b00      	cmp	r3, #0
 804145a:	d031      	beq.n	80414c0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804145c:	4bab      	ldr	r3, [pc, #684]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 804145e:	685b      	ldr	r3, [r3, #4]
 8041460:	099b      	lsrs	r3, r3, #6
 8041462:	2200      	movs	r2, #0
 8041464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8041466:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8041468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 804146a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804146e:	663b      	str	r3, [r7, #96]	@ 0x60
 8041470:	2300      	movs	r3, #0
 8041472:	667b      	str	r3, [r7, #100]	@ 0x64
 8041474:	4ba7      	ldr	r3, [pc, #668]	@ (8041714 <HAL_RCC_GetSysClockFreq+0x350>)
 8041476:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 804147a:	462a      	mov	r2, r5
 804147c:	fb03 f202 	mul.w	r2, r3, r2
 8041480:	2300      	movs	r3, #0
 8041482:	4621      	mov	r1, r4
 8041484:	fb01 f303 	mul.w	r3, r1, r3
 8041488:	4413      	add	r3, r2
 804148a:	4aa2      	ldr	r2, [pc, #648]	@ (8041714 <HAL_RCC_GetSysClockFreq+0x350>)
 804148c:	4621      	mov	r1, r4
 804148e:	fba1 1202 	umull	r1, r2, r1, r2
 8041492:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8041494:	460a      	mov	r2, r1
 8041496:	67ba      	str	r2, [r7, #120]	@ 0x78
 8041498:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 804149a:	4413      	add	r3, r2
 804149c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 804149e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80414a2:	2200      	movs	r2, #0
 80414a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80414a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80414a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80414ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80414b0:	f7fa ffd8 	bl	803c464 <__aeabi_uldivmod>
 80414b4:	4602      	mov	r2, r0
 80414b6:	460b      	mov	r3, r1
 80414b8:	4613      	mov	r3, r2
 80414ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80414be:	e064      	b.n	804158a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80414c0:	4b92      	ldr	r3, [pc, #584]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 80414c2:	685b      	ldr	r3, [r3, #4]
 80414c4:	099b      	lsrs	r3, r3, #6
 80414c6:	2200      	movs	r2, #0
 80414c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80414ca:	657a      	str	r2, [r7, #84]	@ 0x54
 80414cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80414ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80414d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80414d4:	2300      	movs	r3, #0
 80414d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80414d8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80414dc:	4622      	mov	r2, r4
 80414de:	462b      	mov	r3, r5
 80414e0:	f04f 0000 	mov.w	r0, #0
 80414e4:	f04f 0100 	mov.w	r1, #0
 80414e8:	0159      	lsls	r1, r3, #5
 80414ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80414ee:	0150      	lsls	r0, r2, #5
 80414f0:	4602      	mov	r2, r0
 80414f2:	460b      	mov	r3, r1
 80414f4:	4621      	mov	r1, r4
 80414f6:	1a51      	subs	r1, r2, r1
 80414f8:	6139      	str	r1, [r7, #16]
 80414fa:	4629      	mov	r1, r5
 80414fc:	eb63 0301 	sbc.w	r3, r3, r1
 8041500:	617b      	str	r3, [r7, #20]
 8041502:	f04f 0200 	mov.w	r2, #0
 8041506:	f04f 0300 	mov.w	r3, #0
 804150a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 804150e:	4659      	mov	r1, fp
 8041510:	018b      	lsls	r3, r1, #6
 8041512:	4651      	mov	r1, sl
 8041514:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8041518:	4651      	mov	r1, sl
 804151a:	018a      	lsls	r2, r1, #6
 804151c:	4651      	mov	r1, sl
 804151e:	ebb2 0801 	subs.w	r8, r2, r1
 8041522:	4659      	mov	r1, fp
 8041524:	eb63 0901 	sbc.w	r9, r3, r1
 8041528:	f04f 0200 	mov.w	r2, #0
 804152c:	f04f 0300 	mov.w	r3, #0
 8041530:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8041534:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8041538:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 804153c:	4690      	mov	r8, r2
 804153e:	4699      	mov	r9, r3
 8041540:	4623      	mov	r3, r4
 8041542:	eb18 0303 	adds.w	r3, r8, r3
 8041546:	60bb      	str	r3, [r7, #8]
 8041548:	462b      	mov	r3, r5
 804154a:	eb49 0303 	adc.w	r3, r9, r3
 804154e:	60fb      	str	r3, [r7, #12]
 8041550:	f04f 0200 	mov.w	r2, #0
 8041554:	f04f 0300 	mov.w	r3, #0
 8041558:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 804155c:	4629      	mov	r1, r5
 804155e:	028b      	lsls	r3, r1, #10
 8041560:	4621      	mov	r1, r4
 8041562:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8041566:	4621      	mov	r1, r4
 8041568:	028a      	lsls	r2, r1, #10
 804156a:	4610      	mov	r0, r2
 804156c:	4619      	mov	r1, r3
 804156e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8041572:	2200      	movs	r2, #0
 8041574:	643b      	str	r3, [r7, #64]	@ 0x40
 8041576:	647a      	str	r2, [r7, #68]	@ 0x44
 8041578:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 804157c:	f7fa ff72 	bl	803c464 <__aeabi_uldivmod>
 8041580:	4602      	mov	r2, r0
 8041582:	460b      	mov	r3, r1
 8041584:	4613      	mov	r3, r2
 8041586:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 804158a:	4b60      	ldr	r3, [pc, #384]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 804158c:	685b      	ldr	r3, [r3, #4]
 804158e:	0c1b      	lsrs	r3, r3, #16
 8041590:	f003 0303 	and.w	r3, r3, #3
 8041594:	3301      	adds	r3, #1
 8041596:	005b      	lsls	r3, r3, #1
 8041598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 804159c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80415a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80415a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80415a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80415ac:	e0a6      	b.n	80416fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80415ae:	4b57      	ldr	r3, [pc, #348]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 80415b0:	685b      	ldr	r3, [r3, #4]
 80415b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80415b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80415ba:	4b54      	ldr	r3, [pc, #336]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 80415bc:	685b      	ldr	r3, [r3, #4]
 80415be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80415c2:	2b00      	cmp	r3, #0
 80415c4:	d02a      	beq.n	804161c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80415c6:	4b51      	ldr	r3, [pc, #324]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 80415c8:	685b      	ldr	r3, [r3, #4]
 80415ca:	099b      	lsrs	r3, r3, #6
 80415cc:	2200      	movs	r2, #0
 80415ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80415d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80415d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80415d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80415d8:	2100      	movs	r1, #0
 80415da:	4b4e      	ldr	r3, [pc, #312]	@ (8041714 <HAL_RCC_GetSysClockFreq+0x350>)
 80415dc:	fb03 f201 	mul.w	r2, r3, r1
 80415e0:	2300      	movs	r3, #0
 80415e2:	fb00 f303 	mul.w	r3, r0, r3
 80415e6:	4413      	add	r3, r2
 80415e8:	4a4a      	ldr	r2, [pc, #296]	@ (8041714 <HAL_RCC_GetSysClockFreq+0x350>)
 80415ea:	fba0 1202 	umull	r1, r2, r0, r2
 80415ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80415f0:	460a      	mov	r2, r1
 80415f2:	673a      	str	r2, [r7, #112]	@ 0x70
 80415f4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80415f6:	4413      	add	r3, r2
 80415f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80415fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80415fe:	2200      	movs	r2, #0
 8041600:	633b      	str	r3, [r7, #48]	@ 0x30
 8041602:	637a      	str	r2, [r7, #52]	@ 0x34
 8041604:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8041608:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 804160c:	f7fa ff2a 	bl	803c464 <__aeabi_uldivmod>
 8041610:	4602      	mov	r2, r0
 8041612:	460b      	mov	r3, r1
 8041614:	4613      	mov	r3, r2
 8041616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 804161a:	e05b      	b.n	80416d4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 804161c:	4b3b      	ldr	r3, [pc, #236]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 804161e:	685b      	ldr	r3, [r3, #4]
 8041620:	099b      	lsrs	r3, r3, #6
 8041622:	2200      	movs	r2, #0
 8041624:	62bb      	str	r3, [r7, #40]	@ 0x28
 8041626:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8041628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804162a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804162e:	623b      	str	r3, [r7, #32]
 8041630:	2300      	movs	r3, #0
 8041632:	627b      	str	r3, [r7, #36]	@ 0x24
 8041634:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8041638:	4642      	mov	r2, r8
 804163a:	464b      	mov	r3, r9
 804163c:	f04f 0000 	mov.w	r0, #0
 8041640:	f04f 0100 	mov.w	r1, #0
 8041644:	0159      	lsls	r1, r3, #5
 8041646:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 804164a:	0150      	lsls	r0, r2, #5
 804164c:	4602      	mov	r2, r0
 804164e:	460b      	mov	r3, r1
 8041650:	4641      	mov	r1, r8
 8041652:	ebb2 0a01 	subs.w	sl, r2, r1
 8041656:	4649      	mov	r1, r9
 8041658:	eb63 0b01 	sbc.w	fp, r3, r1
 804165c:	f04f 0200 	mov.w	r2, #0
 8041660:	f04f 0300 	mov.w	r3, #0
 8041664:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8041668:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 804166c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8041670:	ebb2 040a 	subs.w	r4, r2, sl
 8041674:	eb63 050b 	sbc.w	r5, r3, fp
 8041678:	f04f 0200 	mov.w	r2, #0
 804167c:	f04f 0300 	mov.w	r3, #0
 8041680:	00eb      	lsls	r3, r5, #3
 8041682:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8041686:	00e2      	lsls	r2, r4, #3
 8041688:	4614      	mov	r4, r2
 804168a:	461d      	mov	r5, r3
 804168c:	4643      	mov	r3, r8
 804168e:	18e3      	adds	r3, r4, r3
 8041690:	603b      	str	r3, [r7, #0]
 8041692:	464b      	mov	r3, r9
 8041694:	eb45 0303 	adc.w	r3, r5, r3
 8041698:	607b      	str	r3, [r7, #4]
 804169a:	f04f 0200 	mov.w	r2, #0
 804169e:	f04f 0300 	mov.w	r3, #0
 80416a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80416a6:	4629      	mov	r1, r5
 80416a8:	028b      	lsls	r3, r1, #10
 80416aa:	4621      	mov	r1, r4
 80416ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80416b0:	4621      	mov	r1, r4
 80416b2:	028a      	lsls	r2, r1, #10
 80416b4:	4610      	mov	r0, r2
 80416b6:	4619      	mov	r1, r3
 80416b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80416bc:	2200      	movs	r2, #0
 80416be:	61bb      	str	r3, [r7, #24]
 80416c0:	61fa      	str	r2, [r7, #28]
 80416c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80416c6:	f7fa fecd 	bl	803c464 <__aeabi_uldivmod>
 80416ca:	4602      	mov	r2, r0
 80416cc:	460b      	mov	r3, r1
 80416ce:	4613      	mov	r3, r2
 80416d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80416d4:	4b0d      	ldr	r3, [pc, #52]	@ (804170c <HAL_RCC_GetSysClockFreq+0x348>)
 80416d6:	685b      	ldr	r3, [r3, #4]
 80416d8:	0f1b      	lsrs	r3, r3, #28
 80416da:	f003 0307 	and.w	r3, r3, #7
 80416de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80416e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80416e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80416ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80416ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80416f2:	e003      	b.n	80416fc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80416f4:	4b06      	ldr	r3, [pc, #24]	@ (8041710 <HAL_RCC_GetSysClockFreq+0x34c>)
 80416f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80416fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80416fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8041700:	4618      	mov	r0, r3
 8041702:	3798      	adds	r7, #152	@ 0x98
 8041704:	46bd      	mov	sp, r7
 8041706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 804170a:	bf00      	nop
 804170c:	40023800 	.word	0x40023800
 8041710:	00f42400 	.word	0x00f42400
 8041714:	017d7840 	.word	0x017d7840

08041718 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041718:	b580      	push	{r7, lr}
 804171a:	b086      	sub	sp, #24
 804171c:	af00      	add	r7, sp, #0
 804171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8041720:	687b      	ldr	r3, [r7, #4]
 8041722:	2b00      	cmp	r3, #0
 8041724:	d101      	bne.n	804172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8041726:	2301      	movs	r3, #1
 8041728:	e28d      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 804172a:	687b      	ldr	r3, [r7, #4]
 804172c:	681b      	ldr	r3, [r3, #0]
 804172e:	f003 0301 	and.w	r3, r3, #1
 8041732:	2b00      	cmp	r3, #0
 8041734:	f000 8083 	beq.w	804183e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8041738:	4b94      	ldr	r3, [pc, #592]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 804173a:	689b      	ldr	r3, [r3, #8]
 804173c:	f003 030c 	and.w	r3, r3, #12
 8041740:	2b04      	cmp	r3, #4
 8041742:	d019      	beq.n	8041778 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8041744:	4b91      	ldr	r3, [pc, #580]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041746:	689b      	ldr	r3, [r3, #8]
 8041748:	f003 030c 	and.w	r3, r3, #12
        || \
 804174c:	2b08      	cmp	r3, #8
 804174e:	d106      	bne.n	804175e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8041750:	4b8e      	ldr	r3, [pc, #568]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041752:	685b      	ldr	r3, [r3, #4]
 8041754:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041758:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 804175c:	d00c      	beq.n	8041778 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804175e:	4b8b      	ldr	r3, [pc, #556]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041760:	689b      	ldr	r3, [r3, #8]
 8041762:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8041766:	2b0c      	cmp	r3, #12
 8041768:	d112      	bne.n	8041790 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 804176a:	4b88      	ldr	r3, [pc, #544]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 804176c:	685b      	ldr	r3, [r3, #4]
 804176e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8041776:	d10b      	bne.n	8041790 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041778:	4b84      	ldr	r3, [pc, #528]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 804177a:	681b      	ldr	r3, [r3, #0]
 804177c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041780:	2b00      	cmp	r3, #0
 8041782:	d05b      	beq.n	804183c <HAL_RCC_OscConfig+0x124>
 8041784:	687b      	ldr	r3, [r7, #4]
 8041786:	685b      	ldr	r3, [r3, #4]
 8041788:	2b00      	cmp	r3, #0
 804178a:	d157      	bne.n	804183c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 804178c:	2301      	movs	r3, #1
 804178e:	e25a      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041790:	687b      	ldr	r3, [r7, #4]
 8041792:	685b      	ldr	r3, [r3, #4]
 8041794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8041798:	d106      	bne.n	80417a8 <HAL_RCC_OscConfig+0x90>
 804179a:	4b7c      	ldr	r3, [pc, #496]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 804179c:	681b      	ldr	r3, [r3, #0]
 804179e:	4a7b      	ldr	r2, [pc, #492]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80417a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80417a4:	6013      	str	r3, [r2, #0]
 80417a6:	e01d      	b.n	80417e4 <HAL_RCC_OscConfig+0xcc>
 80417a8:	687b      	ldr	r3, [r7, #4]
 80417aa:	685b      	ldr	r3, [r3, #4]
 80417ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80417b0:	d10c      	bne.n	80417cc <HAL_RCC_OscConfig+0xb4>
 80417b2:	4b76      	ldr	r3, [pc, #472]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80417b4:	681b      	ldr	r3, [r3, #0]
 80417b6:	4a75      	ldr	r2, [pc, #468]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80417b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80417bc:	6013      	str	r3, [r2, #0]
 80417be:	4b73      	ldr	r3, [pc, #460]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80417c0:	681b      	ldr	r3, [r3, #0]
 80417c2:	4a72      	ldr	r2, [pc, #456]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80417c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80417c8:	6013      	str	r3, [r2, #0]
 80417ca:	e00b      	b.n	80417e4 <HAL_RCC_OscConfig+0xcc>
 80417cc:	4b6f      	ldr	r3, [pc, #444]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80417ce:	681b      	ldr	r3, [r3, #0]
 80417d0:	4a6e      	ldr	r2, [pc, #440]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80417d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80417d6:	6013      	str	r3, [r2, #0]
 80417d8:	4b6c      	ldr	r3, [pc, #432]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80417da:	681b      	ldr	r3, [r3, #0]
 80417dc:	4a6b      	ldr	r2, [pc, #428]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80417de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80417e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80417e4:	687b      	ldr	r3, [r7, #4]
 80417e6:	685b      	ldr	r3, [r3, #4]
 80417e8:	2b00      	cmp	r3, #0
 80417ea:	d013      	beq.n	8041814 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80417ec:	f7fd fe6e 	bl	803f4cc <HAL_GetTick>
 80417f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80417f2:	e008      	b.n	8041806 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80417f4:	f7fd fe6a 	bl	803f4cc <HAL_GetTick>
 80417f8:	4602      	mov	r2, r0
 80417fa:	693b      	ldr	r3, [r7, #16]
 80417fc:	1ad3      	subs	r3, r2, r3
 80417fe:	2b64      	cmp	r3, #100	@ 0x64
 8041800:	d901      	bls.n	8041806 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8041802:	2303      	movs	r3, #3
 8041804:	e21f      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8041806:	4b61      	ldr	r3, [pc, #388]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041808:	681b      	ldr	r3, [r3, #0]
 804180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 804180e:	2b00      	cmp	r3, #0
 8041810:	d0f0      	beq.n	80417f4 <HAL_RCC_OscConfig+0xdc>
 8041812:	e014      	b.n	804183e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041814:	f7fd fe5a 	bl	803f4cc <HAL_GetTick>
 8041818:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804181a:	e008      	b.n	804182e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804181c:	f7fd fe56 	bl	803f4cc <HAL_GetTick>
 8041820:	4602      	mov	r2, r0
 8041822:	693b      	ldr	r3, [r7, #16]
 8041824:	1ad3      	subs	r3, r2, r3
 8041826:	2b64      	cmp	r3, #100	@ 0x64
 8041828:	d901      	bls.n	804182e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 804182a:	2303      	movs	r3, #3
 804182c:	e20b      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 804182e:	4b57      	ldr	r3, [pc, #348]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041830:	681b      	ldr	r3, [r3, #0]
 8041832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8041836:	2b00      	cmp	r3, #0
 8041838:	d1f0      	bne.n	804181c <HAL_RCC_OscConfig+0x104>
 804183a:	e000      	b.n	804183e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804183c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 804183e:	687b      	ldr	r3, [r7, #4]
 8041840:	681b      	ldr	r3, [r3, #0]
 8041842:	f003 0302 	and.w	r3, r3, #2
 8041846:	2b00      	cmp	r3, #0
 8041848:	d06f      	beq.n	804192a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 804184a:	4b50      	ldr	r3, [pc, #320]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 804184c:	689b      	ldr	r3, [r3, #8]
 804184e:	f003 030c 	and.w	r3, r3, #12
 8041852:	2b00      	cmp	r3, #0
 8041854:	d017      	beq.n	8041886 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8041856:	4b4d      	ldr	r3, [pc, #308]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041858:	689b      	ldr	r3, [r3, #8]
 804185a:	f003 030c 	and.w	r3, r3, #12
        || \
 804185e:	2b08      	cmp	r3, #8
 8041860:	d105      	bne.n	804186e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8041862:	4b4a      	ldr	r3, [pc, #296]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041864:	685b      	ldr	r3, [r3, #4]
 8041866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 804186a:	2b00      	cmp	r3, #0
 804186c:	d00b      	beq.n	8041886 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804186e:	4b47      	ldr	r3, [pc, #284]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041870:	689b      	ldr	r3, [r3, #8]
 8041872:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8041876:	2b0c      	cmp	r3, #12
 8041878:	d11c      	bne.n	80418b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 804187a:	4b44      	ldr	r3, [pc, #272]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 804187c:	685b      	ldr	r3, [r3, #4]
 804187e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8041882:	2b00      	cmp	r3, #0
 8041884:	d116      	bne.n	80418b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8041886:	4b41      	ldr	r3, [pc, #260]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041888:	681b      	ldr	r3, [r3, #0]
 804188a:	f003 0302 	and.w	r3, r3, #2
 804188e:	2b00      	cmp	r3, #0
 8041890:	d005      	beq.n	804189e <HAL_RCC_OscConfig+0x186>
 8041892:	687b      	ldr	r3, [r7, #4]
 8041894:	68db      	ldr	r3, [r3, #12]
 8041896:	2b01      	cmp	r3, #1
 8041898:	d001      	beq.n	804189e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 804189a:	2301      	movs	r3, #1
 804189c:	e1d3      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804189e:	4b3b      	ldr	r3, [pc, #236]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80418a0:	681b      	ldr	r3, [r3, #0]
 80418a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80418a6:	687b      	ldr	r3, [r7, #4]
 80418a8:	691b      	ldr	r3, [r3, #16]
 80418aa:	00db      	lsls	r3, r3, #3
 80418ac:	4937      	ldr	r1, [pc, #220]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80418ae:	4313      	orrs	r3, r2
 80418b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80418b2:	e03a      	b.n	804192a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80418b4:	687b      	ldr	r3, [r7, #4]
 80418b6:	68db      	ldr	r3, [r3, #12]
 80418b8:	2b00      	cmp	r3, #0
 80418ba:	d020      	beq.n	80418fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80418bc:	4b34      	ldr	r3, [pc, #208]	@ (8041990 <HAL_RCC_OscConfig+0x278>)
 80418be:	2201      	movs	r2, #1
 80418c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80418c2:	f7fd fe03 	bl	803f4cc <HAL_GetTick>
 80418c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80418c8:	e008      	b.n	80418dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80418ca:	f7fd fdff 	bl	803f4cc <HAL_GetTick>
 80418ce:	4602      	mov	r2, r0
 80418d0:	693b      	ldr	r3, [r7, #16]
 80418d2:	1ad3      	subs	r3, r2, r3
 80418d4:	2b02      	cmp	r3, #2
 80418d6:	d901      	bls.n	80418dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80418d8:	2303      	movs	r3, #3
 80418da:	e1b4      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80418dc:	4b2b      	ldr	r3, [pc, #172]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80418de:	681b      	ldr	r3, [r3, #0]
 80418e0:	f003 0302 	and.w	r3, r3, #2
 80418e4:	2b00      	cmp	r3, #0
 80418e6:	d0f0      	beq.n	80418ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80418e8:	4b28      	ldr	r3, [pc, #160]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80418ea:	681b      	ldr	r3, [r3, #0]
 80418ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80418f0:	687b      	ldr	r3, [r7, #4]
 80418f2:	691b      	ldr	r3, [r3, #16]
 80418f4:	00db      	lsls	r3, r3, #3
 80418f6:	4925      	ldr	r1, [pc, #148]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 80418f8:	4313      	orrs	r3, r2
 80418fa:	600b      	str	r3, [r1, #0]
 80418fc:	e015      	b.n	804192a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80418fe:	4b24      	ldr	r3, [pc, #144]	@ (8041990 <HAL_RCC_OscConfig+0x278>)
 8041900:	2200      	movs	r2, #0
 8041902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041904:	f7fd fde2 	bl	803f4cc <HAL_GetTick>
 8041908:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804190a:	e008      	b.n	804191e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804190c:	f7fd fdde 	bl	803f4cc <HAL_GetTick>
 8041910:	4602      	mov	r2, r0
 8041912:	693b      	ldr	r3, [r7, #16]
 8041914:	1ad3      	subs	r3, r2, r3
 8041916:	2b02      	cmp	r3, #2
 8041918:	d901      	bls.n	804191e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 804191a:	2303      	movs	r3, #3
 804191c:	e193      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 804191e:	4b1b      	ldr	r3, [pc, #108]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041920:	681b      	ldr	r3, [r3, #0]
 8041922:	f003 0302 	and.w	r3, r3, #2
 8041926:	2b00      	cmp	r3, #0
 8041928:	d1f0      	bne.n	804190c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 804192a:	687b      	ldr	r3, [r7, #4]
 804192c:	681b      	ldr	r3, [r3, #0]
 804192e:	f003 0308 	and.w	r3, r3, #8
 8041932:	2b00      	cmp	r3, #0
 8041934:	d036      	beq.n	80419a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8041936:	687b      	ldr	r3, [r7, #4]
 8041938:	695b      	ldr	r3, [r3, #20]
 804193a:	2b00      	cmp	r3, #0
 804193c:	d016      	beq.n	804196c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804193e:	4b15      	ldr	r3, [pc, #84]	@ (8041994 <HAL_RCC_OscConfig+0x27c>)
 8041940:	2201      	movs	r2, #1
 8041942:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041944:	f7fd fdc2 	bl	803f4cc <HAL_GetTick>
 8041948:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804194a:	e008      	b.n	804195e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 804194c:	f7fd fdbe 	bl	803f4cc <HAL_GetTick>
 8041950:	4602      	mov	r2, r0
 8041952:	693b      	ldr	r3, [r7, #16]
 8041954:	1ad3      	subs	r3, r2, r3
 8041956:	2b02      	cmp	r3, #2
 8041958:	d901      	bls.n	804195e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 804195a:	2303      	movs	r3, #3
 804195c:	e173      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 804195e:	4b0b      	ldr	r3, [pc, #44]	@ (804198c <HAL_RCC_OscConfig+0x274>)
 8041960:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8041962:	f003 0302 	and.w	r3, r3, #2
 8041966:	2b00      	cmp	r3, #0
 8041968:	d0f0      	beq.n	804194c <HAL_RCC_OscConfig+0x234>
 804196a:	e01b      	b.n	80419a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 804196c:	4b09      	ldr	r3, [pc, #36]	@ (8041994 <HAL_RCC_OscConfig+0x27c>)
 804196e:	2200      	movs	r2, #0
 8041970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041972:	f7fd fdab 	bl	803f4cc <HAL_GetTick>
 8041976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041978:	e00e      	b.n	8041998 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 804197a:	f7fd fda7 	bl	803f4cc <HAL_GetTick>
 804197e:	4602      	mov	r2, r0
 8041980:	693b      	ldr	r3, [r7, #16]
 8041982:	1ad3      	subs	r3, r2, r3
 8041984:	2b02      	cmp	r3, #2
 8041986:	d907      	bls.n	8041998 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8041988:	2303      	movs	r3, #3
 804198a:	e15c      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
 804198c:	40023800 	.word	0x40023800
 8041990:	42470000 	.word	0x42470000
 8041994:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8041998:	4b8a      	ldr	r3, [pc, #552]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 804199a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 804199c:	f003 0302 	and.w	r3, r3, #2
 80419a0:	2b00      	cmp	r3, #0
 80419a2:	d1ea      	bne.n	804197a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80419a4:	687b      	ldr	r3, [r7, #4]
 80419a6:	681b      	ldr	r3, [r3, #0]
 80419a8:	f003 0304 	and.w	r3, r3, #4
 80419ac:	2b00      	cmp	r3, #0
 80419ae:	f000 8097 	beq.w	8041ae0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80419b2:	2300      	movs	r3, #0
 80419b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80419b6:	4b83      	ldr	r3, [pc, #524]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 80419b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80419ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80419be:	2b00      	cmp	r3, #0
 80419c0:	d10f      	bne.n	80419e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80419c2:	2300      	movs	r3, #0
 80419c4:	60bb      	str	r3, [r7, #8]
 80419c6:	4b7f      	ldr	r3, [pc, #508]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 80419c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80419ca:	4a7e      	ldr	r2, [pc, #504]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 80419cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80419d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80419d2:	4b7c      	ldr	r3, [pc, #496]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 80419d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80419d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80419da:	60bb      	str	r3, [r7, #8]
 80419dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80419de:	2301      	movs	r3, #1
 80419e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80419e2:	4b79      	ldr	r3, [pc, #484]	@ (8041bc8 <HAL_RCC_OscConfig+0x4b0>)
 80419e4:	681b      	ldr	r3, [r3, #0]
 80419e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80419ea:	2b00      	cmp	r3, #0
 80419ec:	d118      	bne.n	8041a20 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80419ee:	4b76      	ldr	r3, [pc, #472]	@ (8041bc8 <HAL_RCC_OscConfig+0x4b0>)
 80419f0:	681b      	ldr	r3, [r3, #0]
 80419f2:	4a75      	ldr	r2, [pc, #468]	@ (8041bc8 <HAL_RCC_OscConfig+0x4b0>)
 80419f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80419f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80419fa:	f7fd fd67 	bl	803f4cc <HAL_GetTick>
 80419fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041a00:	e008      	b.n	8041a14 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041a02:	f7fd fd63 	bl	803f4cc <HAL_GetTick>
 8041a06:	4602      	mov	r2, r0
 8041a08:	693b      	ldr	r3, [r7, #16]
 8041a0a:	1ad3      	subs	r3, r2, r3
 8041a0c:	2b02      	cmp	r3, #2
 8041a0e:	d901      	bls.n	8041a14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8041a10:	2303      	movs	r3, #3
 8041a12:	e118      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8041a14:	4b6c      	ldr	r3, [pc, #432]	@ (8041bc8 <HAL_RCC_OscConfig+0x4b0>)
 8041a16:	681b      	ldr	r3, [r3, #0]
 8041a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8041a1c:	2b00      	cmp	r3, #0
 8041a1e:	d0f0      	beq.n	8041a02 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041a20:	687b      	ldr	r3, [r7, #4]
 8041a22:	689b      	ldr	r3, [r3, #8]
 8041a24:	2b01      	cmp	r3, #1
 8041a26:	d106      	bne.n	8041a36 <HAL_RCC_OscConfig+0x31e>
 8041a28:	4b66      	ldr	r3, [pc, #408]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041a2c:	4a65      	ldr	r2, [pc, #404]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a2e:	f043 0301 	orr.w	r3, r3, #1
 8041a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8041a34:	e01c      	b.n	8041a70 <HAL_RCC_OscConfig+0x358>
 8041a36:	687b      	ldr	r3, [r7, #4]
 8041a38:	689b      	ldr	r3, [r3, #8]
 8041a3a:	2b05      	cmp	r3, #5
 8041a3c:	d10c      	bne.n	8041a58 <HAL_RCC_OscConfig+0x340>
 8041a3e:	4b61      	ldr	r3, [pc, #388]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041a42:	4a60      	ldr	r2, [pc, #384]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a44:	f043 0304 	orr.w	r3, r3, #4
 8041a48:	6713      	str	r3, [r2, #112]	@ 0x70
 8041a4a:	4b5e      	ldr	r3, [pc, #376]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041a4e:	4a5d      	ldr	r2, [pc, #372]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a50:	f043 0301 	orr.w	r3, r3, #1
 8041a54:	6713      	str	r3, [r2, #112]	@ 0x70
 8041a56:	e00b      	b.n	8041a70 <HAL_RCC_OscConfig+0x358>
 8041a58:	4b5a      	ldr	r3, [pc, #360]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041a5c:	4a59      	ldr	r2, [pc, #356]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a5e:	f023 0301 	bic.w	r3, r3, #1
 8041a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8041a64:	4b57      	ldr	r3, [pc, #348]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041a68:	4a56      	ldr	r2, [pc, #344]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a6a:	f023 0304 	bic.w	r3, r3, #4
 8041a6e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8041a70:	687b      	ldr	r3, [r7, #4]
 8041a72:	689b      	ldr	r3, [r3, #8]
 8041a74:	2b00      	cmp	r3, #0
 8041a76:	d015      	beq.n	8041aa4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041a78:	f7fd fd28 	bl	803f4cc <HAL_GetTick>
 8041a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041a7e:	e00a      	b.n	8041a96 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041a80:	f7fd fd24 	bl	803f4cc <HAL_GetTick>
 8041a84:	4602      	mov	r2, r0
 8041a86:	693b      	ldr	r3, [r7, #16]
 8041a88:	1ad3      	subs	r3, r2, r3
 8041a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041a8e:	4293      	cmp	r3, r2
 8041a90:	d901      	bls.n	8041a96 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8041a92:	2303      	movs	r3, #3
 8041a94:	e0d7      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8041a96:	4b4b      	ldr	r3, [pc, #300]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041a9a:	f003 0302 	and.w	r3, r3, #2
 8041a9e:	2b00      	cmp	r3, #0
 8041aa0:	d0ee      	beq.n	8041a80 <HAL_RCC_OscConfig+0x368>
 8041aa2:	e014      	b.n	8041ace <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041aa4:	f7fd fd12 	bl	803f4cc <HAL_GetTick>
 8041aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041aaa:	e00a      	b.n	8041ac2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041aac:	f7fd fd0e 	bl	803f4cc <HAL_GetTick>
 8041ab0:	4602      	mov	r2, r0
 8041ab2:	693b      	ldr	r3, [r7, #16]
 8041ab4:	1ad3      	subs	r3, r2, r3
 8041ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8041aba:	4293      	cmp	r3, r2
 8041abc:	d901      	bls.n	8041ac2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8041abe:	2303      	movs	r3, #3
 8041ac0:	e0c1      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8041ac2:	4b40      	ldr	r3, [pc, #256]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8041ac6:	f003 0302 	and.w	r3, r3, #2
 8041aca:	2b00      	cmp	r3, #0
 8041acc:	d1ee      	bne.n	8041aac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041ace:	7dfb      	ldrb	r3, [r7, #23]
 8041ad0:	2b01      	cmp	r3, #1
 8041ad2:	d105      	bne.n	8041ae0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8041ad8:	4a3a      	ldr	r2, [pc, #232]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041ada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8041ade:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8041ae0:	687b      	ldr	r3, [r7, #4]
 8041ae2:	699b      	ldr	r3, [r3, #24]
 8041ae4:	2b00      	cmp	r3, #0
 8041ae6:	f000 80ad 	beq.w	8041c44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8041aea:	4b36      	ldr	r3, [pc, #216]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041aec:	689b      	ldr	r3, [r3, #8]
 8041aee:	f003 030c 	and.w	r3, r3, #12
 8041af2:	2b08      	cmp	r3, #8
 8041af4:	d060      	beq.n	8041bb8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041af6:	687b      	ldr	r3, [r7, #4]
 8041af8:	699b      	ldr	r3, [r3, #24]
 8041afa:	2b02      	cmp	r3, #2
 8041afc:	d145      	bne.n	8041b8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041afe:	4b33      	ldr	r3, [pc, #204]	@ (8041bcc <HAL_RCC_OscConfig+0x4b4>)
 8041b00:	2200      	movs	r2, #0
 8041b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041b04:	f7fd fce2 	bl	803f4cc <HAL_GetTick>
 8041b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041b0a:	e008      	b.n	8041b1e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041b0c:	f7fd fcde 	bl	803f4cc <HAL_GetTick>
 8041b10:	4602      	mov	r2, r0
 8041b12:	693b      	ldr	r3, [r7, #16]
 8041b14:	1ad3      	subs	r3, r2, r3
 8041b16:	2b02      	cmp	r3, #2
 8041b18:	d901      	bls.n	8041b1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8041b1a:	2303      	movs	r3, #3
 8041b1c:	e093      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041b1e:	4b29      	ldr	r3, [pc, #164]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041b20:	681b      	ldr	r3, [r3, #0]
 8041b22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041b26:	2b00      	cmp	r3, #0
 8041b28:	d1f0      	bne.n	8041b0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8041b2a:	687b      	ldr	r3, [r7, #4]
 8041b2c:	69da      	ldr	r2, [r3, #28]
 8041b2e:	687b      	ldr	r3, [r7, #4]
 8041b30:	6a1b      	ldr	r3, [r3, #32]
 8041b32:	431a      	orrs	r2, r3
 8041b34:	687b      	ldr	r3, [r7, #4]
 8041b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041b38:	019b      	lsls	r3, r3, #6
 8041b3a:	431a      	orrs	r2, r3
 8041b3c:	687b      	ldr	r3, [r7, #4]
 8041b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8041b40:	085b      	lsrs	r3, r3, #1
 8041b42:	3b01      	subs	r3, #1
 8041b44:	041b      	lsls	r3, r3, #16
 8041b46:	431a      	orrs	r2, r3
 8041b48:	687b      	ldr	r3, [r7, #4]
 8041b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041b4c:	061b      	lsls	r3, r3, #24
 8041b4e:	431a      	orrs	r2, r3
 8041b50:	687b      	ldr	r3, [r7, #4]
 8041b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041b54:	071b      	lsls	r3, r3, #28
 8041b56:	491b      	ldr	r1, [pc, #108]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041b58:	4313      	orrs	r3, r2
 8041b5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8041bcc <HAL_RCC_OscConfig+0x4b4>)
 8041b5e:	2201      	movs	r2, #1
 8041b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041b62:	f7fd fcb3 	bl	803f4cc <HAL_GetTick>
 8041b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041b68:	e008      	b.n	8041b7c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041b6a:	f7fd fcaf 	bl	803f4cc <HAL_GetTick>
 8041b6e:	4602      	mov	r2, r0
 8041b70:	693b      	ldr	r3, [r7, #16]
 8041b72:	1ad3      	subs	r3, r2, r3
 8041b74:	2b02      	cmp	r3, #2
 8041b76:	d901      	bls.n	8041b7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8041b78:	2303      	movs	r3, #3
 8041b7a:	e064      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8041b7c:	4b11      	ldr	r3, [pc, #68]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041b7e:	681b      	ldr	r3, [r3, #0]
 8041b80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041b84:	2b00      	cmp	r3, #0
 8041b86:	d0f0      	beq.n	8041b6a <HAL_RCC_OscConfig+0x452>
 8041b88:	e05c      	b.n	8041c44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041b8a:	4b10      	ldr	r3, [pc, #64]	@ (8041bcc <HAL_RCC_OscConfig+0x4b4>)
 8041b8c:	2200      	movs	r2, #0
 8041b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041b90:	f7fd fc9c 	bl	803f4cc <HAL_GetTick>
 8041b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041b96:	e008      	b.n	8041baa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041b98:	f7fd fc98 	bl	803f4cc <HAL_GetTick>
 8041b9c:	4602      	mov	r2, r0
 8041b9e:	693b      	ldr	r3, [r7, #16]
 8041ba0:	1ad3      	subs	r3, r2, r3
 8041ba2:	2b02      	cmp	r3, #2
 8041ba4:	d901      	bls.n	8041baa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8041ba6:	2303      	movs	r3, #3
 8041ba8:	e04d      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8041baa:	4b06      	ldr	r3, [pc, #24]	@ (8041bc4 <HAL_RCC_OscConfig+0x4ac>)
 8041bac:	681b      	ldr	r3, [r3, #0]
 8041bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8041bb2:	2b00      	cmp	r3, #0
 8041bb4:	d1f0      	bne.n	8041b98 <HAL_RCC_OscConfig+0x480>
 8041bb6:	e045      	b.n	8041c44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8041bb8:	687b      	ldr	r3, [r7, #4]
 8041bba:	699b      	ldr	r3, [r3, #24]
 8041bbc:	2b01      	cmp	r3, #1
 8041bbe:	d107      	bne.n	8041bd0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8041bc0:	2301      	movs	r3, #1
 8041bc2:	e040      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
 8041bc4:	40023800 	.word	0x40023800
 8041bc8:	40007000 	.word	0x40007000
 8041bcc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8041bd0:	4b1f      	ldr	r3, [pc, #124]	@ (8041c50 <HAL_RCC_OscConfig+0x538>)
 8041bd2:	685b      	ldr	r3, [r3, #4]
 8041bd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041bd6:	687b      	ldr	r3, [r7, #4]
 8041bd8:	699b      	ldr	r3, [r3, #24]
 8041bda:	2b01      	cmp	r3, #1
 8041bdc:	d030      	beq.n	8041c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041bde:	68fb      	ldr	r3, [r7, #12]
 8041be0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8041be4:	687b      	ldr	r3, [r7, #4]
 8041be6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041be8:	429a      	cmp	r2, r3
 8041bea:	d129      	bne.n	8041c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8041bec:	68fb      	ldr	r3, [r7, #12]
 8041bee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8041bf2:	687b      	ldr	r3, [r7, #4]
 8041bf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041bf6:	429a      	cmp	r2, r3
 8041bf8:	d122      	bne.n	8041c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8041bfa:	68fa      	ldr	r2, [r7, #12]
 8041bfc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8041c00:	4013      	ands	r3, r2
 8041c02:	687a      	ldr	r2, [r7, #4]
 8041c04:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8041c06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8041c08:	4293      	cmp	r3, r2
 8041c0a:	d119      	bne.n	8041c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8041c0c:	68fb      	ldr	r3, [r7, #12]
 8041c0e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8041c12:	687b      	ldr	r3, [r7, #4]
 8041c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8041c16:	085b      	lsrs	r3, r3, #1
 8041c18:	3b01      	subs	r3, #1
 8041c1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8041c1c:	429a      	cmp	r2, r3
 8041c1e:	d10f      	bne.n	8041c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041c20:	68fb      	ldr	r3, [r7, #12]
 8041c22:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8041c26:	687b      	ldr	r3, [r7, #4]
 8041c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8041c2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8041c2c:	429a      	cmp	r2, r3
 8041c2e:	d107      	bne.n	8041c40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8041c30:	68fb      	ldr	r3, [r7, #12]
 8041c32:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8041c36:	687b      	ldr	r3, [r7, #4]
 8041c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8041c3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041c3c:	429a      	cmp	r2, r3
 8041c3e:	d001      	beq.n	8041c44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8041c40:	2301      	movs	r3, #1
 8041c42:	e000      	b.n	8041c46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8041c44:	2300      	movs	r3, #0
}
 8041c46:	4618      	mov	r0, r3
 8041c48:	3718      	adds	r7, #24
 8041c4a:	46bd      	mov	sp, r7
 8041c4c:	bd80      	pop	{r7, pc}
 8041c4e:	bf00      	nop
 8041c50:	40023800 	.word	0x40023800

08041c54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8041c54:	b580      	push	{r7, lr}
 8041c56:	b082      	sub	sp, #8
 8041c58:	af00      	add	r7, sp, #0
 8041c5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8041c5c:	687b      	ldr	r3, [r7, #4]
 8041c5e:	2b00      	cmp	r3, #0
 8041c60:	d101      	bne.n	8041c66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8041c62:	2301      	movs	r3, #1
 8041c64:	e07b      	b.n	8041d5e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8041c66:	687b      	ldr	r3, [r7, #4]
 8041c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041c6a:	2b00      	cmp	r3, #0
 8041c6c:	d108      	bne.n	8041c80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8041c6e:	687b      	ldr	r3, [r7, #4]
 8041c70:	685b      	ldr	r3, [r3, #4]
 8041c72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8041c76:	d009      	beq.n	8041c8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8041c78:	687b      	ldr	r3, [r7, #4]
 8041c7a:	2200      	movs	r2, #0
 8041c7c:	61da      	str	r2, [r3, #28]
 8041c7e:	e005      	b.n	8041c8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8041c80:	687b      	ldr	r3, [r7, #4]
 8041c82:	2200      	movs	r2, #0
 8041c84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8041c86:	687b      	ldr	r3, [r7, #4]
 8041c88:	2200      	movs	r2, #0
 8041c8a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8041c8c:	687b      	ldr	r3, [r7, #4]
 8041c8e:	2200      	movs	r2, #0
 8041c90:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8041c92:	687b      	ldr	r3, [r7, #4]
 8041c94:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8041c98:	b2db      	uxtb	r3, r3
 8041c9a:	2b00      	cmp	r3, #0
 8041c9c:	d106      	bne.n	8041cac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8041c9e:	687b      	ldr	r3, [r7, #4]
 8041ca0:	2200      	movs	r2, #0
 8041ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8041ca6:	6878      	ldr	r0, [r7, #4]
 8041ca8:	f7fd f9ce 	bl	803f048 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8041cac:	687b      	ldr	r3, [r7, #4]
 8041cae:	2202      	movs	r2, #2
 8041cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8041cb4:	687b      	ldr	r3, [r7, #4]
 8041cb6:	681b      	ldr	r3, [r3, #0]
 8041cb8:	681a      	ldr	r2, [r3, #0]
 8041cba:	687b      	ldr	r3, [r7, #4]
 8041cbc:	681b      	ldr	r3, [r3, #0]
 8041cbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8041cc2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8041cc4:	687b      	ldr	r3, [r7, #4]
 8041cc6:	685b      	ldr	r3, [r3, #4]
 8041cc8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8041ccc:	687b      	ldr	r3, [r7, #4]
 8041cce:	689b      	ldr	r3, [r3, #8]
 8041cd0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8041cd4:	431a      	orrs	r2, r3
 8041cd6:	687b      	ldr	r3, [r7, #4]
 8041cd8:	68db      	ldr	r3, [r3, #12]
 8041cda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8041cde:	431a      	orrs	r2, r3
 8041ce0:	687b      	ldr	r3, [r7, #4]
 8041ce2:	691b      	ldr	r3, [r3, #16]
 8041ce4:	f003 0302 	and.w	r3, r3, #2
 8041ce8:	431a      	orrs	r2, r3
 8041cea:	687b      	ldr	r3, [r7, #4]
 8041cec:	695b      	ldr	r3, [r3, #20]
 8041cee:	f003 0301 	and.w	r3, r3, #1
 8041cf2:	431a      	orrs	r2, r3
 8041cf4:	687b      	ldr	r3, [r7, #4]
 8041cf6:	699b      	ldr	r3, [r3, #24]
 8041cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8041cfc:	431a      	orrs	r2, r3
 8041cfe:	687b      	ldr	r3, [r7, #4]
 8041d00:	69db      	ldr	r3, [r3, #28]
 8041d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8041d06:	431a      	orrs	r2, r3
 8041d08:	687b      	ldr	r3, [r7, #4]
 8041d0a:	6a1b      	ldr	r3, [r3, #32]
 8041d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8041d10:	ea42 0103 	orr.w	r1, r2, r3
 8041d14:	687b      	ldr	r3, [r7, #4]
 8041d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8041d18:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8041d1c:	687b      	ldr	r3, [r7, #4]
 8041d1e:	681b      	ldr	r3, [r3, #0]
 8041d20:	430a      	orrs	r2, r1
 8041d22:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8041d24:	687b      	ldr	r3, [r7, #4]
 8041d26:	699b      	ldr	r3, [r3, #24]
 8041d28:	0c1b      	lsrs	r3, r3, #16
 8041d2a:	f003 0104 	and.w	r1, r3, #4
 8041d2e:	687b      	ldr	r3, [r7, #4]
 8041d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8041d32:	f003 0210 	and.w	r2, r3, #16
 8041d36:	687b      	ldr	r3, [r7, #4]
 8041d38:	681b      	ldr	r3, [r3, #0]
 8041d3a:	430a      	orrs	r2, r1
 8041d3c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8041d3e:	687b      	ldr	r3, [r7, #4]
 8041d40:	681b      	ldr	r3, [r3, #0]
 8041d42:	69da      	ldr	r2, [r3, #28]
 8041d44:	687b      	ldr	r3, [r7, #4]
 8041d46:	681b      	ldr	r3, [r3, #0]
 8041d48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8041d4c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8041d4e:	687b      	ldr	r3, [r7, #4]
 8041d50:	2200      	movs	r2, #0
 8041d52:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8041d54:	687b      	ldr	r3, [r7, #4]
 8041d56:	2201      	movs	r2, #1
 8041d58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8041d5c:	2300      	movs	r3, #0
}
 8041d5e:	4618      	mov	r0, r3
 8041d60:	3708      	adds	r7, #8
 8041d62:	46bd      	mov	sp, r7
 8041d64:	bd80      	pop	{r7, pc}

08041d66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8041d66:	b580      	push	{r7, lr}
 8041d68:	b082      	sub	sp, #8
 8041d6a:	af00      	add	r7, sp, #0
 8041d6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8041d6e:	687b      	ldr	r3, [r7, #4]
 8041d70:	2b00      	cmp	r3, #0
 8041d72:	d101      	bne.n	8041d78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8041d74:	2301      	movs	r3, #1
 8041d76:	e041      	b.n	8041dfc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8041d78:	687b      	ldr	r3, [r7, #4]
 8041d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8041d7e:	b2db      	uxtb	r3, r3
 8041d80:	2b00      	cmp	r3, #0
 8041d82:	d106      	bne.n	8041d92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8041d84:	687b      	ldr	r3, [r7, #4]
 8041d86:	2200      	movs	r2, #0
 8041d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8041d8c:	6878      	ldr	r0, [r7, #4]
 8041d8e:	f7fd f9d3 	bl	803f138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8041d92:	687b      	ldr	r3, [r7, #4]
 8041d94:	2202      	movs	r2, #2
 8041d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8041d9a:	687b      	ldr	r3, [r7, #4]
 8041d9c:	681a      	ldr	r2, [r3, #0]
 8041d9e:	687b      	ldr	r3, [r7, #4]
 8041da0:	3304      	adds	r3, #4
 8041da2:	4619      	mov	r1, r3
 8041da4:	4610      	mov	r0, r2
 8041da6:	f000 faab 	bl	8042300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8041daa:	687b      	ldr	r3, [r7, #4]
 8041dac:	2201      	movs	r2, #1
 8041dae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8041db2:	687b      	ldr	r3, [r7, #4]
 8041db4:	2201      	movs	r2, #1
 8041db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8041dba:	687b      	ldr	r3, [r7, #4]
 8041dbc:	2201      	movs	r2, #1
 8041dbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8041dc2:	687b      	ldr	r3, [r7, #4]
 8041dc4:	2201      	movs	r2, #1
 8041dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8041dca:	687b      	ldr	r3, [r7, #4]
 8041dcc:	2201      	movs	r2, #1
 8041dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8041dd2:	687b      	ldr	r3, [r7, #4]
 8041dd4:	2201      	movs	r2, #1
 8041dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8041dda:	687b      	ldr	r3, [r7, #4]
 8041ddc:	2201      	movs	r2, #1
 8041dde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8041de2:	687b      	ldr	r3, [r7, #4]
 8041de4:	2201      	movs	r2, #1
 8041de6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8041dea:	687b      	ldr	r3, [r7, #4]
 8041dec:	2201      	movs	r2, #1
 8041dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8041df2:	687b      	ldr	r3, [r7, #4]
 8041df4:	2201      	movs	r2, #1
 8041df6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8041dfa:	2300      	movs	r3, #0
}
 8041dfc:	4618      	mov	r0, r3
 8041dfe:	3708      	adds	r7, #8
 8041e00:	46bd      	mov	sp, r7
 8041e02:	bd80      	pop	{r7, pc}

08041e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8041e04:	b480      	push	{r7}
 8041e06:	b085      	sub	sp, #20
 8041e08:	af00      	add	r7, sp, #0
 8041e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8041e0c:	687b      	ldr	r3, [r7, #4]
 8041e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8041e12:	b2db      	uxtb	r3, r3
 8041e14:	2b01      	cmp	r3, #1
 8041e16:	d001      	beq.n	8041e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8041e18:	2301      	movs	r3, #1
 8041e1a:	e04e      	b.n	8041eba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8041e1c:	687b      	ldr	r3, [r7, #4]
 8041e1e:	2202      	movs	r2, #2
 8041e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8041e24:	687b      	ldr	r3, [r7, #4]
 8041e26:	681b      	ldr	r3, [r3, #0]
 8041e28:	68da      	ldr	r2, [r3, #12]
 8041e2a:	687b      	ldr	r3, [r7, #4]
 8041e2c:	681b      	ldr	r3, [r3, #0]
 8041e2e:	f042 0201 	orr.w	r2, r2, #1
 8041e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8041e34:	687b      	ldr	r3, [r7, #4]
 8041e36:	681b      	ldr	r3, [r3, #0]
 8041e38:	4a23      	ldr	r2, [pc, #140]	@ (8041ec8 <HAL_TIM_Base_Start_IT+0xc4>)
 8041e3a:	4293      	cmp	r3, r2
 8041e3c:	d022      	beq.n	8041e84 <HAL_TIM_Base_Start_IT+0x80>
 8041e3e:	687b      	ldr	r3, [r7, #4]
 8041e40:	681b      	ldr	r3, [r3, #0]
 8041e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8041e46:	d01d      	beq.n	8041e84 <HAL_TIM_Base_Start_IT+0x80>
 8041e48:	687b      	ldr	r3, [r7, #4]
 8041e4a:	681b      	ldr	r3, [r3, #0]
 8041e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8041ecc <HAL_TIM_Base_Start_IT+0xc8>)
 8041e4e:	4293      	cmp	r3, r2
 8041e50:	d018      	beq.n	8041e84 <HAL_TIM_Base_Start_IT+0x80>
 8041e52:	687b      	ldr	r3, [r7, #4]
 8041e54:	681b      	ldr	r3, [r3, #0]
 8041e56:	4a1e      	ldr	r2, [pc, #120]	@ (8041ed0 <HAL_TIM_Base_Start_IT+0xcc>)
 8041e58:	4293      	cmp	r3, r2
 8041e5a:	d013      	beq.n	8041e84 <HAL_TIM_Base_Start_IT+0x80>
 8041e5c:	687b      	ldr	r3, [r7, #4]
 8041e5e:	681b      	ldr	r3, [r3, #0]
 8041e60:	4a1c      	ldr	r2, [pc, #112]	@ (8041ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8041e62:	4293      	cmp	r3, r2
 8041e64:	d00e      	beq.n	8041e84 <HAL_TIM_Base_Start_IT+0x80>
 8041e66:	687b      	ldr	r3, [r7, #4]
 8041e68:	681b      	ldr	r3, [r3, #0]
 8041e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8041ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8041e6c:	4293      	cmp	r3, r2
 8041e6e:	d009      	beq.n	8041e84 <HAL_TIM_Base_Start_IT+0x80>
 8041e70:	687b      	ldr	r3, [r7, #4]
 8041e72:	681b      	ldr	r3, [r3, #0]
 8041e74:	4a19      	ldr	r2, [pc, #100]	@ (8041edc <HAL_TIM_Base_Start_IT+0xd8>)
 8041e76:	4293      	cmp	r3, r2
 8041e78:	d004      	beq.n	8041e84 <HAL_TIM_Base_Start_IT+0x80>
 8041e7a:	687b      	ldr	r3, [r7, #4]
 8041e7c:	681b      	ldr	r3, [r3, #0]
 8041e7e:	4a18      	ldr	r2, [pc, #96]	@ (8041ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8041e80:	4293      	cmp	r3, r2
 8041e82:	d111      	bne.n	8041ea8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8041e84:	687b      	ldr	r3, [r7, #4]
 8041e86:	681b      	ldr	r3, [r3, #0]
 8041e88:	689b      	ldr	r3, [r3, #8]
 8041e8a:	f003 0307 	and.w	r3, r3, #7
 8041e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8041e90:	68fb      	ldr	r3, [r7, #12]
 8041e92:	2b06      	cmp	r3, #6
 8041e94:	d010      	beq.n	8041eb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8041e96:	687b      	ldr	r3, [r7, #4]
 8041e98:	681b      	ldr	r3, [r3, #0]
 8041e9a:	681a      	ldr	r2, [r3, #0]
 8041e9c:	687b      	ldr	r3, [r7, #4]
 8041e9e:	681b      	ldr	r3, [r3, #0]
 8041ea0:	f042 0201 	orr.w	r2, r2, #1
 8041ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8041ea6:	e007      	b.n	8041eb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8041ea8:	687b      	ldr	r3, [r7, #4]
 8041eaa:	681b      	ldr	r3, [r3, #0]
 8041eac:	681a      	ldr	r2, [r3, #0]
 8041eae:	687b      	ldr	r3, [r7, #4]
 8041eb0:	681b      	ldr	r3, [r3, #0]
 8041eb2:	f042 0201 	orr.w	r2, r2, #1
 8041eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8041eb8:	2300      	movs	r3, #0
}
 8041eba:	4618      	mov	r0, r3
 8041ebc:	3714      	adds	r7, #20
 8041ebe:	46bd      	mov	sp, r7
 8041ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ec4:	4770      	bx	lr
 8041ec6:	bf00      	nop
 8041ec8:	40010000 	.word	0x40010000
 8041ecc:	40000400 	.word	0x40000400
 8041ed0:	40000800 	.word	0x40000800
 8041ed4:	40000c00 	.word	0x40000c00
 8041ed8:	40010400 	.word	0x40010400
 8041edc:	40014000 	.word	0x40014000
 8041ee0:	40001800 	.word	0x40001800

08041ee4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8041ee4:	b480      	push	{r7}
 8041ee6:	b083      	sub	sp, #12
 8041ee8:	af00      	add	r7, sp, #0
 8041eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8041eec:	687b      	ldr	r3, [r7, #4]
 8041eee:	681b      	ldr	r3, [r3, #0]
 8041ef0:	68da      	ldr	r2, [r3, #12]
 8041ef2:	687b      	ldr	r3, [r7, #4]
 8041ef4:	681b      	ldr	r3, [r3, #0]
 8041ef6:	f022 0201 	bic.w	r2, r2, #1
 8041efa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8041efc:	687b      	ldr	r3, [r7, #4]
 8041efe:	681b      	ldr	r3, [r3, #0]
 8041f00:	6a1a      	ldr	r2, [r3, #32]
 8041f02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8041f06:	4013      	ands	r3, r2
 8041f08:	2b00      	cmp	r3, #0
 8041f0a:	d10f      	bne.n	8041f2c <HAL_TIM_Base_Stop_IT+0x48>
 8041f0c:	687b      	ldr	r3, [r7, #4]
 8041f0e:	681b      	ldr	r3, [r3, #0]
 8041f10:	6a1a      	ldr	r2, [r3, #32]
 8041f12:	f240 4344 	movw	r3, #1092	@ 0x444
 8041f16:	4013      	ands	r3, r2
 8041f18:	2b00      	cmp	r3, #0
 8041f1a:	d107      	bne.n	8041f2c <HAL_TIM_Base_Stop_IT+0x48>
 8041f1c:	687b      	ldr	r3, [r7, #4]
 8041f1e:	681b      	ldr	r3, [r3, #0]
 8041f20:	681a      	ldr	r2, [r3, #0]
 8041f22:	687b      	ldr	r3, [r7, #4]
 8041f24:	681b      	ldr	r3, [r3, #0]
 8041f26:	f022 0201 	bic.w	r2, r2, #1
 8041f2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8041f2c:	687b      	ldr	r3, [r7, #4]
 8041f2e:	2201      	movs	r2, #1
 8041f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8041f34:	2300      	movs	r3, #0
}
 8041f36:	4618      	mov	r0, r3
 8041f38:	370c      	adds	r7, #12
 8041f3a:	46bd      	mov	sp, r7
 8041f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041f40:	4770      	bx	lr

08041f42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8041f42:	b580      	push	{r7, lr}
 8041f44:	b084      	sub	sp, #16
 8041f46:	af00      	add	r7, sp, #0
 8041f48:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8041f4a:	687b      	ldr	r3, [r7, #4]
 8041f4c:	681b      	ldr	r3, [r3, #0]
 8041f4e:	68db      	ldr	r3, [r3, #12]
 8041f50:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8041f52:	687b      	ldr	r3, [r7, #4]
 8041f54:	681b      	ldr	r3, [r3, #0]
 8041f56:	691b      	ldr	r3, [r3, #16]
 8041f58:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8041f5a:	68bb      	ldr	r3, [r7, #8]
 8041f5c:	f003 0302 	and.w	r3, r3, #2
 8041f60:	2b00      	cmp	r3, #0
 8041f62:	d020      	beq.n	8041fa6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8041f64:	68fb      	ldr	r3, [r7, #12]
 8041f66:	f003 0302 	and.w	r3, r3, #2
 8041f6a:	2b00      	cmp	r3, #0
 8041f6c:	d01b      	beq.n	8041fa6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8041f6e:	687b      	ldr	r3, [r7, #4]
 8041f70:	681b      	ldr	r3, [r3, #0]
 8041f72:	f06f 0202 	mvn.w	r2, #2
 8041f76:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8041f78:	687b      	ldr	r3, [r7, #4]
 8041f7a:	2201      	movs	r2, #1
 8041f7c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8041f7e:	687b      	ldr	r3, [r7, #4]
 8041f80:	681b      	ldr	r3, [r3, #0]
 8041f82:	699b      	ldr	r3, [r3, #24]
 8041f84:	f003 0303 	and.w	r3, r3, #3
 8041f88:	2b00      	cmp	r3, #0
 8041f8a:	d003      	beq.n	8041f94 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8041f8c:	6878      	ldr	r0, [r7, #4]
 8041f8e:	f000 f999 	bl	80422c4 <HAL_TIM_IC_CaptureCallback>
 8041f92:	e005      	b.n	8041fa0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8041f94:	6878      	ldr	r0, [r7, #4]
 8041f96:	f000 f98b 	bl	80422b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041f9a:	6878      	ldr	r0, [r7, #4]
 8041f9c:	f000 f99c 	bl	80422d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041fa0:	687b      	ldr	r3, [r7, #4]
 8041fa2:	2200      	movs	r2, #0
 8041fa4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8041fa6:	68bb      	ldr	r3, [r7, #8]
 8041fa8:	f003 0304 	and.w	r3, r3, #4
 8041fac:	2b00      	cmp	r3, #0
 8041fae:	d020      	beq.n	8041ff2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8041fb0:	68fb      	ldr	r3, [r7, #12]
 8041fb2:	f003 0304 	and.w	r3, r3, #4
 8041fb6:	2b00      	cmp	r3, #0
 8041fb8:	d01b      	beq.n	8041ff2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8041fba:	687b      	ldr	r3, [r7, #4]
 8041fbc:	681b      	ldr	r3, [r3, #0]
 8041fbe:	f06f 0204 	mvn.w	r2, #4
 8041fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8041fc4:	687b      	ldr	r3, [r7, #4]
 8041fc6:	2202      	movs	r2, #2
 8041fc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8041fca:	687b      	ldr	r3, [r7, #4]
 8041fcc:	681b      	ldr	r3, [r3, #0]
 8041fce:	699b      	ldr	r3, [r3, #24]
 8041fd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8041fd4:	2b00      	cmp	r3, #0
 8041fd6:	d003      	beq.n	8041fe0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041fd8:	6878      	ldr	r0, [r7, #4]
 8041fda:	f000 f973 	bl	80422c4 <HAL_TIM_IC_CaptureCallback>
 8041fde:	e005      	b.n	8041fec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041fe0:	6878      	ldr	r0, [r7, #4]
 8041fe2:	f000 f965 	bl	80422b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041fe6:	6878      	ldr	r0, [r7, #4]
 8041fe8:	f000 f976 	bl	80422d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041fec:	687b      	ldr	r3, [r7, #4]
 8041fee:	2200      	movs	r2, #0
 8041ff0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8041ff2:	68bb      	ldr	r3, [r7, #8]
 8041ff4:	f003 0308 	and.w	r3, r3, #8
 8041ff8:	2b00      	cmp	r3, #0
 8041ffa:	d020      	beq.n	804203e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8041ffc:	68fb      	ldr	r3, [r7, #12]
 8041ffe:	f003 0308 	and.w	r3, r3, #8
 8042002:	2b00      	cmp	r3, #0
 8042004:	d01b      	beq.n	804203e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8042006:	687b      	ldr	r3, [r7, #4]
 8042008:	681b      	ldr	r3, [r3, #0]
 804200a:	f06f 0208 	mvn.w	r2, #8
 804200e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8042010:	687b      	ldr	r3, [r7, #4]
 8042012:	2204      	movs	r2, #4
 8042014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8042016:	687b      	ldr	r3, [r7, #4]
 8042018:	681b      	ldr	r3, [r3, #0]
 804201a:	69db      	ldr	r3, [r3, #28]
 804201c:	f003 0303 	and.w	r3, r3, #3
 8042020:	2b00      	cmp	r3, #0
 8042022:	d003      	beq.n	804202c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8042024:	6878      	ldr	r0, [r7, #4]
 8042026:	f000 f94d 	bl	80422c4 <HAL_TIM_IC_CaptureCallback>
 804202a:	e005      	b.n	8042038 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 804202c:	6878      	ldr	r0, [r7, #4]
 804202e:	f000 f93f 	bl	80422b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8042032:	6878      	ldr	r0, [r7, #4]
 8042034:	f000 f950 	bl	80422d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042038:	687b      	ldr	r3, [r7, #4]
 804203a:	2200      	movs	r2, #0
 804203c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 804203e:	68bb      	ldr	r3, [r7, #8]
 8042040:	f003 0310 	and.w	r3, r3, #16
 8042044:	2b00      	cmp	r3, #0
 8042046:	d020      	beq.n	804208a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8042048:	68fb      	ldr	r3, [r7, #12]
 804204a:	f003 0310 	and.w	r3, r3, #16
 804204e:	2b00      	cmp	r3, #0
 8042050:	d01b      	beq.n	804208a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8042052:	687b      	ldr	r3, [r7, #4]
 8042054:	681b      	ldr	r3, [r3, #0]
 8042056:	f06f 0210 	mvn.w	r2, #16
 804205a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 804205c:	687b      	ldr	r3, [r7, #4]
 804205e:	2208      	movs	r2, #8
 8042060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8042062:	687b      	ldr	r3, [r7, #4]
 8042064:	681b      	ldr	r3, [r3, #0]
 8042066:	69db      	ldr	r3, [r3, #28]
 8042068:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 804206c:	2b00      	cmp	r3, #0
 804206e:	d003      	beq.n	8042078 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8042070:	6878      	ldr	r0, [r7, #4]
 8042072:	f000 f927 	bl	80422c4 <HAL_TIM_IC_CaptureCallback>
 8042076:	e005      	b.n	8042084 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8042078:	6878      	ldr	r0, [r7, #4]
 804207a:	f000 f919 	bl	80422b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 804207e:	6878      	ldr	r0, [r7, #4]
 8042080:	f000 f92a 	bl	80422d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8042084:	687b      	ldr	r3, [r7, #4]
 8042086:	2200      	movs	r2, #0
 8042088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 804208a:	68bb      	ldr	r3, [r7, #8]
 804208c:	f003 0301 	and.w	r3, r3, #1
 8042090:	2b00      	cmp	r3, #0
 8042092:	d00c      	beq.n	80420ae <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8042094:	68fb      	ldr	r3, [r7, #12]
 8042096:	f003 0301 	and.w	r3, r3, #1
 804209a:	2b00      	cmp	r3, #0
 804209c:	d007      	beq.n	80420ae <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 804209e:	687b      	ldr	r3, [r7, #4]
 80420a0:	681b      	ldr	r3, [r3, #0]
 80420a2:	f06f 0201 	mvn.w	r2, #1
 80420a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80420a8:	6878      	ldr	r0, [r7, #4]
 80420aa:	f001 fd2c 	bl	8043b06 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80420ae:	68bb      	ldr	r3, [r7, #8]
 80420b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80420b4:	2b00      	cmp	r3, #0
 80420b6:	d00c      	beq.n	80420d2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80420b8:	68fb      	ldr	r3, [r7, #12]
 80420ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80420be:	2b00      	cmp	r3, #0
 80420c0:	d007      	beq.n	80420d2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80420c2:	687b      	ldr	r3, [r7, #4]
 80420c4:	681b      	ldr	r3, [r3, #0]
 80420c6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80420ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80420cc:	6878      	ldr	r0, [r7, #4]
 80420ce:	f000 fadd 	bl	804268c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80420d2:	68bb      	ldr	r3, [r7, #8]
 80420d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80420d8:	2b00      	cmp	r3, #0
 80420da:	d00c      	beq.n	80420f6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80420dc:	68fb      	ldr	r3, [r7, #12]
 80420de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80420e2:	2b00      	cmp	r3, #0
 80420e4:	d007      	beq.n	80420f6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80420e6:	687b      	ldr	r3, [r7, #4]
 80420e8:	681b      	ldr	r3, [r3, #0]
 80420ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80420ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80420f0:	6878      	ldr	r0, [r7, #4]
 80420f2:	f000 f8fb 	bl	80422ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80420f6:	68bb      	ldr	r3, [r7, #8]
 80420f8:	f003 0320 	and.w	r3, r3, #32
 80420fc:	2b00      	cmp	r3, #0
 80420fe:	d00c      	beq.n	804211a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8042100:	68fb      	ldr	r3, [r7, #12]
 8042102:	f003 0320 	and.w	r3, r3, #32
 8042106:	2b00      	cmp	r3, #0
 8042108:	d007      	beq.n	804211a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 804210a:	687b      	ldr	r3, [r7, #4]
 804210c:	681b      	ldr	r3, [r3, #0]
 804210e:	f06f 0220 	mvn.w	r2, #32
 8042112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8042114:	6878      	ldr	r0, [r7, #4]
 8042116:	f000 faaf 	bl	8042678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 804211a:	bf00      	nop
 804211c:	3710      	adds	r7, #16
 804211e:	46bd      	mov	sp, r7
 8042120:	bd80      	pop	{r7, pc}

08042122 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8042122:	b580      	push	{r7, lr}
 8042124:	b084      	sub	sp, #16
 8042126:	af00      	add	r7, sp, #0
 8042128:	6078      	str	r0, [r7, #4]
 804212a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804212c:	2300      	movs	r3, #0
 804212e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8042130:	687b      	ldr	r3, [r7, #4]
 8042132:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8042136:	2b01      	cmp	r3, #1
 8042138:	d101      	bne.n	804213e <HAL_TIM_ConfigClockSource+0x1c>
 804213a:	2302      	movs	r3, #2
 804213c:	e0b4      	b.n	80422a8 <HAL_TIM_ConfigClockSource+0x186>
 804213e:	687b      	ldr	r3, [r7, #4]
 8042140:	2201      	movs	r2, #1
 8042142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8042146:	687b      	ldr	r3, [r7, #4]
 8042148:	2202      	movs	r2, #2
 804214a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 804214e:	687b      	ldr	r3, [r7, #4]
 8042150:	681b      	ldr	r3, [r3, #0]
 8042152:	689b      	ldr	r3, [r3, #8]
 8042154:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8042156:	68bb      	ldr	r3, [r7, #8]
 8042158:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 804215c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 804215e:	68bb      	ldr	r3, [r7, #8]
 8042160:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8042164:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8042166:	687b      	ldr	r3, [r7, #4]
 8042168:	681b      	ldr	r3, [r3, #0]
 804216a:	68ba      	ldr	r2, [r7, #8]
 804216c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 804216e:	683b      	ldr	r3, [r7, #0]
 8042170:	681b      	ldr	r3, [r3, #0]
 8042172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8042176:	d03e      	beq.n	80421f6 <HAL_TIM_ConfigClockSource+0xd4>
 8042178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 804217c:	f200 8087 	bhi.w	804228e <HAL_TIM_ConfigClockSource+0x16c>
 8042180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8042184:	f000 8086 	beq.w	8042294 <HAL_TIM_ConfigClockSource+0x172>
 8042188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 804218c:	d87f      	bhi.n	804228e <HAL_TIM_ConfigClockSource+0x16c>
 804218e:	2b70      	cmp	r3, #112	@ 0x70
 8042190:	d01a      	beq.n	80421c8 <HAL_TIM_ConfigClockSource+0xa6>
 8042192:	2b70      	cmp	r3, #112	@ 0x70
 8042194:	d87b      	bhi.n	804228e <HAL_TIM_ConfigClockSource+0x16c>
 8042196:	2b60      	cmp	r3, #96	@ 0x60
 8042198:	d050      	beq.n	804223c <HAL_TIM_ConfigClockSource+0x11a>
 804219a:	2b60      	cmp	r3, #96	@ 0x60
 804219c:	d877      	bhi.n	804228e <HAL_TIM_ConfigClockSource+0x16c>
 804219e:	2b50      	cmp	r3, #80	@ 0x50
 80421a0:	d03c      	beq.n	804221c <HAL_TIM_ConfigClockSource+0xfa>
 80421a2:	2b50      	cmp	r3, #80	@ 0x50
 80421a4:	d873      	bhi.n	804228e <HAL_TIM_ConfigClockSource+0x16c>
 80421a6:	2b40      	cmp	r3, #64	@ 0x40
 80421a8:	d058      	beq.n	804225c <HAL_TIM_ConfigClockSource+0x13a>
 80421aa:	2b40      	cmp	r3, #64	@ 0x40
 80421ac:	d86f      	bhi.n	804228e <HAL_TIM_ConfigClockSource+0x16c>
 80421ae:	2b30      	cmp	r3, #48	@ 0x30
 80421b0:	d064      	beq.n	804227c <HAL_TIM_ConfigClockSource+0x15a>
 80421b2:	2b30      	cmp	r3, #48	@ 0x30
 80421b4:	d86b      	bhi.n	804228e <HAL_TIM_ConfigClockSource+0x16c>
 80421b6:	2b20      	cmp	r3, #32
 80421b8:	d060      	beq.n	804227c <HAL_TIM_ConfigClockSource+0x15a>
 80421ba:	2b20      	cmp	r3, #32
 80421bc:	d867      	bhi.n	804228e <HAL_TIM_ConfigClockSource+0x16c>
 80421be:	2b00      	cmp	r3, #0
 80421c0:	d05c      	beq.n	804227c <HAL_TIM_ConfigClockSource+0x15a>
 80421c2:	2b10      	cmp	r3, #16
 80421c4:	d05a      	beq.n	804227c <HAL_TIM_ConfigClockSource+0x15a>
 80421c6:	e062      	b.n	804228e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80421c8:	687b      	ldr	r3, [r7, #4]
 80421ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80421cc:	683b      	ldr	r3, [r7, #0]
 80421ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80421d0:	683b      	ldr	r3, [r7, #0]
 80421d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80421d4:	683b      	ldr	r3, [r7, #0]
 80421d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80421d8:	f000 f9b2 	bl	8042540 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80421dc:	687b      	ldr	r3, [r7, #4]
 80421de:	681b      	ldr	r3, [r3, #0]
 80421e0:	689b      	ldr	r3, [r3, #8]
 80421e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80421e4:	68bb      	ldr	r3, [r7, #8]
 80421e6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80421ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80421ec:	687b      	ldr	r3, [r7, #4]
 80421ee:	681b      	ldr	r3, [r3, #0]
 80421f0:	68ba      	ldr	r2, [r7, #8]
 80421f2:	609a      	str	r2, [r3, #8]
      break;
 80421f4:	e04f      	b.n	8042296 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80421f6:	687b      	ldr	r3, [r7, #4]
 80421f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80421fa:	683b      	ldr	r3, [r7, #0]
 80421fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80421fe:	683b      	ldr	r3, [r7, #0]
 8042200:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8042202:	683b      	ldr	r3, [r7, #0]
 8042204:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8042206:	f000 f99b 	bl	8042540 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 804220a:	687b      	ldr	r3, [r7, #4]
 804220c:	681b      	ldr	r3, [r3, #0]
 804220e:	689a      	ldr	r2, [r3, #8]
 8042210:	687b      	ldr	r3, [r7, #4]
 8042212:	681b      	ldr	r3, [r3, #0]
 8042214:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8042218:	609a      	str	r2, [r3, #8]
      break;
 804221a:	e03c      	b.n	8042296 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804221c:	687b      	ldr	r3, [r7, #4]
 804221e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8042220:	683b      	ldr	r3, [r7, #0]
 8042222:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8042224:	683b      	ldr	r3, [r7, #0]
 8042226:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8042228:	461a      	mov	r2, r3
 804222a:	f000 f90f 	bl	804244c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 804222e:	687b      	ldr	r3, [r7, #4]
 8042230:	681b      	ldr	r3, [r3, #0]
 8042232:	2150      	movs	r1, #80	@ 0x50
 8042234:	4618      	mov	r0, r3
 8042236:	f000 f968 	bl	804250a <TIM_ITRx_SetConfig>
      break;
 804223a:	e02c      	b.n	8042296 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 804223c:	687b      	ldr	r3, [r7, #4]
 804223e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8042240:	683b      	ldr	r3, [r7, #0]
 8042242:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8042244:	683b      	ldr	r3, [r7, #0]
 8042246:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8042248:	461a      	mov	r2, r3
 804224a:	f000 f92e 	bl	80424aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 804224e:	687b      	ldr	r3, [r7, #4]
 8042250:	681b      	ldr	r3, [r3, #0]
 8042252:	2160      	movs	r1, #96	@ 0x60
 8042254:	4618      	mov	r0, r3
 8042256:	f000 f958 	bl	804250a <TIM_ITRx_SetConfig>
      break;
 804225a:	e01c      	b.n	8042296 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804225c:	687b      	ldr	r3, [r7, #4]
 804225e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8042260:	683b      	ldr	r3, [r7, #0]
 8042262:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8042264:	683b      	ldr	r3, [r7, #0]
 8042266:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8042268:	461a      	mov	r2, r3
 804226a:	f000 f8ef 	bl	804244c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 804226e:	687b      	ldr	r3, [r7, #4]
 8042270:	681b      	ldr	r3, [r3, #0]
 8042272:	2140      	movs	r1, #64	@ 0x40
 8042274:	4618      	mov	r0, r3
 8042276:	f000 f948 	bl	804250a <TIM_ITRx_SetConfig>
      break;
 804227a:	e00c      	b.n	8042296 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 804227c:	687b      	ldr	r3, [r7, #4]
 804227e:	681a      	ldr	r2, [r3, #0]
 8042280:	683b      	ldr	r3, [r7, #0]
 8042282:	681b      	ldr	r3, [r3, #0]
 8042284:	4619      	mov	r1, r3
 8042286:	4610      	mov	r0, r2
 8042288:	f000 f93f 	bl	804250a <TIM_ITRx_SetConfig>
      break;
 804228c:	e003      	b.n	8042296 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 804228e:	2301      	movs	r3, #1
 8042290:	73fb      	strb	r3, [r7, #15]
      break;
 8042292:	e000      	b.n	8042296 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8042294:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8042296:	687b      	ldr	r3, [r7, #4]
 8042298:	2201      	movs	r2, #1
 804229a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 804229e:	687b      	ldr	r3, [r7, #4]
 80422a0:	2200      	movs	r2, #0
 80422a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80422a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80422a8:	4618      	mov	r0, r3
 80422aa:	3710      	adds	r7, #16
 80422ac:	46bd      	mov	sp, r7
 80422ae:	bd80      	pop	{r7, pc}

080422b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80422b0:	b480      	push	{r7}
 80422b2:	b083      	sub	sp, #12
 80422b4:	af00      	add	r7, sp, #0
 80422b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80422b8:	bf00      	nop
 80422ba:	370c      	adds	r7, #12
 80422bc:	46bd      	mov	sp, r7
 80422be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422c2:	4770      	bx	lr

080422c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80422c4:	b480      	push	{r7}
 80422c6:	b083      	sub	sp, #12
 80422c8:	af00      	add	r7, sp, #0
 80422ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80422cc:	bf00      	nop
 80422ce:	370c      	adds	r7, #12
 80422d0:	46bd      	mov	sp, r7
 80422d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422d6:	4770      	bx	lr

080422d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80422d8:	b480      	push	{r7}
 80422da:	b083      	sub	sp, #12
 80422dc:	af00      	add	r7, sp, #0
 80422de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80422e0:	bf00      	nop
 80422e2:	370c      	adds	r7, #12
 80422e4:	46bd      	mov	sp, r7
 80422e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422ea:	4770      	bx	lr

080422ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80422ec:	b480      	push	{r7}
 80422ee:	b083      	sub	sp, #12
 80422f0:	af00      	add	r7, sp, #0
 80422f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80422f4:	bf00      	nop
 80422f6:	370c      	adds	r7, #12
 80422f8:	46bd      	mov	sp, r7
 80422fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422fe:	4770      	bx	lr

08042300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8042300:	b480      	push	{r7}
 8042302:	b085      	sub	sp, #20
 8042304:	af00      	add	r7, sp, #0
 8042306:	6078      	str	r0, [r7, #4]
 8042308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804230a:	687b      	ldr	r3, [r7, #4]
 804230c:	681b      	ldr	r3, [r3, #0]
 804230e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8042310:	687b      	ldr	r3, [r7, #4]
 8042312:	4a43      	ldr	r2, [pc, #268]	@ (8042420 <TIM_Base_SetConfig+0x120>)
 8042314:	4293      	cmp	r3, r2
 8042316:	d013      	beq.n	8042340 <TIM_Base_SetConfig+0x40>
 8042318:	687b      	ldr	r3, [r7, #4]
 804231a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 804231e:	d00f      	beq.n	8042340 <TIM_Base_SetConfig+0x40>
 8042320:	687b      	ldr	r3, [r7, #4]
 8042322:	4a40      	ldr	r2, [pc, #256]	@ (8042424 <TIM_Base_SetConfig+0x124>)
 8042324:	4293      	cmp	r3, r2
 8042326:	d00b      	beq.n	8042340 <TIM_Base_SetConfig+0x40>
 8042328:	687b      	ldr	r3, [r7, #4]
 804232a:	4a3f      	ldr	r2, [pc, #252]	@ (8042428 <TIM_Base_SetConfig+0x128>)
 804232c:	4293      	cmp	r3, r2
 804232e:	d007      	beq.n	8042340 <TIM_Base_SetConfig+0x40>
 8042330:	687b      	ldr	r3, [r7, #4]
 8042332:	4a3e      	ldr	r2, [pc, #248]	@ (804242c <TIM_Base_SetConfig+0x12c>)
 8042334:	4293      	cmp	r3, r2
 8042336:	d003      	beq.n	8042340 <TIM_Base_SetConfig+0x40>
 8042338:	687b      	ldr	r3, [r7, #4]
 804233a:	4a3d      	ldr	r2, [pc, #244]	@ (8042430 <TIM_Base_SetConfig+0x130>)
 804233c:	4293      	cmp	r3, r2
 804233e:	d108      	bne.n	8042352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8042340:	68fb      	ldr	r3, [r7, #12]
 8042342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8042346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8042348:	683b      	ldr	r3, [r7, #0]
 804234a:	685b      	ldr	r3, [r3, #4]
 804234c:	68fa      	ldr	r2, [r7, #12]
 804234e:	4313      	orrs	r3, r2
 8042350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8042352:	687b      	ldr	r3, [r7, #4]
 8042354:	4a32      	ldr	r2, [pc, #200]	@ (8042420 <TIM_Base_SetConfig+0x120>)
 8042356:	4293      	cmp	r3, r2
 8042358:	d02b      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 804235a:	687b      	ldr	r3, [r7, #4]
 804235c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8042360:	d027      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 8042362:	687b      	ldr	r3, [r7, #4]
 8042364:	4a2f      	ldr	r2, [pc, #188]	@ (8042424 <TIM_Base_SetConfig+0x124>)
 8042366:	4293      	cmp	r3, r2
 8042368:	d023      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 804236a:	687b      	ldr	r3, [r7, #4]
 804236c:	4a2e      	ldr	r2, [pc, #184]	@ (8042428 <TIM_Base_SetConfig+0x128>)
 804236e:	4293      	cmp	r3, r2
 8042370:	d01f      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 8042372:	687b      	ldr	r3, [r7, #4]
 8042374:	4a2d      	ldr	r2, [pc, #180]	@ (804242c <TIM_Base_SetConfig+0x12c>)
 8042376:	4293      	cmp	r3, r2
 8042378:	d01b      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 804237a:	687b      	ldr	r3, [r7, #4]
 804237c:	4a2c      	ldr	r2, [pc, #176]	@ (8042430 <TIM_Base_SetConfig+0x130>)
 804237e:	4293      	cmp	r3, r2
 8042380:	d017      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 8042382:	687b      	ldr	r3, [r7, #4]
 8042384:	4a2b      	ldr	r2, [pc, #172]	@ (8042434 <TIM_Base_SetConfig+0x134>)
 8042386:	4293      	cmp	r3, r2
 8042388:	d013      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 804238a:	687b      	ldr	r3, [r7, #4]
 804238c:	4a2a      	ldr	r2, [pc, #168]	@ (8042438 <TIM_Base_SetConfig+0x138>)
 804238e:	4293      	cmp	r3, r2
 8042390:	d00f      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 8042392:	687b      	ldr	r3, [r7, #4]
 8042394:	4a29      	ldr	r2, [pc, #164]	@ (804243c <TIM_Base_SetConfig+0x13c>)
 8042396:	4293      	cmp	r3, r2
 8042398:	d00b      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 804239a:	687b      	ldr	r3, [r7, #4]
 804239c:	4a28      	ldr	r2, [pc, #160]	@ (8042440 <TIM_Base_SetConfig+0x140>)
 804239e:	4293      	cmp	r3, r2
 80423a0:	d007      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 80423a2:	687b      	ldr	r3, [r7, #4]
 80423a4:	4a27      	ldr	r2, [pc, #156]	@ (8042444 <TIM_Base_SetConfig+0x144>)
 80423a6:	4293      	cmp	r3, r2
 80423a8:	d003      	beq.n	80423b2 <TIM_Base_SetConfig+0xb2>
 80423aa:	687b      	ldr	r3, [r7, #4]
 80423ac:	4a26      	ldr	r2, [pc, #152]	@ (8042448 <TIM_Base_SetConfig+0x148>)
 80423ae:	4293      	cmp	r3, r2
 80423b0:	d108      	bne.n	80423c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80423b2:	68fb      	ldr	r3, [r7, #12]
 80423b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80423b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80423ba:	683b      	ldr	r3, [r7, #0]
 80423bc:	68db      	ldr	r3, [r3, #12]
 80423be:	68fa      	ldr	r2, [r7, #12]
 80423c0:	4313      	orrs	r3, r2
 80423c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80423c4:	68fb      	ldr	r3, [r7, #12]
 80423c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80423ca:	683b      	ldr	r3, [r7, #0]
 80423cc:	695b      	ldr	r3, [r3, #20]
 80423ce:	4313      	orrs	r3, r2
 80423d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80423d2:	683b      	ldr	r3, [r7, #0]
 80423d4:	689a      	ldr	r2, [r3, #8]
 80423d6:	687b      	ldr	r3, [r7, #4]
 80423d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80423da:	683b      	ldr	r3, [r7, #0]
 80423dc:	681a      	ldr	r2, [r3, #0]
 80423de:	687b      	ldr	r3, [r7, #4]
 80423e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80423e2:	687b      	ldr	r3, [r7, #4]
 80423e4:	4a0e      	ldr	r2, [pc, #56]	@ (8042420 <TIM_Base_SetConfig+0x120>)
 80423e6:	4293      	cmp	r3, r2
 80423e8:	d003      	beq.n	80423f2 <TIM_Base_SetConfig+0xf2>
 80423ea:	687b      	ldr	r3, [r7, #4]
 80423ec:	4a10      	ldr	r2, [pc, #64]	@ (8042430 <TIM_Base_SetConfig+0x130>)
 80423ee:	4293      	cmp	r3, r2
 80423f0:	d103      	bne.n	80423fa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80423f2:	683b      	ldr	r3, [r7, #0]
 80423f4:	691a      	ldr	r2, [r3, #16]
 80423f6:	687b      	ldr	r3, [r7, #4]
 80423f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80423fa:	687b      	ldr	r3, [r7, #4]
 80423fc:	681b      	ldr	r3, [r3, #0]
 80423fe:	f043 0204 	orr.w	r2, r3, #4
 8042402:	687b      	ldr	r3, [r7, #4]
 8042404:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8042406:	687b      	ldr	r3, [r7, #4]
 8042408:	2201      	movs	r2, #1
 804240a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 804240c:	687b      	ldr	r3, [r7, #4]
 804240e:	68fa      	ldr	r2, [r7, #12]
 8042410:	601a      	str	r2, [r3, #0]
}
 8042412:	bf00      	nop
 8042414:	3714      	adds	r7, #20
 8042416:	46bd      	mov	sp, r7
 8042418:	f85d 7b04 	ldr.w	r7, [sp], #4
 804241c:	4770      	bx	lr
 804241e:	bf00      	nop
 8042420:	40010000 	.word	0x40010000
 8042424:	40000400 	.word	0x40000400
 8042428:	40000800 	.word	0x40000800
 804242c:	40000c00 	.word	0x40000c00
 8042430:	40010400 	.word	0x40010400
 8042434:	40014000 	.word	0x40014000
 8042438:	40014400 	.word	0x40014400
 804243c:	40014800 	.word	0x40014800
 8042440:	40001800 	.word	0x40001800
 8042444:	40001c00 	.word	0x40001c00
 8042448:	40002000 	.word	0x40002000

0804244c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 804244c:	b480      	push	{r7}
 804244e:	b087      	sub	sp, #28
 8042450:	af00      	add	r7, sp, #0
 8042452:	60f8      	str	r0, [r7, #12]
 8042454:	60b9      	str	r1, [r7, #8]
 8042456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8042458:	68fb      	ldr	r3, [r7, #12]
 804245a:	6a1b      	ldr	r3, [r3, #32]
 804245c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 804245e:	68fb      	ldr	r3, [r7, #12]
 8042460:	6a1b      	ldr	r3, [r3, #32]
 8042462:	f023 0201 	bic.w	r2, r3, #1
 8042466:	68fb      	ldr	r3, [r7, #12]
 8042468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 804246a:	68fb      	ldr	r3, [r7, #12]
 804246c:	699b      	ldr	r3, [r3, #24]
 804246e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8042470:	693b      	ldr	r3, [r7, #16]
 8042472:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8042476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8042478:	687b      	ldr	r3, [r7, #4]
 804247a:	011b      	lsls	r3, r3, #4
 804247c:	693a      	ldr	r2, [r7, #16]
 804247e:	4313      	orrs	r3, r2
 8042480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8042482:	697b      	ldr	r3, [r7, #20]
 8042484:	f023 030a 	bic.w	r3, r3, #10
 8042488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 804248a:	697a      	ldr	r2, [r7, #20]
 804248c:	68bb      	ldr	r3, [r7, #8]
 804248e:	4313      	orrs	r3, r2
 8042490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8042492:	68fb      	ldr	r3, [r7, #12]
 8042494:	693a      	ldr	r2, [r7, #16]
 8042496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8042498:	68fb      	ldr	r3, [r7, #12]
 804249a:	697a      	ldr	r2, [r7, #20]
 804249c:	621a      	str	r2, [r3, #32]
}
 804249e:	bf00      	nop
 80424a0:	371c      	adds	r7, #28
 80424a2:	46bd      	mov	sp, r7
 80424a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80424a8:	4770      	bx	lr

080424aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80424aa:	b480      	push	{r7}
 80424ac:	b087      	sub	sp, #28
 80424ae:	af00      	add	r7, sp, #0
 80424b0:	60f8      	str	r0, [r7, #12]
 80424b2:	60b9      	str	r1, [r7, #8]
 80424b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80424b6:	68fb      	ldr	r3, [r7, #12]
 80424b8:	6a1b      	ldr	r3, [r3, #32]
 80424ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80424bc:	68fb      	ldr	r3, [r7, #12]
 80424be:	6a1b      	ldr	r3, [r3, #32]
 80424c0:	f023 0210 	bic.w	r2, r3, #16
 80424c4:	68fb      	ldr	r3, [r7, #12]
 80424c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80424c8:	68fb      	ldr	r3, [r7, #12]
 80424ca:	699b      	ldr	r3, [r3, #24]
 80424cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80424ce:	693b      	ldr	r3, [r7, #16]
 80424d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80424d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80424d6:	687b      	ldr	r3, [r7, #4]
 80424d8:	031b      	lsls	r3, r3, #12
 80424da:	693a      	ldr	r2, [r7, #16]
 80424dc:	4313      	orrs	r3, r2
 80424de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80424e0:	697b      	ldr	r3, [r7, #20]
 80424e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80424e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80424e8:	68bb      	ldr	r3, [r7, #8]
 80424ea:	011b      	lsls	r3, r3, #4
 80424ec:	697a      	ldr	r2, [r7, #20]
 80424ee:	4313      	orrs	r3, r2
 80424f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80424f2:	68fb      	ldr	r3, [r7, #12]
 80424f4:	693a      	ldr	r2, [r7, #16]
 80424f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80424f8:	68fb      	ldr	r3, [r7, #12]
 80424fa:	697a      	ldr	r2, [r7, #20]
 80424fc:	621a      	str	r2, [r3, #32]
}
 80424fe:	bf00      	nop
 8042500:	371c      	adds	r7, #28
 8042502:	46bd      	mov	sp, r7
 8042504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042508:	4770      	bx	lr

0804250a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 804250a:	b480      	push	{r7}
 804250c:	b085      	sub	sp, #20
 804250e:	af00      	add	r7, sp, #0
 8042510:	6078      	str	r0, [r7, #4]
 8042512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8042514:	687b      	ldr	r3, [r7, #4]
 8042516:	689b      	ldr	r3, [r3, #8]
 8042518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 804251a:	68fb      	ldr	r3, [r7, #12]
 804251c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8042520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8042522:	683a      	ldr	r2, [r7, #0]
 8042524:	68fb      	ldr	r3, [r7, #12]
 8042526:	4313      	orrs	r3, r2
 8042528:	f043 0307 	orr.w	r3, r3, #7
 804252c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 804252e:	687b      	ldr	r3, [r7, #4]
 8042530:	68fa      	ldr	r2, [r7, #12]
 8042532:	609a      	str	r2, [r3, #8]
}
 8042534:	bf00      	nop
 8042536:	3714      	adds	r7, #20
 8042538:	46bd      	mov	sp, r7
 804253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804253e:	4770      	bx	lr

08042540 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8042540:	b480      	push	{r7}
 8042542:	b087      	sub	sp, #28
 8042544:	af00      	add	r7, sp, #0
 8042546:	60f8      	str	r0, [r7, #12]
 8042548:	60b9      	str	r1, [r7, #8]
 804254a:	607a      	str	r2, [r7, #4]
 804254c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 804254e:	68fb      	ldr	r3, [r7, #12]
 8042550:	689b      	ldr	r3, [r3, #8]
 8042552:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8042554:	697b      	ldr	r3, [r7, #20]
 8042556:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 804255a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 804255c:	683b      	ldr	r3, [r7, #0]
 804255e:	021a      	lsls	r2, r3, #8
 8042560:	687b      	ldr	r3, [r7, #4]
 8042562:	431a      	orrs	r2, r3
 8042564:	68bb      	ldr	r3, [r7, #8]
 8042566:	4313      	orrs	r3, r2
 8042568:	697a      	ldr	r2, [r7, #20]
 804256a:	4313      	orrs	r3, r2
 804256c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 804256e:	68fb      	ldr	r3, [r7, #12]
 8042570:	697a      	ldr	r2, [r7, #20]
 8042572:	609a      	str	r2, [r3, #8]
}
 8042574:	bf00      	nop
 8042576:	371c      	adds	r7, #28
 8042578:	46bd      	mov	sp, r7
 804257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804257e:	4770      	bx	lr

08042580 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8042580:	b480      	push	{r7}
 8042582:	b085      	sub	sp, #20
 8042584:	af00      	add	r7, sp, #0
 8042586:	6078      	str	r0, [r7, #4]
 8042588:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 804258a:	687b      	ldr	r3, [r7, #4]
 804258c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8042590:	2b01      	cmp	r3, #1
 8042592:	d101      	bne.n	8042598 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8042594:	2302      	movs	r3, #2
 8042596:	e05a      	b.n	804264e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8042598:	687b      	ldr	r3, [r7, #4]
 804259a:	2201      	movs	r2, #1
 804259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80425a0:	687b      	ldr	r3, [r7, #4]
 80425a2:	2202      	movs	r2, #2
 80425a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80425a8:	687b      	ldr	r3, [r7, #4]
 80425aa:	681b      	ldr	r3, [r3, #0]
 80425ac:	685b      	ldr	r3, [r3, #4]
 80425ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80425b0:	687b      	ldr	r3, [r7, #4]
 80425b2:	681b      	ldr	r3, [r3, #0]
 80425b4:	689b      	ldr	r3, [r3, #8]
 80425b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80425b8:	68fb      	ldr	r3, [r7, #12]
 80425ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80425be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80425c0:	683b      	ldr	r3, [r7, #0]
 80425c2:	681b      	ldr	r3, [r3, #0]
 80425c4:	68fa      	ldr	r2, [r7, #12]
 80425c6:	4313      	orrs	r3, r2
 80425c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80425ca:	687b      	ldr	r3, [r7, #4]
 80425cc:	681b      	ldr	r3, [r3, #0]
 80425ce:	68fa      	ldr	r2, [r7, #12]
 80425d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80425d2:	687b      	ldr	r3, [r7, #4]
 80425d4:	681b      	ldr	r3, [r3, #0]
 80425d6:	4a21      	ldr	r2, [pc, #132]	@ (804265c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80425d8:	4293      	cmp	r3, r2
 80425da:	d022      	beq.n	8042622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80425dc:	687b      	ldr	r3, [r7, #4]
 80425de:	681b      	ldr	r3, [r3, #0]
 80425e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80425e4:	d01d      	beq.n	8042622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80425e6:	687b      	ldr	r3, [r7, #4]
 80425e8:	681b      	ldr	r3, [r3, #0]
 80425ea:	4a1d      	ldr	r2, [pc, #116]	@ (8042660 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80425ec:	4293      	cmp	r3, r2
 80425ee:	d018      	beq.n	8042622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80425f0:	687b      	ldr	r3, [r7, #4]
 80425f2:	681b      	ldr	r3, [r3, #0]
 80425f4:	4a1b      	ldr	r2, [pc, #108]	@ (8042664 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80425f6:	4293      	cmp	r3, r2
 80425f8:	d013      	beq.n	8042622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80425fa:	687b      	ldr	r3, [r7, #4]
 80425fc:	681b      	ldr	r3, [r3, #0]
 80425fe:	4a1a      	ldr	r2, [pc, #104]	@ (8042668 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8042600:	4293      	cmp	r3, r2
 8042602:	d00e      	beq.n	8042622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8042604:	687b      	ldr	r3, [r7, #4]
 8042606:	681b      	ldr	r3, [r3, #0]
 8042608:	4a18      	ldr	r2, [pc, #96]	@ (804266c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 804260a:	4293      	cmp	r3, r2
 804260c:	d009      	beq.n	8042622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 804260e:	687b      	ldr	r3, [r7, #4]
 8042610:	681b      	ldr	r3, [r3, #0]
 8042612:	4a17      	ldr	r2, [pc, #92]	@ (8042670 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8042614:	4293      	cmp	r3, r2
 8042616:	d004      	beq.n	8042622 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8042618:	687b      	ldr	r3, [r7, #4]
 804261a:	681b      	ldr	r3, [r3, #0]
 804261c:	4a15      	ldr	r2, [pc, #84]	@ (8042674 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 804261e:	4293      	cmp	r3, r2
 8042620:	d10c      	bne.n	804263c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8042622:	68bb      	ldr	r3, [r7, #8]
 8042624:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8042628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 804262a:	683b      	ldr	r3, [r7, #0]
 804262c:	685b      	ldr	r3, [r3, #4]
 804262e:	68ba      	ldr	r2, [r7, #8]
 8042630:	4313      	orrs	r3, r2
 8042632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8042634:	687b      	ldr	r3, [r7, #4]
 8042636:	681b      	ldr	r3, [r3, #0]
 8042638:	68ba      	ldr	r2, [r7, #8]
 804263a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 804263c:	687b      	ldr	r3, [r7, #4]
 804263e:	2201      	movs	r2, #1
 8042640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8042644:	687b      	ldr	r3, [r7, #4]
 8042646:	2200      	movs	r2, #0
 8042648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 804264c:	2300      	movs	r3, #0
}
 804264e:	4618      	mov	r0, r3
 8042650:	3714      	adds	r7, #20
 8042652:	46bd      	mov	sp, r7
 8042654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042658:	4770      	bx	lr
 804265a:	bf00      	nop
 804265c:	40010000 	.word	0x40010000
 8042660:	40000400 	.word	0x40000400
 8042664:	40000800 	.word	0x40000800
 8042668:	40000c00 	.word	0x40000c00
 804266c:	40010400 	.word	0x40010400
 8042670:	40014000 	.word	0x40014000
 8042674:	40001800 	.word	0x40001800

08042678 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8042678:	b480      	push	{r7}
 804267a:	b083      	sub	sp, #12
 804267c:	af00      	add	r7, sp, #0
 804267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8042680:	bf00      	nop
 8042682:	370c      	adds	r7, #12
 8042684:	46bd      	mov	sp, r7
 8042686:	f85d 7b04 	ldr.w	r7, [sp], #4
 804268a:	4770      	bx	lr

0804268c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 804268c:	b480      	push	{r7}
 804268e:	b083      	sub	sp, #12
 8042690:	af00      	add	r7, sp, #0
 8042692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8042694:	bf00      	nop
 8042696:	370c      	adds	r7, #12
 8042698:	46bd      	mov	sp, r7
 804269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804269e:	4770      	bx	lr

080426a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80426a0:	b580      	push	{r7, lr}
 80426a2:	b082      	sub	sp, #8
 80426a4:	af00      	add	r7, sp, #0
 80426a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80426a8:	687b      	ldr	r3, [r7, #4]
 80426aa:	2b00      	cmp	r3, #0
 80426ac:	d101      	bne.n	80426b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80426ae:	2301      	movs	r3, #1
 80426b0:	e042      	b.n	8042738 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80426b2:	687b      	ldr	r3, [r7, #4]
 80426b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80426b8:	b2db      	uxtb	r3, r3
 80426ba:	2b00      	cmp	r3, #0
 80426bc:	d106      	bne.n	80426cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80426be:	687b      	ldr	r3, [r7, #4]
 80426c0:	2200      	movs	r2, #0
 80426c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80426c6:	6878      	ldr	r0, [r7, #4]
 80426c8:	f7fc fd5c 	bl	803f184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80426cc:	687b      	ldr	r3, [r7, #4]
 80426ce:	2224      	movs	r2, #36	@ 0x24
 80426d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80426d4:	687b      	ldr	r3, [r7, #4]
 80426d6:	681b      	ldr	r3, [r3, #0]
 80426d8:	68da      	ldr	r2, [r3, #12]
 80426da:	687b      	ldr	r3, [r7, #4]
 80426dc:	681b      	ldr	r3, [r3, #0]
 80426de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80426e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80426e4:	6878      	ldr	r0, [r7, #4]
 80426e6:	f000 ff81 	bl	80435ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80426ea:	687b      	ldr	r3, [r7, #4]
 80426ec:	681b      	ldr	r3, [r3, #0]
 80426ee:	691a      	ldr	r2, [r3, #16]
 80426f0:	687b      	ldr	r3, [r7, #4]
 80426f2:	681b      	ldr	r3, [r3, #0]
 80426f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80426f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80426fa:	687b      	ldr	r3, [r7, #4]
 80426fc:	681b      	ldr	r3, [r3, #0]
 80426fe:	695a      	ldr	r2, [r3, #20]
 8042700:	687b      	ldr	r3, [r7, #4]
 8042702:	681b      	ldr	r3, [r3, #0]
 8042704:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8042708:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 804270a:	687b      	ldr	r3, [r7, #4]
 804270c:	681b      	ldr	r3, [r3, #0]
 804270e:	68da      	ldr	r2, [r3, #12]
 8042710:	687b      	ldr	r3, [r7, #4]
 8042712:	681b      	ldr	r3, [r3, #0]
 8042714:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8042718:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804271a:	687b      	ldr	r3, [r7, #4]
 804271c:	2200      	movs	r2, #0
 804271e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8042720:	687b      	ldr	r3, [r7, #4]
 8042722:	2220      	movs	r2, #32
 8042724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8042728:	687b      	ldr	r3, [r7, #4]
 804272a:	2220      	movs	r2, #32
 804272c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8042730:	687b      	ldr	r3, [r7, #4]
 8042732:	2200      	movs	r2, #0
 8042734:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8042736:	2300      	movs	r3, #0
}
 8042738:	4618      	mov	r0, r3
 804273a:	3708      	adds	r7, #8
 804273c:	46bd      	mov	sp, r7
 804273e:	bd80      	pop	{r7, pc}

08042740 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8042740:	b480      	push	{r7}
 8042742:	b085      	sub	sp, #20
 8042744:	af00      	add	r7, sp, #0
 8042746:	60f8      	str	r0, [r7, #12]
 8042748:	60b9      	str	r1, [r7, #8]
 804274a:	4613      	mov	r3, r2
 804274c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 804274e:	68fb      	ldr	r3, [r7, #12]
 8042750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8042754:	b2db      	uxtb	r3, r3
 8042756:	2b20      	cmp	r3, #32
 8042758:	d121      	bne.n	804279e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 804275a:	68bb      	ldr	r3, [r7, #8]
 804275c:	2b00      	cmp	r3, #0
 804275e:	d002      	beq.n	8042766 <HAL_UART_Transmit_IT+0x26>
 8042760:	88fb      	ldrh	r3, [r7, #6]
 8042762:	2b00      	cmp	r3, #0
 8042764:	d101      	bne.n	804276a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8042766:	2301      	movs	r3, #1
 8042768:	e01a      	b.n	80427a0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 804276a:	68fb      	ldr	r3, [r7, #12]
 804276c:	68ba      	ldr	r2, [r7, #8]
 804276e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8042770:	68fb      	ldr	r3, [r7, #12]
 8042772:	88fa      	ldrh	r2, [r7, #6]
 8042774:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8042776:	68fb      	ldr	r3, [r7, #12]
 8042778:	88fa      	ldrh	r2, [r7, #6]
 804277a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804277c:	68fb      	ldr	r3, [r7, #12]
 804277e:	2200      	movs	r2, #0
 8042780:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8042782:	68fb      	ldr	r3, [r7, #12]
 8042784:	2221      	movs	r2, #33	@ 0x21
 8042786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 804278a:	68fb      	ldr	r3, [r7, #12]
 804278c:	681b      	ldr	r3, [r3, #0]
 804278e:	68da      	ldr	r2, [r3, #12]
 8042790:	68fb      	ldr	r3, [r7, #12]
 8042792:	681b      	ldr	r3, [r3, #0]
 8042794:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8042798:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 804279a:	2300      	movs	r3, #0
 804279c:	e000      	b.n	80427a0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 804279e:	2302      	movs	r3, #2
  }
}
 80427a0:	4618      	mov	r0, r3
 80427a2:	3714      	adds	r7, #20
 80427a4:	46bd      	mov	sp, r7
 80427a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427aa:	4770      	bx	lr

080427ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80427ac:	b580      	push	{r7, lr}
 80427ae:	b084      	sub	sp, #16
 80427b0:	af00      	add	r7, sp, #0
 80427b2:	60f8      	str	r0, [r7, #12]
 80427b4:	60b9      	str	r1, [r7, #8]
 80427b6:	4613      	mov	r3, r2
 80427b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80427ba:	68fb      	ldr	r3, [r7, #12]
 80427bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80427c0:	b2db      	uxtb	r3, r3
 80427c2:	2b20      	cmp	r3, #32
 80427c4:	d112      	bne.n	80427ec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80427c6:	68bb      	ldr	r3, [r7, #8]
 80427c8:	2b00      	cmp	r3, #0
 80427ca:	d002      	beq.n	80427d2 <HAL_UART_Receive_IT+0x26>
 80427cc:	88fb      	ldrh	r3, [r7, #6]
 80427ce:	2b00      	cmp	r3, #0
 80427d0:	d101      	bne.n	80427d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80427d2:	2301      	movs	r3, #1
 80427d4:	e00b      	b.n	80427ee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80427d6:	68fb      	ldr	r3, [r7, #12]
 80427d8:	2200      	movs	r2, #0
 80427da:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80427dc:	88fb      	ldrh	r3, [r7, #6]
 80427de:	461a      	mov	r2, r3
 80427e0:	68b9      	ldr	r1, [r7, #8]
 80427e2:	68f8      	ldr	r0, [r7, #12]
 80427e4:	f000 fcb6 	bl	8043154 <UART_Start_Receive_IT>
 80427e8:	4603      	mov	r3, r0
 80427ea:	e000      	b.n	80427ee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80427ec:	2302      	movs	r3, #2
  }
}
 80427ee:	4618      	mov	r0, r3
 80427f0:	3710      	adds	r7, #16
 80427f2:	46bd      	mov	sp, r7
 80427f4:	bd80      	pop	{r7, pc}
	...

080427f8 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80427f8:	b580      	push	{r7, lr}
 80427fa:	b0a2      	sub	sp, #136	@ 0x88
 80427fc:	af00      	add	r7, sp, #0
 80427fe:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8042800:	2301      	movs	r3, #1
 8042802:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8042806:	687b      	ldr	r3, [r7, #4]
 8042808:	681b      	ldr	r3, [r3, #0]
 804280a:	330c      	adds	r3, #12
 804280c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804280e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8042810:	e853 3f00 	ldrex	r3, [r3]
 8042814:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8042816:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8042818:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 804281c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8042820:	687b      	ldr	r3, [r7, #4]
 8042822:	681b      	ldr	r3, [r3, #0]
 8042824:	330c      	adds	r3, #12
 8042826:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 804282a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 804282c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804282e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8042830:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8042832:	e841 2300 	strex	r3, r2, [r1]
 8042836:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8042838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 804283a:	2b00      	cmp	r3, #0
 804283c:	d1e3      	bne.n	8042806 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804283e:	687b      	ldr	r3, [r7, #4]
 8042840:	681b      	ldr	r3, [r3, #0]
 8042842:	3314      	adds	r3, #20
 8042844:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042848:	e853 3f00 	ldrex	r3, [r3]
 804284c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 804284e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8042850:	f023 0301 	bic.w	r3, r3, #1
 8042854:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8042856:	687b      	ldr	r3, [r7, #4]
 8042858:	681b      	ldr	r3, [r3, #0]
 804285a:	3314      	adds	r3, #20
 804285c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 804285e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8042860:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042862:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8042864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8042866:	e841 2300 	strex	r3, r2, [r1]
 804286a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 804286c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 804286e:	2b00      	cmp	r3, #0
 8042870:	d1e5      	bne.n	804283e <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042872:	687b      	ldr	r3, [r7, #4]
 8042874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042876:	2b01      	cmp	r3, #1
 8042878:	d119      	bne.n	80428ae <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 804287a:	687b      	ldr	r3, [r7, #4]
 804287c:	681b      	ldr	r3, [r3, #0]
 804287e:	330c      	adds	r3, #12
 8042880:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042884:	e853 3f00 	ldrex	r3, [r3]
 8042888:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 804288a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 804288c:	f023 0310 	bic.w	r3, r3, #16
 8042890:	67bb      	str	r3, [r7, #120]	@ 0x78
 8042892:	687b      	ldr	r3, [r7, #4]
 8042894:	681b      	ldr	r3, [r3, #0]
 8042896:	330c      	adds	r3, #12
 8042898:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 804289a:	647a      	str	r2, [r7, #68]	@ 0x44
 804289c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804289e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80428a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80428a2:	e841 2300 	strex	r3, r2, [r1]
 80428a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80428a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80428aa:	2b00      	cmp	r3, #0
 80428ac:	d1e5      	bne.n	804287a <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80428ae:	687b      	ldr	r3, [r7, #4]
 80428b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80428b2:	2b00      	cmp	r3, #0
 80428b4:	d00f      	beq.n	80428d6 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80428b6:	687b      	ldr	r3, [r7, #4]
 80428b8:	681b      	ldr	r3, [r3, #0]
 80428ba:	695b      	ldr	r3, [r3, #20]
 80428bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80428c0:	2b80      	cmp	r3, #128	@ 0x80
 80428c2:	d104      	bne.n	80428ce <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80428c4:	687b      	ldr	r3, [r7, #4]
 80428c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80428c8:	4a53      	ldr	r2, [pc, #332]	@ (8042a18 <HAL_UART_Abort_IT+0x220>)
 80428ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80428cc:	e003      	b.n	80428d6 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80428ce:	687b      	ldr	r3, [r7, #4]
 80428d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80428d2:	2200      	movs	r2, #0
 80428d4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80428d6:	687b      	ldr	r3, [r7, #4]
 80428d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80428da:	2b00      	cmp	r3, #0
 80428dc:	d00f      	beq.n	80428fe <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80428de:	687b      	ldr	r3, [r7, #4]
 80428e0:	681b      	ldr	r3, [r3, #0]
 80428e2:	695b      	ldr	r3, [r3, #20]
 80428e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80428e8:	2b40      	cmp	r3, #64	@ 0x40
 80428ea:	d104      	bne.n	80428f6 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80428ec:	687b      	ldr	r3, [r7, #4]
 80428ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80428f0:	4a4a      	ldr	r2, [pc, #296]	@ (8042a1c <HAL_UART_Abort_IT+0x224>)
 80428f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80428f4:	e003      	b.n	80428fe <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80428f6:	687b      	ldr	r3, [r7, #4]
 80428f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80428fa:	2200      	movs	r2, #0
 80428fc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80428fe:	687b      	ldr	r3, [r7, #4]
 8042900:	681b      	ldr	r3, [r3, #0]
 8042902:	695b      	ldr	r3, [r3, #20]
 8042904:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8042908:	2b80      	cmp	r3, #128	@ 0x80
 804290a:	d12d      	bne.n	8042968 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 804290c:	687b      	ldr	r3, [r7, #4]
 804290e:	681b      	ldr	r3, [r3, #0]
 8042910:	3314      	adds	r3, #20
 8042912:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042916:	e853 3f00 	ldrex	r3, [r3]
 804291a:	623b      	str	r3, [r7, #32]
   return(result);
 804291c:	6a3b      	ldr	r3, [r7, #32]
 804291e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8042922:	677b      	str	r3, [r7, #116]	@ 0x74
 8042924:	687b      	ldr	r3, [r7, #4]
 8042926:	681b      	ldr	r3, [r3, #0]
 8042928:	3314      	adds	r3, #20
 804292a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 804292c:	633a      	str	r2, [r7, #48]	@ 0x30
 804292e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042930:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8042932:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8042934:	e841 2300 	strex	r3, r2, [r1]
 8042938:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 804293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804293c:	2b00      	cmp	r3, #0
 804293e:	d1e5      	bne.n	804290c <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8042940:	687b      	ldr	r3, [r7, #4]
 8042942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8042944:	2b00      	cmp	r3, #0
 8042946:	d00f      	beq.n	8042968 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8042948:	687b      	ldr	r3, [r7, #4]
 804294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804294c:	4618      	mov	r0, r3
 804294e:	f7fd fb09 	bl	803ff64 <HAL_DMA_Abort_IT>
 8042952:	4603      	mov	r3, r0
 8042954:	2b00      	cmp	r3, #0
 8042956:	d004      	beq.n	8042962 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8042958:	687b      	ldr	r3, [r7, #4]
 804295a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804295c:	2200      	movs	r2, #0
 804295e:	651a      	str	r2, [r3, #80]	@ 0x50
 8042960:	e002      	b.n	8042968 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8042962:	2300      	movs	r3, #0
 8042964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042968:	687b      	ldr	r3, [r7, #4]
 804296a:	681b      	ldr	r3, [r3, #0]
 804296c:	695b      	ldr	r3, [r3, #20]
 804296e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8042972:	2b40      	cmp	r3, #64	@ 0x40
 8042974:	d130      	bne.n	80429d8 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8042976:	687b      	ldr	r3, [r7, #4]
 8042978:	681b      	ldr	r3, [r3, #0]
 804297a:	3314      	adds	r3, #20
 804297c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804297e:	693b      	ldr	r3, [r7, #16]
 8042980:	e853 3f00 	ldrex	r3, [r3]
 8042984:	60fb      	str	r3, [r7, #12]
   return(result);
 8042986:	68fb      	ldr	r3, [r7, #12]
 8042988:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 804298c:	673b      	str	r3, [r7, #112]	@ 0x70
 804298e:	687b      	ldr	r3, [r7, #4]
 8042990:	681b      	ldr	r3, [r3, #0]
 8042992:	3314      	adds	r3, #20
 8042994:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8042996:	61fa      	str	r2, [r7, #28]
 8042998:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804299a:	69b9      	ldr	r1, [r7, #24]
 804299c:	69fa      	ldr	r2, [r7, #28]
 804299e:	e841 2300 	strex	r3, r2, [r1]
 80429a2:	617b      	str	r3, [r7, #20]
   return(result);
 80429a4:	697b      	ldr	r3, [r7, #20]
 80429a6:	2b00      	cmp	r3, #0
 80429a8:	d1e5      	bne.n	8042976 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80429aa:	687b      	ldr	r3, [r7, #4]
 80429ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80429ae:	2b00      	cmp	r3, #0
 80429b0:	d012      	beq.n	80429d8 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80429b2:	687b      	ldr	r3, [r7, #4]
 80429b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80429b6:	4618      	mov	r0, r3
 80429b8:	f7fd fad4 	bl	803ff64 <HAL_DMA_Abort_IT>
 80429bc:	4603      	mov	r3, r0
 80429be:	2b00      	cmp	r3, #0
 80429c0:	d007      	beq.n	80429d2 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80429c2:	687b      	ldr	r3, [r7, #4]
 80429c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80429c6:	2200      	movs	r2, #0
 80429c8:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 80429ca:	2301      	movs	r3, #1
 80429cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80429d0:	e002      	b.n	80429d8 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80429d2:	2300      	movs	r3, #0
 80429d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80429d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80429dc:	2b01      	cmp	r3, #1
 80429de:	d116      	bne.n	8042a0e <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80429e0:	687b      	ldr	r3, [r7, #4]
 80429e2:	2200      	movs	r2, #0
 80429e4:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 80429e6:	687b      	ldr	r3, [r7, #4]
 80429e8:	2200      	movs	r2, #0
 80429ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80429ec:	687b      	ldr	r3, [r7, #4]
 80429ee:	2200      	movs	r2, #0
 80429f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80429f2:	687b      	ldr	r3, [r7, #4]
 80429f4:	2220      	movs	r2, #32
 80429f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80429fa:	687b      	ldr	r3, [r7, #4]
 80429fc:	2220      	movs	r2, #32
 80429fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042a02:	687b      	ldr	r3, [r7, #4]
 8042a04:	2200      	movs	r2, #0
 8042a06:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 8042a08:	6878      	ldr	r0, [r7, #4]
 8042a0a:	f000 fb83 	bl	8043114 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8042a0e:	2300      	movs	r3, #0
}
 8042a10:	4618      	mov	r0, r3
 8042a12:	3788      	adds	r7, #136	@ 0x88
 8042a14:	46bd      	mov	sp, r7
 8042a16:	bd80      	pop	{r7, pc}
 8042a18:	080432b1 	.word	0x080432b1
 8042a1c:	08043311 	.word	0x08043311

08042a20 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8042a20:	b580      	push	{r7, lr}
 8042a22:	b09a      	sub	sp, #104	@ 0x68
 8042a24:	af00      	add	r7, sp, #0
 8042a26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042a28:	687b      	ldr	r3, [r7, #4]
 8042a2a:	681b      	ldr	r3, [r3, #0]
 8042a2c:	330c      	adds	r3, #12
 8042a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042a30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8042a32:	e853 3f00 	ldrex	r3, [r3]
 8042a36:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8042a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8042a3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8042a3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8042a40:	687b      	ldr	r3, [r7, #4]
 8042a42:	681b      	ldr	r3, [r3, #0]
 8042a44:	330c      	adds	r3, #12
 8042a46:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8042a48:	657a      	str	r2, [r7, #84]	@ 0x54
 8042a4a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042a4c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8042a4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8042a50:	e841 2300 	strex	r3, r2, [r1]
 8042a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8042a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042a58:	2b00      	cmp	r3, #0
 8042a5a:	d1e5      	bne.n	8042a28 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042a5c:	687b      	ldr	r3, [r7, #4]
 8042a5e:	681b      	ldr	r3, [r3, #0]
 8042a60:	3314      	adds	r3, #20
 8042a62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8042a66:	e853 3f00 	ldrex	r3, [r3]
 8042a6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8042a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8042a6e:	f023 0301 	bic.w	r3, r3, #1
 8042a72:	663b      	str	r3, [r7, #96]	@ 0x60
 8042a74:	687b      	ldr	r3, [r7, #4]
 8042a76:	681b      	ldr	r3, [r3, #0]
 8042a78:	3314      	adds	r3, #20
 8042a7a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8042a7c:	643a      	str	r2, [r7, #64]	@ 0x40
 8042a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042a80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8042a82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8042a84:	e841 2300 	strex	r3, r2, [r1]
 8042a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8042a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042a8c:	2b00      	cmp	r3, #0
 8042a8e:	d1e5      	bne.n	8042a5c <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042a90:	687b      	ldr	r3, [r7, #4]
 8042a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042a94:	2b01      	cmp	r3, #1
 8042a96:	d119      	bne.n	8042acc <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8042a98:	687b      	ldr	r3, [r7, #4]
 8042a9a:	681b      	ldr	r3, [r3, #0]
 8042a9c:	330c      	adds	r3, #12
 8042a9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042aa0:	6a3b      	ldr	r3, [r7, #32]
 8042aa2:	e853 3f00 	ldrex	r3, [r3]
 8042aa6:	61fb      	str	r3, [r7, #28]
   return(result);
 8042aa8:	69fb      	ldr	r3, [r7, #28]
 8042aaa:	f023 0310 	bic.w	r3, r3, #16
 8042aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8042ab0:	687b      	ldr	r3, [r7, #4]
 8042ab2:	681b      	ldr	r3, [r3, #0]
 8042ab4:	330c      	adds	r3, #12
 8042ab6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8042ab8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8042aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042abc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8042abe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8042ac0:	e841 2300 	strex	r3, r2, [r1]
 8042ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8042ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8042ac8:	2b00      	cmp	r3, #0
 8042aca:	d1e5      	bne.n	8042a98 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042acc:	687b      	ldr	r3, [r7, #4]
 8042ace:	681b      	ldr	r3, [r3, #0]
 8042ad0:	695b      	ldr	r3, [r3, #20]
 8042ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8042ad6:	2b40      	cmp	r3, #64	@ 0x40
 8042ad8:	d13f      	bne.n	8042b5a <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8042ada:	687b      	ldr	r3, [r7, #4]
 8042adc:	681b      	ldr	r3, [r3, #0]
 8042ade:	3314      	adds	r3, #20
 8042ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042ae2:	68fb      	ldr	r3, [r7, #12]
 8042ae4:	e853 3f00 	ldrex	r3, [r3]
 8042ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8042aea:	68bb      	ldr	r3, [r7, #8]
 8042aec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8042af0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8042af2:	687b      	ldr	r3, [r7, #4]
 8042af4:	681b      	ldr	r3, [r3, #0]
 8042af6:	3314      	adds	r3, #20
 8042af8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8042afa:	61ba      	str	r2, [r7, #24]
 8042afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042afe:	6979      	ldr	r1, [r7, #20]
 8042b00:	69ba      	ldr	r2, [r7, #24]
 8042b02:	e841 2300 	strex	r3, r2, [r1]
 8042b06:	613b      	str	r3, [r7, #16]
   return(result);
 8042b08:	693b      	ldr	r3, [r7, #16]
 8042b0a:	2b00      	cmp	r3, #0
 8042b0c:	d1e5      	bne.n	8042ada <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8042b0e:	687b      	ldr	r3, [r7, #4]
 8042b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042b12:	2b00      	cmp	r3, #0
 8042b14:	d013      	beq.n	8042b3e <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8042b16:	687b      	ldr	r3, [r7, #4]
 8042b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042b1a:	4a19      	ldr	r2, [pc, #100]	@ (8042b80 <HAL_UART_AbortReceive_IT+0x160>)
 8042b1c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8042b1e:	687b      	ldr	r3, [r7, #4]
 8042b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042b22:	4618      	mov	r0, r3
 8042b24:	f7fd fa1e 	bl	803ff64 <HAL_DMA_Abort_IT>
 8042b28:	4603      	mov	r3, r0
 8042b2a:	2b00      	cmp	r3, #0
 8042b2c:	d022      	beq.n	8042b74 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8042b2e:	687b      	ldr	r3, [r7, #4]
 8042b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042b32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8042b34:	687a      	ldr	r2, [r7, #4]
 8042b36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8042b38:	4610      	mov	r0, r2
 8042b3a:	4798      	blx	r3
 8042b3c:	e01a      	b.n	8042b74 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8042b3e:	687b      	ldr	r3, [r7, #4]
 8042b40:	2200      	movs	r2, #0
 8042b42:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8042b44:	687b      	ldr	r3, [r7, #4]
 8042b46:	2220      	movs	r2, #32
 8042b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042b4c:	687b      	ldr	r3, [r7, #4]
 8042b4e:	2200      	movs	r2, #0
 8042b50:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8042b52:	6878      	ldr	r0, [r7, #4]
 8042b54:	f000 fae8 	bl	8043128 <HAL_UART_AbortReceiveCpltCallback>
 8042b58:	e00c      	b.n	8042b74 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8042b5a:	687b      	ldr	r3, [r7, #4]
 8042b5c:	2200      	movs	r2, #0
 8042b5e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8042b60:	687b      	ldr	r3, [r7, #4]
 8042b62:	2220      	movs	r2, #32
 8042b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042b68:	687b      	ldr	r3, [r7, #4]
 8042b6a:	2200      	movs	r2, #0
 8042b6c:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8042b6e:	6878      	ldr	r0, [r7, #4]
 8042b70:	f000 fada 	bl	8043128 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8042b74:	2300      	movs	r3, #0
}
 8042b76:	4618      	mov	r0, r3
 8042b78:	3768      	adds	r7, #104	@ 0x68
 8042b7a:	46bd      	mov	sp, r7
 8042b7c:	bd80      	pop	{r7, pc}
 8042b7e:	bf00      	nop
 8042b80:	08043371 	.word	0x08043371

08042b84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8042b84:	b580      	push	{r7, lr}
 8042b86:	b0ba      	sub	sp, #232	@ 0xe8
 8042b88:	af00      	add	r7, sp, #0
 8042b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8042b8c:	687b      	ldr	r3, [r7, #4]
 8042b8e:	681b      	ldr	r3, [r3, #0]
 8042b90:	681b      	ldr	r3, [r3, #0]
 8042b92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8042b96:	687b      	ldr	r3, [r7, #4]
 8042b98:	681b      	ldr	r3, [r3, #0]
 8042b9a:	68db      	ldr	r3, [r3, #12]
 8042b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8042ba0:	687b      	ldr	r3, [r7, #4]
 8042ba2:	681b      	ldr	r3, [r3, #0]
 8042ba4:	695b      	ldr	r3, [r3, #20]
 8042ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8042baa:	2300      	movs	r3, #0
 8042bac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8042bb0:	2300      	movs	r3, #0
 8042bb2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8042bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8042bba:	f003 030f 	and.w	r3, r3, #15
 8042bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8042bc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8042bc6:	2b00      	cmp	r3, #0
 8042bc8:	d10f      	bne.n	8042bea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8042bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8042bce:	f003 0320 	and.w	r3, r3, #32
 8042bd2:	2b00      	cmp	r3, #0
 8042bd4:	d009      	beq.n	8042bea <HAL_UART_IRQHandler+0x66>
 8042bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8042bda:	f003 0320 	and.w	r3, r3, #32
 8042bde:	2b00      	cmp	r3, #0
 8042be0:	d003      	beq.n	8042bea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8042be2:	6878      	ldr	r0, [r7, #4]
 8042be4:	f000 fc44 	bl	8043470 <UART_Receive_IT>
      return;
 8042be8:	e273      	b.n	80430d2 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8042bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8042bee:	2b00      	cmp	r3, #0
 8042bf0:	f000 80de 	beq.w	8042db0 <HAL_UART_IRQHandler+0x22c>
 8042bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8042bf8:	f003 0301 	and.w	r3, r3, #1
 8042bfc:	2b00      	cmp	r3, #0
 8042bfe:	d106      	bne.n	8042c0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8042c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8042c04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8042c08:	2b00      	cmp	r3, #0
 8042c0a:	f000 80d1 	beq.w	8042db0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8042c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8042c12:	f003 0301 	and.w	r3, r3, #1
 8042c16:	2b00      	cmp	r3, #0
 8042c18:	d00b      	beq.n	8042c32 <HAL_UART_IRQHandler+0xae>
 8042c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8042c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8042c22:	2b00      	cmp	r3, #0
 8042c24:	d005      	beq.n	8042c32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8042c26:	687b      	ldr	r3, [r7, #4]
 8042c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8042c2a:	f043 0201 	orr.w	r2, r3, #1
 8042c2e:	687b      	ldr	r3, [r7, #4]
 8042c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8042c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8042c36:	f003 0304 	and.w	r3, r3, #4
 8042c3a:	2b00      	cmp	r3, #0
 8042c3c:	d00b      	beq.n	8042c56 <HAL_UART_IRQHandler+0xd2>
 8042c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8042c42:	f003 0301 	and.w	r3, r3, #1
 8042c46:	2b00      	cmp	r3, #0
 8042c48:	d005      	beq.n	8042c56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8042c4a:	687b      	ldr	r3, [r7, #4]
 8042c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8042c4e:	f043 0202 	orr.w	r2, r3, #2
 8042c52:	687b      	ldr	r3, [r7, #4]
 8042c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8042c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8042c5a:	f003 0302 	and.w	r3, r3, #2
 8042c5e:	2b00      	cmp	r3, #0
 8042c60:	d00b      	beq.n	8042c7a <HAL_UART_IRQHandler+0xf6>
 8042c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8042c66:	f003 0301 	and.w	r3, r3, #1
 8042c6a:	2b00      	cmp	r3, #0
 8042c6c:	d005      	beq.n	8042c7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8042c6e:	687b      	ldr	r3, [r7, #4]
 8042c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8042c72:	f043 0204 	orr.w	r2, r3, #4
 8042c76:	687b      	ldr	r3, [r7, #4]
 8042c78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8042c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8042c7e:	f003 0308 	and.w	r3, r3, #8
 8042c82:	2b00      	cmp	r3, #0
 8042c84:	d011      	beq.n	8042caa <HAL_UART_IRQHandler+0x126>
 8042c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8042c8a:	f003 0320 	and.w	r3, r3, #32
 8042c8e:	2b00      	cmp	r3, #0
 8042c90:	d105      	bne.n	8042c9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8042c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8042c96:	f003 0301 	and.w	r3, r3, #1
 8042c9a:	2b00      	cmp	r3, #0
 8042c9c:	d005      	beq.n	8042caa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8042c9e:	687b      	ldr	r3, [r7, #4]
 8042ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8042ca2:	f043 0208 	orr.w	r2, r3, #8
 8042ca6:	687b      	ldr	r3, [r7, #4]
 8042ca8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8042caa:	687b      	ldr	r3, [r7, #4]
 8042cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8042cae:	2b00      	cmp	r3, #0
 8042cb0:	f000 820a 	beq.w	80430c8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8042cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8042cb8:	f003 0320 	and.w	r3, r3, #32
 8042cbc:	2b00      	cmp	r3, #0
 8042cbe:	d008      	beq.n	8042cd2 <HAL_UART_IRQHandler+0x14e>
 8042cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8042cc4:	f003 0320 	and.w	r3, r3, #32
 8042cc8:	2b00      	cmp	r3, #0
 8042cca:	d002      	beq.n	8042cd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8042ccc:	6878      	ldr	r0, [r7, #4]
 8042cce:	f000 fbcf 	bl	8043470 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8042cd2:	687b      	ldr	r3, [r7, #4]
 8042cd4:	681b      	ldr	r3, [r3, #0]
 8042cd6:	695b      	ldr	r3, [r3, #20]
 8042cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8042cdc:	2b40      	cmp	r3, #64	@ 0x40
 8042cde:	bf0c      	ite	eq
 8042ce0:	2301      	moveq	r3, #1
 8042ce2:	2300      	movne	r3, #0
 8042ce4:	b2db      	uxtb	r3, r3
 8042ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8042cea:	687b      	ldr	r3, [r7, #4]
 8042cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8042cee:	f003 0308 	and.w	r3, r3, #8
 8042cf2:	2b00      	cmp	r3, #0
 8042cf4:	d103      	bne.n	8042cfe <HAL_UART_IRQHandler+0x17a>
 8042cf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8042cfa:	2b00      	cmp	r3, #0
 8042cfc:	d04f      	beq.n	8042d9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8042cfe:	6878      	ldr	r0, [r7, #4]
 8042d00:	f000 fa62 	bl	80431c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042d04:	687b      	ldr	r3, [r7, #4]
 8042d06:	681b      	ldr	r3, [r3, #0]
 8042d08:	695b      	ldr	r3, [r3, #20]
 8042d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8042d0e:	2b40      	cmp	r3, #64	@ 0x40
 8042d10:	d141      	bne.n	8042d96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8042d12:	687b      	ldr	r3, [r7, #4]
 8042d14:	681b      	ldr	r3, [r3, #0]
 8042d16:	3314      	adds	r3, #20
 8042d18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042d1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8042d20:	e853 3f00 	ldrex	r3, [r3]
 8042d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8042d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8042d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8042d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8042d34:	687b      	ldr	r3, [r7, #4]
 8042d36:	681b      	ldr	r3, [r3, #0]
 8042d38:	3314      	adds	r3, #20
 8042d3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8042d3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8042d42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042d46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8042d4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8042d4e:	e841 2300 	strex	r3, r2, [r1]
 8042d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8042d56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8042d5a:	2b00      	cmp	r3, #0
 8042d5c:	d1d9      	bne.n	8042d12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8042d5e:	687b      	ldr	r3, [r7, #4]
 8042d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042d62:	2b00      	cmp	r3, #0
 8042d64:	d013      	beq.n	8042d8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8042d66:	687b      	ldr	r3, [r7, #4]
 8042d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042d6a:	4a8a      	ldr	r2, [pc, #552]	@ (8042f94 <HAL_UART_IRQHandler+0x410>)
 8042d6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8042d6e:	687b      	ldr	r3, [r7, #4]
 8042d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042d72:	4618      	mov	r0, r3
 8042d74:	f7fd f8f6 	bl	803ff64 <HAL_DMA_Abort_IT>
 8042d78:	4603      	mov	r3, r0
 8042d7a:	2b00      	cmp	r3, #0
 8042d7c:	d016      	beq.n	8042dac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8042d7e:	687b      	ldr	r3, [r7, #4]
 8042d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8042d84:	687a      	ldr	r2, [r7, #4]
 8042d86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8042d88:	4610      	mov	r0, r2
 8042d8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042d8c:	e00e      	b.n	8042dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8042d8e:	6878      	ldr	r0, [r7, #4]
 8042d90:	f000 f9b6 	bl	8043100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042d94:	e00a      	b.n	8042dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8042d96:	6878      	ldr	r0, [r7, #4]
 8042d98:	f000 f9b2 	bl	8043100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042d9c:	e006      	b.n	8042dac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8042d9e:	6878      	ldr	r0, [r7, #4]
 8042da0:	f000 f9ae 	bl	8043100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042da4:	687b      	ldr	r3, [r7, #4]
 8042da6:	2200      	movs	r2, #0
 8042da8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8042daa:	e18d      	b.n	80430c8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042dac:	bf00      	nop
    return;
 8042dae:	e18b      	b.n	80430c8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042db0:	687b      	ldr	r3, [r7, #4]
 8042db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8042db4:	2b01      	cmp	r3, #1
 8042db6:	f040 8167 	bne.w	8043088 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8042dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8042dbe:	f003 0310 	and.w	r3, r3, #16
 8042dc2:	2b00      	cmp	r3, #0
 8042dc4:	f000 8160 	beq.w	8043088 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8042dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8042dcc:	f003 0310 	and.w	r3, r3, #16
 8042dd0:	2b00      	cmp	r3, #0
 8042dd2:	f000 8159 	beq.w	8043088 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8042dd6:	2300      	movs	r3, #0
 8042dd8:	60bb      	str	r3, [r7, #8]
 8042dda:	687b      	ldr	r3, [r7, #4]
 8042ddc:	681b      	ldr	r3, [r3, #0]
 8042dde:	681b      	ldr	r3, [r3, #0]
 8042de0:	60bb      	str	r3, [r7, #8]
 8042de2:	687b      	ldr	r3, [r7, #4]
 8042de4:	681b      	ldr	r3, [r3, #0]
 8042de6:	685b      	ldr	r3, [r3, #4]
 8042de8:	60bb      	str	r3, [r7, #8]
 8042dea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8042dec:	687b      	ldr	r3, [r7, #4]
 8042dee:	681b      	ldr	r3, [r3, #0]
 8042df0:	695b      	ldr	r3, [r3, #20]
 8042df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8042df6:	2b40      	cmp	r3, #64	@ 0x40
 8042df8:	f040 80ce 	bne.w	8042f98 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8042dfc:	687b      	ldr	r3, [r7, #4]
 8042dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042e00:	681b      	ldr	r3, [r3, #0]
 8042e02:	685b      	ldr	r3, [r3, #4]
 8042e04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8042e08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8042e0c:	2b00      	cmp	r3, #0
 8042e0e:	f000 80a9 	beq.w	8042f64 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8042e12:	687b      	ldr	r3, [r7, #4]
 8042e14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8042e16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8042e1a:	429a      	cmp	r2, r3
 8042e1c:	f080 80a2 	bcs.w	8042f64 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8042e20:	687b      	ldr	r3, [r7, #4]
 8042e22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8042e26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8042e28:	687b      	ldr	r3, [r7, #4]
 8042e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042e2c:	69db      	ldr	r3, [r3, #28]
 8042e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8042e32:	f000 8088 	beq.w	8042f46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8042e36:	687b      	ldr	r3, [r7, #4]
 8042e38:	681b      	ldr	r3, [r3, #0]
 8042e3a:	330c      	adds	r3, #12
 8042e3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8042e44:	e853 3f00 	ldrex	r3, [r3]
 8042e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8042e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8042e50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8042e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8042e58:	687b      	ldr	r3, [r7, #4]
 8042e5a:	681b      	ldr	r3, [r3, #0]
 8042e5c:	330c      	adds	r3, #12
 8042e5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8042e62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8042e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042e6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8042e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8042e72:	e841 2300 	strex	r3, r2, [r1]
 8042e76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8042e7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8042e7e:	2b00      	cmp	r3, #0
 8042e80:	d1d9      	bne.n	8042e36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042e82:	687b      	ldr	r3, [r7, #4]
 8042e84:	681b      	ldr	r3, [r3, #0]
 8042e86:	3314      	adds	r3, #20
 8042e88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042e8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8042e8c:	e853 3f00 	ldrex	r3, [r3]
 8042e90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8042e92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8042e94:	f023 0301 	bic.w	r3, r3, #1
 8042e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8042e9c:	687b      	ldr	r3, [r7, #4]
 8042e9e:	681b      	ldr	r3, [r3, #0]
 8042ea0:	3314      	adds	r3, #20
 8042ea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8042ea6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8042eaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042eac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8042eae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8042eb2:	e841 2300 	strex	r3, r2, [r1]
 8042eb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8042eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8042eba:	2b00      	cmp	r3, #0
 8042ebc:	d1e1      	bne.n	8042e82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8042ebe:	687b      	ldr	r3, [r7, #4]
 8042ec0:	681b      	ldr	r3, [r3, #0]
 8042ec2:	3314      	adds	r3, #20
 8042ec4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042ec6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8042ec8:	e853 3f00 	ldrex	r3, [r3]
 8042ecc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8042ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8042ed0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8042ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8042ed8:	687b      	ldr	r3, [r7, #4]
 8042eda:	681b      	ldr	r3, [r3, #0]
 8042edc:	3314      	adds	r3, #20
 8042ede:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8042ee2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8042ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042ee6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8042ee8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8042eea:	e841 2300 	strex	r3, r2, [r1]
 8042eee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8042ef0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8042ef2:	2b00      	cmp	r3, #0
 8042ef4:	d1e3      	bne.n	8042ebe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8042ef6:	687b      	ldr	r3, [r7, #4]
 8042ef8:	2220      	movs	r2, #32
 8042efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042efe:	687b      	ldr	r3, [r7, #4]
 8042f00:	2200      	movs	r2, #0
 8042f02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042f04:	687b      	ldr	r3, [r7, #4]
 8042f06:	681b      	ldr	r3, [r3, #0]
 8042f08:	330c      	adds	r3, #12
 8042f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8042f0e:	e853 3f00 	ldrex	r3, [r3]
 8042f12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8042f14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8042f16:	f023 0310 	bic.w	r3, r3, #16
 8042f1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8042f1e:	687b      	ldr	r3, [r7, #4]
 8042f20:	681b      	ldr	r3, [r3, #0]
 8042f22:	330c      	adds	r3, #12
 8042f24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8042f28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8042f2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042f2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8042f2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8042f30:	e841 2300 	strex	r3, r2, [r1]
 8042f34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8042f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8042f38:	2b00      	cmp	r3, #0
 8042f3a:	d1e3      	bne.n	8042f04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8042f3c:	687b      	ldr	r3, [r7, #4]
 8042f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042f40:	4618      	mov	r0, r3
 8042f42:	f7fc ff9f 	bl	803fe84 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8042f46:	687b      	ldr	r3, [r7, #4]
 8042f48:	2202      	movs	r2, #2
 8042f4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8042f4c:	687b      	ldr	r3, [r7, #4]
 8042f4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8042f50:	687b      	ldr	r3, [r7, #4]
 8042f52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8042f54:	b29b      	uxth	r3, r3
 8042f56:	1ad3      	subs	r3, r2, r3
 8042f58:	b29b      	uxth	r3, r3
 8042f5a:	4619      	mov	r1, r3
 8042f5c:	6878      	ldr	r0, [r7, #4]
 8042f5e:	f000 f8ed 	bl	804313c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8042f62:	e0b3      	b.n	80430cc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8042f64:	687b      	ldr	r3, [r7, #4]
 8042f66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8042f68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8042f6c:	429a      	cmp	r2, r3
 8042f6e:	f040 80ad 	bne.w	80430cc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8042f72:	687b      	ldr	r3, [r7, #4]
 8042f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8042f76:	69db      	ldr	r3, [r3, #28]
 8042f78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8042f7c:	f040 80a6 	bne.w	80430cc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8042f80:	687b      	ldr	r3, [r7, #4]
 8042f82:	2202      	movs	r2, #2
 8042f84:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8042f86:	687b      	ldr	r3, [r7, #4]
 8042f88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8042f8a:	4619      	mov	r1, r3
 8042f8c:	6878      	ldr	r0, [r7, #4]
 8042f8e:	f000 f8d5 	bl	804313c <HAL_UARTEx_RxEventCallback>
      return;
 8042f92:	e09b      	b.n	80430cc <HAL_UART_IRQHandler+0x548>
 8042f94:	0804328f 	.word	0x0804328f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8042f98:	687b      	ldr	r3, [r7, #4]
 8042f9a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8042f9c:	687b      	ldr	r3, [r7, #4]
 8042f9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8042fa0:	b29b      	uxth	r3, r3
 8042fa2:	1ad3      	subs	r3, r2, r3
 8042fa4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8042fa8:	687b      	ldr	r3, [r7, #4]
 8042faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8042fac:	b29b      	uxth	r3, r3
 8042fae:	2b00      	cmp	r3, #0
 8042fb0:	f000 808e 	beq.w	80430d0 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8042fb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8042fb8:	2b00      	cmp	r3, #0
 8042fba:	f000 8089 	beq.w	80430d0 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8042fbe:	687b      	ldr	r3, [r7, #4]
 8042fc0:	681b      	ldr	r3, [r3, #0]
 8042fc2:	330c      	adds	r3, #12
 8042fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8042fc8:	e853 3f00 	ldrex	r3, [r3]
 8042fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8042fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8042fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8042fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8042fd8:	687b      	ldr	r3, [r7, #4]
 8042fda:	681b      	ldr	r3, [r3, #0]
 8042fdc:	330c      	adds	r3, #12
 8042fde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8042fe2:	647a      	str	r2, [r7, #68]	@ 0x44
 8042fe4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042fe6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8042fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8042fea:	e841 2300 	strex	r3, r2, [r1]
 8042fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8042ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8042ff2:	2b00      	cmp	r3, #0
 8042ff4:	d1e3      	bne.n	8042fbe <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042ff6:	687b      	ldr	r3, [r7, #4]
 8042ff8:	681b      	ldr	r3, [r3, #0]
 8042ffa:	3314      	adds	r3, #20
 8042ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043000:	e853 3f00 	ldrex	r3, [r3]
 8043004:	623b      	str	r3, [r7, #32]
   return(result);
 8043006:	6a3b      	ldr	r3, [r7, #32]
 8043008:	f023 0301 	bic.w	r3, r3, #1
 804300c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8043010:	687b      	ldr	r3, [r7, #4]
 8043012:	681b      	ldr	r3, [r3, #0]
 8043014:	3314      	adds	r3, #20
 8043016:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 804301a:	633a      	str	r2, [r7, #48]	@ 0x30
 804301c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804301e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8043020:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8043022:	e841 2300 	strex	r3, r2, [r1]
 8043026:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8043028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 804302a:	2b00      	cmp	r3, #0
 804302c:	d1e3      	bne.n	8042ff6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 804302e:	687b      	ldr	r3, [r7, #4]
 8043030:	2220      	movs	r2, #32
 8043032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043036:	687b      	ldr	r3, [r7, #4]
 8043038:	2200      	movs	r2, #0
 804303a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804303c:	687b      	ldr	r3, [r7, #4]
 804303e:	681b      	ldr	r3, [r3, #0]
 8043040:	330c      	adds	r3, #12
 8043042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043044:	693b      	ldr	r3, [r7, #16]
 8043046:	e853 3f00 	ldrex	r3, [r3]
 804304a:	60fb      	str	r3, [r7, #12]
   return(result);
 804304c:	68fb      	ldr	r3, [r7, #12]
 804304e:	f023 0310 	bic.w	r3, r3, #16
 8043052:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8043056:	687b      	ldr	r3, [r7, #4]
 8043058:	681b      	ldr	r3, [r3, #0]
 804305a:	330c      	adds	r3, #12
 804305c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8043060:	61fa      	str	r2, [r7, #28]
 8043062:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043064:	69b9      	ldr	r1, [r7, #24]
 8043066:	69fa      	ldr	r2, [r7, #28]
 8043068:	e841 2300 	strex	r3, r2, [r1]
 804306c:	617b      	str	r3, [r7, #20]
   return(result);
 804306e:	697b      	ldr	r3, [r7, #20]
 8043070:	2b00      	cmp	r3, #0
 8043072:	d1e3      	bne.n	804303c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8043074:	687b      	ldr	r3, [r7, #4]
 8043076:	2202      	movs	r2, #2
 8043078:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 804307a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 804307e:	4619      	mov	r1, r3
 8043080:	6878      	ldr	r0, [r7, #4]
 8043082:	f000 f85b 	bl	804313c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8043086:	e023      	b.n	80430d0 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8043088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 804308c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8043090:	2b00      	cmp	r3, #0
 8043092:	d009      	beq.n	80430a8 <HAL_UART_IRQHandler+0x524>
 8043094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8043098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 804309c:	2b00      	cmp	r3, #0
 804309e:	d003      	beq.n	80430a8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80430a0:	6878      	ldr	r0, [r7, #4]
 80430a2:	f000 f97d 	bl	80433a0 <UART_Transmit_IT>
    return;
 80430a6:	e014      	b.n	80430d2 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80430a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80430ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80430b0:	2b00      	cmp	r3, #0
 80430b2:	d00e      	beq.n	80430d2 <HAL_UART_IRQHandler+0x54e>
 80430b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80430b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80430bc:	2b00      	cmp	r3, #0
 80430be:	d008      	beq.n	80430d2 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80430c0:	6878      	ldr	r0, [r7, #4]
 80430c2:	f000 f9bd 	bl	8043440 <UART_EndTransmit_IT>
    return;
 80430c6:	e004      	b.n	80430d2 <HAL_UART_IRQHandler+0x54e>
    return;
 80430c8:	bf00      	nop
 80430ca:	e002      	b.n	80430d2 <HAL_UART_IRQHandler+0x54e>
      return;
 80430cc:	bf00      	nop
 80430ce:	e000      	b.n	80430d2 <HAL_UART_IRQHandler+0x54e>
      return;
 80430d0:	bf00      	nop
  }
}
 80430d2:	37e8      	adds	r7, #232	@ 0xe8
 80430d4:	46bd      	mov	sp, r7
 80430d6:	bd80      	pop	{r7, pc}

080430d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80430d8:	b480      	push	{r7}
 80430da:	b083      	sub	sp, #12
 80430dc:	af00      	add	r7, sp, #0
 80430de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80430e0:	bf00      	nop
 80430e2:	370c      	adds	r7, #12
 80430e4:	46bd      	mov	sp, r7
 80430e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80430ea:	4770      	bx	lr

080430ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80430ec:	b480      	push	{r7}
 80430ee:	b083      	sub	sp, #12
 80430f0:	af00      	add	r7, sp, #0
 80430f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80430f4:	bf00      	nop
 80430f6:	370c      	adds	r7, #12
 80430f8:	46bd      	mov	sp, r7
 80430fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80430fe:	4770      	bx	lr

08043100 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8043100:	b480      	push	{r7}
 8043102:	b083      	sub	sp, #12
 8043104:	af00      	add	r7, sp, #0
 8043106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8043108:	bf00      	nop
 804310a:	370c      	adds	r7, #12
 804310c:	46bd      	mov	sp, r7
 804310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043112:	4770      	bx	lr

08043114 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8043114:	b480      	push	{r7}
 8043116:	b083      	sub	sp, #12
 8043118:	af00      	add	r7, sp, #0
 804311a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 804311c:	bf00      	nop
 804311e:	370c      	adds	r7, #12
 8043120:	46bd      	mov	sp, r7
 8043122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043126:	4770      	bx	lr

08043128 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8043128:	b480      	push	{r7}
 804312a:	b083      	sub	sp, #12
 804312c:	af00      	add	r7, sp, #0
 804312e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8043130:	bf00      	nop
 8043132:	370c      	adds	r7, #12
 8043134:	46bd      	mov	sp, r7
 8043136:	f85d 7b04 	ldr.w	r7, [sp], #4
 804313a:	4770      	bx	lr

0804313c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 804313c:	b480      	push	{r7}
 804313e:	b083      	sub	sp, #12
 8043140:	af00      	add	r7, sp, #0
 8043142:	6078      	str	r0, [r7, #4]
 8043144:	460b      	mov	r3, r1
 8043146:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8043148:	bf00      	nop
 804314a:	370c      	adds	r7, #12
 804314c:	46bd      	mov	sp, r7
 804314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043152:	4770      	bx	lr

08043154 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8043154:	b480      	push	{r7}
 8043156:	b085      	sub	sp, #20
 8043158:	af00      	add	r7, sp, #0
 804315a:	60f8      	str	r0, [r7, #12]
 804315c:	60b9      	str	r1, [r7, #8]
 804315e:	4613      	mov	r3, r2
 8043160:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8043162:	68fb      	ldr	r3, [r7, #12]
 8043164:	68ba      	ldr	r2, [r7, #8]
 8043166:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8043168:	68fb      	ldr	r3, [r7, #12]
 804316a:	88fa      	ldrh	r2, [r7, #6]
 804316c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 804316e:	68fb      	ldr	r3, [r7, #12]
 8043170:	88fa      	ldrh	r2, [r7, #6]
 8043172:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043174:	68fb      	ldr	r3, [r7, #12]
 8043176:	2200      	movs	r2, #0
 8043178:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 804317a:	68fb      	ldr	r3, [r7, #12]
 804317c:	2222      	movs	r2, #34	@ 0x22
 804317e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8043182:	68fb      	ldr	r3, [r7, #12]
 8043184:	691b      	ldr	r3, [r3, #16]
 8043186:	2b00      	cmp	r3, #0
 8043188:	d007      	beq.n	804319a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 804318a:	68fb      	ldr	r3, [r7, #12]
 804318c:	681b      	ldr	r3, [r3, #0]
 804318e:	68da      	ldr	r2, [r3, #12]
 8043190:	68fb      	ldr	r3, [r7, #12]
 8043192:	681b      	ldr	r3, [r3, #0]
 8043194:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8043198:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 804319a:	68fb      	ldr	r3, [r7, #12]
 804319c:	681b      	ldr	r3, [r3, #0]
 804319e:	695a      	ldr	r2, [r3, #20]
 80431a0:	68fb      	ldr	r3, [r7, #12]
 80431a2:	681b      	ldr	r3, [r3, #0]
 80431a4:	f042 0201 	orr.w	r2, r2, #1
 80431a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80431aa:	68fb      	ldr	r3, [r7, #12]
 80431ac:	681b      	ldr	r3, [r3, #0]
 80431ae:	68da      	ldr	r2, [r3, #12]
 80431b0:	68fb      	ldr	r3, [r7, #12]
 80431b2:	681b      	ldr	r3, [r3, #0]
 80431b4:	f042 0220 	orr.w	r2, r2, #32
 80431b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80431ba:	2300      	movs	r3, #0
}
 80431bc:	4618      	mov	r0, r3
 80431be:	3714      	adds	r7, #20
 80431c0:	46bd      	mov	sp, r7
 80431c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80431c6:	4770      	bx	lr

080431c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80431c8:	b480      	push	{r7}
 80431ca:	b095      	sub	sp, #84	@ 0x54
 80431cc:	af00      	add	r7, sp, #0
 80431ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80431d0:	687b      	ldr	r3, [r7, #4]
 80431d2:	681b      	ldr	r3, [r3, #0]
 80431d4:	330c      	adds	r3, #12
 80431d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80431d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80431da:	e853 3f00 	ldrex	r3, [r3]
 80431de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80431e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80431e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80431e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80431e8:	687b      	ldr	r3, [r7, #4]
 80431ea:	681b      	ldr	r3, [r3, #0]
 80431ec:	330c      	adds	r3, #12
 80431ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80431f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80431f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80431f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80431f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80431f8:	e841 2300 	strex	r3, r2, [r1]
 80431fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80431fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8043200:	2b00      	cmp	r3, #0
 8043202:	d1e5      	bne.n	80431d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8043204:	687b      	ldr	r3, [r7, #4]
 8043206:	681b      	ldr	r3, [r3, #0]
 8043208:	3314      	adds	r3, #20
 804320a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804320c:	6a3b      	ldr	r3, [r7, #32]
 804320e:	e853 3f00 	ldrex	r3, [r3]
 8043212:	61fb      	str	r3, [r7, #28]
   return(result);
 8043214:	69fb      	ldr	r3, [r7, #28]
 8043216:	f023 0301 	bic.w	r3, r3, #1
 804321a:	64bb      	str	r3, [r7, #72]	@ 0x48
 804321c:	687b      	ldr	r3, [r7, #4]
 804321e:	681b      	ldr	r3, [r3, #0]
 8043220:	3314      	adds	r3, #20
 8043222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8043224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8043226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 804322a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 804322c:	e841 2300 	strex	r3, r2, [r1]
 8043230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8043232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8043234:	2b00      	cmp	r3, #0
 8043236:	d1e5      	bne.n	8043204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8043238:	687b      	ldr	r3, [r7, #4]
 804323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 804323c:	2b01      	cmp	r3, #1
 804323e:	d119      	bne.n	8043274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8043240:	687b      	ldr	r3, [r7, #4]
 8043242:	681b      	ldr	r3, [r3, #0]
 8043244:	330c      	adds	r3, #12
 8043246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043248:	68fb      	ldr	r3, [r7, #12]
 804324a:	e853 3f00 	ldrex	r3, [r3]
 804324e:	60bb      	str	r3, [r7, #8]
   return(result);
 8043250:	68bb      	ldr	r3, [r7, #8]
 8043252:	f023 0310 	bic.w	r3, r3, #16
 8043256:	647b      	str	r3, [r7, #68]	@ 0x44
 8043258:	687b      	ldr	r3, [r7, #4]
 804325a:	681b      	ldr	r3, [r3, #0]
 804325c:	330c      	adds	r3, #12
 804325e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8043260:	61ba      	str	r2, [r7, #24]
 8043262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043264:	6979      	ldr	r1, [r7, #20]
 8043266:	69ba      	ldr	r2, [r7, #24]
 8043268:	e841 2300 	strex	r3, r2, [r1]
 804326c:	613b      	str	r3, [r7, #16]
   return(result);
 804326e:	693b      	ldr	r3, [r7, #16]
 8043270:	2b00      	cmp	r3, #0
 8043272:	d1e5      	bne.n	8043240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8043274:	687b      	ldr	r3, [r7, #4]
 8043276:	2220      	movs	r2, #32
 8043278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804327c:	687b      	ldr	r3, [r7, #4]
 804327e:	2200      	movs	r2, #0
 8043280:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8043282:	bf00      	nop
 8043284:	3754      	adds	r7, #84	@ 0x54
 8043286:	46bd      	mov	sp, r7
 8043288:	f85d 7b04 	ldr.w	r7, [sp], #4
 804328c:	4770      	bx	lr

0804328e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 804328e:	b580      	push	{r7, lr}
 8043290:	b084      	sub	sp, #16
 8043292:	af00      	add	r7, sp, #0
 8043294:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8043296:	687b      	ldr	r3, [r7, #4]
 8043298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804329a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 804329c:	68fb      	ldr	r3, [r7, #12]
 804329e:	2200      	movs	r2, #0
 80432a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80432a2:	68f8      	ldr	r0, [r7, #12]
 80432a4:	f7ff ff2c 	bl	8043100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80432a8:	bf00      	nop
 80432aa:	3710      	adds	r7, #16
 80432ac:	46bd      	mov	sp, r7
 80432ae:	bd80      	pop	{r7, pc}

080432b0 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80432b0:	b580      	push	{r7, lr}
 80432b2:	b084      	sub	sp, #16
 80432b4:	af00      	add	r7, sp, #0
 80432b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80432b8:	687b      	ldr	r3, [r7, #4]
 80432ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80432bc:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80432be:	68fb      	ldr	r3, [r7, #12]
 80432c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80432c2:	2200      	movs	r2, #0
 80432c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80432c6:	68fb      	ldr	r3, [r7, #12]
 80432c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80432ca:	2b00      	cmp	r3, #0
 80432cc:	d004      	beq.n	80432d8 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80432ce:	68fb      	ldr	r3, [r7, #12]
 80432d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80432d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80432d4:	2b00      	cmp	r3, #0
 80432d6:	d117      	bne.n	8043308 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80432d8:	68fb      	ldr	r3, [r7, #12]
 80432da:	2200      	movs	r2, #0
 80432dc:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80432de:	68fb      	ldr	r3, [r7, #12]
 80432e0:	2200      	movs	r2, #0
 80432e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80432e4:	68fb      	ldr	r3, [r7, #12]
 80432e6:	2200      	movs	r2, #0
 80432e8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80432ea:	68fb      	ldr	r3, [r7, #12]
 80432ec:	2220      	movs	r2, #32
 80432ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80432f2:	68fb      	ldr	r3, [r7, #12]
 80432f4:	2220      	movs	r2, #32
 80432f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80432fa:	68fb      	ldr	r3, [r7, #12]
 80432fc:	2200      	movs	r2, #0
 80432fe:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8043300:	68f8      	ldr	r0, [r7, #12]
 8043302:	f7ff ff07 	bl	8043114 <HAL_UART_AbortCpltCallback>
 8043306:	e000      	b.n	804330a <UART_DMATxAbortCallback+0x5a>
      return;
 8043308:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804330a:	3710      	adds	r7, #16
 804330c:	46bd      	mov	sp, r7
 804330e:	bd80      	pop	{r7, pc}

08043310 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8043310:	b580      	push	{r7, lr}
 8043312:	b084      	sub	sp, #16
 8043314:	af00      	add	r7, sp, #0
 8043316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8043318:	687b      	ldr	r3, [r7, #4]
 804331a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804331c:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 804331e:	68fb      	ldr	r3, [r7, #12]
 8043320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8043322:	2200      	movs	r2, #0
 8043324:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8043326:	68fb      	ldr	r3, [r7, #12]
 8043328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804332a:	2b00      	cmp	r3, #0
 804332c:	d004      	beq.n	8043338 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 804332e:	68fb      	ldr	r3, [r7, #12]
 8043330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8043332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8043334:	2b00      	cmp	r3, #0
 8043336:	d117      	bne.n	8043368 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8043338:	68fb      	ldr	r3, [r7, #12]
 804333a:	2200      	movs	r2, #0
 804333c:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 804333e:	68fb      	ldr	r3, [r7, #12]
 8043340:	2200      	movs	r2, #0
 8043342:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043344:	68fb      	ldr	r3, [r7, #12]
 8043346:	2200      	movs	r2, #0
 8043348:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 804334a:	68fb      	ldr	r3, [r7, #12]
 804334c:	2220      	movs	r2, #32
 804334e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8043352:	68fb      	ldr	r3, [r7, #12]
 8043354:	2220      	movs	r2, #32
 8043356:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804335a:	68fb      	ldr	r3, [r7, #12]
 804335c:	2200      	movs	r2, #0
 804335e:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8043360:	68f8      	ldr	r0, [r7, #12]
 8043362:	f7ff fed7 	bl	8043114 <HAL_UART_AbortCpltCallback>
 8043366:	e000      	b.n	804336a <UART_DMARxAbortCallback+0x5a>
      return;
 8043368:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804336a:	3710      	adds	r7, #16
 804336c:	46bd      	mov	sp, r7
 804336e:	bd80      	pop	{r7, pc}

08043370 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8043370:	b580      	push	{r7, lr}
 8043372:	b084      	sub	sp, #16
 8043374:	af00      	add	r7, sp, #0
 8043376:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8043378:	687b      	ldr	r3, [r7, #4]
 804337a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 804337c:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 804337e:	68fb      	ldr	r3, [r7, #12]
 8043380:	2200      	movs	r2, #0
 8043382:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8043384:	68fb      	ldr	r3, [r7, #12]
 8043386:	2220      	movs	r2, #32
 8043388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804338c:	68fb      	ldr	r3, [r7, #12]
 804338e:	2200      	movs	r2, #0
 8043390:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8043392:	68f8      	ldr	r0, [r7, #12]
 8043394:	f7ff fec8 	bl	8043128 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8043398:	bf00      	nop
 804339a:	3710      	adds	r7, #16
 804339c:	46bd      	mov	sp, r7
 804339e:	bd80      	pop	{r7, pc}

080433a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80433a0:	b480      	push	{r7}
 80433a2:	b085      	sub	sp, #20
 80433a4:	af00      	add	r7, sp, #0
 80433a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80433a8:	687b      	ldr	r3, [r7, #4]
 80433aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80433ae:	b2db      	uxtb	r3, r3
 80433b0:	2b21      	cmp	r3, #33	@ 0x21
 80433b2:	d13e      	bne.n	8043432 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80433b4:	687b      	ldr	r3, [r7, #4]
 80433b6:	689b      	ldr	r3, [r3, #8]
 80433b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80433bc:	d114      	bne.n	80433e8 <UART_Transmit_IT+0x48>
 80433be:	687b      	ldr	r3, [r7, #4]
 80433c0:	691b      	ldr	r3, [r3, #16]
 80433c2:	2b00      	cmp	r3, #0
 80433c4:	d110      	bne.n	80433e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80433c6:	687b      	ldr	r3, [r7, #4]
 80433c8:	6a1b      	ldr	r3, [r3, #32]
 80433ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80433cc:	68fb      	ldr	r3, [r7, #12]
 80433ce:	881b      	ldrh	r3, [r3, #0]
 80433d0:	461a      	mov	r2, r3
 80433d2:	687b      	ldr	r3, [r7, #4]
 80433d4:	681b      	ldr	r3, [r3, #0]
 80433d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80433da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80433dc:	687b      	ldr	r3, [r7, #4]
 80433de:	6a1b      	ldr	r3, [r3, #32]
 80433e0:	1c9a      	adds	r2, r3, #2
 80433e2:	687b      	ldr	r3, [r7, #4]
 80433e4:	621a      	str	r2, [r3, #32]
 80433e6:	e008      	b.n	80433fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80433e8:	687b      	ldr	r3, [r7, #4]
 80433ea:	6a1b      	ldr	r3, [r3, #32]
 80433ec:	1c59      	adds	r1, r3, #1
 80433ee:	687a      	ldr	r2, [r7, #4]
 80433f0:	6211      	str	r1, [r2, #32]
 80433f2:	781a      	ldrb	r2, [r3, #0]
 80433f4:	687b      	ldr	r3, [r7, #4]
 80433f6:	681b      	ldr	r3, [r3, #0]
 80433f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80433fa:	687b      	ldr	r3, [r7, #4]
 80433fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80433fe:	b29b      	uxth	r3, r3
 8043400:	3b01      	subs	r3, #1
 8043402:	b29b      	uxth	r3, r3
 8043404:	687a      	ldr	r2, [r7, #4]
 8043406:	4619      	mov	r1, r3
 8043408:	84d1      	strh	r1, [r2, #38]	@ 0x26
 804340a:	2b00      	cmp	r3, #0
 804340c:	d10f      	bne.n	804342e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 804340e:	687b      	ldr	r3, [r7, #4]
 8043410:	681b      	ldr	r3, [r3, #0]
 8043412:	68da      	ldr	r2, [r3, #12]
 8043414:	687b      	ldr	r3, [r7, #4]
 8043416:	681b      	ldr	r3, [r3, #0]
 8043418:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 804341c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 804341e:	687b      	ldr	r3, [r7, #4]
 8043420:	681b      	ldr	r3, [r3, #0]
 8043422:	68da      	ldr	r2, [r3, #12]
 8043424:	687b      	ldr	r3, [r7, #4]
 8043426:	681b      	ldr	r3, [r3, #0]
 8043428:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 804342c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 804342e:	2300      	movs	r3, #0
 8043430:	e000      	b.n	8043434 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8043432:	2302      	movs	r3, #2
  }
}
 8043434:	4618      	mov	r0, r3
 8043436:	3714      	adds	r7, #20
 8043438:	46bd      	mov	sp, r7
 804343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804343e:	4770      	bx	lr

08043440 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8043440:	b580      	push	{r7, lr}
 8043442:	b082      	sub	sp, #8
 8043444:	af00      	add	r7, sp, #0
 8043446:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8043448:	687b      	ldr	r3, [r7, #4]
 804344a:	681b      	ldr	r3, [r3, #0]
 804344c:	68da      	ldr	r2, [r3, #12]
 804344e:	687b      	ldr	r3, [r7, #4]
 8043450:	681b      	ldr	r3, [r3, #0]
 8043452:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8043456:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8043458:	687b      	ldr	r3, [r7, #4]
 804345a:	2220      	movs	r2, #32
 804345c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8043460:	6878      	ldr	r0, [r7, #4]
 8043462:	f7ff fe39 	bl	80430d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8043466:	2300      	movs	r3, #0
}
 8043468:	4618      	mov	r0, r3
 804346a:	3708      	adds	r7, #8
 804346c:	46bd      	mov	sp, r7
 804346e:	bd80      	pop	{r7, pc}

08043470 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8043470:	b580      	push	{r7, lr}
 8043472:	b08c      	sub	sp, #48	@ 0x30
 8043474:	af00      	add	r7, sp, #0
 8043476:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8043478:	2300      	movs	r3, #0
 804347a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 804347c:	2300      	movs	r3, #0
 804347e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8043480:	687b      	ldr	r3, [r7, #4]
 8043482:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8043486:	b2db      	uxtb	r3, r3
 8043488:	2b22      	cmp	r3, #34	@ 0x22
 804348a:	f040 80aa 	bne.w	80435e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804348e:	687b      	ldr	r3, [r7, #4]
 8043490:	689b      	ldr	r3, [r3, #8]
 8043492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8043496:	d115      	bne.n	80434c4 <UART_Receive_IT+0x54>
 8043498:	687b      	ldr	r3, [r7, #4]
 804349a:	691b      	ldr	r3, [r3, #16]
 804349c:	2b00      	cmp	r3, #0
 804349e:	d111      	bne.n	80434c4 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80434a0:	687b      	ldr	r3, [r7, #4]
 80434a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80434a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80434a6:	687b      	ldr	r3, [r7, #4]
 80434a8:	681b      	ldr	r3, [r3, #0]
 80434aa:	685b      	ldr	r3, [r3, #4]
 80434ac:	b29b      	uxth	r3, r3
 80434ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80434b2:	b29a      	uxth	r2, r3
 80434b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80434b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80434b8:	687b      	ldr	r3, [r7, #4]
 80434ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80434bc:	1c9a      	adds	r2, r3, #2
 80434be:	687b      	ldr	r3, [r7, #4]
 80434c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80434c2:	e024      	b.n	804350e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80434c4:	687b      	ldr	r3, [r7, #4]
 80434c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80434c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80434ca:	687b      	ldr	r3, [r7, #4]
 80434cc:	689b      	ldr	r3, [r3, #8]
 80434ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80434d2:	d007      	beq.n	80434e4 <UART_Receive_IT+0x74>
 80434d4:	687b      	ldr	r3, [r7, #4]
 80434d6:	689b      	ldr	r3, [r3, #8]
 80434d8:	2b00      	cmp	r3, #0
 80434da:	d10a      	bne.n	80434f2 <UART_Receive_IT+0x82>
 80434dc:	687b      	ldr	r3, [r7, #4]
 80434de:	691b      	ldr	r3, [r3, #16]
 80434e0:	2b00      	cmp	r3, #0
 80434e2:	d106      	bne.n	80434f2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80434e4:	687b      	ldr	r3, [r7, #4]
 80434e6:	681b      	ldr	r3, [r3, #0]
 80434e8:	685b      	ldr	r3, [r3, #4]
 80434ea:	b2da      	uxtb	r2, r3
 80434ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80434ee:	701a      	strb	r2, [r3, #0]
 80434f0:	e008      	b.n	8043504 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80434f2:	687b      	ldr	r3, [r7, #4]
 80434f4:	681b      	ldr	r3, [r3, #0]
 80434f6:	685b      	ldr	r3, [r3, #4]
 80434f8:	b2db      	uxtb	r3, r3
 80434fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80434fe:	b2da      	uxtb	r2, r3
 8043500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8043502:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8043504:	687b      	ldr	r3, [r7, #4]
 8043506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8043508:	1c5a      	adds	r2, r3, #1
 804350a:	687b      	ldr	r3, [r7, #4]
 804350c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 804350e:	687b      	ldr	r3, [r7, #4]
 8043510:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8043512:	b29b      	uxth	r3, r3
 8043514:	3b01      	subs	r3, #1
 8043516:	b29b      	uxth	r3, r3
 8043518:	687a      	ldr	r2, [r7, #4]
 804351a:	4619      	mov	r1, r3
 804351c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 804351e:	2b00      	cmp	r3, #0
 8043520:	d15d      	bne.n	80435de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8043522:	687b      	ldr	r3, [r7, #4]
 8043524:	681b      	ldr	r3, [r3, #0]
 8043526:	68da      	ldr	r2, [r3, #12]
 8043528:	687b      	ldr	r3, [r7, #4]
 804352a:	681b      	ldr	r3, [r3, #0]
 804352c:	f022 0220 	bic.w	r2, r2, #32
 8043530:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8043532:	687b      	ldr	r3, [r7, #4]
 8043534:	681b      	ldr	r3, [r3, #0]
 8043536:	68da      	ldr	r2, [r3, #12]
 8043538:	687b      	ldr	r3, [r7, #4]
 804353a:	681b      	ldr	r3, [r3, #0]
 804353c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8043540:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8043542:	687b      	ldr	r3, [r7, #4]
 8043544:	681b      	ldr	r3, [r3, #0]
 8043546:	695a      	ldr	r2, [r3, #20]
 8043548:	687b      	ldr	r3, [r7, #4]
 804354a:	681b      	ldr	r3, [r3, #0]
 804354c:	f022 0201 	bic.w	r2, r2, #1
 8043550:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8043552:	687b      	ldr	r3, [r7, #4]
 8043554:	2220      	movs	r2, #32
 8043556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 804355a:	687b      	ldr	r3, [r7, #4]
 804355c:	2200      	movs	r2, #0
 804355e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8043560:	687b      	ldr	r3, [r7, #4]
 8043562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8043564:	2b01      	cmp	r3, #1
 8043566:	d135      	bne.n	80435d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043568:	687b      	ldr	r3, [r7, #4]
 804356a:	2200      	movs	r2, #0
 804356c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804356e:	687b      	ldr	r3, [r7, #4]
 8043570:	681b      	ldr	r3, [r3, #0]
 8043572:	330c      	adds	r3, #12
 8043574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043576:	697b      	ldr	r3, [r7, #20]
 8043578:	e853 3f00 	ldrex	r3, [r3]
 804357c:	613b      	str	r3, [r7, #16]
   return(result);
 804357e:	693b      	ldr	r3, [r7, #16]
 8043580:	f023 0310 	bic.w	r3, r3, #16
 8043584:	627b      	str	r3, [r7, #36]	@ 0x24
 8043586:	687b      	ldr	r3, [r7, #4]
 8043588:	681b      	ldr	r3, [r3, #0]
 804358a:	330c      	adds	r3, #12
 804358c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 804358e:	623a      	str	r2, [r7, #32]
 8043590:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043592:	69f9      	ldr	r1, [r7, #28]
 8043594:	6a3a      	ldr	r2, [r7, #32]
 8043596:	e841 2300 	strex	r3, r2, [r1]
 804359a:	61bb      	str	r3, [r7, #24]
   return(result);
 804359c:	69bb      	ldr	r3, [r7, #24]
 804359e:	2b00      	cmp	r3, #0
 80435a0:	d1e5      	bne.n	804356e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80435a2:	687b      	ldr	r3, [r7, #4]
 80435a4:	681b      	ldr	r3, [r3, #0]
 80435a6:	681b      	ldr	r3, [r3, #0]
 80435a8:	f003 0310 	and.w	r3, r3, #16
 80435ac:	2b10      	cmp	r3, #16
 80435ae:	d10a      	bne.n	80435c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80435b0:	2300      	movs	r3, #0
 80435b2:	60fb      	str	r3, [r7, #12]
 80435b4:	687b      	ldr	r3, [r7, #4]
 80435b6:	681b      	ldr	r3, [r3, #0]
 80435b8:	681b      	ldr	r3, [r3, #0]
 80435ba:	60fb      	str	r3, [r7, #12]
 80435bc:	687b      	ldr	r3, [r7, #4]
 80435be:	681b      	ldr	r3, [r3, #0]
 80435c0:	685b      	ldr	r3, [r3, #4]
 80435c2:	60fb      	str	r3, [r7, #12]
 80435c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80435c6:	687b      	ldr	r3, [r7, #4]
 80435c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80435ca:	4619      	mov	r1, r3
 80435cc:	6878      	ldr	r0, [r7, #4]
 80435ce:	f7ff fdb5 	bl	804313c <HAL_UARTEx_RxEventCallback>
 80435d2:	e002      	b.n	80435da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80435d4:	6878      	ldr	r0, [r7, #4]
 80435d6:	f7ff fd89 	bl	80430ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80435da:	2300      	movs	r3, #0
 80435dc:	e002      	b.n	80435e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80435de:	2300      	movs	r3, #0
 80435e0:	e000      	b.n	80435e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80435e2:	2302      	movs	r3, #2
  }
}
 80435e4:	4618      	mov	r0, r3
 80435e6:	3730      	adds	r7, #48	@ 0x30
 80435e8:	46bd      	mov	sp, r7
 80435ea:	bd80      	pop	{r7, pc}

080435ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80435ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80435f0:	b0c0      	sub	sp, #256	@ 0x100
 80435f2:	af00      	add	r7, sp, #0
 80435f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80435f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80435fc:	681b      	ldr	r3, [r3, #0]
 80435fe:	691b      	ldr	r3, [r3, #16]
 8043600:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8043604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8043608:	68d9      	ldr	r1, [r3, #12]
 804360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 804360e:	681a      	ldr	r2, [r3, #0]
 8043610:	ea40 0301 	orr.w	r3, r0, r1
 8043614:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8043616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 804361a:	689a      	ldr	r2, [r3, #8]
 804361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8043620:	691b      	ldr	r3, [r3, #16]
 8043622:	431a      	orrs	r2, r3
 8043624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8043628:	695b      	ldr	r3, [r3, #20]
 804362a:	431a      	orrs	r2, r3
 804362c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8043630:	69db      	ldr	r3, [r3, #28]
 8043632:	4313      	orrs	r3, r2
 8043634:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8043638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 804363c:	681b      	ldr	r3, [r3, #0]
 804363e:	68db      	ldr	r3, [r3, #12]
 8043640:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8043644:	f021 010c 	bic.w	r1, r1, #12
 8043648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 804364c:	681a      	ldr	r2, [r3, #0]
 804364e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8043652:	430b      	orrs	r3, r1
 8043654:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8043656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 804365a:	681b      	ldr	r3, [r3, #0]
 804365c:	695b      	ldr	r3, [r3, #20]
 804365e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8043662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8043666:	6999      	ldr	r1, [r3, #24]
 8043668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 804366c:	681a      	ldr	r2, [r3, #0]
 804366e:	ea40 0301 	orr.w	r3, r0, r1
 8043672:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8043674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8043678:	681a      	ldr	r2, [r3, #0]
 804367a:	4b8f      	ldr	r3, [pc, #572]	@ (80438b8 <UART_SetConfig+0x2cc>)
 804367c:	429a      	cmp	r2, r3
 804367e:	d005      	beq.n	804368c <UART_SetConfig+0xa0>
 8043680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8043684:	681a      	ldr	r2, [r3, #0]
 8043686:	4b8d      	ldr	r3, [pc, #564]	@ (80438bc <UART_SetConfig+0x2d0>)
 8043688:	429a      	cmp	r2, r3
 804368a:	d104      	bne.n	8043696 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 804368c:	f7fd fe86 	bl	804139c <HAL_RCC_GetPCLK2Freq>
 8043690:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8043694:	e003      	b.n	804369e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8043696:	f7fd fe6d 	bl	8041374 <HAL_RCC_GetPCLK1Freq>
 804369a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804369e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80436a2:	69db      	ldr	r3, [r3, #28]
 80436a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80436a8:	f040 810c 	bne.w	80438c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80436ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80436b0:	2200      	movs	r2, #0
 80436b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80436b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80436ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80436be:	4622      	mov	r2, r4
 80436c0:	462b      	mov	r3, r5
 80436c2:	1891      	adds	r1, r2, r2
 80436c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80436c6:	415b      	adcs	r3, r3
 80436c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80436ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80436ce:	4621      	mov	r1, r4
 80436d0:	eb12 0801 	adds.w	r8, r2, r1
 80436d4:	4629      	mov	r1, r5
 80436d6:	eb43 0901 	adc.w	r9, r3, r1
 80436da:	f04f 0200 	mov.w	r2, #0
 80436de:	f04f 0300 	mov.w	r3, #0
 80436e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80436e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80436ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80436ee:	4690      	mov	r8, r2
 80436f0:	4699      	mov	r9, r3
 80436f2:	4623      	mov	r3, r4
 80436f4:	eb18 0303 	adds.w	r3, r8, r3
 80436f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80436fc:	462b      	mov	r3, r5
 80436fe:	eb49 0303 	adc.w	r3, r9, r3
 8043702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8043706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 804370a:	685b      	ldr	r3, [r3, #4]
 804370c:	2200      	movs	r2, #0
 804370e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8043712:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8043716:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 804371a:	460b      	mov	r3, r1
 804371c:	18db      	adds	r3, r3, r3
 804371e:	653b      	str	r3, [r7, #80]	@ 0x50
 8043720:	4613      	mov	r3, r2
 8043722:	eb42 0303 	adc.w	r3, r2, r3
 8043726:	657b      	str	r3, [r7, #84]	@ 0x54
 8043728:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 804372c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8043730:	f7f8 fe98 	bl	803c464 <__aeabi_uldivmod>
 8043734:	4602      	mov	r2, r0
 8043736:	460b      	mov	r3, r1
 8043738:	4b61      	ldr	r3, [pc, #388]	@ (80438c0 <UART_SetConfig+0x2d4>)
 804373a:	fba3 2302 	umull	r2, r3, r3, r2
 804373e:	095b      	lsrs	r3, r3, #5
 8043740:	011c      	lsls	r4, r3, #4
 8043742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8043746:	2200      	movs	r2, #0
 8043748:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 804374c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8043750:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8043754:	4642      	mov	r2, r8
 8043756:	464b      	mov	r3, r9
 8043758:	1891      	adds	r1, r2, r2
 804375a:	64b9      	str	r1, [r7, #72]	@ 0x48
 804375c:	415b      	adcs	r3, r3
 804375e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8043760:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8043764:	4641      	mov	r1, r8
 8043766:	eb12 0a01 	adds.w	sl, r2, r1
 804376a:	4649      	mov	r1, r9
 804376c:	eb43 0b01 	adc.w	fp, r3, r1
 8043770:	f04f 0200 	mov.w	r2, #0
 8043774:	f04f 0300 	mov.w	r3, #0
 8043778:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 804377c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8043780:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8043784:	4692      	mov	sl, r2
 8043786:	469b      	mov	fp, r3
 8043788:	4643      	mov	r3, r8
 804378a:	eb1a 0303 	adds.w	r3, sl, r3
 804378e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8043792:	464b      	mov	r3, r9
 8043794:	eb4b 0303 	adc.w	r3, fp, r3
 8043798:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 804379c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80437a0:	685b      	ldr	r3, [r3, #4]
 80437a2:	2200      	movs	r2, #0
 80437a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80437a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80437ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80437b0:	460b      	mov	r3, r1
 80437b2:	18db      	adds	r3, r3, r3
 80437b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80437b6:	4613      	mov	r3, r2
 80437b8:	eb42 0303 	adc.w	r3, r2, r3
 80437bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80437be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80437c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80437c6:	f7f8 fe4d 	bl	803c464 <__aeabi_uldivmod>
 80437ca:	4602      	mov	r2, r0
 80437cc:	460b      	mov	r3, r1
 80437ce:	4611      	mov	r1, r2
 80437d0:	4b3b      	ldr	r3, [pc, #236]	@ (80438c0 <UART_SetConfig+0x2d4>)
 80437d2:	fba3 2301 	umull	r2, r3, r3, r1
 80437d6:	095b      	lsrs	r3, r3, #5
 80437d8:	2264      	movs	r2, #100	@ 0x64
 80437da:	fb02 f303 	mul.w	r3, r2, r3
 80437de:	1acb      	subs	r3, r1, r3
 80437e0:	00db      	lsls	r3, r3, #3
 80437e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80437e6:	4b36      	ldr	r3, [pc, #216]	@ (80438c0 <UART_SetConfig+0x2d4>)
 80437e8:	fba3 2302 	umull	r2, r3, r3, r2
 80437ec:	095b      	lsrs	r3, r3, #5
 80437ee:	005b      	lsls	r3, r3, #1
 80437f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80437f4:	441c      	add	r4, r3
 80437f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80437fa:	2200      	movs	r2, #0
 80437fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8043800:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8043804:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8043808:	4642      	mov	r2, r8
 804380a:	464b      	mov	r3, r9
 804380c:	1891      	adds	r1, r2, r2
 804380e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8043810:	415b      	adcs	r3, r3
 8043812:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8043814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8043818:	4641      	mov	r1, r8
 804381a:	1851      	adds	r1, r2, r1
 804381c:	6339      	str	r1, [r7, #48]	@ 0x30
 804381e:	4649      	mov	r1, r9
 8043820:	414b      	adcs	r3, r1
 8043822:	637b      	str	r3, [r7, #52]	@ 0x34
 8043824:	f04f 0200 	mov.w	r2, #0
 8043828:	f04f 0300 	mov.w	r3, #0
 804382c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8043830:	4659      	mov	r1, fp
 8043832:	00cb      	lsls	r3, r1, #3
 8043834:	4651      	mov	r1, sl
 8043836:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 804383a:	4651      	mov	r1, sl
 804383c:	00ca      	lsls	r2, r1, #3
 804383e:	4610      	mov	r0, r2
 8043840:	4619      	mov	r1, r3
 8043842:	4603      	mov	r3, r0
 8043844:	4642      	mov	r2, r8
 8043846:	189b      	adds	r3, r3, r2
 8043848:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 804384c:	464b      	mov	r3, r9
 804384e:	460a      	mov	r2, r1
 8043850:	eb42 0303 	adc.w	r3, r2, r3
 8043854:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8043858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 804385c:	685b      	ldr	r3, [r3, #4]
 804385e:	2200      	movs	r2, #0
 8043860:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8043864:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8043868:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 804386c:	460b      	mov	r3, r1
 804386e:	18db      	adds	r3, r3, r3
 8043870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8043872:	4613      	mov	r3, r2
 8043874:	eb42 0303 	adc.w	r3, r2, r3
 8043878:	62fb      	str	r3, [r7, #44]	@ 0x2c
 804387a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 804387e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8043882:	f7f8 fdef 	bl	803c464 <__aeabi_uldivmod>
 8043886:	4602      	mov	r2, r0
 8043888:	460b      	mov	r3, r1
 804388a:	4b0d      	ldr	r3, [pc, #52]	@ (80438c0 <UART_SetConfig+0x2d4>)
 804388c:	fba3 1302 	umull	r1, r3, r3, r2
 8043890:	095b      	lsrs	r3, r3, #5
 8043892:	2164      	movs	r1, #100	@ 0x64
 8043894:	fb01 f303 	mul.w	r3, r1, r3
 8043898:	1ad3      	subs	r3, r2, r3
 804389a:	00db      	lsls	r3, r3, #3
 804389c:	3332      	adds	r3, #50	@ 0x32
 804389e:	4a08      	ldr	r2, [pc, #32]	@ (80438c0 <UART_SetConfig+0x2d4>)
 80438a0:	fba2 2303 	umull	r2, r3, r2, r3
 80438a4:	095b      	lsrs	r3, r3, #5
 80438a6:	f003 0207 	and.w	r2, r3, #7
 80438aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80438ae:	681b      	ldr	r3, [r3, #0]
 80438b0:	4422      	add	r2, r4
 80438b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80438b4:	e106      	b.n	8043ac4 <UART_SetConfig+0x4d8>
 80438b6:	bf00      	nop
 80438b8:	40011000 	.word	0x40011000
 80438bc:	40011400 	.word	0x40011400
 80438c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80438c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80438c8:	2200      	movs	r2, #0
 80438ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80438ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80438d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80438d6:	4642      	mov	r2, r8
 80438d8:	464b      	mov	r3, r9
 80438da:	1891      	adds	r1, r2, r2
 80438dc:	6239      	str	r1, [r7, #32]
 80438de:	415b      	adcs	r3, r3
 80438e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80438e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80438e6:	4641      	mov	r1, r8
 80438e8:	1854      	adds	r4, r2, r1
 80438ea:	4649      	mov	r1, r9
 80438ec:	eb43 0501 	adc.w	r5, r3, r1
 80438f0:	f04f 0200 	mov.w	r2, #0
 80438f4:	f04f 0300 	mov.w	r3, #0
 80438f8:	00eb      	lsls	r3, r5, #3
 80438fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80438fe:	00e2      	lsls	r2, r4, #3
 8043900:	4614      	mov	r4, r2
 8043902:	461d      	mov	r5, r3
 8043904:	4643      	mov	r3, r8
 8043906:	18e3      	adds	r3, r4, r3
 8043908:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 804390c:	464b      	mov	r3, r9
 804390e:	eb45 0303 	adc.w	r3, r5, r3
 8043912:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8043916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 804391a:	685b      	ldr	r3, [r3, #4]
 804391c:	2200      	movs	r2, #0
 804391e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8043922:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8043926:	f04f 0200 	mov.w	r2, #0
 804392a:	f04f 0300 	mov.w	r3, #0
 804392e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8043932:	4629      	mov	r1, r5
 8043934:	008b      	lsls	r3, r1, #2
 8043936:	4621      	mov	r1, r4
 8043938:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 804393c:	4621      	mov	r1, r4
 804393e:	008a      	lsls	r2, r1, #2
 8043940:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8043944:	f7f8 fd8e 	bl	803c464 <__aeabi_uldivmod>
 8043948:	4602      	mov	r2, r0
 804394a:	460b      	mov	r3, r1
 804394c:	4b60      	ldr	r3, [pc, #384]	@ (8043ad0 <UART_SetConfig+0x4e4>)
 804394e:	fba3 2302 	umull	r2, r3, r3, r2
 8043952:	095b      	lsrs	r3, r3, #5
 8043954:	011c      	lsls	r4, r3, #4
 8043956:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 804395a:	2200      	movs	r2, #0
 804395c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8043960:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8043964:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8043968:	4642      	mov	r2, r8
 804396a:	464b      	mov	r3, r9
 804396c:	1891      	adds	r1, r2, r2
 804396e:	61b9      	str	r1, [r7, #24]
 8043970:	415b      	adcs	r3, r3
 8043972:	61fb      	str	r3, [r7, #28]
 8043974:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8043978:	4641      	mov	r1, r8
 804397a:	1851      	adds	r1, r2, r1
 804397c:	6139      	str	r1, [r7, #16]
 804397e:	4649      	mov	r1, r9
 8043980:	414b      	adcs	r3, r1
 8043982:	617b      	str	r3, [r7, #20]
 8043984:	f04f 0200 	mov.w	r2, #0
 8043988:	f04f 0300 	mov.w	r3, #0
 804398c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8043990:	4659      	mov	r1, fp
 8043992:	00cb      	lsls	r3, r1, #3
 8043994:	4651      	mov	r1, sl
 8043996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 804399a:	4651      	mov	r1, sl
 804399c:	00ca      	lsls	r2, r1, #3
 804399e:	4610      	mov	r0, r2
 80439a0:	4619      	mov	r1, r3
 80439a2:	4603      	mov	r3, r0
 80439a4:	4642      	mov	r2, r8
 80439a6:	189b      	adds	r3, r3, r2
 80439a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80439ac:	464b      	mov	r3, r9
 80439ae:	460a      	mov	r2, r1
 80439b0:	eb42 0303 	adc.w	r3, r2, r3
 80439b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80439b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80439bc:	685b      	ldr	r3, [r3, #4]
 80439be:	2200      	movs	r2, #0
 80439c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80439c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80439c4:	f04f 0200 	mov.w	r2, #0
 80439c8:	f04f 0300 	mov.w	r3, #0
 80439cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80439d0:	4649      	mov	r1, r9
 80439d2:	008b      	lsls	r3, r1, #2
 80439d4:	4641      	mov	r1, r8
 80439d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80439da:	4641      	mov	r1, r8
 80439dc:	008a      	lsls	r2, r1, #2
 80439de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80439e2:	f7f8 fd3f 	bl	803c464 <__aeabi_uldivmod>
 80439e6:	4602      	mov	r2, r0
 80439e8:	460b      	mov	r3, r1
 80439ea:	4611      	mov	r1, r2
 80439ec:	4b38      	ldr	r3, [pc, #224]	@ (8043ad0 <UART_SetConfig+0x4e4>)
 80439ee:	fba3 2301 	umull	r2, r3, r3, r1
 80439f2:	095b      	lsrs	r3, r3, #5
 80439f4:	2264      	movs	r2, #100	@ 0x64
 80439f6:	fb02 f303 	mul.w	r3, r2, r3
 80439fa:	1acb      	subs	r3, r1, r3
 80439fc:	011b      	lsls	r3, r3, #4
 80439fe:	3332      	adds	r3, #50	@ 0x32
 8043a00:	4a33      	ldr	r2, [pc, #204]	@ (8043ad0 <UART_SetConfig+0x4e4>)
 8043a02:	fba2 2303 	umull	r2, r3, r2, r3
 8043a06:	095b      	lsrs	r3, r3, #5
 8043a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8043a0c:	441c      	add	r4, r3
 8043a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8043a12:	2200      	movs	r2, #0
 8043a14:	673b      	str	r3, [r7, #112]	@ 0x70
 8043a16:	677a      	str	r2, [r7, #116]	@ 0x74
 8043a18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8043a1c:	4642      	mov	r2, r8
 8043a1e:	464b      	mov	r3, r9
 8043a20:	1891      	adds	r1, r2, r2
 8043a22:	60b9      	str	r1, [r7, #8]
 8043a24:	415b      	adcs	r3, r3
 8043a26:	60fb      	str	r3, [r7, #12]
 8043a28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8043a2c:	4641      	mov	r1, r8
 8043a2e:	1851      	adds	r1, r2, r1
 8043a30:	6039      	str	r1, [r7, #0]
 8043a32:	4649      	mov	r1, r9
 8043a34:	414b      	adcs	r3, r1
 8043a36:	607b      	str	r3, [r7, #4]
 8043a38:	f04f 0200 	mov.w	r2, #0
 8043a3c:	f04f 0300 	mov.w	r3, #0
 8043a40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8043a44:	4659      	mov	r1, fp
 8043a46:	00cb      	lsls	r3, r1, #3
 8043a48:	4651      	mov	r1, sl
 8043a4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8043a4e:	4651      	mov	r1, sl
 8043a50:	00ca      	lsls	r2, r1, #3
 8043a52:	4610      	mov	r0, r2
 8043a54:	4619      	mov	r1, r3
 8043a56:	4603      	mov	r3, r0
 8043a58:	4642      	mov	r2, r8
 8043a5a:	189b      	adds	r3, r3, r2
 8043a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8043a5e:	464b      	mov	r3, r9
 8043a60:	460a      	mov	r2, r1
 8043a62:	eb42 0303 	adc.w	r3, r2, r3
 8043a66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8043a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8043a6c:	685b      	ldr	r3, [r3, #4]
 8043a6e:	2200      	movs	r2, #0
 8043a70:	663b      	str	r3, [r7, #96]	@ 0x60
 8043a72:	667a      	str	r2, [r7, #100]	@ 0x64
 8043a74:	f04f 0200 	mov.w	r2, #0
 8043a78:	f04f 0300 	mov.w	r3, #0
 8043a7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8043a80:	4649      	mov	r1, r9
 8043a82:	008b      	lsls	r3, r1, #2
 8043a84:	4641      	mov	r1, r8
 8043a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8043a8a:	4641      	mov	r1, r8
 8043a8c:	008a      	lsls	r2, r1, #2
 8043a8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8043a92:	f7f8 fce7 	bl	803c464 <__aeabi_uldivmod>
 8043a96:	4602      	mov	r2, r0
 8043a98:	460b      	mov	r3, r1
 8043a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8043ad0 <UART_SetConfig+0x4e4>)
 8043a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8043aa0:	095b      	lsrs	r3, r3, #5
 8043aa2:	2164      	movs	r1, #100	@ 0x64
 8043aa4:	fb01 f303 	mul.w	r3, r1, r3
 8043aa8:	1ad3      	subs	r3, r2, r3
 8043aaa:	011b      	lsls	r3, r3, #4
 8043aac:	3332      	adds	r3, #50	@ 0x32
 8043aae:	4a08      	ldr	r2, [pc, #32]	@ (8043ad0 <UART_SetConfig+0x4e4>)
 8043ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8043ab4:	095b      	lsrs	r3, r3, #5
 8043ab6:	f003 020f 	and.w	r2, r3, #15
 8043aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8043abe:	681b      	ldr	r3, [r3, #0]
 8043ac0:	4422      	add	r2, r4
 8043ac2:	609a      	str	r2, [r3, #8]
}
 8043ac4:	bf00      	nop
 8043ac6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8043aca:	46bd      	mov	sp, r7
 8043acc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8043ad0:	51eb851f 	.word	0x51eb851f

08043ad4 <Probe_Init>:
static inline uint16_t filt50_step(uint16_t x);
static inline void filt50_reset(void);

/* Public functions ----------------------------------------------------------*/
Status_t Probe_Init(void)
{
 8043ad4:	b580      	push	{r7, lr}
 8043ad6:	b082      	sub	sp, #8
 8043ad8:	af00      	add	r7, sp, #0
    Status_t ret = STATUS_OK;
 8043ada:	2300      	movs	r3, #0
 8043adc:	71fb      	strb	r3, [r7, #7]
    ret |= Probe_InitHAL();
 8043ade:	f000 f81d 	bl	8043b1c <Probe_InitHAL>
 8043ae2:	4603      	mov	r3, r0
 8043ae4:	461a      	mov	r2, r3
 8043ae6:	79fb      	ldrb	r3, [r7, #7]
 8043ae8:	4313      	orrs	r3, r2
 8043aea:	71fb      	strb	r3, [r7, #7]
    return ret;
 8043aec:	79fb      	ldrb	r3, [r7, #7]
}
 8043aee:	4618      	mov	r0, r3
 8043af0:	3708      	adds	r7, #8
 8043af2:	46bd      	mov	sp, r7
 8043af4:	bd80      	pop	{r7, pc}

08043af6 <Probe_Handle>:

Status_t Probe_Handle(void)
{
 8043af6:	b480      	push	{r7}
 8043af8:	af00      	add	r7, sp, #0
    return STATUS_OK; // zatím prázdné
 8043afa:	2300      	movs	r3, #0
}
 8043afc:	4618      	mov	r0, r3
 8043afe:	46bd      	mov	sp, r7
 8043b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b04:	4770      	bx	lr

08043b06 <HAL_TIM_PeriodElapsedCallback>:

/* Callback functions --------------------------------------------------------*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8043b06:	b480      	push	{r7}
 8043b08:	b083      	sub	sp, #12
 8043b0a:	af00      	add	r7, sp, #0
 8043b0c:	6078      	str	r0, [r7, #4]

}
 8043b0e:	bf00      	nop
 8043b10:	370c      	adds	r7, #12
 8043b12:	46bd      	mov	sp, r7
 8043b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043b18:	4770      	bx	lr
	...

08043b1c <Probe_InitHAL>:

/* Private functions ---------------------------------------------------------*/
static Status_t Probe_InitHAL(void)
{
 8043b1c:	b580      	push	{r7, lr}
 8043b1e:	af00      	add	r7, sp, #0
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8043b20:	4805      	ldr	r0, [pc, #20]	@ (8043b38 <Probe_InitHAL+0x1c>)
 8043b22:	f7fe f96f 	bl	8041e04 <HAL_TIM_Base_Start_IT>
 8043b26:	4603      	mov	r3, r0
 8043b28:	2b00      	cmp	r3, #0
 8043b2a:	d001      	beq.n	8043b30 <Probe_InitHAL+0x14>
    {
        return STATUS_ERROR;
 8043b2c:	2301      	movs	r3, #1
 8043b2e:	e000      	b.n	8043b32 <Probe_InitHAL+0x16>
    }
    return STATUS_OK;
 8043b30:	2300      	movs	r3, #0
}
 8043b32:	4618      	mov	r0, r3
 8043b34:	bd80      	pop	{r7, pc}
 8043b36:	bf00      	nop
 8043b38:	20000a44 	.word	0x20000a44

08043b3c <memcmp>:
 8043b3c:	b510      	push	{r4, lr}
 8043b3e:	3901      	subs	r1, #1
 8043b40:	4402      	add	r2, r0
 8043b42:	4290      	cmp	r0, r2
 8043b44:	d101      	bne.n	8043b4a <memcmp+0xe>
 8043b46:	2000      	movs	r0, #0
 8043b48:	e005      	b.n	8043b56 <memcmp+0x1a>
 8043b4a:	7803      	ldrb	r3, [r0, #0]
 8043b4c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8043b50:	42a3      	cmp	r3, r4
 8043b52:	d001      	beq.n	8043b58 <memcmp+0x1c>
 8043b54:	1b18      	subs	r0, r3, r4
 8043b56:	bd10      	pop	{r4, pc}
 8043b58:	3001      	adds	r0, #1
 8043b5a:	e7f2      	b.n	8043b42 <memcmp+0x6>

08043b5c <memset>:
 8043b5c:	4402      	add	r2, r0
 8043b5e:	4603      	mov	r3, r0
 8043b60:	4293      	cmp	r3, r2
 8043b62:	d100      	bne.n	8043b66 <memset+0xa>
 8043b64:	4770      	bx	lr
 8043b66:	f803 1b01 	strb.w	r1, [r3], #1
 8043b6a:	e7f9      	b.n	8043b60 <memset+0x4>

08043b6c <__libc_init_array>:
 8043b6c:	b570      	push	{r4, r5, r6, lr}
 8043b6e:	4d0d      	ldr	r5, [pc, #52]	@ (8043ba4 <__libc_init_array+0x38>)
 8043b70:	4c0d      	ldr	r4, [pc, #52]	@ (8043ba8 <__libc_init_array+0x3c>)
 8043b72:	1b64      	subs	r4, r4, r5
 8043b74:	10a4      	asrs	r4, r4, #2
 8043b76:	2600      	movs	r6, #0
 8043b78:	42a6      	cmp	r6, r4
 8043b7a:	d109      	bne.n	8043b90 <__libc_init_array+0x24>
 8043b7c:	4d0b      	ldr	r5, [pc, #44]	@ (8043bac <__libc_init_array+0x40>)
 8043b7e:	4c0c      	ldr	r4, [pc, #48]	@ (8043bb0 <__libc_init_array+0x44>)
 8043b80:	f000 f826 	bl	8043bd0 <_init>
 8043b84:	1b64      	subs	r4, r4, r5
 8043b86:	10a4      	asrs	r4, r4, #2
 8043b88:	2600      	movs	r6, #0
 8043b8a:	42a6      	cmp	r6, r4
 8043b8c:	d105      	bne.n	8043b9a <__libc_init_array+0x2e>
 8043b8e:	bd70      	pop	{r4, r5, r6, pc}
 8043b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8043b94:	4798      	blx	r3
 8043b96:	3601      	adds	r6, #1
 8043b98:	e7ee      	b.n	8043b78 <__libc_init_array+0xc>
 8043b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8043b9e:	4798      	blx	r3
 8043ba0:	3601      	adds	r6, #1
 8043ba2:	e7f2      	b.n	8043b8a <__libc_init_array+0x1e>
 8043ba4:	08043e04 	.word	0x08043e04
 8043ba8:	08043e04 	.word	0x08043e04
 8043bac:	08043e04 	.word	0x08043e04
 8043bb0:	08043e08 	.word	0x08043e08

08043bb4 <memcpy>:
 8043bb4:	440a      	add	r2, r1
 8043bb6:	4291      	cmp	r1, r2
 8043bb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8043bbc:	d100      	bne.n	8043bc0 <memcpy+0xc>
 8043bbe:	4770      	bx	lr
 8043bc0:	b510      	push	{r4, lr}
 8043bc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8043bc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8043bca:	4291      	cmp	r1, r2
 8043bcc:	d1f9      	bne.n	8043bc2 <memcpy+0xe>
 8043bce:	bd10      	pop	{r4, pc}

08043bd0 <_init>:
 8043bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043bd2:	bf00      	nop
 8043bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043bd6:	bc08      	pop	{r3}
 8043bd8:	469e      	mov	lr, r3
 8043bda:	4770      	bx	lr

08043bdc <_fini>:
 8043bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043bde:	bf00      	nop
 8043be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8043be2:	bc08      	pop	{r3}
 8043be4:	469e      	mov	lr, r3
 8043be6:	4770      	bx	lr
