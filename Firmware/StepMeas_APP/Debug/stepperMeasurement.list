
stepperMeasurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000424  0800c000  0800c000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cec  0800c428  0800c428  00001428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08015114  08015114  0000a114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801536c  0801536c  0000b0cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801536c  0801536c  0000a36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015374  08015374  0000b0cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015374  08015374  0000a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015378  08015378  0000a378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  200000c0  0801537c  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001dfb8  200000cc  08015388  0000b0cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001e084  08015388  0000c084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b0cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b528  00000000  00000000  0000b0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000482c  00000000  00000000  00026624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  0002ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012e8  00000000  00000000  0002c6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002849d  00000000  00000000  0002d988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000228ef  00000000  00000000  00055e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef48d  00000000  00000000  00078714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167ba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066b4  00000000  00000000  00167be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0016e298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c428 <__do_global_dtors_aux>:
 800c428:	b510      	push	{r4, lr}
 800c42a:	4c05      	ldr	r4, [pc, #20]	@ (800c440 <__do_global_dtors_aux+0x18>)
 800c42c:	7823      	ldrb	r3, [r4, #0]
 800c42e:	b933      	cbnz	r3, 800c43e <__do_global_dtors_aux+0x16>
 800c430:	4b04      	ldr	r3, [pc, #16]	@ (800c444 <__do_global_dtors_aux+0x1c>)
 800c432:	b113      	cbz	r3, 800c43a <__do_global_dtors_aux+0x12>
 800c434:	4804      	ldr	r0, [pc, #16]	@ (800c448 <__do_global_dtors_aux+0x20>)
 800c436:	f3af 8000 	nop.w
 800c43a:	2301      	movs	r3, #1
 800c43c:	7023      	strb	r3, [r4, #0]
 800c43e:	bd10      	pop	{r4, pc}
 800c440:	200000cc 	.word	0x200000cc
 800c444:	00000000 	.word	0x00000000
 800c448:	080150fc 	.word	0x080150fc

0800c44c <frame_dummy>:
 800c44c:	b508      	push	{r3, lr}
 800c44e:	4b03      	ldr	r3, [pc, #12]	@ (800c45c <frame_dummy+0x10>)
 800c450:	b11b      	cbz	r3, 800c45a <frame_dummy+0xe>
 800c452:	4903      	ldr	r1, [pc, #12]	@ (800c460 <frame_dummy+0x14>)
 800c454:	4803      	ldr	r0, [pc, #12]	@ (800c464 <frame_dummy+0x18>)
 800c456:	f3af 8000 	nop.w
 800c45a:	bd08      	pop	{r3, pc}
 800c45c:	00000000 	.word	0x00000000
 800c460:	200000d0 	.word	0x200000d0
 800c464:	080150fc 	.word	0x080150fc

0800c468 <__aeabi_dmul>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800c46e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800c472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800c476:	bf1d      	ittte	ne
 800c478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800c47c:	ea94 0f0c 	teqne	r4, ip
 800c480:	ea95 0f0c 	teqne	r5, ip
 800c484:	f000 f8de 	bleq	800c644 <__aeabi_dmul+0x1dc>
 800c488:	442c      	add	r4, r5
 800c48a:	ea81 0603 	eor.w	r6, r1, r3
 800c48e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800c492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800c496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800c49a:	bf18      	it	ne
 800c49c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800c4a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c4a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c4a8:	d038      	beq.n	800c51c <__aeabi_dmul+0xb4>
 800c4aa:	fba0 ce02 	umull	ip, lr, r0, r2
 800c4ae:	f04f 0500 	mov.w	r5, #0
 800c4b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 800c4b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800c4ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 800c4be:	f04f 0600 	mov.w	r6, #0
 800c4c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 800c4c6:	f09c 0f00 	teq	ip, #0
 800c4ca:	bf18      	it	ne
 800c4cc:	f04e 0e01 	orrne.w	lr, lr, #1
 800c4d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800c4d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800c4d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800c4dc:	d204      	bcs.n	800c4e8 <__aeabi_dmul+0x80>
 800c4de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800c4e2:	416d      	adcs	r5, r5
 800c4e4:	eb46 0606 	adc.w	r6, r6, r6
 800c4e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800c4ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800c4f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800c4f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800c4f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800c4fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800c500:	bf88      	it	hi
 800c502:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800c506:	d81e      	bhi.n	800c546 <__aeabi_dmul+0xde>
 800c508:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800c50c:	bf08      	it	eq
 800c50e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800c512:	f150 0000 	adcs.w	r0, r0, #0
 800c516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c51a:	bd70      	pop	{r4, r5, r6, pc}
 800c51c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800c520:	ea46 0101 	orr.w	r1, r6, r1
 800c524:	ea40 0002 	orr.w	r0, r0, r2
 800c528:	ea81 0103 	eor.w	r1, r1, r3
 800c52c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800c530:	bfc2      	ittt	gt
 800c532:	ebd4 050c 	rsbsgt	r5, r4, ip
 800c536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800c53a:	bd70      	popgt	{r4, r5, r6, pc}
 800c53c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c540:	f04f 0e00 	mov.w	lr, #0
 800c544:	3c01      	subs	r4, #1
 800c546:	f300 80ab 	bgt.w	800c6a0 <__aeabi_dmul+0x238>
 800c54a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800c54e:	bfde      	ittt	le
 800c550:	2000      	movle	r0, #0
 800c552:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800c556:	bd70      	pople	{r4, r5, r6, pc}
 800c558:	f1c4 0400 	rsb	r4, r4, #0
 800c55c:	3c20      	subs	r4, #32
 800c55e:	da35      	bge.n	800c5cc <__aeabi_dmul+0x164>
 800c560:	340c      	adds	r4, #12
 800c562:	dc1b      	bgt.n	800c59c <__aeabi_dmul+0x134>
 800c564:	f104 0414 	add.w	r4, r4, #20
 800c568:	f1c4 0520 	rsb	r5, r4, #32
 800c56c:	fa00 f305 	lsl.w	r3, r0, r5
 800c570:	fa20 f004 	lsr.w	r0, r0, r4
 800c574:	fa01 f205 	lsl.w	r2, r1, r5
 800c578:	ea40 0002 	orr.w	r0, r0, r2
 800c57c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800c580:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c588:	fa21 f604 	lsr.w	r6, r1, r4
 800c58c:	eb42 0106 	adc.w	r1, r2, r6
 800c590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c594:	bf08      	it	eq
 800c596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c59a:	bd70      	pop	{r4, r5, r6, pc}
 800c59c:	f1c4 040c 	rsb	r4, r4, #12
 800c5a0:	f1c4 0520 	rsb	r5, r4, #32
 800c5a4:	fa00 f304 	lsl.w	r3, r0, r4
 800c5a8:	fa20 f005 	lsr.w	r0, r0, r5
 800c5ac:	fa01 f204 	lsl.w	r2, r1, r4
 800c5b0:	ea40 0002 	orr.w	r0, r0, r2
 800c5b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c5b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800c5bc:	f141 0100 	adc.w	r1, r1, #0
 800c5c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5c4:	bf08      	it	eq
 800c5c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c5ca:	bd70      	pop	{r4, r5, r6, pc}
 800c5cc:	f1c4 0520 	rsb	r5, r4, #32
 800c5d0:	fa00 f205 	lsl.w	r2, r0, r5
 800c5d4:	ea4e 0e02 	orr.w	lr, lr, r2
 800c5d8:	fa20 f304 	lsr.w	r3, r0, r4
 800c5dc:	fa01 f205 	lsl.w	r2, r1, r5
 800c5e0:	ea43 0302 	orr.w	r3, r3, r2
 800c5e4:	fa21 f004 	lsr.w	r0, r1, r4
 800c5e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c5ec:	fa21 f204 	lsr.w	r2, r1, r4
 800c5f0:	ea20 0002 	bic.w	r0, r0, r2
 800c5f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800c5f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800c5fc:	bf08      	it	eq
 800c5fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800c602:	bd70      	pop	{r4, r5, r6, pc}
 800c604:	f094 0f00 	teq	r4, #0
 800c608:	d10f      	bne.n	800c62a <__aeabi_dmul+0x1c2>
 800c60a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800c60e:	0040      	lsls	r0, r0, #1
 800c610:	eb41 0101 	adc.w	r1, r1, r1
 800c614:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800c618:	bf08      	it	eq
 800c61a:	3c01      	subeq	r4, #1
 800c61c:	d0f7      	beq.n	800c60e <__aeabi_dmul+0x1a6>
 800c61e:	ea41 0106 	orr.w	r1, r1, r6
 800c622:	f095 0f00 	teq	r5, #0
 800c626:	bf18      	it	ne
 800c628:	4770      	bxne	lr
 800c62a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800c62e:	0052      	lsls	r2, r2, #1
 800c630:	eb43 0303 	adc.w	r3, r3, r3
 800c634:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800c638:	bf08      	it	eq
 800c63a:	3d01      	subeq	r5, #1
 800c63c:	d0f7      	beq.n	800c62e <__aeabi_dmul+0x1c6>
 800c63e:	ea43 0306 	orr.w	r3, r3, r6
 800c642:	4770      	bx	lr
 800c644:	ea94 0f0c 	teq	r4, ip
 800c648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800c64c:	bf18      	it	ne
 800c64e:	ea95 0f0c 	teqne	r5, ip
 800c652:	d00c      	beq.n	800c66e <__aeabi_dmul+0x206>
 800c654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c658:	bf18      	it	ne
 800c65a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c65e:	d1d1      	bne.n	800c604 <__aeabi_dmul+0x19c>
 800c660:	ea81 0103 	eor.w	r1, r1, r3
 800c664:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c668:	f04f 0000 	mov.w	r0, #0
 800c66c:	bd70      	pop	{r4, r5, r6, pc}
 800c66e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800c672:	bf06      	itte	eq
 800c674:	4610      	moveq	r0, r2
 800c676:	4619      	moveq	r1, r3
 800c678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800c67c:	d019      	beq.n	800c6b2 <__aeabi_dmul+0x24a>
 800c67e:	ea94 0f0c 	teq	r4, ip
 800c682:	d102      	bne.n	800c68a <__aeabi_dmul+0x222>
 800c684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800c688:	d113      	bne.n	800c6b2 <__aeabi_dmul+0x24a>
 800c68a:	ea95 0f0c 	teq	r5, ip
 800c68e:	d105      	bne.n	800c69c <__aeabi_dmul+0x234>
 800c690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800c694:	bf1c      	itt	ne
 800c696:	4610      	movne	r0, r2
 800c698:	4619      	movne	r1, r3
 800c69a:	d10a      	bne.n	800c6b2 <__aeabi_dmul+0x24a>
 800c69c:	ea81 0103 	eor.w	r1, r1, r3
 800c6a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800c6a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800c6a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c6ac:	f04f 0000 	mov.w	r0, #0
 800c6b0:	bd70      	pop	{r4, r5, r6, pc}
 800c6b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800c6b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800c6ba:	bd70      	pop	{r4, r5, r6, pc}

0800c6bc <__aeabi_drsub>:
 800c6bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800c6c0:	e002      	b.n	800c6c8 <__adddf3>
 800c6c2:	bf00      	nop

0800c6c4 <__aeabi_dsub>:
 800c6c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800c6c8 <__adddf3>:
 800c6c8:	b530      	push	{r4, r5, lr}
 800c6ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800c6ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800c6d2:	ea94 0f05 	teq	r4, r5
 800c6d6:	bf08      	it	eq
 800c6d8:	ea90 0f02 	teqeq	r0, r2
 800c6dc:	bf1f      	itttt	ne
 800c6de:	ea54 0c00 	orrsne.w	ip, r4, r0
 800c6e2:	ea55 0c02 	orrsne.w	ip, r5, r2
 800c6e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800c6ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c6ee:	f000 80e2 	beq.w	800c8b6 <__adddf3+0x1ee>
 800c6f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800c6f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800c6fa:	bfb8      	it	lt
 800c6fc:	426d      	neglt	r5, r5
 800c6fe:	dd0c      	ble.n	800c71a <__adddf3+0x52>
 800c700:	442c      	add	r4, r5
 800c702:	ea80 0202 	eor.w	r2, r0, r2
 800c706:	ea81 0303 	eor.w	r3, r1, r3
 800c70a:	ea82 0000 	eor.w	r0, r2, r0
 800c70e:	ea83 0101 	eor.w	r1, r3, r1
 800c712:	ea80 0202 	eor.w	r2, r0, r2
 800c716:	ea81 0303 	eor.w	r3, r1, r3
 800c71a:	2d36      	cmp	r5, #54	@ 0x36
 800c71c:	bf88      	it	hi
 800c71e:	bd30      	pophi	{r4, r5, pc}
 800c720:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800c724:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800c728:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800c72c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800c730:	d002      	beq.n	800c738 <__adddf3+0x70>
 800c732:	4240      	negs	r0, r0
 800c734:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c738:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800c73c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800c740:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800c744:	d002      	beq.n	800c74c <__adddf3+0x84>
 800c746:	4252      	negs	r2, r2
 800c748:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800c74c:	ea94 0f05 	teq	r4, r5
 800c750:	f000 80a7 	beq.w	800c8a2 <__adddf3+0x1da>
 800c754:	f1a4 0401 	sub.w	r4, r4, #1
 800c758:	f1d5 0e20 	rsbs	lr, r5, #32
 800c75c:	db0d      	blt.n	800c77a <__adddf3+0xb2>
 800c75e:	fa02 fc0e 	lsl.w	ip, r2, lr
 800c762:	fa22 f205 	lsr.w	r2, r2, r5
 800c766:	1880      	adds	r0, r0, r2
 800c768:	f141 0100 	adc.w	r1, r1, #0
 800c76c:	fa03 f20e 	lsl.w	r2, r3, lr
 800c770:	1880      	adds	r0, r0, r2
 800c772:	fa43 f305 	asr.w	r3, r3, r5
 800c776:	4159      	adcs	r1, r3
 800c778:	e00e      	b.n	800c798 <__adddf3+0xd0>
 800c77a:	f1a5 0520 	sub.w	r5, r5, #32
 800c77e:	f10e 0e20 	add.w	lr, lr, #32
 800c782:	2a01      	cmp	r2, #1
 800c784:	fa03 fc0e 	lsl.w	ip, r3, lr
 800c788:	bf28      	it	cs
 800c78a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800c78e:	fa43 f305 	asr.w	r3, r3, r5
 800c792:	18c0      	adds	r0, r0, r3
 800c794:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800c798:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c79c:	d507      	bpl.n	800c7ae <__adddf3+0xe6>
 800c79e:	f04f 0e00 	mov.w	lr, #0
 800c7a2:	f1dc 0c00 	rsbs	ip, ip, #0
 800c7a6:	eb7e 0000 	sbcs.w	r0, lr, r0
 800c7aa:	eb6e 0101 	sbc.w	r1, lr, r1
 800c7ae:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800c7b2:	d31b      	bcc.n	800c7ec <__adddf3+0x124>
 800c7b4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800c7b8:	d30c      	bcc.n	800c7d4 <__adddf3+0x10c>
 800c7ba:	0849      	lsrs	r1, r1, #1
 800c7bc:	ea5f 0030 	movs.w	r0, r0, rrx
 800c7c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800c7c4:	f104 0401 	add.w	r4, r4, #1
 800c7c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800c7cc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800c7d0:	f080 809a 	bcs.w	800c908 <__adddf3+0x240>
 800c7d4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800c7d8:	bf08      	it	eq
 800c7da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800c7de:	f150 0000 	adcs.w	r0, r0, #0
 800c7e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800c7e6:	ea41 0105 	orr.w	r1, r1, r5
 800c7ea:	bd30      	pop	{r4, r5, pc}
 800c7ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800c7f0:	4140      	adcs	r0, r0
 800c7f2:	eb41 0101 	adc.w	r1, r1, r1
 800c7f6:	3c01      	subs	r4, #1
 800c7f8:	bf28      	it	cs
 800c7fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800c7fe:	d2e9      	bcs.n	800c7d4 <__adddf3+0x10c>
 800c800:	f091 0f00 	teq	r1, #0
 800c804:	bf04      	itt	eq
 800c806:	4601      	moveq	r1, r0
 800c808:	2000      	moveq	r0, #0
 800c80a:	fab1 f381 	clz	r3, r1
 800c80e:	bf08      	it	eq
 800c810:	3320      	addeq	r3, #32
 800c812:	f1a3 030b 	sub.w	r3, r3, #11
 800c816:	f1b3 0220 	subs.w	r2, r3, #32
 800c81a:	da0c      	bge.n	800c836 <__adddf3+0x16e>
 800c81c:	320c      	adds	r2, #12
 800c81e:	dd08      	ble.n	800c832 <__adddf3+0x16a>
 800c820:	f102 0c14 	add.w	ip, r2, #20
 800c824:	f1c2 020c 	rsb	r2, r2, #12
 800c828:	fa01 f00c 	lsl.w	r0, r1, ip
 800c82c:	fa21 f102 	lsr.w	r1, r1, r2
 800c830:	e00c      	b.n	800c84c <__adddf3+0x184>
 800c832:	f102 0214 	add.w	r2, r2, #20
 800c836:	bfd8      	it	le
 800c838:	f1c2 0c20 	rsble	ip, r2, #32
 800c83c:	fa01 f102 	lsl.w	r1, r1, r2
 800c840:	fa20 fc0c 	lsr.w	ip, r0, ip
 800c844:	bfdc      	itt	le
 800c846:	ea41 010c 	orrle.w	r1, r1, ip
 800c84a:	4090      	lslle	r0, r2
 800c84c:	1ae4      	subs	r4, r4, r3
 800c84e:	bfa2      	ittt	ge
 800c850:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800c854:	4329      	orrge	r1, r5
 800c856:	bd30      	popge	{r4, r5, pc}
 800c858:	ea6f 0404 	mvn.w	r4, r4
 800c85c:	3c1f      	subs	r4, #31
 800c85e:	da1c      	bge.n	800c89a <__adddf3+0x1d2>
 800c860:	340c      	adds	r4, #12
 800c862:	dc0e      	bgt.n	800c882 <__adddf3+0x1ba>
 800c864:	f104 0414 	add.w	r4, r4, #20
 800c868:	f1c4 0220 	rsb	r2, r4, #32
 800c86c:	fa20 f004 	lsr.w	r0, r0, r4
 800c870:	fa01 f302 	lsl.w	r3, r1, r2
 800c874:	ea40 0003 	orr.w	r0, r0, r3
 800c878:	fa21 f304 	lsr.w	r3, r1, r4
 800c87c:	ea45 0103 	orr.w	r1, r5, r3
 800c880:	bd30      	pop	{r4, r5, pc}
 800c882:	f1c4 040c 	rsb	r4, r4, #12
 800c886:	f1c4 0220 	rsb	r2, r4, #32
 800c88a:	fa20 f002 	lsr.w	r0, r0, r2
 800c88e:	fa01 f304 	lsl.w	r3, r1, r4
 800c892:	ea40 0003 	orr.w	r0, r0, r3
 800c896:	4629      	mov	r1, r5
 800c898:	bd30      	pop	{r4, r5, pc}
 800c89a:	fa21 f004 	lsr.w	r0, r1, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	bd30      	pop	{r4, r5, pc}
 800c8a2:	f094 0f00 	teq	r4, #0
 800c8a6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800c8aa:	bf06      	itte	eq
 800c8ac:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800c8b0:	3401      	addeq	r4, #1
 800c8b2:	3d01      	subne	r5, #1
 800c8b4:	e74e      	b.n	800c754 <__adddf3+0x8c>
 800c8b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c8ba:	bf18      	it	ne
 800c8bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800c8c0:	d029      	beq.n	800c916 <__adddf3+0x24e>
 800c8c2:	ea94 0f05 	teq	r4, r5
 800c8c6:	bf08      	it	eq
 800c8c8:	ea90 0f02 	teqeq	r0, r2
 800c8cc:	d005      	beq.n	800c8da <__adddf3+0x212>
 800c8ce:	ea54 0c00 	orrs.w	ip, r4, r0
 800c8d2:	bf04      	itt	eq
 800c8d4:	4619      	moveq	r1, r3
 800c8d6:	4610      	moveq	r0, r2
 800c8d8:	bd30      	pop	{r4, r5, pc}
 800c8da:	ea91 0f03 	teq	r1, r3
 800c8de:	bf1e      	ittt	ne
 800c8e0:	2100      	movne	r1, #0
 800c8e2:	2000      	movne	r0, #0
 800c8e4:	bd30      	popne	{r4, r5, pc}
 800c8e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800c8ea:	d105      	bne.n	800c8f8 <__adddf3+0x230>
 800c8ec:	0040      	lsls	r0, r0, #1
 800c8ee:	4149      	adcs	r1, r1
 800c8f0:	bf28      	it	cs
 800c8f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800c8f6:	bd30      	pop	{r4, r5, pc}
 800c8f8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800c8fc:	bf3c      	itt	cc
 800c8fe:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800c902:	bd30      	popcc	{r4, r5, pc}
 800c904:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c908:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800c90c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c910:	f04f 0000 	mov.w	r0, #0
 800c914:	bd30      	pop	{r4, r5, pc}
 800c916:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800c91a:	bf1a      	itte	ne
 800c91c:	4619      	movne	r1, r3
 800c91e:	4610      	movne	r0, r2
 800c920:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800c924:	bf1c      	itt	ne
 800c926:	460b      	movne	r3, r1
 800c928:	4602      	movne	r2, r0
 800c92a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800c92e:	bf06      	itte	eq
 800c930:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800c934:	ea91 0f03 	teqeq	r1, r3
 800c938:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800c93c:	bd30      	pop	{r4, r5, pc}
 800c93e:	bf00      	nop

0800c940 <__aeabi_ui2d>:
 800c940:	f090 0f00 	teq	r0, #0
 800c944:	bf04      	itt	eq
 800c946:	2100      	moveq	r1, #0
 800c948:	4770      	bxeq	lr
 800c94a:	b530      	push	{r4, r5, lr}
 800c94c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c950:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c954:	f04f 0500 	mov.w	r5, #0
 800c958:	f04f 0100 	mov.w	r1, #0
 800c95c:	e750      	b.n	800c800 <__adddf3+0x138>
 800c95e:	bf00      	nop

0800c960 <__aeabi_i2d>:
 800c960:	f090 0f00 	teq	r0, #0
 800c964:	bf04      	itt	eq
 800c966:	2100      	moveq	r1, #0
 800c968:	4770      	bxeq	lr
 800c96a:	b530      	push	{r4, r5, lr}
 800c96c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c970:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c974:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800c978:	bf48      	it	mi
 800c97a:	4240      	negmi	r0, r0
 800c97c:	f04f 0100 	mov.w	r1, #0
 800c980:	e73e      	b.n	800c800 <__adddf3+0x138>
 800c982:	bf00      	nop

0800c984 <__aeabi_f2d>:
 800c984:	0042      	lsls	r2, r0, #1
 800c986:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800c98a:	ea4f 0131 	mov.w	r1, r1, rrx
 800c98e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800c992:	bf1f      	itttt	ne
 800c994:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800c998:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800c99c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800c9a0:	4770      	bxne	lr
 800c9a2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800c9a6:	bf08      	it	eq
 800c9a8:	4770      	bxeq	lr
 800c9aa:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800c9ae:	bf04      	itt	eq
 800c9b0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800c9b4:	4770      	bxeq	lr
 800c9b6:	b530      	push	{r4, r5, lr}
 800c9b8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800c9bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c9c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800c9c4:	e71c      	b.n	800c800 <__adddf3+0x138>
 800c9c6:	bf00      	nop

0800c9c8 <__aeabi_ul2d>:
 800c9c8:	ea50 0201 	orrs.w	r2, r0, r1
 800c9cc:	bf08      	it	eq
 800c9ce:	4770      	bxeq	lr
 800c9d0:	b530      	push	{r4, r5, lr}
 800c9d2:	f04f 0500 	mov.w	r5, #0
 800c9d6:	e00a      	b.n	800c9ee <__aeabi_l2d+0x16>

0800c9d8 <__aeabi_l2d>:
 800c9d8:	ea50 0201 	orrs.w	r2, r0, r1
 800c9dc:	bf08      	it	eq
 800c9de:	4770      	bxeq	lr
 800c9e0:	b530      	push	{r4, r5, lr}
 800c9e2:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800c9e6:	d502      	bpl.n	800c9ee <__aeabi_l2d+0x16>
 800c9e8:	4240      	negs	r0, r0
 800c9ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800c9ee:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800c9f2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800c9f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800c9fa:	f43f aed8 	beq.w	800c7ae <__adddf3+0xe6>
 800c9fe:	f04f 0203 	mov.w	r2, #3
 800ca02:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ca06:	bf18      	it	ne
 800ca08:	3203      	addne	r2, #3
 800ca0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800ca0e:	bf18      	it	ne
 800ca10:	3203      	addne	r2, #3
 800ca12:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800ca16:	f1c2 0320 	rsb	r3, r2, #32
 800ca1a:	fa00 fc03 	lsl.w	ip, r0, r3
 800ca1e:	fa20 f002 	lsr.w	r0, r0, r2
 800ca22:	fa01 fe03 	lsl.w	lr, r1, r3
 800ca26:	ea40 000e 	orr.w	r0, r0, lr
 800ca2a:	fa21 f102 	lsr.w	r1, r1, r2
 800ca2e:	4414      	add	r4, r2
 800ca30:	e6bd      	b.n	800c7ae <__adddf3+0xe6>
 800ca32:	bf00      	nop

0800ca34 <__aeabi_d2iz>:
 800ca34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800ca38:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800ca3c:	d215      	bcs.n	800ca6a <__aeabi_d2iz+0x36>
 800ca3e:	d511      	bpl.n	800ca64 <__aeabi_d2iz+0x30>
 800ca40:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800ca44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800ca48:	d912      	bls.n	800ca70 <__aeabi_d2iz+0x3c>
 800ca4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800ca4e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ca52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800ca56:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800ca5a:	fa23 f002 	lsr.w	r0, r3, r2
 800ca5e:	bf18      	it	ne
 800ca60:	4240      	negne	r0, r0
 800ca62:	4770      	bx	lr
 800ca64:	f04f 0000 	mov.w	r0, #0
 800ca68:	4770      	bx	lr
 800ca6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800ca6e:	d105      	bne.n	800ca7c <__aeabi_d2iz+0x48>
 800ca70:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800ca74:	bf08      	it	eq
 800ca76:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800ca7a:	4770      	bx	lr
 800ca7c:	f04f 0000 	mov.w	r0, #0
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop

0800ca84 <__aeabi_uldivmod>:
 800ca84:	b953      	cbnz	r3, 800ca9c <__aeabi_uldivmod+0x18>
 800ca86:	b94a      	cbnz	r2, 800ca9c <__aeabi_uldivmod+0x18>
 800ca88:	2900      	cmp	r1, #0
 800ca8a:	bf08      	it	eq
 800ca8c:	2800      	cmpeq	r0, #0
 800ca8e:	bf1c      	itt	ne
 800ca90:	f04f 31ff 	movne.w	r1, #4294967295
 800ca94:	f04f 30ff 	movne.w	r0, #4294967295
 800ca98:	f000 b96a 	b.w	800cd70 <__aeabi_idiv0>
 800ca9c:	f1ad 0c08 	sub.w	ip, sp, #8
 800caa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800caa4:	f000 f806 	bl	800cab4 <__udivmoddi4>
 800caa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 800caac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cab0:	b004      	add	sp, #16
 800cab2:	4770      	bx	lr

0800cab4 <__udivmoddi4>:
 800cab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cab8:	9d08      	ldr	r5, [sp, #32]
 800caba:	460c      	mov	r4, r1
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d14e      	bne.n	800cb5e <__udivmoddi4+0xaa>
 800cac0:	4694      	mov	ip, r2
 800cac2:	458c      	cmp	ip, r1
 800cac4:	4686      	mov	lr, r0
 800cac6:	fab2 f282 	clz	r2, r2
 800caca:	d962      	bls.n	800cb92 <__udivmoddi4+0xde>
 800cacc:	b14a      	cbz	r2, 800cae2 <__udivmoddi4+0x2e>
 800cace:	f1c2 0320 	rsb	r3, r2, #32
 800cad2:	4091      	lsls	r1, r2
 800cad4:	fa20 f303 	lsr.w	r3, r0, r3
 800cad8:	fa0c fc02 	lsl.w	ip, ip, r2
 800cadc:	4319      	orrs	r1, r3
 800cade:	fa00 fe02 	lsl.w	lr, r0, r2
 800cae2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800cae6:	fa1f f68c 	uxth.w	r6, ip
 800caea:	fbb1 f4f7 	udiv	r4, r1, r7
 800caee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800caf2:	fb07 1114 	mls	r1, r7, r4, r1
 800caf6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cafa:	fb04 f106 	mul.w	r1, r4, r6
 800cafe:	4299      	cmp	r1, r3
 800cb00:	d90a      	bls.n	800cb18 <__udivmoddi4+0x64>
 800cb02:	eb1c 0303 	adds.w	r3, ip, r3
 800cb06:	f104 30ff 	add.w	r0, r4, #4294967295
 800cb0a:	f080 8112 	bcs.w	800cd32 <__udivmoddi4+0x27e>
 800cb0e:	4299      	cmp	r1, r3
 800cb10:	f240 810f 	bls.w	800cd32 <__udivmoddi4+0x27e>
 800cb14:	3c02      	subs	r4, #2
 800cb16:	4463      	add	r3, ip
 800cb18:	1a59      	subs	r1, r3, r1
 800cb1a:	fa1f f38e 	uxth.w	r3, lr
 800cb1e:	fbb1 f0f7 	udiv	r0, r1, r7
 800cb22:	fb07 1110 	mls	r1, r7, r0, r1
 800cb26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cb2a:	fb00 f606 	mul.w	r6, r0, r6
 800cb2e:	429e      	cmp	r6, r3
 800cb30:	d90a      	bls.n	800cb48 <__udivmoddi4+0x94>
 800cb32:	eb1c 0303 	adds.w	r3, ip, r3
 800cb36:	f100 31ff 	add.w	r1, r0, #4294967295
 800cb3a:	f080 80fc 	bcs.w	800cd36 <__udivmoddi4+0x282>
 800cb3e:	429e      	cmp	r6, r3
 800cb40:	f240 80f9 	bls.w	800cd36 <__udivmoddi4+0x282>
 800cb44:	4463      	add	r3, ip
 800cb46:	3802      	subs	r0, #2
 800cb48:	1b9b      	subs	r3, r3, r6
 800cb4a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800cb4e:	2100      	movs	r1, #0
 800cb50:	b11d      	cbz	r5, 800cb5a <__udivmoddi4+0xa6>
 800cb52:	40d3      	lsrs	r3, r2
 800cb54:	2200      	movs	r2, #0
 800cb56:	e9c5 3200 	strd	r3, r2, [r5]
 800cb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb5e:	428b      	cmp	r3, r1
 800cb60:	d905      	bls.n	800cb6e <__udivmoddi4+0xba>
 800cb62:	b10d      	cbz	r5, 800cb68 <__udivmoddi4+0xb4>
 800cb64:	e9c5 0100 	strd	r0, r1, [r5]
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4608      	mov	r0, r1
 800cb6c:	e7f5      	b.n	800cb5a <__udivmoddi4+0xa6>
 800cb6e:	fab3 f183 	clz	r1, r3
 800cb72:	2900      	cmp	r1, #0
 800cb74:	d146      	bne.n	800cc04 <__udivmoddi4+0x150>
 800cb76:	42a3      	cmp	r3, r4
 800cb78:	d302      	bcc.n	800cb80 <__udivmoddi4+0xcc>
 800cb7a:	4290      	cmp	r0, r2
 800cb7c:	f0c0 80f0 	bcc.w	800cd60 <__udivmoddi4+0x2ac>
 800cb80:	1a86      	subs	r6, r0, r2
 800cb82:	eb64 0303 	sbc.w	r3, r4, r3
 800cb86:	2001      	movs	r0, #1
 800cb88:	2d00      	cmp	r5, #0
 800cb8a:	d0e6      	beq.n	800cb5a <__udivmoddi4+0xa6>
 800cb8c:	e9c5 6300 	strd	r6, r3, [r5]
 800cb90:	e7e3      	b.n	800cb5a <__udivmoddi4+0xa6>
 800cb92:	2a00      	cmp	r2, #0
 800cb94:	f040 8090 	bne.w	800ccb8 <__udivmoddi4+0x204>
 800cb98:	eba1 040c 	sub.w	r4, r1, ip
 800cb9c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800cba0:	fa1f f78c 	uxth.w	r7, ip
 800cba4:	2101      	movs	r1, #1
 800cba6:	fbb4 f6f8 	udiv	r6, r4, r8
 800cbaa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800cbae:	fb08 4416 	mls	r4, r8, r6, r4
 800cbb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cbb6:	fb07 f006 	mul.w	r0, r7, r6
 800cbba:	4298      	cmp	r0, r3
 800cbbc:	d908      	bls.n	800cbd0 <__udivmoddi4+0x11c>
 800cbbe:	eb1c 0303 	adds.w	r3, ip, r3
 800cbc2:	f106 34ff 	add.w	r4, r6, #4294967295
 800cbc6:	d202      	bcs.n	800cbce <__udivmoddi4+0x11a>
 800cbc8:	4298      	cmp	r0, r3
 800cbca:	f200 80cd 	bhi.w	800cd68 <__udivmoddi4+0x2b4>
 800cbce:	4626      	mov	r6, r4
 800cbd0:	1a1c      	subs	r4, r3, r0
 800cbd2:	fa1f f38e 	uxth.w	r3, lr
 800cbd6:	fbb4 f0f8 	udiv	r0, r4, r8
 800cbda:	fb08 4410 	mls	r4, r8, r0, r4
 800cbde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800cbe2:	fb00 f707 	mul.w	r7, r0, r7
 800cbe6:	429f      	cmp	r7, r3
 800cbe8:	d908      	bls.n	800cbfc <__udivmoddi4+0x148>
 800cbea:	eb1c 0303 	adds.w	r3, ip, r3
 800cbee:	f100 34ff 	add.w	r4, r0, #4294967295
 800cbf2:	d202      	bcs.n	800cbfa <__udivmoddi4+0x146>
 800cbf4:	429f      	cmp	r7, r3
 800cbf6:	f200 80b0 	bhi.w	800cd5a <__udivmoddi4+0x2a6>
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	1bdb      	subs	r3, r3, r7
 800cbfe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800cc02:	e7a5      	b.n	800cb50 <__udivmoddi4+0x9c>
 800cc04:	f1c1 0620 	rsb	r6, r1, #32
 800cc08:	408b      	lsls	r3, r1
 800cc0a:	fa22 f706 	lsr.w	r7, r2, r6
 800cc0e:	431f      	orrs	r7, r3
 800cc10:	fa20 fc06 	lsr.w	ip, r0, r6
 800cc14:	fa04 f301 	lsl.w	r3, r4, r1
 800cc18:	ea43 030c 	orr.w	r3, r3, ip
 800cc1c:	40f4      	lsrs	r4, r6
 800cc1e:	fa00 f801 	lsl.w	r8, r0, r1
 800cc22:	0c38      	lsrs	r0, r7, #16
 800cc24:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800cc28:	fbb4 fef0 	udiv	lr, r4, r0
 800cc2c:	fa1f fc87 	uxth.w	ip, r7
 800cc30:	fb00 441e 	mls	r4, r0, lr, r4
 800cc34:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800cc38:	fb0e f90c 	mul.w	r9, lr, ip
 800cc3c:	45a1      	cmp	r9, r4
 800cc3e:	fa02 f201 	lsl.w	r2, r2, r1
 800cc42:	d90a      	bls.n	800cc5a <__udivmoddi4+0x1a6>
 800cc44:	193c      	adds	r4, r7, r4
 800cc46:	f10e 3aff 	add.w	sl, lr, #4294967295
 800cc4a:	f080 8084 	bcs.w	800cd56 <__udivmoddi4+0x2a2>
 800cc4e:	45a1      	cmp	r9, r4
 800cc50:	f240 8081 	bls.w	800cd56 <__udivmoddi4+0x2a2>
 800cc54:	f1ae 0e02 	sub.w	lr, lr, #2
 800cc58:	443c      	add	r4, r7
 800cc5a:	eba4 0409 	sub.w	r4, r4, r9
 800cc5e:	fa1f f983 	uxth.w	r9, r3
 800cc62:	fbb4 f3f0 	udiv	r3, r4, r0
 800cc66:	fb00 4413 	mls	r4, r0, r3, r4
 800cc6a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800cc6e:	fb03 fc0c 	mul.w	ip, r3, ip
 800cc72:	45a4      	cmp	ip, r4
 800cc74:	d907      	bls.n	800cc86 <__udivmoddi4+0x1d2>
 800cc76:	193c      	adds	r4, r7, r4
 800cc78:	f103 30ff 	add.w	r0, r3, #4294967295
 800cc7c:	d267      	bcs.n	800cd4e <__udivmoddi4+0x29a>
 800cc7e:	45a4      	cmp	ip, r4
 800cc80:	d965      	bls.n	800cd4e <__udivmoddi4+0x29a>
 800cc82:	3b02      	subs	r3, #2
 800cc84:	443c      	add	r4, r7
 800cc86:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800cc8a:	fba0 9302 	umull	r9, r3, r0, r2
 800cc8e:	eba4 040c 	sub.w	r4, r4, ip
 800cc92:	429c      	cmp	r4, r3
 800cc94:	46ce      	mov	lr, r9
 800cc96:	469c      	mov	ip, r3
 800cc98:	d351      	bcc.n	800cd3e <__udivmoddi4+0x28a>
 800cc9a:	d04e      	beq.n	800cd3a <__udivmoddi4+0x286>
 800cc9c:	b155      	cbz	r5, 800ccb4 <__udivmoddi4+0x200>
 800cc9e:	ebb8 030e 	subs.w	r3, r8, lr
 800cca2:	eb64 040c 	sbc.w	r4, r4, ip
 800cca6:	fa04 f606 	lsl.w	r6, r4, r6
 800ccaa:	40cb      	lsrs	r3, r1
 800ccac:	431e      	orrs	r6, r3
 800ccae:	40cc      	lsrs	r4, r1
 800ccb0:	e9c5 6400 	strd	r6, r4, [r5]
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	e750      	b.n	800cb5a <__udivmoddi4+0xa6>
 800ccb8:	f1c2 0320 	rsb	r3, r2, #32
 800ccbc:	fa20 f103 	lsr.w	r1, r0, r3
 800ccc0:	fa0c fc02 	lsl.w	ip, ip, r2
 800ccc4:	fa24 f303 	lsr.w	r3, r4, r3
 800ccc8:	4094      	lsls	r4, r2
 800ccca:	430c      	orrs	r4, r1
 800cccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800ccd0:	fa00 fe02 	lsl.w	lr, r0, r2
 800ccd4:	fa1f f78c 	uxth.w	r7, ip
 800ccd8:	fbb3 f0f8 	udiv	r0, r3, r8
 800ccdc:	fb08 3110 	mls	r1, r8, r0, r3
 800cce0:	0c23      	lsrs	r3, r4, #16
 800cce2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800cce6:	fb00 f107 	mul.w	r1, r0, r7
 800ccea:	4299      	cmp	r1, r3
 800ccec:	d908      	bls.n	800cd00 <__udivmoddi4+0x24c>
 800ccee:	eb1c 0303 	adds.w	r3, ip, r3
 800ccf2:	f100 36ff 	add.w	r6, r0, #4294967295
 800ccf6:	d22c      	bcs.n	800cd52 <__udivmoddi4+0x29e>
 800ccf8:	4299      	cmp	r1, r3
 800ccfa:	d92a      	bls.n	800cd52 <__udivmoddi4+0x29e>
 800ccfc:	3802      	subs	r0, #2
 800ccfe:	4463      	add	r3, ip
 800cd00:	1a5b      	subs	r3, r3, r1
 800cd02:	b2a4      	uxth	r4, r4
 800cd04:	fbb3 f1f8 	udiv	r1, r3, r8
 800cd08:	fb08 3311 	mls	r3, r8, r1, r3
 800cd0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800cd10:	fb01 f307 	mul.w	r3, r1, r7
 800cd14:	42a3      	cmp	r3, r4
 800cd16:	d908      	bls.n	800cd2a <__udivmoddi4+0x276>
 800cd18:	eb1c 0404 	adds.w	r4, ip, r4
 800cd1c:	f101 36ff 	add.w	r6, r1, #4294967295
 800cd20:	d213      	bcs.n	800cd4a <__udivmoddi4+0x296>
 800cd22:	42a3      	cmp	r3, r4
 800cd24:	d911      	bls.n	800cd4a <__udivmoddi4+0x296>
 800cd26:	3902      	subs	r1, #2
 800cd28:	4464      	add	r4, ip
 800cd2a:	1ae4      	subs	r4, r4, r3
 800cd2c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd30:	e739      	b.n	800cba6 <__udivmoddi4+0xf2>
 800cd32:	4604      	mov	r4, r0
 800cd34:	e6f0      	b.n	800cb18 <__udivmoddi4+0x64>
 800cd36:	4608      	mov	r0, r1
 800cd38:	e706      	b.n	800cb48 <__udivmoddi4+0x94>
 800cd3a:	45c8      	cmp	r8, r9
 800cd3c:	d2ae      	bcs.n	800cc9c <__udivmoddi4+0x1e8>
 800cd3e:	ebb9 0e02 	subs.w	lr, r9, r2
 800cd42:	eb63 0c07 	sbc.w	ip, r3, r7
 800cd46:	3801      	subs	r0, #1
 800cd48:	e7a8      	b.n	800cc9c <__udivmoddi4+0x1e8>
 800cd4a:	4631      	mov	r1, r6
 800cd4c:	e7ed      	b.n	800cd2a <__udivmoddi4+0x276>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	e799      	b.n	800cc86 <__udivmoddi4+0x1d2>
 800cd52:	4630      	mov	r0, r6
 800cd54:	e7d4      	b.n	800cd00 <__udivmoddi4+0x24c>
 800cd56:	46d6      	mov	lr, sl
 800cd58:	e77f      	b.n	800cc5a <__udivmoddi4+0x1a6>
 800cd5a:	4463      	add	r3, ip
 800cd5c:	3802      	subs	r0, #2
 800cd5e:	e74d      	b.n	800cbfc <__udivmoddi4+0x148>
 800cd60:	4606      	mov	r6, r0
 800cd62:	4623      	mov	r3, r4
 800cd64:	4608      	mov	r0, r1
 800cd66:	e70f      	b.n	800cb88 <__udivmoddi4+0xd4>
 800cd68:	3e02      	subs	r6, #2
 800cd6a:	4463      	add	r3, ip
 800cd6c:	e730      	b.n	800cbd0 <__udivmoddi4+0x11c>
 800cd6e:	bf00      	nop

0800cd70 <__aeabi_idiv0>:
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop

0800cd74 <Config_AppInit>:
/* Public variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/

Status_t Config_AppInit(void)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	80fb      	strh	r3, [r7, #6]

  UNUSED(ca);

  return ret;
 800cd7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800cd82:	4618      	mov	r0, r3
 800cd84:	370c      	adds	r7, #12
 800cd86:	46bd      	mov	sp, r7
 800cd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8c:	4770      	bx	lr

0800cd8e <Config_Callback>:


Status_t Config_Callback(uint32_t id)
{
 800cd8e:	b480      	push	{r7}
 800cd90:	b085      	sub	sp, #20
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
  Status_t ret = STATUS_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	81fb      	strh	r3, [r7, #14]

  /* Check if some value need further action to propagate */
  switch (CONF_BLOCK_ID(id))
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	0e1b      	lsrs	r3, r3, #24
 800cd9e:	2b03      	cmp	r3, #3
#endif
      break;


    default:
      break;
 800cda0:	bf00      	nop
  }
  return ret;
 800cda2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3714      	adds	r7, #20
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb0:	4770      	bx	lr

0800cdb2 <Config_Init>:
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/


Status_t Config_Init(void)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b082      	sub	sp, #8
 800cdb6:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	80fb      	strh	r3, [r7, #6]
  {
    Error_Handler();
  }

  /* Use factory default after every power on */
  RegMap_RestoreFactoryValues();
 800cdbc:	f000 fcf2 	bl	800d7a4 <RegMap_RestoreFactoryValues>

  /* Initialize application-specific stuff */
  Config_AppInit();
 800cdc0:	f7ff ffd8 	bl	800cd74 <Config_AppInit>

  return ret;
 800cdc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3708      	adds	r7, #8
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <Config_ApplyConfig>:



Status_t Config_ApplyConfig(uint32_t id)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
  Status_t ret = STATUS_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	81fb      	strh	r3, [r7, #14]

  /* Application-specific callback */
  Config_Callback(id);
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f7ff ffd6 	bl	800cd8e <Config_Callback>

  /* If this value should be stored in Flash, notify flash task */
  if ((id & 0x070) == 0x070)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800cde8:	2b70      	cmp	r3, #112	@ 0x70
 800cdea:	d101      	bne.n	800cdf0 <Config_ApplyConfig+0x20>
  {
    FlashApp_RequestConfStorage();
 800cdec:	f000 fa02 	bl	800d1f4 <FlashApp_RequestConfStorage>
  }

  return ret;
 800cdf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <Config_ReadStream>:


Status_t Config_ReadStream(uint8_t *data, uint32_t length)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b088      	sub	sp, #32
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
 800ce04:	6039      	str	r1, [r7, #0]
  Status_t ret = STATUS_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	83fb      	strh	r3, [r7, #30]
  uint32_t reqIdx = 0;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	61bb      	str	r3, [r7, #24]
  uint32_t sizeReg;
  uint32_t i;
  uint32_t value;

  /* First entry must be CONF_SYS_REGMAP_VERSION with major part equal to our factory set value */
  id = *((uint32_t *) (data));
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	60bb      	str	r3, [r7, #8]
  value = *((uint32_t *) (data + 4));
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	685b      	ldr	r3, [r3, #4]
 800ce18:	613b      	str	r3, [r7, #16]

  if ((id != CONF_SYS_REGMAP_VERSION) || (value & 0xFFFF0000) != (CONF_INT(CONF_SYS_REGMAP_VERSION) & 0xFFFF0000) )
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	f244 1232 	movw	r2, #16690	@ 0x4132
 800ce20:	4293      	cmp	r3, r2
 800ce22:	d108      	bne.n	800ce36 <Config_ReadStream+0x3a>
 800ce24:	4b28      	ldr	r3, [pc, #160]	@ (800cec8 <Config_ReadStream+0xcc>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	3304      	adds	r3, #4
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	4053      	eors	r3, r2
 800ce30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce34:	d33e      	bcc.n	800ceb4 <Config_ReadStream+0xb8>
  {
    ret = STATUS_ERROR;
 800ce36:	2301      	movs	r3, #1
 800ce38:	83fb      	strh	r3, [r7, #30]
 800ce3a:	e03f      	b.n	800cebc <Config_ReadStream+0xc0>
  {
    /* Process the whole received stream */
    while ((reqIdx < length))
    {
      /* Take ID */
      memcpy(&id, data + reqIdx, sizeof(id));
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	4413      	add	r3, r2
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	60bb      	str	r3, [r7, #8]
      reqIdx += sizeof(uint32_t);
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	3304      	adds	r3, #4
 800ce4a:	61bb      	str	r3, [r7, #24]
      sizeReg = CONF_BYTE_LEN_ID(id);
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	f003 030f 	and.w	r3, r3, #15
 800ce52:	4a1e      	ldr	r2, [pc, #120]	@ (800cecc <Config_ReadStream+0xd0>)
 800ce54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce58:	60fb      	str	r3, [r7, #12]

      /* Check that this ID is known */
      ret = STATUS_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	83fb      	strh	r3, [r7, #30]
      for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 800ce5e:	2300      	movs	r3, #0
 800ce60:	617b      	str	r3, [r7, #20]
 800ce62:	e00b      	b.n	800ce7c <Config_ReadStream+0x80>
      {
        if (CONF_REG_FLASH[i] == id)
 800ce64:	4a1a      	ldr	r2, [pc, #104]	@ (800ced0 <Config_ReadStream+0xd4>)
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d101      	bne.n	800ce76 <Config_ReadStream+0x7a>
        {
          ret = STATUS_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	83fb      	strh	r3, [r7, #30]
      for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	3301      	adds	r3, #1
 800ce7a:	617b      	str	r3, [r7, #20]
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	2b04      	cmp	r3, #4
 800ce80:	d9f0      	bls.n	800ce64 <Config_ReadStream+0x68>
        }
      }

      if (ret == STATUS_OK)
 800ce82:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d110      	bne.n	800ceac <Config_ReadStream+0xb0>
      {
        /* Write new value into register storage */
        memcpy(CONF_PTR(id), data + reqIdx, sizeReg);
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	0e1b      	lsrs	r3, r3, #24
 800ce8e:	4a0e      	ldr	r2, [pc, #56]	@ (800cec8 <Config_ReadStream+0xcc>)
 800ce90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ce94:	68bb      	ldr	r3, [r7, #8]
 800ce96:	0b1b      	lsrs	r3, r3, #12
 800ce98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce9c:	18d0      	adds	r0, r2, r3
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	4413      	add	r3, r2
 800cea4:	68fa      	ldr	r2, [r7, #12]
 800cea6:	4619      	mov	r1, r3
 800cea8:	f007 ff9c 	bl	8014de4 <memcpy>
      }

      reqIdx += sizeReg;
 800ceac:	69ba      	ldr	r2, [r7, #24]
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	61bb      	str	r3, [r7, #24]
    while ((reqIdx < length))
 800ceb4:	69ba      	ldr	r2, [r7, #24]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	429a      	cmp	r2, r3
 800ceba:	d3bf      	bcc.n	800ce3c <Config_ReadStream+0x40>
    }
  }
  return ret;
 800cebc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3720      	adds	r7, #32
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	08015158 	.word	0x08015158
 800cecc:	08015114 	.word	0x08015114
 800ced0:	080151c0 	.word	0x080151c0

0800ced4 <Config_FillStream>:

Status_t Config_FillStream(uint8_t *data, uint32_t *length, uint32_t maxLength)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b08a      	sub	sp, #40	@ 0x28
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
  Status_t ret = STATUS_OK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint32_t reqIdx = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	623b      	str	r3, [r7, #32]
  uint32_t id;
  uint32_t sizeReg;
  uint32_t i;

  /* Go through all the known config ID that need to be stored in flash */
  for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 800cee8:	2300      	movs	r3, #0
 800ceea:	61fb      	str	r3, [r7, #28]
 800ceec:	e035      	b.n	800cf5a <Config_FillStream+0x86>
  {
    /* Take next ID from the list of known IDs */
    id = CONF_REG_FLASH[i];
 800ceee:	4a21      	ldr	r2, [pc, #132]	@ (800cf74 <Config_FillStream+0xa0>)
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cef6:	617b      	str	r3, [r7, #20]
    sizeReg = CONF_BYTE_LEN_ID(id);
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	f003 030f 	and.w	r3, r3, #15
 800cefe:	4a1e      	ldr	r2, [pc, #120]	@ (800cf78 <Config_FillStream+0xa4>)
 800cf00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf04:	61bb      	str	r3, [r7, #24]

    if (reqIdx + 4 + sizeReg <= maxLength)
 800cf06:	6a3a      	ldr	r2, [r7, #32]
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	3304      	adds	r3, #4
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d31d      	bcc.n	800cf50 <Config_FillStream+0x7c>
    {
      /* Store ID into config stream */
      memcpy(data + reqIdx, &id, sizeof(id));
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	6a3b      	ldr	r3, [r7, #32]
 800cf18:	4413      	add	r3, r2
 800cf1a:	697a      	ldr	r2, [r7, #20]
 800cf1c:	601a      	str	r2, [r3, #0]
      reqIdx += sizeof(uint32_t);
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	3304      	adds	r3, #4
 800cf22:	623b      	str	r3, [r7, #32]

      /* Store config value into stream */
      memcpy(data + reqIdx, CONF_PTR(id), sizeReg);
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	6a3b      	ldr	r3, [r7, #32]
 800cf28:	18d0      	adds	r0, r2, r3
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	0e1b      	lsrs	r3, r3, #24
 800cf2e:	4a13      	ldr	r2, [pc, #76]	@ (800cf7c <Config_FillStream+0xa8>)
 800cf30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	0b1b      	lsrs	r3, r3, #12
 800cf38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf3c:	4413      	add	r3, r2
 800cf3e:	69ba      	ldr	r2, [r7, #24]
 800cf40:	4619      	mov	r1, r3
 800cf42:	f007 ff4f 	bl	8014de4 <memcpy>
      reqIdx += sizeReg;
 800cf46:	6a3a      	ldr	r2, [r7, #32]
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	4413      	add	r3, r2
 800cf4c:	623b      	str	r3, [r7, #32]
 800cf4e:	e001      	b.n	800cf54 <Config_FillStream+0x80>
    }
    else
    {
      ret = STATUS_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	84fb      	strh	r3, [r7, #38]	@ 0x26
  for (i = 0; i < sizeof(CONF_REG_FLASH)/sizeof(uint32_t); i++)
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	3301      	adds	r3, #1
 800cf58:	61fb      	str	r3, [r7, #28]
 800cf5a:	69fb      	ldr	r3, [r7, #28]
 800cf5c:	2b04      	cmp	r3, #4
 800cf5e:	d9c6      	bls.n	800ceee <Config_FillStream+0x1a>
    }
  }

  *length = reqIdx;
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	6a3a      	ldr	r2, [r7, #32]
 800cf64:	601a      	str	r2, [r3, #0]

  return ret;
 800cf66:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3728      	adds	r7, #40	@ 0x28
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	080151c0 	.word	0x080151c0
 800cf78:	08015114 	.word	0x08015114
 800cf7c:	08015158 	.word	0x08015158

0800cf80 <Control_Init>:
/* Private variables ---------------------------------------------------------*/
/* Public variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/

Status_t Control_Init(void) {
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	80fb      	strh	r3, [r7, #6]

	return ret;
 800cf8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr
	...

0800cf9c <Control_Handle>:

Status_t Control_Handle(void) {
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	80fb      	strh	r3, [r7, #6]

	/* Handle Reset commands */
	if (conf.sys.command == CONTROL_RESET) {
 800cfa6:	4b53      	ldr	r3, [pc, #332]	@ (800d0f4 <Control_Handle+0x158>)
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	f242 62ad 	movw	r2, #9901	@ 0x26ad
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d106      	bne.n	800cfc0 <Control_Handle+0x24>
		//Led_GreenOff();
		//Led_RedOff();
		System_Delay(1000);
 800cfb2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800cfb6:	f000 fcb9 	bl	800d92c <System_Delay>
		System_Reset();
 800cfba:	f000 fcc3 	bl	800d944 <System_Reset>
 800cfbe:	e032      	b.n	800d026 <Control_Handle+0x8a>
	}
	/* Handle factory reset command */
	else if (conf.sys.command == CONTROL_FACTORY) {
 800cfc0:	4b4c      	ldr	r3, [pc, #304]	@ (800d0f4 <Control_Handle+0x158>)
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	f242 2261 	movw	r2, #8801	@ 0x2261
 800cfc8:	4293      	cmp	r3, r2
 800cfca:	d102      	bne.n	800cfd2 <Control_Handle+0x36>
		FlashApp_RequestFactorySettings();
 800cfcc:	f000 f92c 	bl	800d228 <FlashApp_RequestFactorySettings>
 800cfd0:	e029      	b.n	800d026 <Control_Handle+0x8a>
	} else if (conf.sys.command == CONTROL_WDG_LATCH) {
 800cfd2:	4b48      	ldr	r3, [pc, #288]	@ (800d0f4 <Control_Handle+0x158>)
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	f241 527d 	movw	r2, #5501	@ 0x157d
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d104      	bne.n	800cfe8 <Control_Handle+0x4c>
		/* The delay below should cause IWDG to restart device */
		System_Delay(4000);
 800cfde:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800cfe2:	f000 fca3 	bl	800d92c <System_Delay>
 800cfe6:	e01e      	b.n	800d026 <Control_Handle+0x8a>
	}
	/* Handle set error command */
	else if (conf.sys.command > CONTROL_ERROR
 800cfe8:	4b42      	ldr	r3, [pc, #264]	@ (800d0f4 <Control_Handle+0x158>)
 800cfea:	68db      	ldr	r3, [r3, #12]
 800cfec:	f641 12c8 	movw	r2, #6600	@ 0x19c8
 800cff0:	4293      	cmp	r3, r2
 800cff2:	d90f      	bls.n	800d014 <Control_Handle+0x78>
			&& conf.sys.command < (CONTROL_ERROR + 100)) {
 800cff4:	4b3f      	ldr	r3, [pc, #252]	@ (800d0f4 <Control_Handle+0x158>)
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	f641 222b 	movw	r2, #6699	@ 0x1a2b
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d809      	bhi.n	800d014 <Control_Handle+0x78>
		cntrl.localError = conf.sys.command - CONTROL_ERROR;
 800d000:	4b3c      	ldr	r3, [pc, #240]	@ (800d0f4 <Control_Handle+0x158>)
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	b29b      	uxth	r3, r3
 800d006:	f5a3 53ce 	sub.w	r3, r3, #6592	@ 0x19c0
 800d00a:	3b08      	subs	r3, #8
 800d00c:	b29a      	uxth	r2, r3
 800d00e:	4b3a      	ldr	r3, [pc, #232]	@ (800d0f8 <Control_Handle+0x15c>)
 800d010:	805a      	strh	r2, [r3, #2]
 800d012:	e008      	b.n	800d026 <Control_Handle+0x8a>
	}
	/* Handle clear error command */
	else if (conf.sys.command == CONTROL_ERROR) {
 800d014:	4b37      	ldr	r3, [pc, #220]	@ (800d0f4 <Control_Handle+0x158>)
 800d016:	68db      	ldr	r3, [r3, #12]
 800d018:	f641 12c8 	movw	r2, #6600	@ 0x19c8
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d102      	bne.n	800d026 <Control_Handle+0x8a>
		cntrl.localError = 0;
 800d020:	4b35      	ldr	r3, [pc, #212]	@ (800d0f8 <Control_Handle+0x15c>)
 800d022:	2200      	movs	r2, #0
 800d024:	805a      	strh	r2, [r3, #2]
	}
	/* Testing mode disables setting of modbus address from DIP */
	if (conf.sys.command == CONTROL_TESTING) {
 800d026:	4b33      	ldr	r3, [pc, #204]	@ (800d0f4 <Control_Handle+0x158>)
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	f641 6215 	movw	r2, #7701	@ 0x1e15
 800d02e:	4293      	cmp	r3, r2
 800d030:	d106      	bne.n	800d040 <Control_Handle+0xa4>
		SET_BIT(conf.sys.status, STAT_BIT_TESTING);
 800d032:	4b30      	ldr	r3, [pc, #192]	@ (800d0f4 <Control_Handle+0x158>)
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	f043 0302 	orr.w	r3, r3, #2
 800d03a:	4a2e      	ldr	r2, [pc, #184]	@ (800d0f4 <Control_Handle+0x158>)
 800d03c:	6093      	str	r3, [r2, #8]
 800d03e:	e00e      	b.n	800d05e <Control_Handle+0xc2>
	} else {
		CLEAR_BIT(conf.sys.status, STAT_BIT_TESTING);
 800d040:	4b2c      	ldr	r3, [pc, #176]	@ (800d0f4 <Control_Handle+0x158>)
 800d042:	689b      	ldr	r3, [r3, #8]
 800d044:	f023 0302 	bic.w	r3, r3, #2
 800d048:	4a2a      	ldr	r2, [pc, #168]	@ (800d0f4 <Control_Handle+0x158>)
 800d04a:	6093      	str	r3, [r2, #8]
		conf.com.mb_address = (conf.sys.io_input & 0x1F) + MODBUS_BASE_ADDRESS;
 800d04c:	4b29      	ldr	r3, [pc, #164]	@ (800d0f4 <Control_Handle+0x158>)
 800d04e:	8a9b      	ldrh	r3, [r3, #20]
 800d050:	f003 031f 	and.w	r3, r3, #31
 800d054:	b29b      	uxth	r3, r3
 800d056:	3320      	adds	r3, #32
 800d058:	b29a      	uxth	r2, r3
 800d05a:	4b26      	ldr	r3, [pc, #152]	@ (800d0f4 <Control_Handle+0x158>)
 800d05c:	879a      	strh	r2, [r3, #60]	@ 0x3c
	}

	/* Error flag of status register */
	if (cntrl.localError != 0 || (conf.sys.status & (0x300F0)) != 0) {
 800d05e:	4b26      	ldr	r3, [pc, #152]	@ (800d0f8 <Control_Handle+0x15c>)
 800d060:	885b      	ldrh	r3, [r3, #2]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d105      	bne.n	800d072 <Control_Handle+0xd6>
 800d066:	4b23      	ldr	r3, [pc, #140]	@ (800d0f4 <Control_Handle+0x158>)
 800d068:	689a      	ldr	r2, [r3, #8]
 800d06a:	4b24      	ldr	r3, [pc, #144]	@ (800d0fc <Control_Handle+0x160>)
 800d06c:	4013      	ands	r3, r2
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d006      	beq.n	800d080 <Control_Handle+0xe4>
		SET_BIT(conf.sys.status, STAT_BIT_ERROR);
 800d072:	4b20      	ldr	r3, [pc, #128]	@ (800d0f4 <Control_Handle+0x158>)
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	f043 0301 	orr.w	r3, r3, #1
 800d07a:	4a1e      	ldr	r2, [pc, #120]	@ (800d0f4 <Control_Handle+0x158>)
 800d07c:	6093      	str	r3, [r2, #8]
 800d07e:	e005      	b.n	800d08c <Control_Handle+0xf0>
	} else {
		CLEAR_BIT(conf.sys.status, STAT_BIT_ERROR);
 800d080:	4b1c      	ldr	r3, [pc, #112]	@ (800d0f4 <Control_Handle+0x158>)
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	f023 0301 	bic.w	r3, r3, #1
 800d088:	4a1a      	ldr	r2, [pc, #104]	@ (800d0f4 <Control_Handle+0x158>)
 800d08a:	6093      	str	r3, [r2, #8]
	}

	/* Led blinking according to status flag */
	if (cntrl.count % LED_PERIOD == 0) {
 800d08c:	4b1a      	ldr	r3, [pc, #104]	@ (800d0f8 <Control_Handle+0x15c>)
 800d08e:	6899      	ldr	r1, [r3, #8]
 800d090:	4b1b      	ldr	r3, [pc, #108]	@ (800d100 <Control_Handle+0x164>)
 800d092:	fba3 2301 	umull	r2, r3, r3, r1
 800d096:	091a      	lsrs	r2, r3, #4
 800d098:	4613      	mov	r3, r2
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	1aca      	subs	r2, r1, r3
 800d0a2:	2a00      	cmp	r2, #0
 800d0a4:	d104      	bne.n	800d0b0 <Control_Handle+0x114>
		if (conf.sys.status & STAT_BIT_ERROR) {
 800d0a6:	4b13      	ldr	r3, [pc, #76]	@ (800d0f4 <Control_Handle+0x158>)
 800d0a8:	689b      	ldr	r3, [r3, #8]
 800d0aa:	f003 0301 	and.w	r3, r3, #1
 800d0ae:	2b00      	cmp	r3, #0
	} else if (cntrl.count % LED_PERIOD == LED_BLINK) {
		//Led_GreenOff();
		//Led_RedOff();
	}

	if (HAL_GetTick() > cntrl.prevTick) {
 800d0b0:	f002 fd6e 	bl	800fb90 <HAL_GetTick>
 800d0b4:	4602      	mov	r2, r0
 800d0b6:	4b10      	ldr	r3, [pc, #64]	@ (800d0f8 <Control_Handle+0x15c>)
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d90a      	bls.n	800d0d4 <Control_Handle+0x138>
		cntrl.prevTick += 1000;
 800d0be:	4b0e      	ldr	r3, [pc, #56]	@ (800d0f8 <Control_Handle+0x15c>)
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d0c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d0f8 <Control_Handle+0x15c>)
 800d0c8:	6053      	str	r3, [r2, #4]
		conf.sys.uptime += 1;
 800d0ca:	4b0a      	ldr	r3, [pc, #40]	@ (800d0f4 <Control_Handle+0x158>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	4a08      	ldr	r2, [pc, #32]	@ (800d0f4 <Control_Handle+0x158>)
 800d0d2:	6013      	str	r3, [r2, #0]
	}

	/* Store previous command */
	cntrl.prevCmd = conf.sys.command;
 800d0d4:	4b07      	ldr	r3, [pc, #28]	@ (800d0f4 <Control_Handle+0x158>)
 800d0d6:	68db      	ldr	r3, [r3, #12]
 800d0d8:	b29a      	uxth	r2, r3
 800d0da:	4b07      	ldr	r3, [pc, #28]	@ (800d0f8 <Control_Handle+0x15c>)
 800d0dc:	801a      	strh	r2, [r3, #0]
	cntrl.count++;
 800d0de:	4b06      	ldr	r3, [pc, #24]	@ (800d0f8 <Control_Handle+0x15c>)
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	4a04      	ldr	r2, [pc, #16]	@ (800d0f8 <Control_Handle+0x15c>)
 800d0e6:	6093      	str	r3, [r2, #8]

	return ret;
 800d0e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3708      	adds	r7, #8
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	20000538 	.word	0x20000538
 800d0f8:	200000e8 	.word	0x200000e8
 800d0fc:	000300f0 	.word	0x000300f0
 800d100:	cccccccd 	.word	0xcccccccd

0800d104 <FlashApp_Init>:
/* Private variables ---------------------------------------------------------*/
/* Public variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/

Status_t FlashApp_Init(void) {
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	80fb      	strh	r3, [r7, #6]

	/* Initialize flash configuration */
	FlashConf_Init();
 800d10e:	f000 f89d 	bl	800d24c <FlashConf_Init>

	/* Read configuration - first attempt */
	ret = FlashConf_Load();
 800d112:	f000 f8a9 	bl	800d268 <FlashConf_Load>
 800d116:	4603      	mov	r3, r0
 800d118:	80fb      	strh	r3, [r7, #6]

	if (ret == STATUS_OK) {
 800d11a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <FlashApp_Init+0x26>
		/* We have configuration */
	} else {
		/* No success in reading configuration, we store the default values*/
		ret = FlashConf_Store();
 800d122:	f000 f8df 	bl	800d2e4 <FlashConf_Store>
 800d126:	4603      	mov	r3, r0
 800d128:	80fb      	strh	r3, [r7, #6]
	}

	/* FIXME: temporary disabled calibration */
//  Calib_Init();
	return ret;
 800d12a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}
	...

0800d138 <FlashApp_Handle>:

Status_t FlashApp_Handle(void) {
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d13e:	2300      	movs	r3, #0
 800d140:	80fb      	strh	r3, [r7, #6]

	/* Configuration requested, set dead time */
	if (flashApp.config) {
 800d142:	4b2b      	ldr	r3, [pc, #172]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d014      	beq.n	800d174 <FlashApp_Handle+0x3c>
		flashApp.config = 0;
 800d14a:	4b29      	ldr	r3, [pc, #164]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	701a      	strb	r2, [r3, #0]
		flashApp.tick = HAL_GetTick() + CONFIG_DEAD_TIME;
 800d150:	f002 fd1e 	bl	800fb90 <HAL_GetTick>
 800d154:	4603      	mov	r3, r0
 800d156:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800d15a:	4a25      	ldr	r2, [pc, #148]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d15c:	6053      	str	r3, [r2, #4]
		flashApp.tick = (flashApp.tick == 0) ? (UINT32_MAX) : (flashApp.tick);
 800d15e:	4b24      	ldr	r3, [pc, #144]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d160:	685b      	ldr	r3, [r3, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d002      	beq.n	800d16c <FlashApp_Handle+0x34>
 800d166:	4b22      	ldr	r3, [pc, #136]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	e001      	b.n	800d170 <FlashApp_Handle+0x38>
 800d16c:	f04f 33ff 	mov.w	r3, #4294967295
 800d170:	4a1f      	ldr	r2, [pc, #124]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d172:	6053      	str	r3, [r2, #4]
	}

	/* If factory reset was requested */
	if (flashApp.reset == FACTORY_CONFIG) {
 800d174:	4b1e      	ldr	r3, [pc, #120]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d176:	785b      	ldrb	r3, [r3, #1]
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d114      	bne.n	800d1a6 <FlashApp_Handle+0x6e>
		/* Load default factory settings */
		RegMap_RestoreFactoryValues();
 800d17c:	f000 fb12 	bl	800d7a4 <RegMap_RestoreFactoryValues>

		/* Request immediate storage and reset */
		flashApp.reset = FACTORY_RESET;
 800d180:	4b1b      	ldr	r3, [pc, #108]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d182:	2202      	movs	r2, #2
 800d184:	705a      	strb	r2, [r3, #1]
		flashApp.tick = HAL_GetTick();
 800d186:	f002 fd03 	bl	800fb90 <HAL_GetTick>
 800d18a:	4603      	mov	r3, r0
 800d18c:	4a18      	ldr	r2, [pc, #96]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d18e:	6053      	str	r3, [r2, #4]
		flashApp.tick = (flashApp.tick == 0) ? (UINT32_MAX) : (flashApp.tick);
 800d190:	4b17      	ldr	r3, [pc, #92]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d002      	beq.n	800d19e <FlashApp_Handle+0x66>
 800d198:	4b15      	ldr	r3, [pc, #84]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	e001      	b.n	800d1a2 <FlashApp_Handle+0x6a>
 800d19e:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a2:	4a13      	ldr	r2, [pc, #76]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d1a4:	6053      	str	r3, [r2, #4]
	}

	/* Wait on tick expire */
	if (flashApp.tick != 0 && TICK_EXPIRED(flashApp.tick)) {
 800d1a6:	4b12      	ldr	r3, [pc, #72]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d01a      	beq.n	800d1e4 <FlashApp_Handle+0xac>
 800d1ae:	f002 fcef 	bl	800fb90 <HAL_GetTick>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d210      	bcs.n	800d1e4 <FlashApp_Handle+0xac>
		/* Clear tick to prevent tick expire false events */
		flashApp.tick = 0;
 800d1c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	605a      	str	r2, [r3, #4]

		/* Write non-volatile registers to external Flash */
		ret = FlashConf_Store();
 800d1c8:	f000 f88c 	bl	800d2e4 <FlashConf_Store>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	80fb      	strh	r3, [r7, #6]

		/* System reset */
		if (flashApp.reset == FACTORY_RESET) {
 800d1d0:	4b07      	ldr	r3, [pc, #28]	@ (800d1f0 <FlashApp_Handle+0xb8>)
 800d1d2:	785b      	ldrb	r3, [r3, #1]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d105      	bne.n	800d1e4 <FlashApp_Handle+0xac>
			HAL_Delay(1000);
 800d1d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d1dc:	f002 fce4 	bl	800fba8 <HAL_Delay>
			System_Reset();
 800d1e0:	f000 fbb0 	bl	800d944 <System_Reset>
		}
	}

	/* FIXME: temporary disabled calibration */
//  Calib_Write();
	return ret;
 800d1e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3708      	adds	r7, #8
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	200000f4 	.word	0x200000f4

0800d1f4 <FlashApp_RequestConfStorage>:
	HAL_Delay(100);

	return ret;
}

Status_t FlashApp_RequestConfStorage(void) {
 800d1f4:	b480      	push	{r7}
 800d1f6:	b083      	sub	sp, #12
 800d1f8:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	80fb      	strh	r3, [r7, #6]

	/* Do not store to flash in testing mode */
	if (!(conf.sys.status & STAT_BIT_TESTING)) {
 800d1fe:	4b08      	ldr	r3, [pc, #32]	@ (800d220 <FlashApp_RequestConfStorage+0x2c>)
 800d200:	689b      	ldr	r3, [r3, #8]
 800d202:	f003 0302 	and.w	r3, r3, #2
 800d206:	2b00      	cmp	r3, #0
 800d208:	d102      	bne.n	800d210 <FlashApp_RequestConfStorage+0x1c>
		flashApp.config = CONFIG_STORE;
 800d20a:	4b06      	ldr	r3, [pc, #24]	@ (800d224 <FlashApp_RequestConfStorage+0x30>)
 800d20c:	2201      	movs	r2, #1
 800d20e:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 800d210:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d214:	4618      	mov	r0, r3
 800d216:	370c      	adds	r7, #12
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	20000538 	.word	0x20000538
 800d224:	200000f4 	.word	0x200000f4

0800d228 <FlashApp_RequestFactorySettings>:

Status_t FlashApp_RequestFactorySettings(void) {
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	80fb      	strh	r3, [r7, #6]

	flashApp.reset = FACTORY_CONFIG;
 800d232:	4b05      	ldr	r3, [pc, #20]	@ (800d248 <FlashApp_RequestFactorySettings+0x20>)
 800d234:	2201      	movs	r2, #1
 800d236:	705a      	strb	r2, [r3, #1]

	return ret;
 800d238:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	370c      	adds	r7, #12
 800d240:	46bd      	mov	sp, r7
 800d242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d246:	4770      	bx	lr
 800d248:	200000f4 	.word	0x200000f4

0800d24c <FlashConf_Init>:

Status_t FlashConf_EraseBlock(uint32_t address);

/* Functions -----------------------------------------------------------------*/

Status_t FlashConf_Init(void) {
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	80fb      	strh	r3, [r7, #6]

	return ret;
 800d256:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	370c      	adds	r7, #12
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr
	...

0800d268 <FlashConf_Load>:

Status_t FlashConf_Load(void) {
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d26e:	2300      	movs	r3, #0
 800d270:	80fb      	strh	r3, [r7, #6]

	/* Read headers */
	ret = FlashConf_FindEntry();
 800d272:	f000 f87f 	bl	800d374 <FlashConf_FindEntry>
 800d276:	4603      	mov	r3, r0
 800d278:	80fb      	strh	r3, [r7, #6]

	if (ret == STATUS_OK) {
 800d27a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d11d      	bne.n	800d2be <FlashConf_Load+0x56>
		/* Read main configuration */
		ret = FlashConf_Read(flCo.configAddr);
 800d282:	4b15      	ldr	r3, [pc, #84]	@ (800d2d8 <FlashConf_Load+0x70>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4618      	mov	r0, r3
 800d288:	f000 f9b2 	bl	800d5f0 <FlashConf_Read>
 800d28c:	4603      	mov	r3, r0
 800d28e:	80fb      	strh	r3, [r7, #6]

		if (ret == STATUS_ERROR) {
 800d290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d106      	bne.n	800d2a6 <FlashConf_Load+0x3e>
			/* Read backup configuration */
			ret = FlashConf_Read(flCo.backupAddr);
 800d298:	4b0f      	ldr	r3, [pc, #60]	@ (800d2d8 <FlashConf_Load+0x70>)
 800d29a:	685b      	ldr	r3, [r3, #4]
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 f9a7 	bl	800d5f0 <FlashConf_Read>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	80fb      	strh	r3, [r7, #6]
		}

		if (ret == STATUS_OK) {
 800d2a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d109      	bne.n	800d2c2 <FlashConf_Load+0x5a>
			/* Configuration have been read successfully */
			/* Parse and apply config data */
			Config_ReadStream(flCo.data.data,
					flCo.data.header.completeSize - sizeof(FlashConf_Header_t)
 800d2ae:	4b0a      	ldr	r3, [pc, #40]	@ (800d2d8 <FlashConf_Load+0x70>)
 800d2b0:	691b      	ldr	r3, [r3, #16]
			Config_ReadStream(flCo.data.data,
 800d2b2:	3b14      	subs	r3, #20
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4809      	ldr	r0, [pc, #36]	@ (800d2dc <FlashConf_Load+0x74>)
 800d2b8:	f7ff fda0 	bl	800cdfc <Config_ReadStream>
 800d2bc:	e001      	b.n	800d2c2 <FlashConf_Load+0x5a>
							- sizeof(FLASH_KEY));
		}
	} else {
		/* No configuration found */
		ret = STATUS_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	80fb      	strh	r3, [r7, #6]
	}

	conf.dbg.writes_conf = flCo.data.header.writes;
 800d2c2:	4b05      	ldr	r3, [pc, #20]	@ (800d2d8 <FlashConf_Load+0x70>)
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	4a06      	ldr	r2, [pc, #24]	@ (800d2e0 <FlashConf_Load+0x78>)
 800d2c8:	64d3      	str	r3, [r2, #76]	@ 0x4c

	return ret;
 800d2ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3708      	adds	r7, #8
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	200000fc 	.word	0x200000fc
 800d2dc:	20000114 	.word	0x20000114
 800d2e0:	20000538 	.word	0x20000538

0800d2e4 <FlashConf_Store>:

Status_t FlashConf_Store(void) {
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	80fb      	strh	r3, [r7, #6]
	uint32_t length = 0;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	603b      	str	r3, [r7, #0]

	/* Create config data to write*/
	ret = Config_FillStream(flCo.data.data, &length, FLASH_CONF_SIZE - 4);
 800d2f2:	463b      	mov	r3, r7
 800d2f4:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	481a      	ldr	r0, [pc, #104]	@ (800d364 <FlashConf_Store+0x80>)
 800d2fc:	f7ff fdea 	bl	800ced4 <Config_FillStream>
 800d300:	4603      	mov	r3, r0
 800d302:	80fb      	strh	r3, [r7, #6]

	memcpy(flCo.data.data + length, &FLASH_KEY, sizeof(FLASH_KEY));
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	4a17      	ldr	r2, [pc, #92]	@ (800d364 <FlashConf_Store+0x80>)
 800d308:	4413      	add	r3, r2
 800d30a:	4a17      	ldr	r2, [pc, #92]	@ (800d368 <FlashConf_Store+0x84>)
 800d30c:	601a      	str	r2, [r3, #0]

	flCo.data.header.completeSize = length + sizeof(FLASH_KEY)
			+ sizeof(FlashConf_Header_t);
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	3314      	adds	r3, #20
	flCo.data.header.completeSize = length + sizeof(FLASH_KEY)
 800d312:	4a16      	ldr	r2, [pc, #88]	@ (800d36c <FlashConf_Store+0x88>)
 800d314:	6113      	str	r3, [r2, #16]
	flCo.data.header.reserved = FLASH_KEY;
 800d316:	4a14      	ldr	r2, [pc, #80]	@ (800d368 <FlashConf_Store+0x84>)
 800d318:	4b14      	ldr	r3, [pc, #80]	@ (800d36c <FlashConf_Store+0x88>)
 800d31a:	615a      	str	r2, [r3, #20]

	/* Write config data into flash */
	ret += FlashConf_Write();
 800d31c:	f000 f9ac 	bl	800d678 <FlashConf_Write>
 800d320:	4603      	mov	r3, r0
 800d322:	b29a      	uxth	r2, r3
 800d324:	88fb      	ldrh	r3, [r7, #6]
 800d326:	4413      	add	r3, r2
 800d328:	b29b      	uxth	r3, r3
 800d32a:	80fb      	strh	r3, [r7, #6]

	conf.dbg.writes_conf = flCo.data.header.writes;
 800d32c:	4b0f      	ldr	r3, [pc, #60]	@ (800d36c <FlashConf_Store+0x88>)
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	4a0f      	ldr	r2, [pc, #60]	@ (800d370 <FlashConf_Store+0x8c>)
 800d332:	64d3      	str	r3, [r2, #76]	@ 0x4c

	if (ret == STATUS_OK) {
 800d334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d106      	bne.n	800d34a <FlashConf_Store+0x66>
		CLEAR_BIT(conf.sys.status, STAT_BIT_CONFIG_FLASH);
 800d33c:	4b0c      	ldr	r3, [pc, #48]	@ (800d370 <FlashConf_Store+0x8c>)
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d344:	4a0a      	ldr	r2, [pc, #40]	@ (800d370 <FlashConf_Store+0x8c>)
 800d346:	6093      	str	r3, [r2, #8]
 800d348:	e005      	b.n	800d356 <FlashConf_Store+0x72>
	} else {
		SET_BIT(conf.sys.status, STAT_BIT_CONFIG_FLASH);
 800d34a:	4b09      	ldr	r3, [pc, #36]	@ (800d370 <FlashConf_Store+0x8c>)
 800d34c:	689b      	ldr	r3, [r3, #8]
 800d34e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d352:	4a07      	ldr	r2, [pc, #28]	@ (800d370 <FlashConf_Store+0x8c>)
 800d354:	6093      	str	r3, [r2, #8]
	}

	return ret;
 800d356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	20000114 	.word	0x20000114
 800d368:	deadbeef 	.word	0xdeadbeef
 800d36c:	200000fc 	.word	0x200000fc
 800d370:	20000538 	.word	0x20000538

0800d374 <FlashConf_FindEntry>:
	return ret;
}

/* Private Functions ---------------------------------------------------------*/

Status_t FlashConf_FindEntry(void) {
 800d374:	b590      	push	{r4, r7, lr}
 800d376:	b085      	sub	sp, #20
 800d378:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d37a:	2300      	movs	r3, #0
 800d37c:	81fb      	strh	r3, [r7, #14]
	uint32_t lastHeaderFound = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	60bb      	str	r3, [r7, #8]
	uint32_t address;

	/* Initial values */
	flCo.data.header.addressNext = FLASH_CONF_ADDR_START;
 800d382:	4a8c      	ldr	r2, [pc, #560]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d384:	4b8c      	ldr	r3, [pc, #560]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d386:	609a      	str	r2, [r3, #8]
	flCo.data.header.writes = 1;
 800d388:	4b8b      	ldr	r3, [pc, #556]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d38a:	2201      	movs	r2, #1
 800d38c:	60da      	str	r2, [r3, #12]
	flCo.data.header.completeSize = sizeof(FlashConf_Header_t);
 800d38e:	4b8a      	ldr	r3, [pc, #552]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d390:	2210      	movs	r2, #16
 800d392:	611a      	str	r2, [r3, #16]
	flCo.data.header.reserved = sizeof(FlashConf_Header_t);
 800d394:	4b88      	ldr	r3, [pc, #544]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d396:	2210      	movs	r2, #16
 800d398:	615a      	str	r2, [r3, #20]
	flCo.invalidAddress = -1;
 800d39a:	4b87      	ldr	r3, [pc, #540]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d39c:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a0:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
	flCo.configAddr = FLASH_CONF_ADDR_START;
 800d3a4:	4a83      	ldr	r2, [pc, #524]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d3a6:	4b84      	ldr	r3, [pc, #528]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d3a8:	601a      	str	r2, [r3, #0]
	flCo.backupAddr = FLASH_CONF_ADDR_START;
 800d3aa:	4a82      	ldr	r2, [pc, #520]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d3ac:	4b82      	ldr	r3, [pc, #520]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d3ae:	605a      	str	r2, [r3, #4]

	address = FLASH_CONF_ADDR_START;
 800d3b0:	4b80      	ldr	r3, [pc, #512]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d3b2:	607b      	str	r3, [r7, #4]

	/* Find first sector with non-empty values*/
	while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 800d3b4:	e02c      	b.n	800d410 <FlashConf_FindEntry+0x9c>
		/* Read header into temp */
		memcpy(&flCo.tempHead, (uint8_t*) address, sizeof(FlashConf_Header_t));
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2210      	movs	r2, #16
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	487f      	ldr	r0, [pc, #508]	@ (800d5bc <FlashConf_FindEntry+0x248>)
 800d3be:	f007 fd11 	bl	8014de4 <memcpy>

		if (flCo.tempHead.addressNext == 0 && flCo.tempHead.completeSize == 0
 800d3c2:	4b7d      	ldr	r3, [pc, #500]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d3c4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d114      	bne.n	800d3f6 <FlashConf_FindEntry+0x82>
 800d3cc:	4b7a      	ldr	r3, [pc, #488]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d3ce:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10f      	bne.n	800d3f6 <FlashConf_FindEntry+0x82>
				&& flCo.tempHead.reserved != FLASH_KEY) {
 800d3d6:	4b78      	ldr	r3, [pc, #480]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d3d8:	f8d3 3424 	ldr.w	r3, [r3, #1060]	@ 0x424
 800d3dc:	4a78      	ldr	r2, [pc, #480]	@ (800d5c0 <FlashConf_FindEntry+0x24c>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d009      	beq.n	800d3f6 <FlashConf_FindEntry+0x82>
			/* We can erase sector of backup */
			ret = FlashConf_EraseBlock(address);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f8f0 	bl	800d5c8 <FlashConf_EraseBlock>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	81fb      	strh	r3, [r7, #14]

			/* Jump to next sector */
			address += FLASH_MEM_BLOCK_SIZE;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3f2:	607b      	str	r3, [r7, #4]
 800d3f4:	e00c      	b.n	800d410 <FlashConf_FindEntry+0x9c>
		} else if (flCo.tempHead.addressNext != FLASH_EMPTY_VALUE) {
 800d3f6:	4b70      	ldr	r3, [pc, #448]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d3f8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 800d3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d400:	d002      	beq.n	800d408 <FlashConf_FindEntry+0x94>
			/* We reached an empty value, so the previous value is final */
			lastHeaderFound = 1;
 800d402:	2301      	movs	r3, #1
 800d404:	60bb      	str	r3, [r7, #8]
 800d406:	e003      	b.n	800d410 <FlashConf_FindEntry+0x9c>
		} else {
			/* Jump to next sector */
			address += FLASH_MEM_BLOCK_SIZE;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d40e:	607b      	str	r3, [r7, #4]
	while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 800d410:	4a68      	ldr	r2, [pc, #416]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d412:	4b6c      	ldr	r3, [pc, #432]	@ (800d5c4 <FlashConf_FindEntry+0x250>)
 800d414:	4413      	add	r3, r2
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d202      	bcs.n	800d422 <FlashConf_FindEntry+0xae>
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d0c9      	beq.n	800d3b6 <FlashConf_FindEntry+0x42>
		}
	}

	/* Nothing found in flash */
	if (address == FLASH_CONF_ADDR_END) {
 800d422:	4a64      	ldr	r2, [pc, #400]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d424:	4b67      	ldr	r3, [pc, #412]	@ (800d5c4 <FlashConf_FindEntry+0x250>)
 800d426:	4413      	add	r3, r2
 800d428:	687a      	ldr	r2, [r7, #4]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d102      	bne.n	800d434 <FlashConf_FindEntry+0xc0>
		ret = STATUS_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	81fb      	strh	r3, [r7, #14]
 800d432:	e0a2      	b.n	800d57a <FlashConf_FindEntry+0x206>
	} else {
		ret = STATUS_OK;
 800d434:	2300      	movs	r3, #0
 800d436:	81fb      	strh	r3, [r7, #14]
		lastHeaderFound = 0;
 800d438:	2300      	movs	r3, #0
 800d43a:	60bb      	str	r3, [r7, #8]

		/* Go through chain list until last non-empty value is found */
		while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 800d43c:	e093      	b.n	800d566 <FlashConf_FindEntry+0x1f2>
			/* Read header into temp */
			memcpy((uint8_t*) &flCo.tempHead, (uint8_t*) address,
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2210      	movs	r2, #16
 800d442:	4619      	mov	r1, r3
 800d444:	485d      	ldr	r0, [pc, #372]	@ (800d5bc <FlashConf_FindEntry+0x248>)
 800d446:	f007 fccd 	bl	8014de4 <memcpy>
					sizeof(FlashConf_Header_t));

			if (flCo.tempHead.addressNext == FLASH_EMPTY_VALUE) {
 800d44a:	4b5b      	ldr	r3, [pc, #364]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d44c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 800d450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d454:	d12d      	bne.n	800d4b2 <FlashConf_FindEntry+0x13e>
				/* We reached an empty value, try to read next beginning of sector */

				/* This entry is the first */
				if (flCo.configAddr == FLASH_CONF_ADDR_START
 800d456:	4b58      	ldr	r3, [pc, #352]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4a56      	ldr	r2, [pc, #344]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d45c:	4293      	cmp	r3, r2
 800d45e:	d10b      	bne.n	800d478 <FlashConf_FindEntry+0x104>
						&& flCo.backupAddr == FLASH_CONF_ADDR_START) {
 800d460:	4b55      	ldr	r3, [pc, #340]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d462:	685b      	ldr	r3, [r3, #4]
 800d464:	4a53      	ldr	r2, [pc, #332]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d466:	4293      	cmp	r3, r2
 800d468:	d106      	bne.n	800d478 <FlashConf_FindEntry+0x104>
					/* Try the last sector */
					address = FLASH_CONF_ADDR_END - FLASH_MEM_BLOCK_SIZE;
 800d46a:	4a56      	ldr	r2, [pc, #344]	@ (800d5c4 <FlashConf_FindEntry+0x250>)
 800d46c:	4b51      	ldr	r3, [pc, #324]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d46e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800d472:	4413      	add	r3, r2
 800d474:	607b      	str	r3, [r7, #4]
 800d476:	e016      	b.n	800d4a6 <FlashConf_FindEntry+0x132>
				}
				/* Jump to the beginning of sector */
				else if ((address % FLASH_MEM_BLOCK_SIZE)
						>= FLASH_MEM_BLOCK_SIZE / 2) // address & (FLASH_MEM_BLOCK_SIZE - 1) &&
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
				else if ((address % FLASH_MEM_BLOCK_SIZE)
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d011      	beq.n	800d4a6 <FlashConf_FindEntry+0x132>
								{
					address &= ~(FLASH_MEM_BLOCK_SIZE - 1);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d488:	f023 0307 	bic.w	r3, r3, #7
 800d48c:	607b      	str	r3, [r7, #4]
					address += (FLASH_MEM_BLOCK_SIZE);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d494:	607b      	str	r3, [r7, #4]

					/* Wrap around the config space */
					if (address == FLASH_CONF_ADDR_END) {
 800d496:	4a47      	ldr	r2, [pc, #284]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d498:	4b4a      	ldr	r3, [pc, #296]	@ (800d5c4 <FlashConf_FindEntry+0x250>)
 800d49a:	4413      	add	r3, r2
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d101      	bne.n	800d4a6 <FlashConf_FindEntry+0x132>
						address = FLASH_CONF_ADDR_START;
 800d4a2:	4b44      	ldr	r3, [pc, #272]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d4a4:	607b      	str	r3, [r7, #4]
					}
				}

				/* Read header into temporary storage */
				memcpy((uint8_t*) &flCo.tempHead, (uint8_t*) address,
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2210      	movs	r2, #16
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	4843      	ldr	r0, [pc, #268]	@ (800d5bc <FlashConf_FindEntry+0x248>)
 800d4ae:	f007 fc99 	bl	8014de4 <memcpy>
						sizeof(FlashConf_Header_t));
			}

			/* Still empty value */
			if (flCo.tempHead.addressNext == FLASH_EMPTY_VALUE) {
 800d4b2:	4b41      	ldr	r3, [pc, #260]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d4b4:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 800d4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4bc:	d102      	bne.n	800d4c4 <FlashConf_FindEntry+0x150>
				/* We reached an empty value, so the previous value is final */
				lastHeaderFound = 1;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	60bb      	str	r3, [r7, #8]
 800d4c2:	e050      	b.n	800d566 <FlashConf_FindEntry+0x1f2>
			}
			/* Check next address on configuration boundaries and page beginning*/
			else if (flCo.tempHead.addressNext > FLASH_CONF_ADDR_END
 800d4c4:	4b3c      	ldr	r3, [pc, #240]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d4c6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800d4ca:	493a      	ldr	r1, [pc, #232]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d4cc:	4b3d      	ldr	r3, [pc, #244]	@ (800d5c4 <FlashConf_FindEntry+0x250>)
 800d4ce:	440b      	add	r3, r1
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d806      	bhi.n	800d4e2 <FlashConf_FindEntry+0x16e>
					|| (flCo.tempHead.addressNext & (FLASH_MEM_PAGE_SIZE - 1))) {
 800d4d4:	4b38      	ldr	r3, [pc, #224]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d4d6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 800d4da:	f003 030f 	and.w	r3, r3, #15
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d016      	beq.n	800d510 <FlashConf_FindEntry+0x19c>
				/* The next address is invalid */
				flCo.invalidAddress = address;
 800d4e2:	4a35      	ldr	r2, [pc, #212]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

				/* Maybe the erase has failed, try to peek into next sector */
				address &= ~(FLASH_MEM_BLOCK_SIZE - 1);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d4f0:	f023 0307 	bic.w	r3, r3, #7
 800d4f4:	607b      	str	r3, [r7, #4]
				address += (FLASH_MEM_BLOCK_SIZE);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d4fc:	607b      	str	r3, [r7, #4]
				/* Wrap around the config space */
				if (address == FLASH_CONF_ADDR_END) {
 800d4fe:	4a2d      	ldr	r2, [pc, #180]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d500:	4b30      	ldr	r3, [pc, #192]	@ (800d5c4 <FlashConf_FindEntry+0x250>)
 800d502:	4413      	add	r3, r2
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	429a      	cmp	r2, r3
 800d508:	d12d      	bne.n	800d566 <FlashConf_FindEntry+0x1f2>
					address = FLASH_CONF_ADDR_START;
 800d50a:	4b2a      	ldr	r3, [pc, #168]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d50c:	607b      	str	r3, [r7, #4]
				if (address == FLASH_CONF_ADDR_END) {
 800d50e:	e02a      	b.n	800d566 <FlashConf_FindEntry+0x1f2>
				}
			} else {
				/* Store temp as new valid value */
				memcpy(&flCo.header, &flCo.tempHead,
 800d510:	4a29      	ldr	r2, [pc, #164]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d512:	4b29      	ldr	r3, [pc, #164]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d514:	f502 6485 	add.w	r4, r2, #1064	@ 0x428
 800d518:	f503 6383 	add.w	r3, r3, #1048	@ 0x418
 800d51c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d51e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
						sizeof(FlashConf_Header_t));

				/* Shift config pointers and find out if some sector is left useless */
				if ((flCo.backupAddr ^ flCo.configAddr)
 800d522:	4b25      	ldr	r3, [pc, #148]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d524:	685a      	ldr	r2, [r3, #4]
 800d526:	4b24      	ldr	r3, [pc, #144]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4053      	eors	r3, r2
 800d52c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d530:	d30e      	bcc.n	800d550 <FlashConf_FindEntry+0x1dc>
						& ~(FLASH_MEM_BLOCK_SIZE - 1)
						&& (flCo.configAddr - flCo.backupAddr
 800d532:	4b21      	ldr	r3, [pc, #132]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d534:	681a      	ldr	r2, [r3, #0]
 800d536:	4b20      	ldr	r3, [pc, #128]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d540:	d206      	bcs.n	800d550 <FlashConf_FindEntry+0x1dc>
								< FLASH_MEM_BLOCK_SIZE)) {
					/* We can erase sector of backup */
					ret = FlashConf_EraseBlock(flCo.backupAddr);
 800d542:	4b1d      	ldr	r3, [pc, #116]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	4618      	mov	r0, r3
 800d548:	f000 f83e 	bl	800d5c8 <FlashConf_EraseBlock>
 800d54c:	4603      	mov	r3, r0
 800d54e:	81fb      	strh	r3, [r7, #14]
				}

				flCo.backupAddr = flCo.configAddr;
 800d550:	4b19      	ldr	r3, [pc, #100]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4a18      	ldr	r2, [pc, #96]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d556:	6053      	str	r3, [r2, #4]
				flCo.configAddr = address;
 800d558:	4a17      	ldr	r2, [pc, #92]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6013      	str	r3, [r2, #0]
				address = flCo.tempHead.addressNext;
 800d55e:	4b16      	ldr	r3, [pc, #88]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d560:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 800d564:	607b      	str	r3, [r7, #4]
		while ((address < FLASH_CONF_ADDR_END) && (lastHeaderFound == 0)) {
 800d566:	4a13      	ldr	r2, [pc, #76]	@ (800d5b4 <FlashConf_FindEntry+0x240>)
 800d568:	4b16      	ldr	r3, [pc, #88]	@ (800d5c4 <FlashConf_FindEntry+0x250>)
 800d56a:	4413      	add	r3, r2
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d203      	bcs.n	800d57a <FlashConf_FindEntry+0x206>
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	2b00      	cmp	r3, #0
 800d576:	f43f af62 	beq.w	800d43e <FlashConf_FindEntry+0xca>
			}
		}
	}

	/* If invalid address was found and backup entry is in different sector, we can erase corrupted sector */
	if (flCo.invalidAddress != -1
 800d57a:	4b0f      	ldr	r3, [pc, #60]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d57c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	@ 0x438
 800d580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d584:	d010      	beq.n	800d5a8 <FlashConf_FindEntry+0x234>
			&& ((flCo.backupAddr ^ flCo.invalidAddress)
 800d586:	4b0c      	ldr	r3, [pc, #48]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d588:	685a      	ldr	r2, [r3, #4]
 800d58a:	4b0b      	ldr	r3, [pc, #44]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d58c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	@ 0x438
 800d590:	4053      	eors	r3, r2
 800d592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d596:	d307      	bcc.n	800d5a8 <FlashConf_FindEntry+0x234>
					& ~(FLASH_MEM_BLOCK_SIZE - 1)) != 0) {
		/* Erase the corrupted sector */
		ret = FlashConf_EraseBlock(flCo.invalidAddress);
 800d598:	4b07      	ldr	r3, [pc, #28]	@ (800d5b8 <FlashConf_FindEntry+0x244>)
 800d59a:	f8d3 3438 	ldr.w	r3, [r3, #1080]	@ 0x438
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f000 f812 	bl	800d5c8 <FlashConf_EraseBlock>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 800d5a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3714      	adds	r7, #20
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd90      	pop	{r4, r7, pc}
 800d5b4:	08008000 	.word	0x08008000
 800d5b8:	200000fc 	.word	0x200000fc
 800d5bc:	20000514 	.word	0x20000514
 800d5c0:	deadbeef 	.word	0xdeadbeef
 800d5c4:	00004000 	.word	0x00004000

0800d5c8 <FlashConf_EraseBlock>:

Status_t FlashConf_EraseBlock(uint32_t address) {
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
	Status_t ret = STATUS_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	81fb      	strh	r3, [r7, #14]

	ret = System_FlashErase(address, address + 1);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	4619      	mov	r1, r3
 800d5da:	6878      	ldr	r0, [r7, #4]
 800d5dc:	f000 fa02 	bl	800d9e4 <System_FlashErase>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	81fb      	strh	r3, [r7, #14]

	return ret;
 800d5e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3710      	adds	r7, #16
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <FlashConf_Read>:

Status_t FlashConf_Read(uint32_t address) {
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
	Status_t ret = STATUS_OK;
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	81fb      	strh	r3, [r7, #14]
	uint32_t lengthToRead;

	/* Read header */
	memcpy((uint8_t*) &flCo.data.header, (uint8_t*) address,
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2210      	movs	r2, #16
 800d600:	4619      	mov	r1, r3
 800d602:	4818      	ldr	r0, [pc, #96]	@ (800d664 <FlashConf_Read+0x74>)
 800d604:	f007 fbee 	bl	8014de4 <memcpy>
			sizeof(FlashConf_Header_t));

	lengthToRead = flCo.data.header.completeSize - sizeof(FlashConf_Header_t);
 800d608:	4b17      	ldr	r3, [pc, #92]	@ (800d668 <FlashConf_Read+0x78>)
 800d60a:	691b      	ldr	r3, [r3, #16]
 800d60c:	3b10      	subs	r3, #16
 800d60e:	60bb      	str	r3, [r7, #8]
	SAT_UP(lengthToRead, FLASH_CONF_SIZE);
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d616:	bf28      	it	cs
 800d618:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 800d61c:	60bb      	str	r3, [r7, #8]

	/* Read the rest of configuration data */
	memcpy((uint8_t*) &flCo.data.data,
			(uint8_t*) address + sizeof(FlashConf_Header_t), lengthToRead);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	3310      	adds	r3, #16
	memcpy((uint8_t*) &flCo.data.data,
 800d622:	68ba      	ldr	r2, [r7, #8]
 800d624:	4619      	mov	r1, r3
 800d626:	4811      	ldr	r0, [pc, #68]	@ (800d66c <FlashConf_Read+0x7c>)
 800d628:	f007 fbdc 	bl	8014de4 <memcpy>

	/* Consistency check at reserved field*/
	if (flCo.data.header.reserved != FLASH_KEY) {
 800d62c:	4b0e      	ldr	r3, [pc, #56]	@ (800d668 <FlashConf_Read+0x78>)
 800d62e:	695b      	ldr	r3, [r3, #20]
 800d630:	4a0f      	ldr	r2, [pc, #60]	@ (800d670 <FlashConf_Read+0x80>)
 800d632:	4293      	cmp	r3, r2
 800d634:	d001      	beq.n	800d63a <FlashConf_Read+0x4a>
		ret = STATUS_ERROR;
 800d636:	2301      	movs	r3, #1
 800d638:	81fb      	strh	r3, [r7, #14]
	}

	/* Check consistency at the end of stream */
	if (memcmp(
			flCo.data.data + flCo.data.header.completeSize
 800d63a:	4b0b      	ldr	r3, [pc, #44]	@ (800d668 <FlashConf_Read+0x78>)
 800d63c:	691b      	ldr	r3, [r3, #16]
					- sizeof(FlashConf_Header_t) - sizeof(FLASH_KEY),
 800d63e:	3b14      	subs	r3, #20
	if (memcmp(
 800d640:	4a0a      	ldr	r2, [pc, #40]	@ (800d66c <FlashConf_Read+0x7c>)
 800d642:	4413      	add	r3, r2
 800d644:	2204      	movs	r2, #4
 800d646:	490b      	ldr	r1, [pc, #44]	@ (800d674 <FlashConf_Read+0x84>)
 800d648:	4618      	mov	r0, r3
 800d64a:	f007 fb8f 	bl	8014d6c <memcmp>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <FlashConf_Read+0x68>
			&FLASH_KEY, sizeof(FLASH_KEY)) != 0) {
		ret = STATUS_ERROR;
 800d654:	2301      	movs	r3, #1
 800d656:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 800d658:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3710      	adds	r7, #16
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	20000104 	.word	0x20000104
 800d668:	200000fc 	.word	0x200000fc
 800d66c:	20000114 	.word	0x20000114
 800d670:	deadbeef 	.word	0xdeadbeef
 800d674:	08015154 	.word	0x08015154

0800d678 <FlashConf_Write>:

Status_t FlashConf_Write(void) {
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d67e:	2300      	movs	r3, #0
 800d680:	817b      	strh	r3, [r7, #10]
	uint32_t address = flCo.data.header.addressNext; // previous address next become current address
 800d682:	4b44      	ldr	r3, [pc, #272]	@ (800d794 <FlashConf_Write+0x11c>)
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	60fb      	str	r3, [r7, #12]
	uint32_t endAddress = (address & ~(FLASH_MEM_BLOCK_SIZE - 1))
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d68e:	f023 0307 	bic.w	r3, r3, #7
 800d692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d696:	607b      	str	r3, [r7, #4]
			+ FLASH_MEM_BLOCK_SIZE; // end addess of current sector

	/* Increment the writes counter */
	flCo.data.header.writes += 1;
 800d698:	4b3e      	ldr	r3, [pc, #248]	@ (800d794 <FlashConf_Write+0x11c>)
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	3301      	adds	r3, #1
 800d69e:	4a3d      	ldr	r2, [pc, #244]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6a0:	60d3      	str	r3, [r2, #12]

	/* Compute the next address */
	flCo.data.header.addressNext += flCo.data.header.completeSize;
 800d6a2:	4b3c      	ldr	r3, [pc, #240]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6a4:	689a      	ldr	r2, [r3, #8]
 800d6a6:	4b3b      	ldr	r3, [pc, #236]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6a8:	691b      	ldr	r3, [r3, #16]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	4a39      	ldr	r2, [pc, #228]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6ae:	6093      	str	r3, [r2, #8]
	/* Ceil up to whole pages */
	if (flCo.data.header.addressNext & (FLASH_MEM_PAGE_SIZE - 1)) {
 800d6b0:	4b38      	ldr	r3, [pc, #224]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	f003 030f 	and.w	r3, r3, #15
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d00a      	beq.n	800d6d2 <FlashConf_Write+0x5a>
		flCo.data.header.addressNext &= ~(FLASH_MEM_PAGE_SIZE - 1);
 800d6bc:	4b35      	ldr	r3, [pc, #212]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	f023 030f 	bic.w	r3, r3, #15
 800d6c4:	4a33      	ldr	r2, [pc, #204]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6c6:	6093      	str	r3, [r2, #8]
		flCo.data.header.addressNext += (FLASH_MEM_PAGE_SIZE);
 800d6c8:	4b32      	ldr	r3, [pc, #200]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6ca:	689b      	ldr	r3, [r3, #8]
 800d6cc:	3310      	adds	r3, #16
 800d6ce:	4a31      	ldr	r2, [pc, #196]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6d0:	6093      	str	r3, [r2, #8]
	}

	if (flCo.data.header.addressNext == FLASH_CONF_ADDR_END) {
 800d6d2:	4b30      	ldr	r3, [pc, #192]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6d4:	689a      	ldr	r2, [r3, #8]
 800d6d6:	4930      	ldr	r1, [pc, #192]	@ (800d798 <FlashConf_Write+0x120>)
 800d6d8:	4b30      	ldr	r3, [pc, #192]	@ (800d79c <FlashConf_Write+0x124>)
 800d6da:	440b      	add	r3, r1
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d103      	bne.n	800d6e8 <FlashConf_Write+0x70>
		flCo.data.header.addressNext = FLASH_CONF_ADDR_START;
 800d6e0:	4a2d      	ldr	r2, [pc, #180]	@ (800d798 <FlashConf_Write+0x120>)
 800d6e2:	4b2c      	ldr	r3, [pc, #176]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6e4:	609a      	str	r2, [r3, #8]
 800d6e6:	e02e      	b.n	800d746 <FlashConf_Write+0xce>
	} else if (flCo.data.header.addressNext > endAddress) {
 800d6e8:	4b2a      	ldr	r3, [pc, #168]	@ (800d794 <FlashConf_Write+0x11c>)
 800d6ea:	689b      	ldr	r3, [r3, #8]
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d229      	bcs.n	800d746 <FlashConf_Write+0xce>
		/* Is this the last sector ? */
		if (endAddress == FLASH_CONF_ADDR_END) {
 800d6f2:	4a29      	ldr	r2, [pc, #164]	@ (800d798 <FlashConf_Write+0x120>)
 800d6f4:	4b29      	ldr	r3, [pc, #164]	@ (800d79c <FlashConf_Write+0x124>)
 800d6f6:	4413      	add	r3, r2
 800d6f8:	687a      	ldr	r2, [r7, #4]
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d102      	bne.n	800d704 <FlashConf_Write+0x8c>
			/* Go to first sector */
			address = FLASH_CONF_ADDR_START;
 800d6fe:	4b26      	ldr	r3, [pc, #152]	@ (800d798 <FlashConf_Write+0x120>)
 800d700:	60fb      	str	r3, [r7, #12]
 800d702:	e003      	b.n	800d70c <FlashConf_Write+0x94>
		} else {
			/* Go to next sector */
			address += FLASH_MEM_BLOCK_SIZE;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d70a:	60fb      	str	r3, [r7, #12]
		}

		/* Reset the address pointer to the beginning of next sector */
		address = address & ~(FLASH_MEM_BLOCK_SIZE - 1);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800d712:	f023 0307 	bic.w	r3, r3, #7
 800d716:	60fb      	str	r3, [r7, #12]
		/* Increment Next address pointer */
		flCo.data.header.addressNext = address + flCo.data.header.completeSize;
 800d718:	4b1e      	ldr	r3, [pc, #120]	@ (800d794 <FlashConf_Write+0x11c>)
 800d71a:	691a      	ldr	r2, [r3, #16]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	4413      	add	r3, r2
 800d720:	4a1c      	ldr	r2, [pc, #112]	@ (800d794 <FlashConf_Write+0x11c>)
 800d722:	6093      	str	r3, [r2, #8]
		/* Ceil up to whole pages */
		if (flCo.data.header.addressNext & (FLASH_MEM_PAGE_SIZE - 1)) {
 800d724:	4b1b      	ldr	r3, [pc, #108]	@ (800d794 <FlashConf_Write+0x11c>)
 800d726:	689b      	ldr	r3, [r3, #8]
 800d728:	f003 030f 	and.w	r3, r3, #15
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00a      	beq.n	800d746 <FlashConf_Write+0xce>
			flCo.data.header.addressNext &= ~(FLASH_MEM_PAGE_SIZE - 1);
 800d730:	4b18      	ldr	r3, [pc, #96]	@ (800d794 <FlashConf_Write+0x11c>)
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	f023 030f 	bic.w	r3, r3, #15
 800d738:	4a16      	ldr	r2, [pc, #88]	@ (800d794 <FlashConf_Write+0x11c>)
 800d73a:	6093      	str	r3, [r2, #8]
			flCo.data.header.addressNext += (FLASH_MEM_PAGE_SIZE);
 800d73c:	4b15      	ldr	r3, [pc, #84]	@ (800d794 <FlashConf_Write+0x11c>)
 800d73e:	689b      	ldr	r3, [r3, #8]
 800d740:	3310      	adds	r3, #16
 800d742:	4a14      	ldr	r2, [pc, #80]	@ (800d794 <FlashConf_Write+0x11c>)
 800d744:	6093      	str	r3, [r2, #8]
		}
	}

	ret = System_FlashProgram(address, (uint8_t*) &flCo.data,
			((flCo.data.header.completeSize + 3) >> 2) * 4);
 800d746:	4b13      	ldr	r3, [pc, #76]	@ (800d794 <FlashConf_Write+0x11c>)
 800d748:	691b      	ldr	r3, [r3, #16]
 800d74a:	3303      	adds	r3, #3
 800d74c:	089b      	lsrs	r3, r3, #2
	ret = System_FlashProgram(address, (uint8_t*) &flCo.data,
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	461a      	mov	r2, r3
 800d752:	4913      	ldr	r1, [pc, #76]	@ (800d7a0 <FlashConf_Write+0x128>)
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f000 f97f 	bl	800da58 <System_FlashProgram>
 800d75a:	4603      	mov	r3, r0
 800d75c:	817b      	strh	r3, [r7, #10]

	/* Shift config pointers and find out if some sector is left useless */
	if ((flCo.backupAddr ^ flCo.configAddr) & ~(FLASH_MEM_BLOCK_SIZE - 1)) {
 800d75e:	4b0d      	ldr	r3, [pc, #52]	@ (800d794 <FlashConf_Write+0x11c>)
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	4b0c      	ldr	r3, [pc, #48]	@ (800d794 <FlashConf_Write+0x11c>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4053      	eors	r3, r2
 800d768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d76c:	d304      	bcc.n	800d778 <FlashConf_Write+0x100>
		/* We can erase sector of backup */
		FlashConf_EraseBlock(flCo.backupAddr);
 800d76e:	4b09      	ldr	r3, [pc, #36]	@ (800d794 <FlashConf_Write+0x11c>)
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	4618      	mov	r0, r3
 800d774:	f7ff ff28 	bl	800d5c8 <FlashConf_EraseBlock>
	}

	flCo.backupAddr = flCo.configAddr;
 800d778:	4b06      	ldr	r3, [pc, #24]	@ (800d794 <FlashConf_Write+0x11c>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a05      	ldr	r2, [pc, #20]	@ (800d794 <FlashConf_Write+0x11c>)
 800d77e:	6053      	str	r3, [r2, #4]
	flCo.configAddr = address;
 800d780:	4a04      	ldr	r2, [pc, #16]	@ (800d794 <FlashConf_Write+0x11c>)
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6013      	str	r3, [r2, #0]

	return ret;
 800d786:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	200000fc 	.word	0x200000fc
 800d798:	08008000 	.word	0x08008000
 800d79c:	00004000 	.word	0x00004000
 800d7a0:	20000104 	.word	0x20000104

0800d7a4 <RegMap_RestoreFactoryValues>:
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/


Status_t RegMap_RestoreFactoryValues(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	80fb      	strh	r3, [r7, #6]
  //uint8_t *id = (uint8_t *)0x1FFF7A10;

  /* Copy firmware info */
  memcpy(&conf.firm, CONF_C_APPLICATION_OFFSET + (uint32_t)CONF_FW_INFO_OFFSET, sizeof(conf.firm));
 800d7ae:	4a1b      	ldr	r2, [pc, #108]	@ (800d81c <RegMap_RestoreFactoryValues+0x78>)
 800d7b0:	4b1b      	ldr	r3, [pc, #108]	@ (800d820 <RegMap_RestoreFactoryValues+0x7c>)
 800d7b2:	4413      	add	r3, r2
 800d7b4:	2210      	movs	r2, #16
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	481a      	ldr	r0, [pc, #104]	@ (800d824 <RegMap_RestoreFactoryValues+0x80>)
 800d7ba:	f007 fb13 	bl	8014de4 <memcpy>

  /* Copy Hardware info */
  memcpy(&conf.fact, CONF_C_BOOTLOADER_OFFSET + (uint32_t)CONF_FW_INFO_OFFSET, sizeof(conf.fact));
 800d7be:	4a17      	ldr	r2, [pc, #92]	@ (800d81c <RegMap_RestoreFactoryValues+0x78>)
 800d7c0:	4b19      	ldr	r3, [pc, #100]	@ (800d828 <RegMap_RestoreFactoryValues+0x84>)
 800d7c2:	4413      	add	r3, r2
 800d7c4:	2210      	movs	r2, #16
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	4818      	ldr	r0, [pc, #96]	@ (800d82c <RegMap_RestoreFactoryValues+0x88>)
 800d7ca:	f007 fb0b 	bl	8014de4 <memcpy>

  CONF_INT(CONF_SYS_UPTIME)              = 0;
 800d7ce:	4b18      	ldr	r3, [pc, #96]	@ (800d830 <RegMap_RestoreFactoryValues+0x8c>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	601a      	str	r2, [r3, #0]
  CONF_INT(CONF_SYS_REGMAP_VERSION)      = 1001;
 800d7d4:	4b16      	ldr	r3, [pc, #88]	@ (800d830 <RegMap_RestoreFactoryValues+0x8c>)
 800d7d6:	3304      	adds	r3, #4
 800d7d8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d7dc:	601a      	str	r2, [r3, #0]
  CONF_BYTE(CONF_COM_MB_BAUD_RATE)       = 1;
 800d7de:	4b15      	ldr	r3, [pc, #84]	@ (800d834 <RegMap_RestoreFactoryValues+0x90>)
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	701a      	strb	r2, [r3, #0]
  CONF_BYTE(CONF_COM_MB_PARITY)          = 1;
 800d7e4:	4b13      	ldr	r3, [pc, #76]	@ (800d834 <RegMap_RestoreFactoryValues+0x90>)
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	701a      	strb	r2, [r3, #0]
  CONF_BYTE(CONF_COM_MB_STOP_BITS)       = 0;
 800d7ec:	4b11      	ldr	r3, [pc, #68]	@ (800d834 <RegMap_RestoreFactoryValues+0x90>)
 800d7ee:	3302      	adds	r3, #2
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	701a      	strb	r2, [r3, #0]
  CONF_SHORT(CONF_COM_MB_ADDRESS)        = 32;
 800d7f4:	4b0f      	ldr	r3, [pc, #60]	@ (800d834 <RegMap_RestoreFactoryValues+0x90>)
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	2220      	movs	r2, #32
 800d7fa:	801a      	strh	r2, [r3, #0]
  CONF_SHORT(CONF_COM_MB_TIMEOUT)        = 10;
 800d7fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d834 <RegMap_RestoreFactoryValues+0x90>)
 800d7fe:	3308      	adds	r3, #8
 800d800:	220a      	movs	r2, #10
 800d802:	801a      	strh	r2, [r3, #0]
  CONF_SHORT(CONF_STPMEAS_NTC_BETA)      = 3977;
 800d804:	4b0c      	ldr	r3, [pc, #48]	@ (800d838 <RegMap_RestoreFactoryValues+0x94>)
 800d806:	3301      	adds	r3, #1
 800d808:	f640 7289 	movw	r2, #3977	@ 0xf89
 800d80c:	801a      	strh	r2, [r3, #0]


  return ret;
 800d80e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d812:	4618      	mov	r0, r3
 800d814:	3708      	adds	r7, #8
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	00000200 	.word	0x00000200
 800d820:	0800c000 	.word	0x0800c000
 800d824:	20000560 	.word	0x20000560
 800d828:	08000000 	.word	0x08000000
 800d82c:	20000550 	.word	0x20000550
 800d830:	20000538 	.word	0x20000538
 800d834:	20000570 	.word	0x20000570
 800d838:	20000580 	.word	0x20000580

0800d83c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d83c:	b480      	push	{r7}
 800d83e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d840:	f3bf 8f4f 	dsb	sy
}
 800d844:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d846:	4b06      	ldr	r3, [pc, #24]	@ (800d860 <__NVIC_SystemReset+0x24>)
 800d848:	68db      	ldr	r3, [r3, #12]
 800d84a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d84e:	4904      	ldr	r1, [pc, #16]	@ (800d860 <__NVIC_SystemReset+0x24>)
 800d850:	4b04      	ldr	r3, [pc, #16]	@ (800d864 <__NVIC_SystemReset+0x28>)
 800d852:	4313      	orrs	r3, r2
 800d854:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d856:	f3bf 8f4f 	dsb	sy
}
 800d85a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d85c:	bf00      	nop
 800d85e:	e7fd      	b.n	800d85c <__NVIC_SystemReset+0x20>
 800d860:	e000ed00 	.word	0xe000ed00
 800d864:	05fa0004 	.word	0x05fa0004

0800d868 <System_CrcInit>:
//
//  /* Freeze IWDG in stop */
//  __HAL_RCC_DBGMCU_CLK_ENABLE();
//  __HAL_DBGMCU_FREEZE_IWDG();
//}
void System_CrcInit(void) {
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
	/* Initialize CRC unit */
	hcrc.Instance = CRC;
 800d86e:	4b12      	ldr	r3, [pc, #72]	@ (800d8b8 <System_CrcInit+0x50>)
 800d870:	4a12      	ldr	r2, [pc, #72]	@ (800d8bc <System_CrcInit+0x54>)
 800d872:	601a      	str	r2, [r3, #0]

	__HAL_RCC_CRC_CLK_ENABLE();
 800d874:	2300      	movs	r3, #0
 800d876:	607b      	str	r3, [r7, #4]
 800d878:	4b11      	ldr	r3, [pc, #68]	@ (800d8c0 <System_CrcInit+0x58>)
 800d87a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d87c:	4a10      	ldr	r2, [pc, #64]	@ (800d8c0 <System_CrcInit+0x58>)
 800d87e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800d882:	6313      	str	r3, [r2, #48]	@ 0x30
 800d884:	4b0e      	ldr	r3, [pc, #56]	@ (800d8c0 <System_CrcInit+0x58>)
 800d886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d88c:	607b      	str	r3, [r7, #4]
 800d88e:	687b      	ldr	r3, [r7, #4]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800d890:	4809      	ldr	r0, [pc, #36]	@ (800d8b8 <System_CrcInit+0x50>)
 800d892:	f002 ff38 	bl	8010706 <HAL_CRC_Init>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d001      	beq.n	800d8a0 <System_CrcInit+0x38>
		Error_Handler();
 800d89c:	f001 fe07 	bl	800f4ae <Error_Handler>
	}

	__HAL_CRC_DR_RESET(&hcrc);
 800d8a0:	4b05      	ldr	r3, [pc, #20]	@ (800d8b8 <System_CrcInit+0x50>)
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	689a      	ldr	r2, [r3, #8]
 800d8a6:	4b04      	ldr	r3, [pc, #16]	@ (800d8b8 <System_CrcInit+0x50>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f042 0201 	orr.w	r2, r2, #1
 800d8ae:	609a      	str	r2, [r3, #8]
}
 800d8b0:	bf00      	nop
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	200005d4 	.word	0x200005d4
 800d8bc:	40023000 	.word	0x40023000
 800d8c0:	40023800 	.word	0x40023800

0800d8c4 <System_InitWdg>:

uint32_t System_CrcAccumulate(uint32_t *data, uint32_t length) {
	return HAL_CRC_Accumulate(&hcrc, data, length);
}

Status_t System_InitWdg(void) {
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	80fb      	strh	r3, [r7, #6]

	/* 32000 Hz / 32 = 1000 counts per second
	 * 3000 = 3 s */
	hiwdg.Instance = IWDG;
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d904 <System_InitWdg+0x40>)
 800d8d0:	4a0d      	ldr	r2, [pc, #52]	@ (800d908 <System_InitWdg+0x44>)
 800d8d2:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 800d8d4:	4b0b      	ldr	r3, [pc, #44]	@ (800d904 <System_InitWdg+0x40>)
 800d8d6:	2203      	movs	r2, #3
 800d8d8:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 3000;
 800d8da:	4b0a      	ldr	r3, [pc, #40]	@ (800d904 <System_InitWdg+0x40>)
 800d8dc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800d8e0:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800d8e2:	4808      	ldr	r0, [pc, #32]	@ (800d904 <System_InitWdg+0x40>)
 800d8e4:	f004 f942 	bl	8011b6c <HAL_IWDG_Init>
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <System_InitWdg+0x2e>
	{
		Error_Handler();
 800d8ee:	f001 fdde 	bl	800f4ae <Error_Handler>
	}
	System_ReloadWdg();
 800d8f2:	f000 f80b 	bl	800d90c <System_ReloadWdg>

	return ret;
 800d8f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	200005dc 	.word	0x200005dc
 800d908:	40003000 	.word	0x40003000

0800d90c <System_ReloadWdg>:

Status_t System_ReloadWdg(void)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800d912:	2300      	movs	r3, #0
 800d914:	80fb      	strh	r3, [r7, #6]

	HAL_IWDG_Refresh(&hiwdg);
 800d916:	4804      	ldr	r0, [pc, #16]	@ (800d928 <System_ReloadWdg+0x1c>)
 800d918:	f004 f96c 	bl	8011bf4 <HAL_IWDG_Refresh>

	return ret;
 800d91c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}
 800d928:	200005dc 	.word	0x200005dc

0800d92c <System_Delay>:

uint8_t System_Delay(uint32_t milliseconds) {
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
	HAL_Delay(milliseconds);
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f002 f937 	bl	800fba8 <HAL_Delay>
	return 0;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <System_Reset>:

void System_Reset(void) {
 800d944:	b580      	push	{r7, lr}
 800d946:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
 800d948:	f7ff ff78 	bl	800d83c <__NVIC_SystemReset>

0800d94c <GetSector>:
}

uint32_t GetSector(uint32_t Address) {
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
	if (Address < 0x08004000)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	4a1b      	ldr	r2, [pc, #108]	@ (800d9c4 <GetSector+0x78>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d201      	bcs.n	800d960 <GetSector+0x14>
		return FLASH_SECTOR_0;
 800d95c:	2300      	movs	r3, #0
 800d95e:	e02b      	b.n	800d9b8 <GetSector+0x6c>
	else if (Address < 0x08008000)
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4a19      	ldr	r2, [pc, #100]	@ (800d9c8 <GetSector+0x7c>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d201      	bcs.n	800d96c <GetSector+0x20>
		return FLASH_SECTOR_1;
 800d968:	2301      	movs	r3, #1
 800d96a:	e025      	b.n	800d9b8 <GetSector+0x6c>
	else if (Address < 0x0800C000)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	4a17      	ldr	r2, [pc, #92]	@ (800d9cc <GetSector+0x80>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d201      	bcs.n	800d978 <GetSector+0x2c>
		return FLASH_SECTOR_2;
 800d974:	2302      	movs	r3, #2
 800d976:	e01f      	b.n	800d9b8 <GetSector+0x6c>
	else if (Address < 0x08010000)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4a15      	ldr	r2, [pc, #84]	@ (800d9d0 <GetSector+0x84>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d801      	bhi.n	800d984 <GetSector+0x38>
		return FLASH_SECTOR_3;
 800d980:	2303      	movs	r3, #3
 800d982:	e019      	b.n	800d9b8 <GetSector+0x6c>
	else if (Address < 0x08020000)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4a13      	ldr	r2, [pc, #76]	@ (800d9d4 <GetSector+0x88>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d801      	bhi.n	800d990 <GetSector+0x44>
		return FLASH_SECTOR_4;
 800d98c:	2304      	movs	r3, #4
 800d98e:	e013      	b.n	800d9b8 <GetSector+0x6c>
	else if (Address < 0x08040000)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a11      	ldr	r2, [pc, #68]	@ (800d9d8 <GetSector+0x8c>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d801      	bhi.n	800d99c <GetSector+0x50>
		return FLASH_SECTOR_5;
 800d998:	2305      	movs	r3, #5
 800d99a:	e00d      	b.n	800d9b8 <GetSector+0x6c>
	else if (Address < 0x08060000)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	4a0f      	ldr	r2, [pc, #60]	@ (800d9dc <GetSector+0x90>)
 800d9a0:	4293      	cmp	r3, r2
 800d9a2:	d801      	bhi.n	800d9a8 <GetSector+0x5c>
		return FLASH_SECTOR_6;
 800d9a4:	2306      	movs	r3, #6
 800d9a6:	e007      	b.n	800d9b8 <GetSector+0x6c>
	else if (Address < 0x08080000)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	4a0d      	ldr	r2, [pc, #52]	@ (800d9e0 <GetSector+0x94>)
 800d9ac:	4293      	cmp	r3, r2
 800d9ae:	d801      	bhi.n	800d9b4 <GetSector+0x68>
		return FLASH_SECTOR_7;
 800d9b0:	2307      	movs	r3, #7
 800d9b2:	e001      	b.n	800d9b8 <GetSector+0x6c>
	else
		return UINT32_MAX;
 800d9b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr
 800d9c4:	08004000 	.word	0x08004000
 800d9c8:	08008000 	.word	0x08008000
 800d9cc:	0800c000 	.word	0x0800c000
 800d9d0:	0800ffff 	.word	0x0800ffff
 800d9d4:	0801ffff 	.word	0x0801ffff
 800d9d8:	0803ffff 	.word	0x0803ffff
 800d9dc:	0805ffff 	.word	0x0805ffff
 800d9e0:	0807ffff 	.word	0x0807ffff

0800d9e4 <System_FlashErase>:

Status_t System_FlashErase(uint32_t startAddress, uint32_t endAddress)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b08c      	sub	sp, #48	@ 0x30
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
	Status_t ret = STATUS_OK;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	FLASH_EraseInitTypeDef erase;
	uint32_t pageError;
	uint32_t startSector, endSector;

	/* Unlock Flash memory */
	ret = HAL_FLASH_Unlock();
 800d9f2:	f003 faf9 	bl	8010fe8 <HAL_FLASH_Unlock>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	/* Erase the given flash pages */
	startSector = GetSector(startAddress);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7ff ffa6 	bl	800d94c <GetSector>
 800da00:	62b8      	str	r0, [r7, #40]	@ 0x28
	endSector = GetSector(endAddress);
 800da02:	6838      	ldr	r0, [r7, #0]
 800da04:	f7ff ffa2 	bl	800d94c <GetSector>
 800da08:	6278      	str	r0, [r7, #36]	@ 0x24
	if (startSector >= UINT32_MAX || endSector >= UINT32_MAX)
 800da0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da10:	d003      	beq.n	800da1a <System_FlashErase+0x36>
 800da12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da18:	d103      	bne.n	800da22 <System_FlashErase+0x3e>
	{
		HAL_FLASH_Lock();
 800da1a:	f003 fb07 	bl	801102c <HAL_FLASH_Lock>
		return HAL_ERROR;
 800da1e:	2301      	movs	r3, #1
 800da20:	e016      	b.n	800da50 <System_FlashErase+0x6c>
	}

	// Nastavení struktury pro vymazání
	erase.TypeErase = FLASH_TYPEERASE_SECTORS;  // Vymazání sektorů
 800da22:	2300      	movs	r3, #0
 800da24:	613b      	str	r3, [r7, #16]
	erase.Sector = startSector;                 // Nastavení počátečního sektoru
 800da26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da28:	61bb      	str	r3, [r7, #24]
	erase.NbSectors = (endSector - startSector) + 1; // Počet sektorů k vymazání
 800da2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da2e:	1ad3      	subs	r3, r2, r3
 800da30:	3301      	adds	r3, #1
 800da32:	61fb      	str	r3, [r7, #28]

	// Vymazání Flash paměti
	ret = HAL_FLASHEx_Erase(&erase, &pageError);
 800da34:	f107 020c 	add.w	r2, r7, #12
 800da38:	f107 0310 	add.w	r3, r7, #16
 800da3c:	4611      	mov	r1, r2
 800da3e:	4618      	mov	r0, r3
 800da40:	f003 fc44 	bl	80112cc <HAL_FLASHEx_Erase>
 800da44:	4603      	mov	r3, r0
 800da46:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	// Lock Flash memory po operaci
	HAL_FLASH_Lock();
 800da48:	f003 faf0 	bl	801102c <HAL_FLASH_Lock>

	return ret;
 800da4c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
}
 800da50:	4618      	mov	r0, r3
 800da52:	3730      	adds	r7, #48	@ 0x30
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}

0800da58 <System_FlashProgram>:

Status_t System_FlashProgram(uint32_t addressOffset, uint8_t *data,
		uint32_t length) {
 800da58:	b5b0      	push	{r4, r5, r7, lr}
 800da5a:	b088      	sub	sp, #32
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
	Status_t ret = STATUS_OK;
 800da64:	2300      	movs	r3, #0
 800da66:	83fb      	strh	r3, [r7, #30]
	uint32_t bytesWritten = 0;
 800da68:	2300      	movs	r3, #0
 800da6a:	61bb      	str	r3, [r7, #24]
	uint32_t value;

	/* Unlock Flash memory */
	ret = HAL_FLASH_Unlock();
 800da6c:	f003 fabc 	bl	8010fe8 <HAL_FLASH_Unlock>
 800da70:	4603      	mov	r3, r0
 800da72:	83fb      	strh	r3, [r7, #30]

	/* Address and data length must be multiple of 4 */
	if (((uint32_t) addressOffset % 4) || (length % 4)) {
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f003 0303 	and.w	r3, r3, #3
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d104      	bne.n	800da88 <System_FlashProgram+0x30>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f003 0303 	and.w	r3, r3, #3
 800da84:	2b00      	cmp	r3, #0
 800da86:	d02a      	beq.n	800dade <System_FlashProgram+0x86>
		ret = STATUS_ERROR;
 800da88:	2301      	movs	r3, #1
 800da8a:	83fb      	strh	r3, [r7, #30]
	}

	while (ret == STATUS_OK && bytesWritten < length) {
 800da8c:	e027      	b.n	800dade <System_FlashProgram+0x86>
		/* Write a single word */
		value = data[0] + ((uint32_t) data[1] << 8) + ((uint32_t) data[2] << 16)
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	3301      	adds	r3, #1
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	021b      	lsls	r3, r3, #8
 800da9c:	441a      	add	r2, r3
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	3302      	adds	r3, #2
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	041b      	lsls	r3, r3, #16
 800daa6:	441a      	add	r2, r3
				+ ((uint32_t) data[3] << 24);
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	3303      	adds	r3, #3
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	061b      	lsls	r3, r3, #24
		value = data[0] + ((uint32_t) data[1] << 8) + ((uint32_t) data[2] << 16)
 800dab0:	4413      	add	r3, r2
 800dab2:	617b      	str	r3, [r7, #20]
		ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2200      	movs	r2, #0
 800dab8:	461c      	mov	r4, r3
 800daba:	4615      	mov	r5, r2
 800dabc:	4622      	mov	r2, r4
 800dabe:	462b      	mov	r3, r5
 800dac0:	68f9      	ldr	r1, [r7, #12]
 800dac2:	2002      	movs	r0, #2
 800dac4:	f003 fa3e 	bl	8010f44 <HAL_FLASH_Program>
 800dac8:	4603      	mov	r3, r0
 800daca:	83fb      	strh	r3, [r7, #30]
				(uint32_t) addressOffset, value);
		bytesWritten += 4;
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	3304      	adds	r3, #4
 800dad0:	61bb      	str	r3, [r7, #24]
		addressOffset += 4;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3304      	adds	r3, #4
 800dad6:	60fb      	str	r3, [r7, #12]
		data += 4;
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	3304      	adds	r3, #4
 800dadc:	60bb      	str	r3, [r7, #8]
	while (ret == STATUS_OK && bytesWritten < length) {
 800dade:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d103      	bne.n	800daee <System_FlashProgram+0x96>
 800dae6:	69ba      	ldr	r2, [r7, #24]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	429a      	cmp	r2, r3
 800daec:	d3cf      	bcc.n	800da8e <System_FlashProgram+0x36>
	}

	/* Lock Flash memory */
	HAL_FLASH_Lock();
 800daee:	f003 fa9d 	bl	801102c <HAL_FLASH_Lock>

	return ret;
 800daf2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3720      	adds	r7, #32
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800db00 <System_RemapApplicationVector>:
	}

	return ret;
}

void System_RemapApplicationVector(void) {
 800db00:	b480      	push	{r7}
 800db02:	b085      	sub	sp, #20
 800db04:	af00      	add	r7, sp, #0
	volatile uint32_t *VectorTable = (volatile uint32_t*) 0x20000000;
 800db06:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800db0a:	60bb      	str	r3, [r7, #8]

	/* Copy reset vector from flash into RAM */
	for (int i = 0; i < 48; i++) {
 800db0c:	2300      	movs	r3, #0
 800db0e:	60fb      	str	r3, [r7, #12]
 800db10:	e00e      	b.n	800db30 <System_RemapApplicationVector+0x30>
		VectorTable[i] =
				*(volatile uint32_t*) ((uint32_t) CONF_C_APPLICATION_OFFSET
						+ (i << 2));
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	461a      	mov	r2, r3
				*(volatile uint32_t*) ((uint32_t) CONF_C_APPLICATION_OFFSET
 800db18:	4b3c      	ldr	r3, [pc, #240]	@ (800dc0c <System_RemapApplicationVector+0x10c>)
						+ (i << 2));
 800db1a:	4413      	add	r3, r2
				*(volatile uint32_t*) ((uint32_t) CONF_C_APPLICATION_OFFSET
 800db1c:	4619      	mov	r1, r3
		VectorTable[i] =
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	68ba      	ldr	r2, [r7, #8]
 800db24:	4413      	add	r3, r2
				*(volatile uint32_t*) ((uint32_t) CONF_C_APPLICATION_OFFSET
 800db26:	680a      	ldr	r2, [r1, #0]
		VectorTable[i] =
 800db28:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 48; i++) {
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	3301      	adds	r3, #1
 800db2e:	60fb      	str	r3, [r7, #12]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2b2f      	cmp	r3, #47	@ 0x2f
 800db34:	dded      	ble.n	800db12 <System_RemapApplicationVector+0x12>
	}

	/* Remap vector from flash into RAM */
	//__HAL_RCC_AHB_FORCE_RESET();
	__HAL_RCC_GPIOA_FORCE_RESET();
 800db36:	4b36      	ldr	r3, [pc, #216]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	4a35      	ldr	r2, [pc, #212]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db3c:	f043 0301 	orr.w	r3, r3, #1
 800db40:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOB_FORCE_RESET();
 800db42:	4b33      	ldr	r3, [pc, #204]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db44:	691b      	ldr	r3, [r3, #16]
 800db46:	4a32      	ldr	r2, [pc, #200]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db48:	f043 0302 	orr.w	r3, r3, #2
 800db4c:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOC_FORCE_RESET();
 800db4e:	4b30      	ldr	r3, [pc, #192]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	4a2f      	ldr	r2, [pc, #188]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db54:	f043 0304 	orr.w	r3, r3, #4
 800db58:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOH_FORCE_RESET();
 800db5a:	4b2d      	ldr	r3, [pc, #180]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	4a2c      	ldr	r2, [pc, #176]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db64:	6113      	str	r3, [r2, #16]
	__HAL_RCC_DMA1_FORCE_RESET();
 800db66:	4b2a      	ldr	r3, [pc, #168]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db68:	691b      	ldr	r3, [r3, #16]
 800db6a:	4a29      	ldr	r2, [pc, #164]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800db70:	6113      	str	r3, [r2, #16]
	__HAL_RCC_DMA2_FORCE_RESET();
 800db72:	4b27      	ldr	r3, [pc, #156]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db74:	691b      	ldr	r3, [r3, #16]
 800db76:	4a26      	ldr	r2, [pc, #152]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db78:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800db7c:	6113      	str	r3, [r2, #16]

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 800db7e:	2300      	movs	r3, #0
 800db80:	607b      	str	r3, [r7, #4]
 800db82:	4b23      	ldr	r3, [pc, #140]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db86:	4a22      	ldr	r2, [pc, #136]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800db8c:	6453      	str	r3, [r2, #68]	@ 0x44
 800db8e:	4b20      	ldr	r3, [pc, #128]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800db92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db96:	607b      	str	r3, [r7, #4]
 800db98:	687b      	ldr	r3, [r7, #4]
	//__HAL_RCC_AHB_RELEASE_RESET();
	__HAL_RCC_AHB1_RELEASE_RESET();
 800db9a:	4b1d      	ldr	r3, [pc, #116]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_RELEASE_RESET();
 800dba0:	4b1b      	ldr	r3, [pc, #108]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dba2:	691b      	ldr	r3, [r3, #16]
 800dba4:	4a1a      	ldr	r2, [pc, #104]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dba6:	f023 0301 	bic.w	r3, r3, #1
 800dbaa:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOB_RELEASE_RESET();
 800dbac:	4b18      	ldr	r3, [pc, #96]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dbae:	691b      	ldr	r3, [r3, #16]
 800dbb0:	4a17      	ldr	r2, [pc, #92]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dbb2:	f023 0302 	bic.w	r3, r3, #2
 800dbb6:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOC_RELEASE_RESET();
 800dbb8:	4b15      	ldr	r3, [pc, #84]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	4a14      	ldr	r2, [pc, #80]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dbbe:	f023 0304 	bic.w	r3, r3, #4
 800dbc2:	6113      	str	r3, [r2, #16]
	__HAL_RCC_GPIOH_RELEASE_RESET();
 800dbc4:	4b12      	ldr	r3, [pc, #72]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dbc6:	691b      	ldr	r3, [r3, #16]
 800dbc8:	4a11      	ldr	r2, [pc, #68]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dbca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dbce:	6113      	str	r3, [r2, #16]
	__HAL_RCC_DMA1_RELEASE_RESET();
 800dbd0:	4b0f      	ldr	r3, [pc, #60]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dbd2:	691b      	ldr	r3, [r3, #16]
 800dbd4:	4a0e      	ldr	r2, [pc, #56]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dbd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dbda:	6113      	str	r3, [r2, #16]
	__HAL_RCC_DMA2_RELEASE_RESET();
 800dbdc:	4b0c      	ldr	r3, [pc, #48]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dbde:	691b      	ldr	r3, [r3, #16]
 800dbe0:	4a0b      	ldr	r2, [pc, #44]	@ (800dc10 <System_RemapApplicationVector+0x110>)
 800dbe2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800dbe6:	6113      	str	r3, [r2, #16]

	__HAL_SYSCFG_REMAPMEMORY_SRAM();
 800dbe8:	4b0a      	ldr	r3, [pc, #40]	@ (800dc14 <System_RemapApplicationVector+0x114>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a09      	ldr	r2, [pc, #36]	@ (800dc14 <System_RemapApplicationVector+0x114>)
 800dbee:	f023 0307 	bic.w	r3, r3, #7
 800dbf2:	6013      	str	r3, [r2, #0]
 800dbf4:	4b07      	ldr	r3, [pc, #28]	@ (800dc14 <System_RemapApplicationVector+0x114>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a06      	ldr	r2, [pc, #24]	@ (800dc14 <System_RemapApplicationVector+0x114>)
 800dbfa:	f043 0303 	orr.w	r3, r3, #3
 800dbfe:	6013      	str	r3, [r2, #0]
}
 800dc00:	bf00      	nop
 800dc02:	3714      	adds	r7, #20
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	0800c000 	.word	0x0800c000
 800dc10:	40023800 	.word	0x40023800
 800dc14:	40013800 	.word	0x40013800

0800dc18 <MbRtu_ReadInputRegCallback>:
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/


Status_t MbRtu_ReadInputRegCallback(uint16_t address, uint16_t *value)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b087      	sub	sp, #28
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	4603      	mov	r3, r0
 800dc20:	6039      	str	r1, [r7, #0]
 800dc22:	80fb      	strh	r3, [r7, #6]
  Status_t ret = STATUS_OK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	82fb      	strh	r3, [r7, #22]

  UNUSED(mb);

  switch (address)
 800dc28:	88fb      	ldrh	r3, [r7, #6]
 800dc2a:	2b18      	cmp	r3, #24
 800dc2c:	f200 80cb 	bhi.w	800ddc6 <MbRtu_ReadInputRegCallback+0x1ae>
 800dc30:	a201      	add	r2, pc, #4	@ (adr r2, 800dc38 <MbRtu_ReadInputRegCallback+0x20>)
 800dc32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc36:	bf00      	nop
 800dc38:	0800dc9d 	.word	0x0800dc9d
 800dc3c:	0800dca9 	.word	0x0800dca9
 800dc40:	0800dcb5 	.word	0x0800dcb5
 800dc44:	0800dcc1 	.word	0x0800dcc1
 800dc48:	0800dccd 	.word	0x0800dccd
 800dc4c:	0800dcd9 	.word	0x0800dcd9
 800dc50:	0800dce5 	.word	0x0800dce5
 800dc54:	0800dcef 	.word	0x0800dcef
 800dc58:	0800dcfb 	.word	0x0800dcfb
 800dc5c:	0800dd07 	.word	0x0800dd07
 800dc60:	0800dd13 	.word	0x0800dd13
 800dc64:	0800dd1f 	.word	0x0800dd1f
 800dc68:	0800dd2b 	.word	0x0800dd2b
 800dc6c:	0800dd37 	.word	0x0800dd37
 800dc70:	0800dd43 	.word	0x0800dd43
 800dc74:	0800dd4f 	.word	0x0800dd4f
 800dc78:	0800dd5b 	.word	0x0800dd5b
 800dc7c:	0800dd67 	.word	0x0800dd67
 800dc80:	0800dd73 	.word	0x0800dd73
 800dc84:	0800dd7f 	.word	0x0800dd7f
 800dc88:	0800dd8b 	.word	0x0800dd8b
 800dc8c:	0800dd97 	.word	0x0800dd97
 800dc90:	0800dda3 	.word	0x0800dda3
 800dc94:	0800ddaf 	.word	0x0800ddaf
 800dc98:	0800ddbb 	.word	0x0800ddbb
  {

    case MB_INPUT_SYS_UPTIME_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_UPTIME) + 0);
 800dc9c:	4b56      	ldr	r3, [pc, #344]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	881a      	ldrh	r2, [r3, #0]
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	801a      	strh	r2, [r3, #0]
      break;
 800dca6:	e095      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_UPTIME_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_UPTIME) + 1);
 800dca8:	4b53      	ldr	r3, [pc, #332]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	885a      	ldrh	r2, [r3, #2]
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	801a      	strh	r2, [r3, #0]
      break;
 800dcb2:	e08f      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_REGMAP_VERSION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_REGMAP_VERSION) + 0);
 800dcb4:	4b50      	ldr	r3, [pc, #320]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	889a      	ldrh	r2, [r3, #4]
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	801a      	strh	r2, [r3, #0]
      break;
 800dcbe:	e089      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_REGMAP_VERSION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_REGMAP_VERSION) + 1);
 800dcc0:	4b4d      	ldr	r3, [pc, #308]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	88da      	ldrh	r2, [r3, #6]
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	801a      	strh	r2, [r3, #0]
      break;
 800dcca:	e083      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_STATUS_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_STATUS) + 0);
 800dccc:	4b4a      	ldr	r3, [pc, #296]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	891a      	ldrh	r2, [r3, #8]
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	801a      	strh	r2, [r3, #0]
      break;
 800dcd6:	e07d      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_STATUS_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_STATUS) + 1);
 800dcd8:	4b47      	ldr	r3, [pc, #284]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	895a      	ldrh	r2, [r3, #10]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	801a      	strh	r2, [r3, #0]
      break;
 800dce2:	e077      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_IO_INPUT:
      *value = conf.sys.io_input;
 800dce4:	4b45      	ldr	r3, [pc, #276]	@ (800ddfc <MbRtu_ReadInputRegCallback+0x1e4>)
 800dce6:	8a9a      	ldrh	r2, [r3, #20]
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	801a      	strh	r2, [r3, #0]
      break;
 800dcec:	e072      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_SERIAL_NUMBER_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_SERIAL_NUMBER) + 0);
 800dcee:	4b42      	ldr	r3, [pc, #264]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dcf0:	685b      	ldr	r3, [r3, #4]
 800dcf2:	881a      	ldrh	r2, [r3, #0]
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	801a      	strh	r2, [r3, #0]
      break;
 800dcf8:	e06c      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_SERIAL_NUMBER_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_SERIAL_NUMBER) + 1);
 800dcfa:	4b3f      	ldr	r3, [pc, #252]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	885a      	ldrh	r2, [r3, #2]
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	801a      	strh	r2, [r3, #0]
      break;
 800dd04:	e066      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_DEVICE_ID_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_DEVICE_ID) + 0);
 800dd06:	4b3c      	ldr	r3, [pc, #240]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	889a      	ldrh	r2, [r3, #4]
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	801a      	strh	r2, [r3, #0]
      break;
 800dd10:	e060      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_DEVICE_ID_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_DEVICE_ID) + 1);
 800dd12:	4b39      	ldr	r3, [pc, #228]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	88da      	ldrh	r2, [r3, #6]
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	801a      	strh	r2, [r3, #0]
      break;
 800dd1c:	e05a      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_HW_REVISION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_HW_REVISION) + 0);
 800dd1e:	4b36      	ldr	r3, [pc, #216]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	891a      	ldrh	r2, [r3, #8]
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	801a      	strh	r2, [r3, #0]
      break;
 800dd28:	e054      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_HW_REVISION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_HW_REVISION) + 1);
 800dd2a:	4b33      	ldr	r3, [pc, #204]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd2c:	685b      	ldr	r3, [r3, #4]
 800dd2e:	895a      	ldrh	r2, [r3, #10]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	801a      	strh	r2, [r3, #0]
      break;
 800dd34:	e04e      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_BOOT_REVISION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_BOOT_REVISION) + 0);
 800dd36:	4b30      	ldr	r3, [pc, #192]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	899a      	ldrh	r2, [r3, #12]
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	801a      	strh	r2, [r3, #0]
      break;
 800dd40:	e048      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_BOOT_REVISION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_BOOT_REVISION) + 1);
 800dd42:	4b2d      	ldr	r3, [pc, #180]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	89da      	ldrh	r2, [r3, #14]
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	801a      	strh	r2, [r3, #0]
      break;
 800dd4c:	e042      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_REVISION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_REVISION) + 0);
 800dd4e:	4b2a      	ldr	r3, [pc, #168]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd50:	689b      	ldr	r3, [r3, #8]
 800dd52:	881a      	ldrh	r2, [r3, #0]
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	801a      	strh	r2, [r3, #0]
      break;
 800dd58:	e03c      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_REVISION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_REVISION) + 1);
 800dd5a:	4b27      	ldr	r3, [pc, #156]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd5c:	689b      	ldr	r3, [r3, #8]
 800dd5e:	885a      	ldrh	r2, [r3, #2]
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	801a      	strh	r2, [r3, #0]
      break;
 800dd64:	e036      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_ASSEMBLY_INFO_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_ASSEMBLY_INFO) + 0);
 800dd66:	4b24      	ldr	r3, [pc, #144]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd68:	689b      	ldr	r3, [r3, #8]
 800dd6a:	889a      	ldrh	r2, [r3, #4]
 800dd6c:	683b      	ldr	r3, [r7, #0]
 800dd6e:	801a      	strh	r2, [r3, #0]
      break;
 800dd70:	e030      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_ASSEMBLY_INFO_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_ASSEMBLY_INFO) + 1);
 800dd72:	4b21      	ldr	r3, [pc, #132]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd74:	689b      	ldr	r3, [r3, #8]
 800dd76:	88da      	ldrh	r2, [r3, #6]
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	801a      	strh	r2, [r3, #0]
      break;
 800dd7c:	e02a      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_CHECKSUM_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_CHECKSUM) + 0);
 800dd7e:	4b1e      	ldr	r3, [pc, #120]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	891a      	ldrh	r2, [r3, #8]
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	801a      	strh	r2, [r3, #0]
      break;
 800dd88:	e024      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_CHECKSUM_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_CHECKSUM) + 1);
 800dd8a:	4b1b      	ldr	r3, [pc, #108]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	895a      	ldrh	r2, [r3, #10]
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	801a      	strh	r2, [r3, #0]
      break;
 800dd94:	e01e      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_SIZE_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_SIZE) + 0);
 800dd96:	4b18      	ldr	r3, [pc, #96]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	899a      	ldrh	r2, [r3, #12]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	801a      	strh	r2, [r3, #0]
      break;
 800dda0:	e018      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_SIZE_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_SIZE) + 1);
 800dda2:	4b15      	ldr	r3, [pc, #84]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	89da      	ldrh	r2, [r3, #14]
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	801a      	strh	r2, [r3, #0]
      break;
 800ddac:	e012      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_DBG_WRITES_CONF_0:
      *value = *((uint16_t *)CONF_PTR(CONF_DBG_WRITES_CONF) + 0);
 800ddae:	4b12      	ldr	r3, [pc, #72]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	881a      	ldrh	r2, [r3, #0]
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	801a      	strh	r2, [r3, #0]
      break;
 800ddb8:	e00c      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_DBG_WRITES_CONF_1:
      *value = *((uint16_t *)CONF_PTR(CONF_DBG_WRITES_CONF) + 1);
 800ddba:	4b0f      	ldr	r3, [pc, #60]	@ (800ddf8 <MbRtu_ReadInputRegCallback+0x1e0>)
 800ddbc:	699b      	ldr	r3, [r3, #24]
 800ddbe:	885a      	ldrh	r2, [r3, #2]
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	801a      	strh	r2, [r3, #0]
      break;
 800ddc4:	e006      	b.n	800ddd4 <MbRtu_ReadInputRegCallback+0x1bc>


    default:
      *value = MB_READ_NOT_SUPPORTED;
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ddcc:	801a      	strh	r2, [r3, #0]
      ret = STATUS_ERROR;
 800ddce:	2301      	movs	r3, #1
 800ddd0:	82fb      	strh	r3, [r7, #22]
      break;
 800ddd2:	bf00      	nop
  }

  /* Reverse byte order */
  *value = __REV16(*value);
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	ba5b      	rev16	r3, r3
 800ddde:	60fb      	str	r3, [r7, #12]
  return result;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	801a      	strh	r2, [r3, #0]

  return ret;
 800dde8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	371c      	adds	r7, #28
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	08015158 	.word	0x08015158
 800ddfc:	20000538 	.word	0x20000538

0800de00 <MbRtu_ReadHoldingRegCallback>:


Status_t MbRtu_ReadHoldingRegCallback(uint16_t address, uint16_t *value)
{
 800de00:	b480      	push	{r7}
 800de02:	b087      	sub	sp, #28
 800de04:	af00      	add	r7, sp, #0
 800de06:	4603      	mov	r3, r0
 800de08:	6039      	str	r1, [r7, #0]
 800de0a:	80fb      	strh	r3, [r7, #6]
  Status_t ret = STATUS_OK;
 800de0c:	2300      	movs	r3, #0
 800de0e:	82fb      	strh	r3, [r7, #22]

  switch (address)
 800de10:	88fb      	ldrh	r3, [r7, #6]
 800de12:	2b65      	cmp	r3, #101	@ 0x65
 800de14:	d05e      	beq.n	800ded4 <MbRtu_ReadHoldingRegCallback+0xd4>
 800de16:	2b65      	cmp	r3, #101	@ 0x65
 800de18:	dc63      	bgt.n	800dee2 <MbRtu_ReadHoldingRegCallback+0xe2>
 800de1a:	2b08      	cmp	r3, #8
 800de1c:	dc18      	bgt.n	800de50 <MbRtu_ReadHoldingRegCallback+0x50>
 800de1e:	2b00      	cmp	r3, #0
 800de20:	db5f      	blt.n	800dee2 <MbRtu_ReadHoldingRegCallback+0xe2>
 800de22:	2b08      	cmp	r3, #8
 800de24:	d85d      	bhi.n	800dee2 <MbRtu_ReadHoldingRegCallback+0xe2>
 800de26:	a201      	add	r2, pc, #4	@ (adr r2, 800de2c <MbRtu_ReadHoldingRegCallback+0x2c>)
 800de28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2c:	0800de57 	.word	0x0800de57
 800de30:	0800de63 	.word	0x0800de63
 800de34:	0800de6f 	.word	0x0800de6f
 800de38:	0800de7b 	.word	0x0800de7b
 800de3c:	0800de87 	.word	0x0800de87
 800de40:	0800de95 	.word	0x0800de95
 800de44:	0800dea3 	.word	0x0800dea3
 800de48:	0800deb1 	.word	0x0800deb1
 800de4c:	0800debb 	.word	0x0800debb
 800de50:	2b64      	cmp	r3, #100	@ 0x64
 800de52:	d038      	beq.n	800dec6 <MbRtu_ReadHoldingRegCallback+0xc6>
 800de54:	e045      	b.n	800dee2 <MbRtu_ReadHoldingRegCallback+0xe2>
  {

    case MB_HOLD_SYS_COMMAND_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 0);
 800de56:	4b2f      	ldr	r3, [pc, #188]	@ (800df14 <MbRtu_ReadHoldingRegCallback+0x114>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	899a      	ldrh	r2, [r3, #12]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	801a      	strh	r2, [r3, #0]
      break;
 800de60:	e046      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_SYS_COMMAND_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 1);
 800de62:	4b2c      	ldr	r3, [pc, #176]	@ (800df14 <MbRtu_ReadHoldingRegCallback+0x114>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	89da      	ldrh	r2, [r3, #14]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	801a      	strh	r2, [r3, #0]
      break;
 800de6c:	e040      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_SYS_TEST_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 0);
 800de6e:	4b29      	ldr	r3, [pc, #164]	@ (800df14 <MbRtu_ReadHoldingRegCallback+0x114>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	8a1a      	ldrh	r2, [r3, #16]
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	801a      	strh	r2, [r3, #0]
      break;
 800de78:	e03a      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_SYS_TEST_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 1);
 800de7a:	4b26      	ldr	r3, [pc, #152]	@ (800df14 <MbRtu_ReadHoldingRegCallback+0x114>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	8a5a      	ldrh	r2, [r3, #18]
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	801a      	strh	r2, [r3, #0]
      break;
 800de84:	e034      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_COM_MB_BAUD_RATE:
      *value = conf.com.mb_baud_rate;
 800de86:	4b24      	ldr	r3, [pc, #144]	@ (800df18 <MbRtu_ReadHoldingRegCallback+0x118>)
 800de88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800de8c:	461a      	mov	r2, r3
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	801a      	strh	r2, [r3, #0]
      break;
 800de92:	e02d      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_COM_MB_PARITY:
      *value = conf.com.mb_parity;
 800de94:	4b20      	ldr	r3, [pc, #128]	@ (800df18 <MbRtu_ReadHoldingRegCallback+0x118>)
 800de96:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800de9a:	461a      	mov	r2, r3
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	801a      	strh	r2, [r3, #0]
      break;
 800dea0:	e026      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_COM_MB_STOP_BITS:
      *value = conf.com.mb_stop_bits;
 800dea2:	4b1d      	ldr	r3, [pc, #116]	@ (800df18 <MbRtu_ReadHoldingRegCallback+0x118>)
 800dea4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800dea8:	461a      	mov	r2, r3
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	801a      	strh	r2, [r3, #0]
      break;
 800deae:	e01f      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_COM_MB_APPLY:
      *value = conf.com.mb_apply;
 800deb0:	4b19      	ldr	r3, [pc, #100]	@ (800df18 <MbRtu_ReadHoldingRegCallback+0x118>)
 800deb2:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	801a      	strh	r2, [r3, #0]
      break;
 800deb8:	e01a      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_COM_MB_TIMEOUT:
      *value = conf.com.mb_timeout;
 800deba:	4b17      	ldr	r3, [pc, #92]	@ (800df18 <MbRtu_ReadHoldingRegCallback+0x118>)
 800debc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	801a      	strh	r2, [r3, #0]
      break;
 800dec4:	e014      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_STPMEAS_MODE:
      *value = conf.stpmeas.mode;
 800dec6:	4b14      	ldr	r3, [pc, #80]	@ (800df18 <MbRtu_ReadHoldingRegCallback+0x118>)
 800dec8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800decc:	461a      	mov	r2, r3
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	801a      	strh	r2, [r3, #0]
      break;
 800ded2:	e00d      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>
    case MB_HOLD_STPMEAS_NTC_BETA:
      *value = conf.stpmeas.ntc_beta;
 800ded4:	4b10      	ldr	r3, [pc, #64]	@ (800df18 <MbRtu_ReadHoldingRegCallback+0x118>)
 800ded6:	f8b3 3049 	ldrh.w	r3, [r3, #73]	@ 0x49
 800deda:	b29a      	uxth	r2, r3
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	801a      	strh	r2, [r3, #0]
      break;
 800dee0:	e006      	b.n	800def0 <MbRtu_ReadHoldingRegCallback+0xf0>


    default:
      *value = MB_READ_NOT_SUPPORTED;
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dee8:	801a      	strh	r2, [r3, #0]
      ret = STATUS_ERROR;
 800deea:	2301      	movs	r3, #1
 800deec:	82fb      	strh	r3, [r7, #22]
      break;
 800deee:	bf00      	nop
  }

  /* Reverse byte order */
  *value = __REV16(*value);
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	881b      	ldrh	r3, [r3, #0]
 800def4:	613b      	str	r3, [r7, #16]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	ba5b      	rev16	r3, r3
 800defa:	60fb      	str	r3, [r7, #12]
  return result;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	b29a      	uxth	r2, r3
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	801a      	strh	r2, [r3, #0]

  return ret;
 800df04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	371c      	adds	r7, #28
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	08015158 	.word	0x08015158
 800df18:	20000538 	.word	0x20000538

0800df1c <MbRtu_WriteHoldingRegCallback>:




Status_t MbRtu_WriteHoldingRegCallback(uint16_t address, uint16_t value)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	4603      	mov	r3, r0
 800df24:	460a      	mov	r2, r1
 800df26:	80fb      	strh	r3, [r7, #6]
 800df28:	4613      	mov	r3, r2
 800df2a:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 800df2c:	2300      	movs	r3, #0
 800df2e:	81fb      	strh	r3, [r7, #14]
  uint32_t id = 0;
 800df30:	2300      	movs	r3, #0
 800df32:	60bb      	str	r3, [r7, #8]

  switch (address)
 800df34:	88fb      	ldrh	r3, [r7, #6]
 800df36:	2b65      	cmp	r3, #101	@ 0x65
 800df38:	d069      	beq.n	800e00e <MbRtu_WriteHoldingRegCallback+0xf2>
 800df3a:	2b65      	cmp	r3, #101	@ 0x65
 800df3c:	dc6e      	bgt.n	800e01c <MbRtu_WriteHoldingRegCallback+0x100>
 800df3e:	2b08      	cmp	r3, #8
 800df40:	dc18      	bgt.n	800df74 <MbRtu_WriteHoldingRegCallback+0x58>
 800df42:	2b00      	cmp	r3, #0
 800df44:	db6a      	blt.n	800e01c <MbRtu_WriteHoldingRegCallback+0x100>
 800df46:	2b08      	cmp	r3, #8
 800df48:	d868      	bhi.n	800e01c <MbRtu_WriteHoldingRegCallback+0x100>
 800df4a:	a201      	add	r2, pc, #4	@ (adr r2, 800df50 <MbRtu_WriteHoldingRegCallback+0x34>)
 800df4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df50:	0800df7b 	.word	0x0800df7b
 800df54:	0800df87 	.word	0x0800df87
 800df58:	0800df99 	.word	0x0800df99
 800df5c:	0800dfa5 	.word	0x0800dfa5
 800df60:	0800dfb5 	.word	0x0800dfb5
 800df64:	0800dfc5 	.word	0x0800dfc5
 800df68:	0800dfd5 	.word	0x0800dfd5
 800df6c:	0800dfe5 	.word	0x0800dfe5
 800df70:	0800dff1 	.word	0x0800dff1
 800df74:	2b64      	cmp	r3, #100	@ 0x64
 800df76:	d042      	beq.n	800dffe <MbRtu_WriteHoldingRegCallback+0xe2>
 800df78:	e050      	b.n	800e01c <MbRtu_WriteHoldingRegCallback+0x100>
  {

    case MB_HOLD_SYS_COMMAND_0:
      *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 0) = value;
 800df7a:	4b30      	ldr	r3, [pc, #192]	@ (800e03c <MbRtu_WriteHoldingRegCallback+0x120>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	330c      	adds	r3, #12
 800df80:	88ba      	ldrh	r2, [r7, #4]
 800df82:	801a      	strh	r2, [r3, #0]
      break;
 800df84:	e04d      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_SYS_COMMAND_1:
      *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 1) = value;
 800df86:	4b2d      	ldr	r3, [pc, #180]	@ (800e03c <MbRtu_WriteHoldingRegCallback+0x120>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	330e      	adds	r3, #14
 800df8c:	88ba      	ldrh	r2, [r7, #4]
 800df8e:	801a      	strh	r2, [r3, #0]
      id = CONF_SYS_COMMAND;
 800df90:	f24c 1352 	movw	r3, #49490	@ 0xc152
 800df94:	60bb      	str	r3, [r7, #8]
      break;
 800df96:	e044      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_SYS_TEST_0:
      *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 0) = value;
 800df98:	4b28      	ldr	r3, [pc, #160]	@ (800e03c <MbRtu_WriteHoldingRegCallback+0x120>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	3310      	adds	r3, #16
 800df9e:	88ba      	ldrh	r2, [r7, #4]
 800dfa0:	801a      	strh	r2, [r3, #0]
      break;
 800dfa2:	e03e      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_SYS_TEST_1:
      *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 1) = value;
 800dfa4:	4b25      	ldr	r3, [pc, #148]	@ (800e03c <MbRtu_WriteHoldingRegCallback+0x120>)
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	3312      	adds	r3, #18
 800dfaa:	88ba      	ldrh	r2, [r7, #4]
 800dfac:	801a      	strh	r2, [r3, #0]
      id = CONF_SYS_TEST;
 800dfae:	4b24      	ldr	r3, [pc, #144]	@ (800e040 <MbRtu_WriteHoldingRegCallback+0x124>)
 800dfb0:	60bb      	str	r3, [r7, #8]
      break;
 800dfb2:	e036      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_BAUD_RATE:
      conf.com.mb_baud_rate = (com_mb_baud_rate_t)value;
 800dfb4:	88bb      	ldrh	r3, [r7, #4]
 800dfb6:	b2da      	uxtb	r2, r3
 800dfb8:	4b22      	ldr	r3, [pc, #136]	@ (800e044 <MbRtu_WriteHoldingRegCallback+0x128>)
 800dfba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      id = CONF_COM_MB_BAUD_RATE;
 800dfbe:	4b22      	ldr	r3, [pc, #136]	@ (800e048 <MbRtu_WriteHoldingRegCallback+0x12c>)
 800dfc0:	60bb      	str	r3, [r7, #8]
      break;
 800dfc2:	e02e      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_PARITY:
      conf.com.mb_parity = (com_mb_parity_t)value;
 800dfc4:	88bb      	ldrh	r3, [r7, #4]
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	4b1e      	ldr	r3, [pc, #120]	@ (800e044 <MbRtu_WriteHoldingRegCallback+0x128>)
 800dfca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      id = CONF_COM_MB_PARITY;
 800dfce:	4b1f      	ldr	r3, [pc, #124]	@ (800e04c <MbRtu_WriteHoldingRegCallback+0x130>)
 800dfd0:	60bb      	str	r3, [r7, #8]
      break;
 800dfd2:	e026      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_STOP_BITS:
      conf.com.mb_stop_bits = (com_mb_stop_bits_t)value;
 800dfd4:	88bb      	ldrh	r3, [r7, #4]
 800dfd6:	b2da      	uxtb	r2, r3
 800dfd8:	4b1a      	ldr	r3, [pc, #104]	@ (800e044 <MbRtu_WriteHoldingRegCallback+0x128>)
 800dfda:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      id = CONF_COM_MB_STOP_BITS;
 800dfde:	4b1c      	ldr	r3, [pc, #112]	@ (800e050 <MbRtu_WriteHoldingRegCallback+0x134>)
 800dfe0:	60bb      	str	r3, [r7, #8]
      break;
 800dfe2:	e01e      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_APPLY:
      conf.com.mb_apply = value;
 800dfe4:	4a17      	ldr	r2, [pc, #92]	@ (800e044 <MbRtu_WriteHoldingRegCallback+0x128>)
 800dfe6:	88bb      	ldrh	r3, [r7, #4]
 800dfe8:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      id = CONF_COM_MB_APPLY;
 800dfea:	4b1a      	ldr	r3, [pc, #104]	@ (800e054 <MbRtu_WriteHoldingRegCallback+0x138>)
 800dfec:	60bb      	str	r3, [r7, #8]
      break;
 800dfee:	e018      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_TIMEOUT:
      conf.com.mb_timeout = value;
 800dff0:	4a14      	ldr	r2, [pc, #80]	@ (800e044 <MbRtu_WriteHoldingRegCallback+0x128>)
 800dff2:	88bb      	ldrh	r3, [r7, #4]
 800dff4:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
      id = CONF_COM_MB_TIMEOUT;
 800dff8:	4b17      	ldr	r3, [pc, #92]	@ (800e058 <MbRtu_WriteHoldingRegCallback+0x13c>)
 800dffa:	60bb      	str	r3, [r7, #8]
      break;
 800dffc:	e011      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_STPMEAS_MODE:
      conf.stpmeas.mode = (stpmeas_mode_t)value;
 800dffe:	88bb      	ldrh	r3, [r7, #4]
 800e000:	b2da      	uxtb	r2, r3
 800e002:	4b10      	ldr	r3, [pc, #64]	@ (800e044 <MbRtu_WriteHoldingRegCallback+0x128>)
 800e004:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
      id = CONF_STPMEAS_MODE;
 800e008:	4b14      	ldr	r3, [pc, #80]	@ (800e05c <MbRtu_WriteHoldingRegCallback+0x140>)
 800e00a:	60bb      	str	r3, [r7, #8]
      break;
 800e00c:	e009      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_STPMEAS_NTC_BETA:
      conf.stpmeas.ntc_beta = value;
 800e00e:	4b0d      	ldr	r3, [pc, #52]	@ (800e044 <MbRtu_WriteHoldingRegCallback+0x128>)
 800e010:	88ba      	ldrh	r2, [r7, #4]
 800e012:	f8a3 2049 	strh.w	r2, [r3, #73]	@ 0x49
      id = CONF_STPMEAS_NTC_BETA;
 800e016:	4b12      	ldr	r3, [pc, #72]	@ (800e060 <MbRtu_WriteHoldingRegCallback+0x144>)
 800e018:	60bb      	str	r3, [r7, #8]
      break;
 800e01a:	e002      	b.n	800e022 <MbRtu_WriteHoldingRegCallback+0x106>


    default:
      ret = STATUS_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	81fb      	strh	r3, [r7, #14]
      break;
 800e020:	bf00      	nop
  }

  if (id != 0)
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d002      	beq.n	800e02e <MbRtu_WriteHoldingRegCallback+0x112>
  {
    Config_ApplyConfig(id);
 800e028:	68b8      	ldr	r0, [r7, #8]
 800e02a:	f7fe fed1 	bl	800cdd0 <Config_ApplyConfig>
  }

  return ret;
 800e02e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	08015158 	.word	0x08015158
 800e040:	00010152 	.word	0x00010152
 800e044:	20000538 	.word	0x20000538
 800e048:	03000570 	.word	0x03000570
 800e04c:	03001570 	.word	0x03001570
 800e050:	03002570 	.word	0x03002570
 800e054:	03006151 	.word	0x03006151
 800e058:	03008171 	.word	0x03008171
 800e05c:	05000550 	.word	0x05000550
 800e060:	05001151 	.word	0x05001151

0800e064 <MbUpgr_Init>:
/* Public variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/

Status_t MbUpgr_Init(void)
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 800e06a:	2300      	movs	r3, #0
 800e06c:	80fb      	strh	r3, [r7, #6]

  /* Set status ready */
  mbu.status = MB_UPGR_STATUS_BUSY;
 800e06e:	4b08      	ldr	r3, [pc, #32]	@ (800e090 <MbUpgr_Init+0x2c>)
 800e070:	2200      	movs	r2, #0
 800e072:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  mbu.writeDone = 0;
 800e076:	4b06      	ldr	r3, [pc, #24]	@ (800e090 <MbUpgr_Init+0x2c>)
 800e078:	2200      	movs	r2, #0
 800e07a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return ret;
 800e07e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800e082:	4618      	mov	r0, r3
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr
 800e08e:	bf00      	nop
 800e090:	200005e8 	.word	0x200005e8

0800e094 <MbUpgr_Handle>:


Status_t MbUpgr_Handle(void)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 800e09a:	2300      	movs	r3, #0
 800e09c:	80fb      	strh	r3, [r7, #6]

  /* First 4 registers were written? */
  if (mbu.startClb != 0)
 800e09e:	4b35      	ldr	r3, [pc, #212]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0a0:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d020      	beq.n	800e0ea <MbUpgr_Handle+0x56>
  {
    mbu.startClb = 0;
 800e0a8:	4b32      	ldr	r3, [pc, #200]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    /* Start of programming procedure */
    ret = MbUpgr_HeaderClb(mbu.type, mbu.mode, mbu.size);
 800e0b0:	4b30      	ldr	r3, [pc, #192]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0b2:	881b      	ldrh	r3, [r3, #0]
 800e0b4:	4a2f      	ldr	r2, [pc, #188]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0b6:	8851      	ldrh	r1, [r2, #2]
 800e0b8:	4a2e      	ldr	r2, [pc, #184]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0ba:	6852      	ldr	r2, [r2, #4]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f000 f8e1 	bl	800e284 <MbUpgr_HeaderClb>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	80fb      	strh	r3, [r7, #6]
    if (mbu.writeDone == 0)
 800e0c6:	4b2b      	ldr	r3, [pc, #172]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d10c      	bne.n	800e0ea <MbUpgr_Handle+0x56>
    {
      if (ret == STATUS_OK)
 800e0d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d104      	bne.n	800e0e2 <MbUpgr_Handle+0x4e>
      {
        mbu.status = MB_UPGR_STATUS_READY;
 800e0d8:	4b26      	ldr	r3, [pc, #152]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e0e0:	e003      	b.n	800e0ea <MbUpgr_Handle+0x56>
      }
      else
      {
        mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 800e0e2:	4b24      	ldr	r3, [pc, #144]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0e4:	2203      	movs	r2, #3
 800e0e6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      }
    }
  }
  /* Write done flag is set */
  if (mbu.writeDone != 0)
 800e0ea:	4b22      	ldr	r3, [pc, #136]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d039      	beq.n	800e168 <MbUpgr_Handle+0xd4>
  {
    /* Call function that writes data into flash */
    ret = MbUpgr_WritePageClb(mbu.offset, mbu.data, mbu.page_size);
 800e0f4:	4b1f      	ldr	r3, [pc, #124]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0f6:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800e0fa:	4a1e      	ldr	r2, [pc, #120]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e0fc:	8912      	ldrh	r2, [r2, #8]
 800e0fe:	491e      	ldr	r1, [pc, #120]	@ (800e178 <MbUpgr_Handle+0xe4>)
 800e100:	4618      	mov	r0, r3
 800e102:	f000 f8da 	bl	800e2ba <MbUpgr_WritePageClb>
 800e106:	4603      	mov	r3, r0
 800e108:	80fb      	strh	r3, [r7, #6]
    if (ret == STATUS_OK)
 800e10a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d104      	bne.n	800e11c <MbUpgr_Handle+0x88>
    {
      mbu.status = MB_UPGR_STATUS_READY;
 800e112:	4b18      	ldr	r3, [pc, #96]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e114:	2201      	movs	r2, #1
 800e116:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e11a:	e003      	b.n	800e124 <MbUpgr_Handle+0x90>
    }
    else
    {
      mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 800e11c:	4b15      	ldr	r3, [pc, #84]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e11e:	2203      	movs	r2, #3
 800e120:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    }
    /* Did we receive all data? */
    if (mbu.size - mbu.offset <= mbu.page_size)
 800e124:	4b13      	ldr	r3, [pc, #76]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e126:	685a      	ldr	r2, [r3, #4]
 800e128:	4b12      	ldr	r3, [pc, #72]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e12a:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800e12e:	1ad3      	subs	r3, r2, r3
 800e130:	4a10      	ldr	r2, [pc, #64]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e132:	8912      	ldrh	r2, [r2, #8]
 800e134:	4293      	cmp	r3, r2
 800e136:	d813      	bhi.n	800e160 <MbUpgr_Handle+0xcc>
    {
      /* The whole binary has been received, callback */
      ret = MbUpgr_WriteDoneClb(mbu.size);
 800e138:	4b0e      	ldr	r3, [pc, #56]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	4618      	mov	r0, r3
 800e13e:	f000 f8cd 	bl	800e2dc <MbUpgr_WriteDoneClb>
 800e142:	4603      	mov	r3, r0
 800e144:	80fb      	strh	r3, [r7, #6]
      if (ret == STATUS_OK)
 800e146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d104      	bne.n	800e158 <MbUpgr_Handle+0xc4>
      {
        mbu.status = MB_UPGR_STATUS_DONE_OK;
 800e14e:	4b09      	ldr	r3, [pc, #36]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e150:	2202      	movs	r2, #2
 800e152:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e156:	e003      	b.n	800e160 <MbUpgr_Handle+0xcc>
      }
      else
      {
        mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 800e158:	4b06      	ldr	r3, [pc, #24]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e15a:	2203      	movs	r2, #3
 800e15c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      }
    }
    /* Reset flags */
    mbu.writeDone = 0;
 800e160:	4b04      	ldr	r3, [pc, #16]	@ (800e174 <MbUpgr_Handle+0xe0>)
 800e162:	2200      	movs	r2, #0
 800e164:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }

  return ret;
 800e168:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3708      	adds	r7, #8
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}
 800e174:	200005e8 	.word	0x200005e8
 800e178:	200005f6 	.word	0x200005f6

0800e17c <MbUpgr_WriteRegisters>:


Status_t MbUpgr_WriteRegisters(uint16_t offset, uint16_t length, uint8_t* data)
{
 800e17c:	b480      	push	{r7}
 800e17e:	b087      	sub	sp, #28
 800e180:	af00      	add	r7, sp, #0
 800e182:	4603      	mov	r3, r0
 800e184:	603a      	str	r2, [r7, #0]
 800e186:	80fb      	strh	r3, [r7, #6]
 800e188:	460b      	mov	r3, r1
 800e18a:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 800e18c:	2300      	movs	r3, #0
 800e18e:	827b      	strh	r3, [r7, #18]
  uint8_t *storage = (uint8_t*)&mbu + (offset - MB_UPGR_BASE_ADDRESS) * 2;
 800e190:	88fb      	ldrh	r3, [r7, #6]
 800e192:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800e196:	005b      	lsls	r3, r3, #1
 800e198:	461a      	mov	r2, r3
 800e19a:	4b1a      	ldr	r3, [pc, #104]	@ (800e204 <MbUpgr_WriteRegisters+0x88>)
 800e19c:	4413      	add	r3, r2
 800e19e:	60fb      	str	r3, [r7, #12]

  /* Copy and byte reverse */
  for (int i = 0; i < length; i++)
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	617b      	str	r3, [r7, #20]
 800e1a4:	e01a      	b.n	800e1dc <MbUpgr_WriteRegisters+0x60>
  {
    storage[i * 2 + 1] = data[i * 2 + 0];
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	005b      	lsls	r3, r3, #1
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	441a      	add	r2, r3
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	68f9      	ldr	r1, [r7, #12]
 800e1b8:	440b      	add	r3, r1
 800e1ba:	7812      	ldrb	r2, [r2, #0]
 800e1bc:	701a      	strb	r2, [r3, #0]
    storage[i * 2 + 0] = data[i * 2 + 1];
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	005b      	lsls	r3, r3, #1
 800e1c2:	3301      	adds	r3, #1
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	441a      	add	r2, r3
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	005b      	lsls	r3, r3, #1
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	440b      	add	r3, r1
 800e1d2:	7812      	ldrb	r2, [r2, #0]
 800e1d4:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 800e1d6:	697b      	ldr	r3, [r7, #20]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	617b      	str	r3, [r7, #20]
 800e1dc:	88bb      	ldrh	r3, [r7, #4]
 800e1de:	697a      	ldr	r2, [r7, #20]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	dbe0      	blt.n	800e1a6 <MbUpgr_WriteRegisters+0x2a>
  }

  /* Write into starting registers */
  if ((offset - MB_UPGR_BASE_ADDRESS) < 4)
 800e1e4:	88fb      	ldrh	r3, [r7, #6]
 800e1e6:	f5b3 7f7b 	cmp.w	r3, #1004	@ 0x3ec
 800e1ea:	d203      	bcs.n	800e1f4 <MbUpgr_WriteRegisters+0x78>
  {
    mbu.startClb = 1;
 800e1ec:	4b05      	ldr	r3, [pc, #20]	@ (800e204 <MbUpgr_WriteRegisters+0x88>)
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  }

  return ret;
 800e1f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	371c      	adds	r7, #28
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e202:	4770      	bx	lr
 800e204:	200005e8 	.word	0x200005e8

0800e208 <MbUpgr_ReadRegisters>:


Status_t MbUpgr_ReadRegisters(uint16_t offset, uint16_t length, uint8_t* data)
{
 800e208:	b480      	push	{r7}
 800e20a:	b087      	sub	sp, #28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	4603      	mov	r3, r0
 800e210:	603a      	str	r2, [r7, #0]
 800e212:	80fb      	strh	r3, [r7, #6]
 800e214:	460b      	mov	r3, r1
 800e216:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 800e218:	2300      	movs	r3, #0
 800e21a:	827b      	strh	r3, [r7, #18]
  uint8_t *storage = (uint8_t*)&mbu + (offset - MB_UPGR_BASE_ADDRESS) * 2;
 800e21c:	88fb      	ldrh	r3, [r7, #6]
 800e21e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800e222:	005b      	lsls	r3, r3, #1
 800e224:	461a      	mov	r2, r3
 800e226:	4b16      	ldr	r3, [pc, #88]	@ (800e280 <MbUpgr_ReadRegisters+0x78>)
 800e228:	4413      	add	r3, r2
 800e22a:	60fb      	str	r3, [r7, #12]

  /* Copy and byte reverse */
  for (int i = 0; i < length; i++)
 800e22c:	2300      	movs	r3, #0
 800e22e:	617b      	str	r3, [r7, #20]
 800e230:	e01a      	b.n	800e268 <MbUpgr_ReadRegisters+0x60>
  {
    data[i * 2 + 1] = storage[i * 2 + 0];
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	005b      	lsls	r3, r3, #1
 800e236:	461a      	mov	r2, r3
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	441a      	add	r2, r3
 800e23c:	697b      	ldr	r3, [r7, #20]
 800e23e:	005b      	lsls	r3, r3, #1
 800e240:	3301      	adds	r3, #1
 800e242:	6839      	ldr	r1, [r7, #0]
 800e244:	440b      	add	r3, r1
 800e246:	7812      	ldrb	r2, [r2, #0]
 800e248:	701a      	strb	r2, [r3, #0]
    data[i * 2 + 0] = storage[i * 2 + 1];
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	3301      	adds	r3, #1
 800e250:	68fa      	ldr	r2, [r7, #12]
 800e252:	441a      	add	r2, r3
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	005b      	lsls	r3, r3, #1
 800e258:	4619      	mov	r1, r3
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	440b      	add	r3, r1
 800e25e:	7812      	ldrb	r2, [r2, #0]
 800e260:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	3301      	adds	r3, #1
 800e266:	617b      	str	r3, [r7, #20]
 800e268:	88bb      	ldrh	r3, [r7, #4]
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	dbe0      	blt.n	800e232 <MbUpgr_ReadRegisters+0x2a>
  }

  return ret;
 800e270:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800e274:	4618      	mov	r0, r3
 800e276:	371c      	adds	r7, #28
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr
 800e280:	200005e8 	.word	0x200005e8

0800e284 <MbUpgr_HeaderClb>:
}

/* Private Functions ---------------------------------------------------------*/

__weak Status_t MbUpgr_HeaderClb(uint16_t type, uint16_t mode, uint32_t size)
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	4603      	mov	r3, r0
 800e28c:	603a      	str	r2, [r7, #0]
 800e28e:	80fb      	strh	r3, [r7, #6]
 800e290:	460b      	mov	r3, r1
 800e292:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	81fb      	strh	r3, [r7, #14]

  switch (mode)
 800e298:	88bb      	ldrh	r3, [r7, #4]
 800e29a:	2b01      	cmp	r3, #1
 800e29c:	d002      	beq.n	800e2a4 <MbUpgr_HeaderClb+0x20>
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	d002      	beq.n	800e2a8 <MbUpgr_HeaderClb+0x24>
      break;
    case MB_UPGR_MODE_APPLY:
//      EventMngr_Event(ATT_SYS_RESTART_REQ, NULL);
      break;
    default:
      break;
 800e2a2:	e002      	b.n	800e2aa <MbUpgr_HeaderClb+0x26>
      break;
 800e2a4:	bf00      	nop
 800e2a6:	e000      	b.n	800e2aa <MbUpgr_HeaderClb+0x26>
      break;
 800e2a8:	bf00      	nop
  }

  return ret;
 800e2aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3714      	adds	r7, #20
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr

0800e2ba <MbUpgr_WritePageClb>:


__weak Status_t MbUpgr_WritePageClb(uint32_t offset, uint8_t *data, uint16_t length)
{
 800e2ba:	b480      	push	{r7}
 800e2bc:	b087      	sub	sp, #28
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	60f8      	str	r0, [r7, #12]
 800e2c2:	60b9      	str	r1, [r7, #8]
 800e2c4:	4613      	mov	r3, r2
 800e2c6:	80fb      	strh	r3, [r7, #6]
  Status_t ret = STATUS_OK;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	82fb      	strh	r3, [r7, #22]

//  ret = System_FlashProgram((uint32_t)CONF_C_APP_BUFFER_OFFSET + offset, data, length);

  return ret;
 800e2cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	371c      	adds	r7, #28
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <MbUpgr_WriteDoneClb>:

__weak Status_t MbUpgr_WriteDoneClb(uint32_t length)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  Status_t ret = STATUS_OK;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	81fb      	strh	r3, [r7, #14]

  /* The very last packet, verify image */
//  ret = System_VerifyImage((uint32_t*) CONF_C_APP_BUFFER_OFFSET);

  return ret;
 800e2e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3714      	adds	r7, #20
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <MbSlave_Init>:

static void MbSlave_Rs485DirReceive(void);

/* Functions -----------------------------------------------------------------*/

Status_t MbSlave_Init(void) {
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b088      	sub	sp, #32
 800e2fc:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800e2fe:	2300      	movs	r3, #0
 800e300:	83fb      	strh	r3, [r7, #30]
	GPIO_InitTypeDef GPIO_InitStruct;

	MODBUS_CLK_ENABLE();
 800e302:	2300      	movs	r3, #0
 800e304:	607b      	str	r3, [r7, #4]
 800e306:	4b25      	ldr	r3, [pc, #148]	@ (800e39c <MbSlave_Init+0xa4>)
 800e308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e30a:	4a24      	ldr	r2, [pc, #144]	@ (800e39c <MbSlave_Init+0xa4>)
 800e30c:	f043 0310 	orr.w	r3, r3, #16
 800e310:	6453      	str	r3, [r2, #68]	@ 0x44
 800e312:	4b22      	ldr	r3, [pc, #136]	@ (800e39c <MbSlave_Init+0xa4>)
 800e314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e316:	f003 0310 	and.w	r3, r3, #16
 800e31a:	607b      	str	r3, [r7, #4]
 800e31c:	687b      	ldr	r3, [r7, #4]
	outFram = 1;
 800e31e:	4b20      	ldr	r3, [pc, #128]	@ (800e3a0 <MbSlave_Init+0xa8>)
 800e320:	2201      	movs	r2, #1
 800e322:	701a      	strb	r2, [r3, #0]

	MbSlave_Rs485DirReceive();
 800e324:	f000 fcc2 	bl	800ecac <MbSlave_Rs485DirReceive>

	/* MODBUS USART DE */
	GPIO_InitStruct.Pin = MODBUS_UART_DE_PIN;
 800e328:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800e32c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800e32e:	2301      	movs	r3, #1
 800e330:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e332:	2300      	movs	r3, #0
 800e334:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e336:	2302      	movs	r3, #2
 800e338:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(MODBUS_UART_DE_PORT, &GPIO_InitStruct);
 800e33a:	f107 0308 	add.w	r3, r7, #8
 800e33e:	4619      	mov	r1, r3
 800e340:	4818      	ldr	r0, [pc, #96]	@ (800e3a4 <MbSlave_Init+0xac>)
 800e342:	f003 f8e3 	bl	801150c <HAL_GPIO_Init>

	/* MODBUS USART RX */
	GPIO_InitStruct.Pin = MODBUS_UART_RX_PIN;
 800e346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e34a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e34c:	2302      	movs	r3, #2
 800e34e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e350:	2301      	movs	r3, #1
 800e352:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e354:	2302      	movs	r3, #2
 800e356:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = MODBUS_UART_ALTERNATE;
 800e358:	2307      	movs	r3, #7
 800e35a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MODBUS_UART_RX_PORT, &GPIO_InitStruct);
 800e35c:	f107 0308 	add.w	r3, r7, #8
 800e360:	4619      	mov	r1, r3
 800e362:	4810      	ldr	r0, [pc, #64]	@ (800e3a4 <MbSlave_Init+0xac>)
 800e364:	f003 f8d2 	bl	801150c <HAL_GPIO_Init>

	/* MODBUS USART TX */
	GPIO_InitStruct.Pin = MODBUS_UART_TX_PIN;
 800e368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e36c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e36e:	2302      	movs	r3, #2
 800e370:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e372:	2301      	movs	r3, #1
 800e374:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e376:	2302      	movs	r3, #2
 800e378:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = MODBUS_UART_ALTERNATE;
 800e37a:	2307      	movs	r3, #7
 800e37c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(MODBUS_UART_TX_PORT, &GPIO_InitStruct);
 800e37e:	f107 0308 	add.w	r3, r7, #8
 800e382:	4619      	mov	r1, r3
 800e384:	4807      	ldr	r0, [pc, #28]	@ (800e3a4 <MbSlave_Init+0xac>)
 800e386:	f003 f8c1 	bl	801150c <HAL_GPIO_Init>

	/* Initial UART settings */
	MbSlave_SettingsChanged();
 800e38a:	f000 f80d 	bl	800e3a8 <MbSlave_SettingsChanged>

	return ret;
 800e38e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 800e392:	4618      	mov	r0, r3
 800e394:	3720      	adds	r7, #32
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	bf00      	nop
 800e39c:	40023800 	.word	0x40023800
 800e3a0:	200007d6 	.word	0x200007d6
 800e3a4:	40020000 	.word	0x40020000

0800e3a8 <MbSlave_SettingsChanged>:

Status_t MbSlave_SettingsChanged(void) {
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	80fb      	strh	r3, [r7, #6]

	/* Disable interrupt */
	HAL_NVIC_DisableIRQ(MODBUS_UART_IRQ_NUMBER);
 800e3b2:	2025      	movs	r0, #37	@ 0x25
 800e3b4:	f002 f97f 	bl	80106b6 <HAL_NVIC_DisableIRQ>

	/* Set stop bits, parity, word length from configuration register */
	if (conf.com.mb_baud_rate < sizeof(tableSpeed) / sizeof(uint32_t)) {
 800e3b8:	4b53      	ldr	r3, [pc, #332]	@ (800e508 <MbSlave_SettingsChanged+0x160>)
 800e3ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e3be:	2b04      	cmp	r3, #4
 800e3c0:	d809      	bhi.n	800e3d6 <MbSlave_SettingsChanged+0x2e>
		mod.huart.Init.BaudRate = tableSpeed[conf.com.mb_baud_rate];
 800e3c2:	4b51      	ldr	r3, [pc, #324]	@ (800e508 <MbSlave_SettingsChanged+0x160>)
 800e3c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	4b50      	ldr	r3, [pc, #320]	@ (800e50c <MbSlave_SettingsChanged+0x164>)
 800e3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3d0:	4a4f      	ldr	r2, [pc, #316]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e3d2:	6053      	str	r3, [r2, #4]
 800e3d4:	e005      	b.n	800e3e2 <MbSlave_SettingsChanged+0x3a>
	} else {
		mod.huart.Init.BaudRate = conf.com.mb_baud_rate;
 800e3d6:	4b4c      	ldr	r3, [pc, #304]	@ (800e508 <MbSlave_SettingsChanged+0x160>)
 800e3d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800e3dc:	461a      	mov	r2, r3
 800e3de:	4b4c      	ldr	r3, [pc, #304]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e3e0:	605a      	str	r2, [r3, #4]
	}
	mod.huart.Init.StopBits = tableStopBits[conf.com.mb_stop_bits];
 800e3e2:	4b49      	ldr	r3, [pc, #292]	@ (800e508 <MbSlave_SettingsChanged+0x160>)
 800e3e4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e3e8:	461a      	mov	r2, r3
 800e3ea:	4b4a      	ldr	r3, [pc, #296]	@ (800e514 <MbSlave_SettingsChanged+0x16c>)
 800e3ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3f0:	4a47      	ldr	r2, [pc, #284]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e3f2:	60d3      	str	r3, [r2, #12]
	mod.huart.Init.Parity = tableParity[conf.com.mb_parity];
 800e3f4:	4b44      	ldr	r3, [pc, #272]	@ (800e508 <MbSlave_SettingsChanged+0x160>)
 800e3f6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	4b46      	ldr	r3, [pc, #280]	@ (800e518 <MbSlave_SettingsChanged+0x170>)
 800e3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e402:	4a43      	ldr	r2, [pc, #268]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e404:	6113      	str	r3, [r2, #16]
	mod.huart.Init.WordLength = tableLength[conf.com.mb_parity];
 800e406:	4b40      	ldr	r3, [pc, #256]	@ (800e508 <MbSlave_SettingsChanged+0x160>)
 800e408:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800e40c:	461a      	mov	r2, r3
 800e40e:	4b43      	ldr	r3, [pc, #268]	@ (800e51c <MbSlave_SettingsChanged+0x174>)
 800e410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e414:	4a3e      	ldr	r2, [pc, #248]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e416:	6093      	str	r3, [r2, #8]
	//baud rate change
	//mod.huart.Init.BaudRate = 19200;

	/* MODBUS USART init */
	mod.huart.Instance = MODBUS_UART_INSTANCE;
 800e418:	4b3d      	ldr	r3, [pc, #244]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e41a:	4a41      	ldr	r2, [pc, #260]	@ (800e520 <MbSlave_SettingsChanged+0x178>)
 800e41c:	601a      	str	r2, [r3, #0]
	mod.huart.Init.Mode = UART_MODE_TX_RX;
 800e41e:	4b3c      	ldr	r3, [pc, #240]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e420:	220c      	movs	r2, #12
 800e422:	615a      	str	r2, [r3, #20]
	mod.huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800e424:	4b3a      	ldr	r3, [pc, #232]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e426:	2200      	movs	r2, #0
 800e428:	619a      	str	r2, [r3, #24]
	mod.huart.Init.OverSampling = UART_OVERSAMPLING_16;
 800e42a:	4b39      	ldr	r3, [pc, #228]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e42c:	2200      	movs	r2, #0
 800e42e:	61da      	str	r2, [r3, #28]
	//mod.huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	//mod.huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	HAL_UART_Init(&mod.huart);
 800e430:	4837      	ldr	r0, [pc, #220]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e432:	f004 fec7 	bl	80131c4 <HAL_UART_Init>

	MODBUS_TIM_CLK_ENABLE()
 800e436:	2300      	movs	r3, #0
 800e438:	603b      	str	r3, [r7, #0]
 800e43a:	4b3a      	ldr	r3, [pc, #232]	@ (800e524 <MbSlave_SettingsChanged+0x17c>)
 800e43c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e43e:	4a39      	ldr	r2, [pc, #228]	@ (800e524 <MbSlave_SettingsChanged+0x17c>)
 800e440:	f043 0302 	orr.w	r3, r3, #2
 800e444:	6413      	str	r3, [r2, #64]	@ 0x40
 800e446:	4b37      	ldr	r3, [pc, #220]	@ (800e524 <MbSlave_SettingsChanged+0x17c>)
 800e448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e44a:	f003 0302 	and.w	r3, r3, #2
 800e44e:	603b      	str	r3, [r7, #0]
 800e450:	683b      	ldr	r3, [r7, #0]
	;

	/* MODBUS TIM Init */
	mod.htim.Instance = MODBUS_TIM_INSTANCE;
 800e452:	4b2f      	ldr	r3, [pc, #188]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e454:	4a34      	ldr	r2, [pc, #208]	@ (800e528 <MbSlave_SettingsChanged+0x180>)
 800e456:	649a      	str	r2, [r3, #72]	@ 0x48
	mod.htim.Init.Period = 9 * (8 + 2 + 1) * 100000 / 2
			/ mod.huart.Init.BaudRate; /* Timer period in 10 us, considering 8 data, 1 start, 2 stop bits */
 800e458:	4b2d      	ldr	r3, [pc, #180]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	4a33      	ldr	r2, [pc, #204]	@ (800e52c <MbSlave_SettingsChanged+0x184>)
 800e45e:	fbb2 f3f3 	udiv	r3, r2, r3
	mod.htim.Init.Period = 9 * (8 + 2 + 1) * 100000 / 2
 800e462:	4a2b      	ldr	r2, [pc, #172]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e464:	6553      	str	r3, [r2, #84]	@ 0x54
	SAT_DOWN(mod.htim.Init.Period, 175);
 800e466:	4b2a      	ldr	r3, [pc, #168]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e46a:	2baf      	cmp	r3, #175	@ 0xaf
 800e46c:	bf38      	it	cc
 800e46e:	23af      	movcc	r3, #175	@ 0xaf
 800e470:	4a27      	ldr	r2, [pc, #156]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e472:	6553      	str	r3, [r2, #84]	@ 0x54
	mod.htim.Init.Prescaler = (uint32_t) ((HAL_RCC_GetPCLK1Freq()) / 100000)
 800e474:	f003 fd10 	bl	8011e98 <HAL_RCC_GetPCLK1Freq>
 800e478:	4603      	mov	r3, r0
 800e47a:	095b      	lsrs	r3, r3, #5
 800e47c:	4a2c      	ldr	r2, [pc, #176]	@ (800e530 <MbSlave_SettingsChanged+0x188>)
 800e47e:	fba2 2303 	umull	r2, r3, r2, r3
 800e482:	09db      	lsrs	r3, r3, #7
			- 1; /* Timer step 10 us */
 800e484:	3b01      	subs	r3, #1
	mod.htim.Init.Prescaler = (uint32_t) ((HAL_RCC_GetPCLK1Freq()) / 100000)
 800e486:	4a22      	ldr	r2, [pc, #136]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e488:	64d3      	str	r3, [r2, #76]	@ 0x4c
	mod.htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 800e48a:	4b21      	ldr	r3, [pc, #132]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e48c:	2200      	movs	r2, #0
 800e48e:	651a      	str	r2, [r3, #80]	@ 0x50
	mod.htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800e490:	4b1f      	ldr	r3, [pc, #124]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e492:	2200      	movs	r2, #0
 800e494:	659a      	str	r2, [r3, #88]	@ 0x58
	HAL_TIM_Base_Init(&mod.htim);
 800e496:	4827      	ldr	r0, [pc, #156]	@ (800e534 <MbSlave_SettingsChanged+0x18c>)
 800e498:	f004 f9f7 	bl	801288a <HAL_TIM_Base_Init>

	/* MODBUS USART interrupt Init */
	HAL_NVIC_SetPriority(MODBUS_UART_IRQ_NUMBER, PRIO_IRQ_MODBUS, 0);
 800e49c:	2200      	movs	r2, #0
 800e49e:	2103      	movs	r1, #3
 800e4a0:	2025      	movs	r0, #37	@ 0x25
 800e4a2:	f002 f8de 	bl	8010662 <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(MODBUS_UART_IRQ_NUMBER);
 800e4a6:	2025      	movs	r0, #37	@ 0x25
 800e4a8:	f002 f91f 	bl	80106ea <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(MODBUS_UART_IRQ_NUMBER);
 800e4ac:	2025      	movs	r0, #37	@ 0x25
 800e4ae:	f002 f8f4 	bl	801069a <HAL_NVIC_EnableIRQ>

	/* MODBUS Timer interrupt Init */
	HAL_NVIC_SetPriority(MODBUS_TIM_IRQ_NUMBER, PRIO_IRQ_MODBUS, 0);
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	2103      	movs	r1, #3
 800e4b6:	201d      	movs	r0, #29
 800e4b8:	f002 f8d3 	bl	8010662 <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(MODBUS_TIM_IRQ_NUMBER);
 800e4bc:	201d      	movs	r0, #29
 800e4be:	f002 f914 	bl	80106ea <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(MODBUS_TIM_IRQ_NUMBER);
 800e4c2:	201d      	movs	r0, #29
 800e4c4:	f002 f8e9 	bl	801069a <HAL_NVIC_EnableIRQ>

	MbSlave_UpdateSlaveAddress();
 800e4c8:	f000 f8cc 	bl	800e664 <MbSlave_UpdateSlaveAddress>

	/* default values */
	mod.frameOk = 0;
 800e4cc:	4b10      	ldr	r3, [pc, #64]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

	/* reset bus and wait for first packet */
	MbSlave_BusReset();
 800e4d4:	f000 f8f4 	bl	800e6c0 <MbSlave_BusReset>

	/* Set initial timeout */
	mod.tick = HAL_GetTick() + conf.com.mb_timeout * 1000;
 800e4d8:	f001 fb5a 	bl	800fb90 <HAL_GetTick>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	4a0a      	ldr	r2, [pc, #40]	@ (800e508 <MbSlave_SettingsChanged+0x160>)
 800e4e0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e4ea:	fb01 f202 	mul.w	r2, r1, r2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	4a07      	ldr	r2, [pc, #28]	@ (800e510 <MbSlave_SettingsChanged+0x168>)
 800e4f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

#ifdef MODBUS_UPGRADE
	MbUpgr_Init();
 800e4f6:	f7ff fdb5 	bl	800e064 <MbUpgr_Init>
#endif

	return ret;
 800e4fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	3708      	adds	r7, #8
 800e502:	46bd      	mov	sp, r7
 800e504:	bd80      	pop	{r7, pc}
 800e506:	bf00      	nop
 800e508:	20000538 	.word	0x20000538
 800e50c:	080152d4 	.word	0x080152d4
 800e510:	2000063c 	.word	0x2000063c
 800e514:	08015300 	.word	0x08015300
 800e518:	080152e8 	.word	0x080152e8
 800e51c:	080152f4 	.word	0x080152f4
 800e520:	40011000 	.word	0x40011000
 800e524:	40023800 	.word	0x40023800
 800e528:	40000400 	.word	0x40000400
 800e52c:	004b87f0 	.word	0x004b87f0
 800e530:	0a7c5ac5 	.word	0x0a7c5ac5
 800e534:	20000684 	.word	0x20000684

0800e538 <MbSlave_Handle>:

Status_t MbSlave_Handle(void) {
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800e53e:	2300      	movs	r3, #0
 800e540:	80fb      	strh	r3, [r7, #6]

	if (mod.frameOk) {
 800e542:	4b44      	ldr	r3, [pc, #272]	@ (800e654 <MbSlave_Handle+0x11c>)
 800e544:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d050      	beq.n	800e5ee <MbSlave_Handle+0xb6>
		mod.frameOk = 0;
 800e54c:	4b41      	ldr	r3, [pc, #260]	@ (800e654 <MbSlave_Handle+0x11c>)
 800e54e:	2200      	movs	r2, #0
 800e550:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

		/* Process frame */
		MbSlave_ProcessFrame();
 800e554:	f000 f9ce 	bl	800e8f4 <MbSlave_ProcessFrame>

		/* Handle timeout */
		mod.tick = HAL_GetTick() + conf.com.mb_timeout * 1000;
 800e558:	f001 fb1a 	bl	800fb90 <HAL_GetTick>
 800e55c:	4603      	mov	r3, r0
 800e55e:	4a3e      	ldr	r2, [pc, #248]	@ (800e658 <MbSlave_Handle+0x120>)
 800e560:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 800e564:	4611      	mov	r1, r2
 800e566:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e56a:	fb01 f202 	mul.w	r2, r1, r2
 800e56e:	4413      	add	r3, r2
 800e570:	4a38      	ldr	r2, [pc, #224]	@ (800e654 <MbSlave_Handle+0x11c>)
 800e572:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
		CLEAR_BIT(conf.sys.status, STAT_BIT_MB_TIMEOUT);
 800e576:	4b38      	ldr	r3, [pc, #224]	@ (800e658 <MbSlave_Handle+0x120>)
 800e578:	689b      	ldr	r3, [r3, #8]
 800e57a:	f023 0308 	bic.w	r3, r3, #8
 800e57e:	4a36      	ldr	r2, [pc, #216]	@ (800e658 <MbSlave_Handle+0x120>)
 800e580:	6093      	str	r3, [r2, #8]

		/* Prepare and send response for unicast messages */
		if (inFrame.slaveAddr == mod.myAddress) {
 800e582:	4b36      	ldr	r3, [pc, #216]	@ (800e65c <MbSlave_Handle+0x124>)
 800e584:	781a      	ldrb	r2, [r3, #0]
 800e586:	4b33      	ldr	r3, [pc, #204]	@ (800e654 <MbSlave_Handle+0x11c>)
 800e588:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e58c:	429a      	cmp	r2, r3
 800e58e:	d12c      	bne.n	800e5ea <MbSlave_Handle+0xb2>
			/* Compose response and send it */
			outFrame.slaveAddr = mod.myAddress;
 800e590:	4b30      	ldr	r3, [pc, #192]	@ (800e654 <MbSlave_Handle+0x11c>)
 800e592:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 800e596:	4b32      	ldr	r3, [pc, #200]	@ (800e660 <MbSlave_Handle+0x128>)
 800e598:	701a      	strb	r2, [r3, #0]
			MbSlave_CRC16(&outFrame);
 800e59a:	4831      	ldr	r0, [pc, #196]	@ (800e660 <MbSlave_Handle+0x128>)
 800e59c:	f000 fb0c 	bl	800ebb8 <MbSlave_CRC16>
			outFrame.data[outFrame.size] = outFrame.crc[0];
 800e5a0:	4b2f      	ldr	r3, [pc, #188]	@ (800e660 <MbSlave_Handle+0x128>)
 800e5a2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4b2d      	ldr	r3, [pc, #180]	@ (800e660 <MbSlave_Handle+0x128>)
 800e5aa:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 800e5ae:	4b2c      	ldr	r3, [pc, #176]	@ (800e660 <MbSlave_Handle+0x128>)
 800e5b0:	440b      	add	r3, r1
 800e5b2:	709a      	strb	r2, [r3, #2]
			outFrame.data[outFrame.size + 1] = outFrame.crc[1];
 800e5b4:	4b2a      	ldr	r3, [pc, #168]	@ (800e660 <MbSlave_Handle+0x128>)
 800e5b6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	4a28      	ldr	r2, [pc, #160]	@ (800e660 <MbSlave_Handle+0x128>)
 800e5be:	f892 10ff 	ldrb.w	r1, [r2, #255]	@ 0xff
 800e5c2:	4a27      	ldr	r2, [pc, #156]	@ (800e660 <MbSlave_Handle+0x128>)
 800e5c4:	4413      	add	r3, r2
 800e5c6:	460a      	mov	r2, r1
 800e5c8:	709a      	strb	r2, [r3, #2]

			/* send packet response */
			HAL_UART_AbortReceive_IT(&mod.huart);
 800e5ca:	4822      	ldr	r0, [pc, #136]	@ (800e654 <MbSlave_Handle+0x11c>)
 800e5cc:	f004 ffba 	bl	8013544 <HAL_UART_AbortReceive_IT>
			MbSlave_Rs485DirTransmit();
 800e5d0:	f000 fb60 	bl	800ec94 <MbSlave_Rs485DirTransmit>
			HAL_UART_Transmit_IT(&mod.huart, (uint8_t*) &outFrame,
					outFrame.size + MODBUS_CRC_LENGTH + MODBUS_HEADER_LENGTH);
 800e5d4:	4b22      	ldr	r3, [pc, #136]	@ (800e660 <MbSlave_Handle+0x128>)
 800e5d6:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
			HAL_UART_Transmit_IT(&mod.huart, (uint8_t*) &outFrame,
 800e5da:	3304      	adds	r3, #4
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	461a      	mov	r2, r3
 800e5e0:	491f      	ldr	r1, [pc, #124]	@ (800e660 <MbSlave_Handle+0x128>)
 800e5e2:	481c      	ldr	r0, [pc, #112]	@ (800e654 <MbSlave_Handle+0x11c>)
 800e5e4:	f004 fe3e 	bl	8013264 <HAL_UART_Transmit_IT>
 800e5e8:	e001      	b.n	800e5ee <MbSlave_Handle+0xb6>
		} else {
			/* Prepare for next reception */
			MbSlave_BusReset();
 800e5ea:	f000 f869 	bl	800e6c0 <MbSlave_BusReset>
		}
	}
	/* If apply was set and transmit state is ready, apply settings */
	if (conf.com.mb_apply != 0 && mod.huart.gState == HAL_UART_STATE_READY) {
 800e5ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e658 <MbSlave_Handle+0x120>)
 800e5f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d00a      	beq.n	800e60c <MbSlave_Handle+0xd4>
 800e5f6:	4b17      	ldr	r3, [pc, #92]	@ (800e654 <MbSlave_Handle+0x11c>)
 800e5f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	2b20      	cmp	r3, #32
 800e600:	d104      	bne.n	800e60c <MbSlave_Handle+0xd4>
		conf.com.mb_apply = 0;
 800e602:	4b15      	ldr	r3, [pc, #84]	@ (800e658 <MbSlave_Handle+0x120>)
 800e604:	2200      	movs	r2, #0
 800e606:	87da      	strh	r2, [r3, #62]	@ 0x3e
		MbSlave_SettingsChanged();
 800e608:	f7ff fece 	bl	800e3a8 <MbSlave_SettingsChanged>
	}
	/* Timeout management */
	if (conf.com.mb_timeout != 0) {
 800e60c:	4b12      	ldr	r3, [pc, #72]	@ (800e658 <MbSlave_Handle+0x120>)
 800e60e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e612:	2b00      	cmp	r3, #0
 800e614:	d010      	beq.n	800e638 <MbSlave_Handle+0x100>
		/* Tick expired */
		if (TICK_EXPIRED(mod.tick)) {
 800e616:	f001 fabb 	bl	800fb90 <HAL_GetTick>
 800e61a:	4602      	mov	r2, r0
 800e61c:	4b0d      	ldr	r3, [pc, #52]	@ (800e654 <MbSlave_Handle+0x11c>)
 800e61e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800e628:	4293      	cmp	r3, r2
 800e62a:	d205      	bcs.n	800e638 <MbSlave_Handle+0x100>
		SET_BIT(conf.sys.status, STAT_BIT_MB_TIMEOUT);
 800e62c:	4b0a      	ldr	r3, [pc, #40]	@ (800e658 <MbSlave_Handle+0x120>)
 800e62e:	689b      	ldr	r3, [r3, #8]
 800e630:	f043 0308 	orr.w	r3, r3, #8
 800e634:	4a08      	ldr	r2, [pc, #32]	@ (800e658 <MbSlave_Handle+0x120>)
 800e636:	6093      	str	r3, [r2, #8]
		}
	}

#ifdef MODBUS_UPGRADE
	if (mod.huart.gState == HAL_UART_STATE_READY) {
 800e638:	4b06      	ldr	r3, [pc, #24]	@ (800e654 <MbSlave_Handle+0x11c>)
 800e63a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b20      	cmp	r3, #32
 800e642:	d101      	bne.n	800e648 <MbSlave_Handle+0x110>
		MbUpgr_Handle();
 800e644:	f7ff fd26 	bl	800e094 <MbUpgr_Handle>
	}
#endif

	return ret;
 800e648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3708      	adds	r7, #8
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	2000063c 	.word	0x2000063c
 800e658:	20000538 	.word	0x20000538
 800e65c:	200006d4 	.word	0x200006d4
 800e660:	200007d8 	.word	0x200007d8

0800e664 <MbSlave_UpdateSlaveAddress>:
	if (huart->Instance == MODBUS_UART_INSTANCE) {
		MbSlave_BusReset();
	}
}

Status_t MbSlave_UpdateSlaveAddress(void) {
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800e66a:	2300      	movs	r3, #0
 800e66c:	80fb      	strh	r3, [r7, #6]

	mod.myAddress = conf.com.mb_address;
 800e66e:	4b12      	ldr	r3, [pc, #72]	@ (800e6b8 <MbSlave_UpdateSlaveAddress+0x54>)
 800e670:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800e672:	b2da      	uxtb	r2, r3
 800e674:	4b11      	ldr	r3, [pc, #68]	@ (800e6bc <MbSlave_UpdateSlaveAddress+0x58>)
 800e676:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	SAT_DOWN(mod.myAddress, MODBUS_MIN_SLAVE_ADDR);
 800e67a:	4b10      	ldr	r3, [pc, #64]	@ (800e6bc <MbSlave_UpdateSlaveAddress+0x58>)
 800e67c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e680:	2b00      	cmp	r3, #0
 800e682:	d003      	beq.n	800e68c <MbSlave_UpdateSlaveAddress+0x28>
 800e684:	4b0d      	ldr	r3, [pc, #52]	@ (800e6bc <MbSlave_UpdateSlaveAddress+0x58>)
 800e686:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e68a:	e000      	b.n	800e68e <MbSlave_UpdateSlaveAddress+0x2a>
 800e68c:	2301      	movs	r3, #1
 800e68e:	4a0b      	ldr	r2, [pc, #44]	@ (800e6bc <MbSlave_UpdateSlaveAddress+0x58>)
 800e690:	f882 3091 	strb.w	r3, [r2, #145]	@ 0x91
	SAT_UP(mod.myAddress, MODBUS_MAX_SLAVE_ADDR);
 800e694:	4b09      	ldr	r3, [pc, #36]	@ (800e6bc <MbSlave_UpdateSlaveAddress+0x58>)
 800e696:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800e69a:	2bf7      	cmp	r3, #247	@ 0xf7
 800e69c:	bf28      	it	cs
 800e69e:	23f7      	movcs	r3, #247	@ 0xf7
 800e6a0:	b2da      	uxtb	r2, r3
 800e6a2:	4b06      	ldr	r3, [pc, #24]	@ (800e6bc <MbSlave_UpdateSlaveAddress+0x58>)
 800e6a4:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	return ret;
 800e6a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr
 800e6b8:	20000538 	.word	0x20000538
 800e6bc:	2000063c 	.word	0x2000063c

0800e6c0 <MbSlave_BusReset>:

Status_t MbSlave_BusReset(void) {
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t outFram;

	/* Stop current transfer */
	HAL_UART_Abort_IT(&mod.huart);
 800e6ca:	480c      	ldr	r0, [pc, #48]	@ (800e6fc <MbSlave_BusReset+0x3c>)
 800e6cc:	f004 fe26 	bl	801331c <HAL_UART_Abort_IT>
	/* Read out data register for safety reasons */
	// změna outFram = mod.huart.Instance->RDR;
	outFram = mod.huart.Instance->DR;
 800e6d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e6fc <MbSlave_BusReset+0x3c>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	80bb      	strh	r3, [r7, #4]

	UNUSED(outFram);
 800e6da:	88bb      	ldrh	r3, [r7, #4]

	/* wait for next packet */
	MbSlave_Rs485DirReceive();
 800e6dc:	f000 fae6 	bl	800ecac <MbSlave_Rs485DirReceive>
	ret = HAL_UART_Receive_IT(&mod.huart, (uint8_t*) &inFrame,
 800e6e0:	22fe      	movs	r2, #254	@ 0xfe
 800e6e2:	4907      	ldr	r1, [pc, #28]	@ (800e700 <MbSlave_BusReset+0x40>)
 800e6e4:	4805      	ldr	r0, [pc, #20]	@ (800e6fc <MbSlave_BusReset+0x3c>)
 800e6e6:	f004 fdf3 	bl	80132d0 <HAL_UART_Receive_IT>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	80fb      	strh	r3, [r7, #6]
	MODBUS_HEADER_LENGTH + MODBUS_DATA_LENGTH);

	return ret;
 800e6ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	2000063c 	.word	0x2000063c
 800e700:	200006d4 	.word	0x200006d4

0800e704 <USART1_IRQHandler>:

void MODBUS_UART_IRQ_HANDLER(void) {
 800e704:	b580      	push	{r7, lr}
 800e706:	af00      	add	r7, sp, #0
	/* If we received byte, restart receive timer */
	if (((mod.huart.Instance->SR & USART_SR_RXNE) != RESET)
 800e708:	4b0f      	ldr	r3, [pc, #60]	@ (800e748 <USART1_IRQHandler+0x44>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f003 0320 	and.w	r3, r3, #32
 800e712:	2b00      	cmp	r3, #0
 800e714:	d012      	beq.n	800e73c <USART1_IRQHandler+0x38>
			&& ((mod.huart.Instance->CR1 & USART_CR1_RXNEIE) != RESET)) {
 800e716:	4b0c      	ldr	r3, [pc, #48]	@ (800e748 <USART1_IRQHandler+0x44>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	68db      	ldr	r3, [r3, #12]
 800e71c:	f003 0320 	and.w	r3, r3, #32
 800e720:	2b00      	cmp	r3, #0
 800e722:	d00b      	beq.n	800e73c <USART1_IRQHandler+0x38>
		/* clear timer */
		mod.htim.Instance->CNT = 0;
 800e724:	4b08      	ldr	r3, [pc, #32]	@ (800e748 <USART1_IRQHandler+0x44>)
 800e726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e728:	2200      	movs	r2, #0
 800e72a:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_CLEAR_IT(&mod.htim, TIM_IT_UPDATE);
 800e72c:	4b06      	ldr	r3, [pc, #24]	@ (800e748 <USART1_IRQHandler+0x44>)
 800e72e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e730:	f06f 0201 	mvn.w	r2, #1
 800e734:	611a      	str	r2, [r3, #16]
		/* start timer */
		HAL_TIM_Base_Start_IT(&mod.htim);
 800e736:	4805      	ldr	r0, [pc, #20]	@ (800e74c <USART1_IRQHandler+0x48>)
 800e738:	f004 f8f6 	bl	8012928 <HAL_TIM_Base_Start_IT>
	}
	HAL_UART_IRQHandler(&mod.huart);
 800e73c:	4802      	ldr	r0, [pc, #8]	@ (800e748 <USART1_IRQHandler+0x44>)
 800e73e:	f004 ffb3 	bl	80136a8 <HAL_UART_IRQHandler>
}
 800e742:	bf00      	nop
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	2000063c 	.word	0x2000063c
 800e74c:	20000684 	.word	0x20000684

0800e750 <TIM3_IRQHandler>:

void MODBUS_TIM_IRQ_HANDLER(void) {
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
	if (__HAL_TIM_GET_FLAG(&mod.htim, TIM_FLAG_UPDATE) != RESET) {
 800e754:	4b10      	ldr	r3, [pc, #64]	@ (800e798 <TIM3_IRQHandler+0x48>)
 800e756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	f003 0301 	and.w	r3, r3, #1
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d117      	bne.n	800e792 <TIM3_IRQHandler+0x42>
		if (__HAL_TIM_GET_IT_SOURCE(&mod.htim, TIM_IT_UPDATE) != RESET) {
 800e762:	4b0d      	ldr	r3, [pc, #52]	@ (800e798 <TIM3_IRQHandler+0x48>)
 800e764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e766:	68db      	ldr	r3, [r3, #12]
 800e768:	f003 0301 	and.w	r3, r3, #1
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d110      	bne.n	800e792 <TIM3_IRQHandler+0x42>
			/* Update event */
			__HAL_TIM_CLEAR_IT(&mod.htim, TIM_IT_UPDATE);
 800e770:	4b09      	ldr	r3, [pc, #36]	@ (800e798 <TIM3_IRQHandler+0x48>)
 800e772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e774:	f06f 0201 	mvn.w	r2, #1
 800e778:	611a      	str	r2, [r3, #16]
			/* Stop timer */
			HAL_TIM_Base_Stop_IT(&mod.htim);
 800e77a:	4808      	ldr	r0, [pc, #32]	@ (800e79c <TIM3_IRQHandler+0x4c>)
 800e77c:	f004 f944 	bl	8012a08 <HAL_TIM_Base_Stop_IT>
			/* Check the frame that we need to process it */
			MbSlave_CheckFrame();
 800e780:	f000 f80e 	bl	800e7a0 <MbSlave_CheckFrame>
			if (mod.frameOk == 1) {
 800e784:	4b04      	ldr	r3, [pc, #16]	@ (800e798 <TIM3_IRQHandler+0x48>)
 800e786:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d001      	beq.n	800e792 <TIM3_IRQHandler+0x42>
				/* Notify the waiting task */
			} else {
				MbSlave_BusReset();
 800e78e:	f7ff ff97 	bl	800e6c0 <MbSlave_BusReset>
			}
		}
	}
}
 800e792:	bf00      	nop
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	2000063c 	.word	0x2000063c
 800e79c:	20000684 	.word	0x20000684

0800e7a0 <MbSlave_CheckFrame>:

static Status_t MbSlave_CheckFrame(void) {
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	80bb      	strh	r3, [r7, #4]
	uint8_t command;
	uint8_t supported = 0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	71fb      	strb	r3, [r7, #7]

	/* Check address */
	if (inFrame.slaveAddr
 800e7ae:	4b4f      	ldr	r3, [pc, #316]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e7b0:	781a      	ldrb	r2, [r3, #0]
			== mod.myAddress|| inFrame.slaveAddr == MODBUS_BROADCAST) {
 800e7b2:	4b4f      	ldr	r3, [pc, #316]	@ (800e8f0 <MbSlave_CheckFrame+0x150>)
 800e7b4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
	if (inFrame.slaveAddr
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d004      	beq.n	800e7c6 <MbSlave_CheckFrame+0x26>
			== mod.myAddress|| inFrame.slaveAddr == MODBUS_BROADCAST) {
 800e7bc:	4b4b      	ldr	r3, [pc, #300]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f040 808d 	bne.w	800e8e0 <MbSlave_CheckFrame+0x140>
		command = inFrame.funcCode;
 800e7c6:	4b49      	ldr	r3, [pc, #292]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e7c8:	785b      	ldrb	r3, [r3, #1]
 800e7ca:	70fb      	strb	r3, [r7, #3]
		/* Calculate size of data and check supported operation codes */
		if (command >= MB_READ_COILS && command <= MB_WRITE_SINGLE_REG) {
 800e7cc:	78fb      	ldrb	r3, [r7, #3]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d009      	beq.n	800e7e6 <MbSlave_CheckFrame+0x46>
 800e7d2:	78fb      	ldrb	r3, [r7, #3]
 800e7d4:	2b06      	cmp	r3, #6
 800e7d6:	d806      	bhi.n	800e7e6 <MbSlave_CheckFrame+0x46>
			inFrame.size = 0;
 800e7d8:	4b44      	ldr	r3, [pc, #272]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			supported = 1;
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	71fb      	strb	r3, [r7, #7]
 800e7e4:	e04d      	b.n	800e882 <MbSlave_CheckFrame+0xe2>
		} else if (command == MB_WRITE_MULTIPLE_REGS
 800e7e6:	78fb      	ldrb	r3, [r7, #3]
 800e7e8:	2b10      	cmp	r3, #16
 800e7ea:	d002      	beq.n	800e7f2 <MbSlave_CheckFrame+0x52>
				|| command == MB_WRITE_MULTIPLE_COILS) {
 800e7ec:	78fb      	ldrb	r3, [r7, #3]
 800e7ee:	2b0f      	cmp	r3, #15
 800e7f0:	d147      	bne.n	800e882 <MbSlave_CheckFrame+0xe2>
			inFrame.size = inFrame.data[2];
 800e7f2:	4b3e      	ldr	r3, [pc, #248]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e7f4:	791b      	ldrb	r3, [r3, #4]
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	4b3c      	ldr	r3, [pc, #240]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e7fa:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			inFrame.size <<= 8;
 800e7fe:	4b3b      	ldr	r3, [pc, #236]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e800:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e804:	021b      	lsls	r3, r3, #8
 800e806:	b29a      	uxth	r2, r3
 800e808:	4b38      	ldr	r3, [pc, #224]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e80a:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			inFrame.size |= inFrame.data[3];
 800e80e:	4b37      	ldr	r3, [pc, #220]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e810:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e814:	4a35      	ldr	r2, [pc, #212]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e816:	7952      	ldrb	r2, [r2, #5]
 800e818:	4313      	orrs	r3, r2
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	4b33      	ldr	r3, [pc, #204]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e81e:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100

			if (command == MB_WRITE_MULTIPLE_COILS) {
 800e822:	78fb      	ldrb	r3, [r7, #3]
 800e824:	2b0f      	cmp	r3, #15
 800e826:	d11d      	bne.n	800e864 <MbSlave_CheckFrame+0xc4>
				if (inFrame.size % 8) {
 800e828:	4b30      	ldr	r3, [pc, #192]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e82a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e82e:	f003 0307 	and.w	r3, r3, #7
 800e832:	b29b      	uxth	r3, r3
 800e834:	2b00      	cmp	r3, #0
 800e836:	d00a      	beq.n	800e84e <MbSlave_CheckFrame+0xae>
					inFrame.size = (inFrame.size / 8) + 2; /* 1 extra byte is for unaligned data, 1 byte for size */
 800e838:	4b2c      	ldr	r3, [pc, #176]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e83a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e83e:	08db      	lsrs	r3, r3, #3
 800e840:	b29b      	uxth	r3, r3
 800e842:	3302      	adds	r3, #2
 800e844:	b29a      	uxth	r2, r3
 800e846:	4b29      	ldr	r3, [pc, #164]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e848:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 800e84c:	e017      	b.n	800e87e <MbSlave_CheckFrame+0xde>
				} else {
					inFrame.size = (inFrame.size / 8) + 1; /* 1 byte for size */
 800e84e:	4b27      	ldr	r3, [pc, #156]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e850:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e854:	08db      	lsrs	r3, r3, #3
 800e856:	b29b      	uxth	r3, r3
 800e858:	3301      	adds	r3, #1
 800e85a:	b29a      	uxth	r2, r3
 800e85c:	4b23      	ldr	r3, [pc, #140]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e85e:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 800e862:	e00c      	b.n	800e87e <MbSlave_CheckFrame+0xde>
				}
			} else if (command == MB_WRITE_MULTIPLE_REGS) {
 800e864:	78fb      	ldrb	r3, [r7, #3]
 800e866:	2b10      	cmp	r3, #16
 800e868:	d109      	bne.n	800e87e <MbSlave_CheckFrame+0xde>
				inFrame.size = (inFrame.size * 2) + 1; /* registers are 16b, 1 byte for size */
 800e86a:	4b20      	ldr	r3, [pc, #128]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e86c:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e870:	005b      	lsls	r3, r3, #1
 800e872:	b29b      	uxth	r3, r3
 800e874:	3301      	adds	r3, #1
 800e876:	b29a      	uxth	r2, r3
 800e878:	4b1c      	ldr	r3, [pc, #112]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e87a:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			}
			supported = 1;
 800e87e:	2301      	movs	r3, #1
 800e880:	71fb      	strb	r3, [r7, #7]
		}

		/* Add header of command to size variable */
		inFrame.size += MODBUS_MIN_PAYLOAD_LENGTH;
 800e882:	4b1a      	ldr	r3, [pc, #104]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e884:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e888:	3304      	adds	r3, #4
 800e88a:	b29a      	uxth	r2, r3
 800e88c:	4b17      	ldr	r3, [pc, #92]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e88e:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
		/* Check maximal length of modbus frame */
		if (inFrame.size < MODBUS_DATA_LENGTH - 2) // CRC must fit into received data
 800e892:	4b16      	ldr	r3, [pc, #88]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e894:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e898:	2bf9      	cmp	r3, #249	@ 0xf9
 800e89a:	d821      	bhi.n	800e8e0 <MbSlave_CheckFrame+0x140>
				{
			/* compute CRC16 from received packet */
			MbSlave_CRC16(&inFrame);
 800e89c:	4813      	ldr	r0, [pc, #76]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e89e:	f000 f98b 	bl	800ebb8 <MbSlave_CRC16>
			/* we have original CRC16 in received data */
			if (inFrame.crc[0] == inFrame.data[inFrame.size]
 800e8a2:	4b12      	ldr	r3, [pc, #72]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e8a4:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 800e8a8:	4b10      	ldr	r3, [pc, #64]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e8aa:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	4b0e      	ldr	r3, [pc, #56]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e8b2:	440b      	add	r3, r1
 800e8b4:	789b      	ldrb	r3, [r3, #2]
 800e8b6:	429a      	cmp	r2, r3
 800e8b8:	d112      	bne.n	800e8e0 <MbSlave_CheckFrame+0x140>
					&& inFrame.crc[1] == inFrame.data[inFrame.size + 1]
 800e8ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e8bc:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 800e8c0:	4b0a      	ldr	r3, [pc, #40]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e8c2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	4908      	ldr	r1, [pc, #32]	@ (800e8ec <MbSlave_CheckFrame+0x14c>)
 800e8ca:	440b      	add	r3, r1
 800e8cc:	789b      	ldrb	r3, [r3, #2]
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d106      	bne.n	800e8e0 <MbSlave_CheckFrame+0x140>
					&& supported) {
 800e8d2:	79fb      	ldrb	r3, [r7, #7]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d003      	beq.n	800e8e0 <MbSlave_CheckFrame+0x140>
				/* move to next step */
				mod.frameOk = 1;
 800e8d8:	4b05      	ldr	r3, [pc, #20]	@ (800e8f0 <MbSlave_CheckFrame+0x150>)
 800e8da:	2201      	movs	r2, #1
 800e8dc:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
			}
		}
	}

	return ret;
 800e8e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	200006d4 	.word	0x200006d4
 800e8f0:	2000063c 	.word	0x2000063c

0800e8f4 <MbSlave_ProcessFrame>:

static Status_t MbSlave_ProcessFrame(void) {
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b088      	sub	sp, #32
 800e8f8:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	82fb      	strh	r3, [r7, #22]
	uint32_t i;
	uint16_t addr;
	uint16_t count;
	uint16_t size;
	uint16_t offset = 0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	833b      	strh	r3, [r7, #24]
	uint16_t val;

	/* prepare address for outframe */
	outFrame.funcCode = inFrame.funcCode;
 800e902:	4b85      	ldr	r3, [pc, #532]	@ (800eb18 <MbSlave_ProcessFrame+0x224>)
 800e904:	785a      	ldrb	r2, [r3, #1]
 800e906:	4b85      	ldr	r3, [pc, #532]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800e908:	705a      	strb	r2, [r3, #1]
	/* default size for error */
	outFrame.size = 1;
 800e90a:	4b84      	ldr	r3, [pc, #528]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800e90c:	2201      	movs	r2, #1
 800e90e:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	/* parse start address and count */
	addr = inFrame.data[0];
 800e912:	4b81      	ldr	r3, [pc, #516]	@ (800eb18 <MbSlave_ProcessFrame+0x224>)
 800e914:	789b      	ldrb	r3, [r3, #2]
 800e916:	82bb      	strh	r3, [r7, #20]
	addr <<= 8;
 800e918:	8abb      	ldrh	r3, [r7, #20]
 800e91a:	021b      	lsls	r3, r3, #8
 800e91c:	82bb      	strh	r3, [r7, #20]
	addr |= inFrame.data[1];
 800e91e:	4b7e      	ldr	r3, [pc, #504]	@ (800eb18 <MbSlave_ProcessFrame+0x224>)
 800e920:	78db      	ldrb	r3, [r3, #3]
 800e922:	461a      	mov	r2, r3
 800e924:	8abb      	ldrh	r3, [r7, #20]
 800e926:	4313      	orrs	r3, r2
 800e928:	82bb      	strh	r3, [r7, #20]
	count = inFrame.data[2];
 800e92a:	4b7b      	ldr	r3, [pc, #492]	@ (800eb18 <MbSlave_ProcessFrame+0x224>)
 800e92c:	791b      	ldrb	r3, [r3, #4]
 800e92e:	827b      	strh	r3, [r7, #18]
	count <<= 8;
 800e930:	8a7b      	ldrh	r3, [r7, #18]
 800e932:	021b      	lsls	r3, r3, #8
 800e934:	827b      	strh	r3, [r7, #18]
	count |= inFrame.data[3];
 800e936:	4b78      	ldr	r3, [pc, #480]	@ (800eb18 <MbSlave_ProcessFrame+0x224>)
 800e938:	795b      	ldrb	r3, [r3, #5]
 800e93a:	461a      	mov	r2, r3
 800e93c:	8a7b      	ldrh	r3, [r7, #18]
 800e93e:	4313      	orrs	r3, r2
 800e940:	827b      	strh	r3, [r7, #18]

	switch (inFrame.funcCode) {
 800e942:	4b75      	ldr	r3, [pc, #468]	@ (800eb18 <MbSlave_ProcessFrame+0x224>)
 800e944:	785b      	ldrb	r3, [r3, #1]
 800e946:	2b10      	cmp	r3, #16
 800e948:	d010      	beq.n	800e96c <MbSlave_ProcessFrame+0x78>
 800e94a:	2b10      	cmp	r3, #16
 800e94c:	dc13      	bgt.n	800e976 <MbSlave_ProcessFrame+0x82>
 800e94e:	2b03      	cmp	r3, #3
 800e950:	d002      	beq.n	800e958 <MbSlave_ProcessFrame+0x64>
 800e952:	2b04      	cmp	r3, #4
 800e954:	d005      	beq.n	800e962 <MbSlave_ProcessFrame+0x6e>
 800e956:	e00e      	b.n	800e976 <MbSlave_ProcessFrame+0x82>
	case MB_READ_HOLDING_REGS:
		offset = MODBUS_OFFSET_HOLDING;
 800e958:	2300      	movs	r3, #0
 800e95a:	833b      	strh	r3, [r7, #24]
		size = MB_HOLD_LAST;
 800e95c:	2365      	movs	r3, #101	@ 0x65
 800e95e:	837b      	strh	r3, [r7, #26]
		break;
 800e960:	e015      	b.n	800e98e <MbSlave_ProcessFrame+0x9a>
	case MB_READ_INPUT_REGS:
		offset = MODBUS_OFFSET_INPUT;
 800e962:	2300      	movs	r3, #0
 800e964:	833b      	strh	r3, [r7, #24]
		size = MB_INPUT_LAST;
 800e966:	2318      	movs	r3, #24
 800e968:	837b      	strh	r3, [r7, #26]
		break;
 800e96a:	e010      	b.n	800e98e <MbSlave_ProcessFrame+0x9a>
	case MB_WRITE_MULTIPLE_REGS:
		offset = MODBUS_OFFSET_HOLDING;
 800e96c:	2300      	movs	r3, #0
 800e96e:	833b      	strh	r3, [r7, #24]
		size = MB_HOLD_LAST;
 800e970:	2365      	movs	r3, #101	@ 0x65
 800e972:	837b      	strh	r3, [r7, #26]
		break;
 800e974:	e00b      	b.n	800e98e <MbSlave_ProcessFrame+0x9a>
	default:
		/* prepare exception */
		size = 0;
 800e976:	2300      	movs	r3, #0
 800e978:	837b      	strh	r3, [r7, #26]
		outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 800e97a:	4b67      	ldr	r3, [pc, #412]	@ (800eb18 <MbSlave_ProcessFrame+0x224>)
 800e97c:	785b      	ldrb	r3, [r3, #1]
 800e97e:	3b80      	subs	r3, #128	@ 0x80
 800e980:	b2da      	uxtb	r2, r3
 800e982:	4b66      	ldr	r3, [pc, #408]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800e984:	705a      	strb	r2, [r3, #1]
		outFrame.data[0] = MODBUS_EXCEPT_INVALID_COMMAND; /* invalid function code */
 800e986:	4b65      	ldr	r3, [pc, #404]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800e988:	2201      	movs	r2, #1
 800e98a:	709a      	strb	r2, [r3, #2]
		break;
 800e98c:	bf00      	nop
	}

	/* some value checking */
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK
 800e98e:	4b63      	ldr	r3, [pc, #396]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800e990:	785b      	ldrb	r3, [r3, #1]
 800e992:	b25b      	sxtb	r3, r3
 800e994:	2b00      	cmp	r3, #0
 800e996:	db0e      	blt.n	800e9b6 <MbSlave_ProcessFrame+0xc2>
			&& (count < 1 || count > 0x7b)) {
 800e998:	8a7b      	ldrh	r3, [r7, #18]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d002      	beq.n	800e9a4 <MbSlave_ProcessFrame+0xb0>
 800e99e:	8a7b      	ldrh	r3, [r7, #18]
 800e9a0:	2b7b      	cmp	r3, #123	@ 0x7b
 800e9a2:	d908      	bls.n	800e9b6 <MbSlave_ProcessFrame+0xc2>
		outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 800e9a4:	4b5c      	ldr	r3, [pc, #368]	@ (800eb18 <MbSlave_ProcessFrame+0x224>)
 800e9a6:	785b      	ldrb	r3, [r3, #1]
 800e9a8:	3b80      	subs	r3, #128	@ 0x80
 800e9aa:	b2da      	uxtb	r2, r3
 800e9ac:	4b5b      	ldr	r3, [pc, #364]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800e9ae:	705a      	strb	r2, [r3, #1]
		outFrame.data[0] = MODBUS_EXCEPT_INVALID_SIZE; /* invalid size/value */
 800e9b0:	4b5a      	ldr	r3, [pc, #360]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800e9b2:	2203      	movs	r2, #3
 800e9b4:	709a      	strb	r2, [r3, #2]
	}

	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK
 800e9b6:	4b59      	ldr	r3, [pc, #356]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800e9b8:	785b      	ldrb	r3, [r3, #1]
 800e9ba:	b25b      	sxtb	r3, r3
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	db26      	blt.n	800ea0e <MbSlave_ProcessFrame+0x11a>
			&& (addr > (offset + size) || (addr) < offset
 800e9c0:	8aba      	ldrh	r2, [r7, #20]
 800e9c2:	8b39      	ldrh	r1, [r7, #24]
 800e9c4:	8b7b      	ldrh	r3, [r7, #26]
 800e9c6:	440b      	add	r3, r1
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	dc0c      	bgt.n	800e9e6 <MbSlave_ProcessFrame+0xf2>
 800e9cc:	8aba      	ldrh	r2, [r7, #20]
 800e9ce:	8b3b      	ldrh	r3, [r7, #24]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d308      	bcc.n	800e9e6 <MbSlave_ProcessFrame+0xf2>
					|| (addr + count) > (offset + size + 1))) {
 800e9d4:	8aba      	ldrh	r2, [r7, #20]
 800e9d6:	8a7b      	ldrh	r3, [r7, #18]
 800e9d8:	441a      	add	r2, r3
 800e9da:	8b39      	ldrh	r1, [r7, #24]
 800e9dc:	8b7b      	ldrh	r3, [r7, #26]
 800e9de:	440b      	add	r3, r1
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	429a      	cmp	r2, r3
 800e9e4:	dd13      	ble.n	800ea0e <MbSlave_ProcessFrame+0x11a>
#ifdef MODBUS_UPGRADE
		if (addr < MB_UPGR_BASE_ADDRESS
 800e9e6:	8abb      	ldrh	r3, [r7, #20]
 800e9e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e9ec:	d306      	bcc.n	800e9fc <MbSlave_ProcessFrame+0x108>
				|| addr + count > MB_UPGR_END_ADDRESS + 1)
 800e9ee:	8aba      	ldrh	r2, [r7, #20]
 800e9f0:	8a7b      	ldrh	r3, [r7, #18]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	f240 4212 	movw	r2, #1042	@ 0x412
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	dd08      	ble.n	800ea0e <MbSlave_ProcessFrame+0x11a>
#endif
						{
			outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 800e9fc:	4b46      	ldr	r3, [pc, #280]	@ (800eb18 <MbSlave_ProcessFrame+0x224>)
 800e9fe:	785b      	ldrb	r3, [r3, #1]
 800ea00:	3b80      	subs	r3, #128	@ 0x80
 800ea02:	b2da      	uxtb	r2, r3
 800ea04:	4b45      	ldr	r3, [pc, #276]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800ea06:	705a      	strb	r2, [r3, #1]
			outFrame.data[0] = MODBUS_EXCEPT_INVALID_ADDRESS; /* invalid address */
 800ea08:	4b44      	ldr	r3, [pc, #272]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800ea0a:	2202      	movs	r2, #2
 800ea0c:	709a      	strb	r2, [r3, #2]
		}
	}

	/* it looks ok so far */
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK) {
 800ea0e:	4b43      	ldr	r3, [pc, #268]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800ea10:	785b      	ldrb	r3, [r3, #1]
 800ea12:	b25b      	sxtb	r3, r3
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	f2c0 80c5 	blt.w	800eba4 <MbSlave_ProcessFrame+0x2b0>
		/* Subtract offset from address */
		addr -= offset;
 800ea1a:	8aba      	ldrh	r2, [r7, #20]
 800ea1c:	8b3b      	ldrh	r3, [r7, #24]
 800ea1e:	1ad3      	subs	r3, r2, r3
 800ea20:	82bb      	strh	r3, [r7, #20]

		/* do the register stuff */
		switch (inFrame.funcCode) {
 800ea22:	4b3d      	ldr	r3, [pc, #244]	@ (800eb18 <MbSlave_ProcessFrame+0x224>)
 800ea24:	785b      	ldrb	r3, [r3, #1]
 800ea26:	2b10      	cmp	r3, #16
 800ea28:	d064      	beq.n	800eaf4 <MbSlave_ProcessFrame+0x200>
 800ea2a:	2b10      	cmp	r3, #16
 800ea2c:	f300 80ba 	bgt.w	800eba4 <MbSlave_ProcessFrame+0x2b0>
 800ea30:	2b03      	cmp	r3, #3
 800ea32:	d002      	beq.n	800ea3a <MbSlave_ProcessFrame+0x146>
 800ea34:	2b04      	cmp	r3, #4
 800ea36:	d034      	beq.n	800eaa2 <MbSlave_ProcessFrame+0x1ae>
 800ea38:	e0b4      	b.n	800eba4 <MbSlave_ProcessFrame+0x2b0>
		case MB_READ_HOLDING_REGS:
			outFrame.data[0] = count * 2;
 800ea3a:	8a7b      	ldrh	r3, [r7, #18]
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	005b      	lsls	r3, r3, #1
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	4b36      	ldr	r3, [pc, #216]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800ea44:	709a      	strb	r2, [r3, #2]
			outFrame.size = outFrame.data[0] + 1;
 800ea46:	4b35      	ldr	r3, [pc, #212]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800ea48:	789b      	ldrb	r3, [r3, #2]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	4b33      	ldr	r3, [pc, #204]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800ea50:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
#ifdef MODBUS_UPGRADE
			if (addr >= MB_UPGR_BASE_ADDRESS) {
 800ea54:	8abb      	ldrh	r3, [r7, #20]
 800ea56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ea5a:	d306      	bcc.n	800ea6a <MbSlave_ProcessFrame+0x176>
				MbUpgr_ReadRegisters(addr, count, outFrame.data + 1);
 800ea5c:	4a30      	ldr	r2, [pc, #192]	@ (800eb20 <MbSlave_ProcessFrame+0x22c>)
 800ea5e:	8a79      	ldrh	r1, [r7, #18]
 800ea60:	8abb      	ldrh	r3, [r7, #20]
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff fbd0 	bl	800e208 <MbUpgr_ReadRegisters>
				for (i = 0; i < count; i++) {
					MbRtu_ReadHoldingRegCallback(addr + i, &val);
					memcpy((outFrame.data + i * 2 + 1), &val, 2);
				}
			}
			break;
 800ea68:	e09c      	b.n	800eba4 <MbSlave_ProcessFrame+0x2b0>
				for (i = 0; i < count; i++) {
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	61fb      	str	r3, [r7, #28]
 800ea6e:	e013      	b.n	800ea98 <MbSlave_ProcessFrame+0x1a4>
					MbRtu_ReadHoldingRegCallback(addr + i, &val);
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	b29a      	uxth	r2, r3
 800ea74:	8abb      	ldrh	r3, [r7, #20]
 800ea76:	4413      	add	r3, r2
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	1dba      	adds	r2, r7, #6
 800ea7c:	4611      	mov	r1, r2
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7ff f9be 	bl	800de00 <MbRtu_ReadHoldingRegCallback>
					memcpy((outFrame.data + i * 2 + 1), &val, 2);
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	005b      	lsls	r3, r3, #1
 800ea88:	3301      	adds	r3, #1
 800ea8a:	4a26      	ldr	r2, [pc, #152]	@ (800eb24 <MbSlave_ProcessFrame+0x230>)
 800ea8c:	4413      	add	r3, r2
 800ea8e:	88fa      	ldrh	r2, [r7, #6]
 800ea90:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < count; i++) {
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	3301      	adds	r3, #1
 800ea96:	61fb      	str	r3, [r7, #28]
 800ea98:	8a7b      	ldrh	r3, [r7, #18]
 800ea9a:	69fa      	ldr	r2, [r7, #28]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	d3e7      	bcc.n	800ea70 <MbSlave_ProcessFrame+0x17c>
			break;
 800eaa0:	e080      	b.n	800eba4 <MbSlave_ProcessFrame+0x2b0>

		case MB_READ_INPUT_REGS:
			outFrame.data[0] = count * 2;
 800eaa2:	8a7b      	ldrh	r3, [r7, #18]
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	005b      	lsls	r3, r3, #1
 800eaa8:	b2da      	uxtb	r2, r3
 800eaaa:	4b1c      	ldr	r3, [pc, #112]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800eaac:	709a      	strb	r2, [r3, #2]
			outFrame.size = outFrame.data[0] + 1;
 800eaae:	4b1b      	ldr	r3, [pc, #108]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800eab0:	789b      	ldrb	r3, [r3, #2]
 800eab2:	3301      	adds	r3, #1
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	4b19      	ldr	r3, [pc, #100]	@ (800eb1c <MbSlave_ProcessFrame+0x228>)
 800eab8:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			for (i = 0; i < count; i++) {
 800eabc:	2300      	movs	r3, #0
 800eabe:	61fb      	str	r3, [r7, #28]
 800eac0:	e013      	b.n	800eaea <MbSlave_ProcessFrame+0x1f6>
				MbRtu_ReadInputRegCallback(addr + i, &val);
 800eac2:	69fb      	ldr	r3, [r7, #28]
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	8abb      	ldrh	r3, [r7, #20]
 800eac8:	4413      	add	r3, r2
 800eaca:	b29b      	uxth	r3, r3
 800eacc:	1dba      	adds	r2, r7, #6
 800eace:	4611      	mov	r1, r2
 800ead0:	4618      	mov	r0, r3
 800ead2:	f7ff f8a1 	bl	800dc18 <MbRtu_ReadInputRegCallback>
				memcpy((outFrame.data + i * 2 + 1), &val, 2);
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	005b      	lsls	r3, r3, #1
 800eada:	3301      	adds	r3, #1
 800eadc:	4a11      	ldr	r2, [pc, #68]	@ (800eb24 <MbSlave_ProcessFrame+0x230>)
 800eade:	4413      	add	r3, r2
 800eae0:	88fa      	ldrh	r2, [r7, #6]
 800eae2:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < count; i++) {
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	3301      	adds	r3, #1
 800eae8:	61fb      	str	r3, [r7, #28]
 800eaea:	8a7b      	ldrh	r3, [r7, #18]
 800eaec:	69fa      	ldr	r2, [r7, #28]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d3e7      	bcc.n	800eac2 <MbSlave_ProcessFrame+0x1ce>
			}

			break;
 800eaf2:	e057      	b.n	800eba4 <MbSlave_ProcessFrame+0x2b0>

		case MB_WRITE_MULTIPLE_REGS:
			size = addr + count;
 800eaf4:	8aba      	ldrh	r2, [r7, #20]
 800eaf6:	8a7b      	ldrh	r3, [r7, #18]
 800eaf8:	4413      	add	r3, r2
 800eafa:	837b      	strh	r3, [r7, #26]
#ifdef MODBUS_UPGRADE
			if (addr >= MB_UPGR_BASE_ADDRESS) {
 800eafc:	8abb      	ldrh	r3, [r7, #20]
 800eafe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800eb02:	d306      	bcc.n	800eb12 <MbSlave_ProcessFrame+0x21e>
				MbUpgr_WriteRegisters(addr, count, inFrame.data + 5);
 800eb04:	4a08      	ldr	r2, [pc, #32]	@ (800eb28 <MbSlave_ProcessFrame+0x234>)
 800eb06:	8a79      	ldrh	r1, [r7, #18]
 800eb08:	8abb      	ldrh	r3, [r7, #20]
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f7ff fb36 	bl	800e17c <MbUpgr_WriteRegisters>
 800eb10:	e02b      	b.n	800eb6a <MbSlave_ProcessFrame+0x276>
			} else
#endif
			{
				for (i = 0; i < count; i++) {
 800eb12:	2300      	movs	r3, #0
 800eb14:	61fb      	str	r3, [r7, #28]
 800eb16:	e024      	b.n	800eb62 <MbSlave_ProcessFrame+0x26e>
 800eb18:	200006d4 	.word	0x200006d4
 800eb1c:	200007d8 	.word	0x200007d8
 800eb20:	200007db 	.word	0x200007db
 800eb24:	200007da 	.word	0x200007da
 800eb28:	200006db 	.word	0x200006db
					memcpy(&val,
							(inFrame.data + i * 2 + 1
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	005b      	lsls	r3, r3, #1
									+ MODBUS_MIN_PAYLOAD_LENGTH), 2);
 800eb30:	3305      	adds	r3, #5
					memcpy(&val,
 800eb32:	4a1f      	ldr	r2, [pc, #124]	@ (800ebb0 <MbSlave_ProcessFrame+0x2bc>)
 800eb34:	4413      	add	r3, r2
 800eb36:	881b      	ldrh	r3, [r3, #0]
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	80fb      	strh	r3, [r7, #6]
					MbRtu_WriteHoldingRegCallback(addr + i, __REV16(val));
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	8abb      	ldrh	r3, [r7, #20]
 800eb42:	4413      	add	r3, r2
 800eb44:	b29a      	uxth	r2, r3
 800eb46:	88fb      	ldrh	r3, [r7, #6]
 800eb48:	60fb      	str	r3, [r7, #12]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	ba5b      	rev16	r3, r3
 800eb4e:	60bb      	str	r3, [r7, #8]
  return result;
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	4619      	mov	r1, r3
 800eb56:	4610      	mov	r0, r2
 800eb58:	f7ff f9e0 	bl	800df1c <MbRtu_WriteHoldingRegCallback>
				for (i = 0; i < count; i++) {
 800eb5c:	69fb      	ldr	r3, [r7, #28]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	61fb      	str	r3, [r7, #28]
 800eb62:	8a7b      	ldrh	r3, [r7, #18]
 800eb64:	69fa      	ldr	r2, [r7, #28]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d3e0      	bcc.n	800eb2c <MbSlave_ProcessFrame+0x238>
				}
			}

			addr += offset;
 800eb6a:	8aba      	ldrh	r2, [r7, #20]
 800eb6c:	8b3b      	ldrh	r3, [r7, #24]
 800eb6e:	4413      	add	r3, r2
 800eb70:	82bb      	strh	r3, [r7, #20]
			outFrame.data[0] = (addr >> 8) & 0xff;
 800eb72:	8abb      	ldrh	r3, [r7, #20]
 800eb74:	0a1b      	lsrs	r3, r3, #8
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	b2da      	uxtb	r2, r3
 800eb7a:	4b0e      	ldr	r3, [pc, #56]	@ (800ebb4 <MbSlave_ProcessFrame+0x2c0>)
 800eb7c:	709a      	strb	r2, [r3, #2]
			outFrame.data[1] = addr & 0xff;
 800eb7e:	8abb      	ldrh	r3, [r7, #20]
 800eb80:	b2da      	uxtb	r2, r3
 800eb82:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb4 <MbSlave_ProcessFrame+0x2c0>)
 800eb84:	70da      	strb	r2, [r3, #3]
			outFrame.data[2] = (count >> 8) & 0xff;
 800eb86:	8a7b      	ldrh	r3, [r7, #18]
 800eb88:	0a1b      	lsrs	r3, r3, #8
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	b2da      	uxtb	r2, r3
 800eb8e:	4b09      	ldr	r3, [pc, #36]	@ (800ebb4 <MbSlave_ProcessFrame+0x2c0>)
 800eb90:	711a      	strb	r2, [r3, #4]
			outFrame.data[3] = count & 0xff;
 800eb92:	8a7b      	ldrh	r3, [r7, #18]
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	4b07      	ldr	r3, [pc, #28]	@ (800ebb4 <MbSlave_ProcessFrame+0x2c0>)
 800eb98:	715a      	strb	r2, [r3, #5]
			outFrame.size = 4;
 800eb9a:	4b06      	ldr	r3, [pc, #24]	@ (800ebb4 <MbSlave_ProcessFrame+0x2c0>)
 800eb9c:	2204      	movs	r2, #4
 800eb9e:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			break;
 800eba2:	bf00      	nop
		}
	}

	return ret;
 800eba4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3720      	adds	r7, #32
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}
 800ebb0:	200006d6 	.word	0x200006d6
 800ebb4:	200007d8 	.word	0x200007d8

0800ebb8 <MbSlave_CRC16>:
 * Computation of CRC16 using pre-computed tables.
 *
 * @param frame - data frame
 * @return Status - standard status code (0 - OK)
 */
static Status_t MbSlave_CRC16(MbSlave_Frame_t *frame) {
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
	uint8_t index;
	frame->crc[0] = 0xFF;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	22ff      	movs	r2, #255	@ 0xff
 800ebc4:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	frame->crc[1] = 0xFF;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	22ff      	movs	r2, #255	@ 0xff
 800ebcc:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	uint16_t i;

	/* calculate the CRC */
	index = frame->crc[0] ^ frame->slaveAddr;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	4053      	eors	r3, r2
 800ebdc:	737b      	strb	r3, [r7, #13]
	frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 800ebe4:	7b7b      	ldrb	r3, [r7, #13]
 800ebe6:	4929      	ldr	r1, [pc, #164]	@ (800ec8c <MbSlave_CRC16+0xd4>)
 800ebe8:	5ccb      	ldrb	r3, [r1, r3]
 800ebea:	4053      	eors	r3, r2
 800ebec:	b2da      	uxtb	r2, r3
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	frame->crc[1] = tableCrcLo[index];
 800ebf4:	7b7b      	ldrb	r3, [r7, #13]
 800ebf6:	4a26      	ldr	r2, [pc, #152]	@ (800ec90 <MbSlave_CRC16+0xd8>)
 800ebf8:	5cd2      	ldrb	r2, [r2, r3]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	index = frame->crc[0] ^ frame->funcCode;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	785b      	ldrb	r3, [r3, #1]
 800ec0a:	4053      	eors	r3, r2
 800ec0c:	737b      	strb	r3, [r7, #13]
	frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 800ec14:	7b7b      	ldrb	r3, [r7, #13]
 800ec16:	491d      	ldr	r1, [pc, #116]	@ (800ec8c <MbSlave_CRC16+0xd4>)
 800ec18:	5ccb      	ldrb	r3, [r1, r3]
 800ec1a:	4053      	eors	r3, r2
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	frame->crc[1] = tableCrcLo[index];
 800ec24:	7b7b      	ldrb	r3, [r7, #13]
 800ec26:	4a1a      	ldr	r2, [pc, #104]	@ (800ec90 <MbSlave_CRC16+0xd8>)
 800ec28:	5cd2      	ldrb	r2, [r2, r3]
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

	for (i = 0; i < frame->size; i++) {
 800ec30:	2300      	movs	r3, #0
 800ec32:	81fb      	strh	r3, [r7, #14]
 800ec34:	e01c      	b.n	800ec70 <MbSlave_CRC16+0xb8>
		index = frame->crc[0] ^ frame->data[i];
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 800ec3c:	89fb      	ldrh	r3, [r7, #14]
 800ec3e:	6879      	ldr	r1, [r7, #4]
 800ec40:	440b      	add	r3, r1
 800ec42:	789b      	ldrb	r3, [r3, #2]
 800ec44:	4053      	eors	r3, r2
 800ec46:	737b      	strb	r3, [r7, #13]
		frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 800ec4e:	7b7b      	ldrb	r3, [r7, #13]
 800ec50:	490e      	ldr	r1, [pc, #56]	@ (800ec8c <MbSlave_CRC16+0xd4>)
 800ec52:	5ccb      	ldrb	r3, [r1, r3]
 800ec54:	4053      	eors	r3, r2
 800ec56:	b2da      	uxtb	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		frame->crc[1] = tableCrcLo[index];
 800ec5e:	7b7b      	ldrb	r3, [r7, #13]
 800ec60:	4a0b      	ldr	r2, [pc, #44]	@ (800ec90 <MbSlave_CRC16+0xd8>)
 800ec62:	5cd2      	ldrb	r2, [r2, r3]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	for (i = 0; i < frame->size; i++) {
 800ec6a:	89fb      	ldrh	r3, [r7, #14]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	81fb      	strh	r3, [r7, #14]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800ec76:	89fa      	ldrh	r2, [r7, #14]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d3dc      	bcc.n	800ec36 <MbSlave_CRC16+0x7e>
	}

	return STATUS_OK;
 800ec7c:	2300      	movs	r3, #0
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3714      	adds	r7, #20
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr
 800ec8a:	bf00      	nop
 800ec8c:	0800c1c4 	.word	0x0800c1c4
 800ec90:	080151d4 	.word	0x080151d4

0800ec94 <MbSlave_Rs485DirTransmit>:

static void MbSlave_Rs485DirTransmit(void) {
 800ec94:	b580      	push	{r7, lr}
 800ec96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MODBUS_UART_DE_PORT, MODBUS_UART_DE_PIN, GPIO_PIN_SET);
 800ec98:	2201      	movs	r2, #1
 800ec9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ec9e:	4802      	ldr	r0, [pc, #8]	@ (800eca8 <MbSlave_Rs485DirTransmit+0x14>)
 800eca0:	f002 fdc8 	bl	8011834 <HAL_GPIO_WritePin>
}
 800eca4:	bf00      	nop
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	40020000 	.word	0x40020000

0800ecac <MbSlave_Rs485DirReceive>:

static void MbSlave_Rs485DirReceive(void) {
 800ecac:	b580      	push	{r7, lr}
 800ecae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MODBUS_UART_DE_PORT, MODBUS_UART_DE_PIN, GPIO_PIN_RESET);
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ecb6:	4802      	ldr	r0, [pc, #8]	@ (800ecc0 <MbSlave_Rs485DirReceive+0x14>)
 800ecb8:	f002 fdbc 	bl	8011834 <HAL_GPIO_WritePin>
}
 800ecbc:	bf00      	nop
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	40020000 	.word	0x40020000

0800ecc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
    Status_t ret = STATUS_OK;
 800ecca:	2300      	movs	r3, #0
 800eccc:	81fb      	strh	r3, [r7, #14]
    uint32_t tick_med = 0;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	60bb      	str	r3, [r7, #8]
    uint32_t tick_slow = 0;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	607b      	str	r3, [r7, #4]
    uint32_t start = 0;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	603b      	str	r3, [r7, #0]

    /* Remap reset vector and enable interrupts */
    System_RemapApplicationVector();
 800ecda:	f7fe ff11 	bl	800db00 <System_RemapApplicationVector>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800ecde:	b662      	cpsie	i
}
 800ece0:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800ece2:	f000 feef 	bl	800fac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800ece6:	f000 f8c5 	bl	800ee74 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
    MX_USART1_UART_Init();
 800ecea:	f000 fabb 	bl	800f264 <MX_USART1_UART_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800ecee:	f000 fb03 	bl	800f2f8 <MX_GPIO_Init>
  MX_DMA_Init();
 800ecf2:	f000 fae1 	bl	800f2b8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800ecf6:	f000 fab5 	bl	800f264 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800ecfa:	f000 f9bf 	bl	800f07c <MX_I2C1_Init>
  MX_SPI2_Init();
 800ecfe:	f000 fa05 	bl	800f10c <MX_SPI2_Init>
  MX_UART5_Init();
 800ed02:	f000 fa85 	bl	800f210 <MX_UART5_Init>
  MX_CRC_Init();
 800ed06:	f000 f9a5 	bl	800f054 <MX_CRC_Init>
  MX_TIM2_Init();
 800ed0a:	f000 fa35 	bl	800f178 <MX_TIM2_Init>
  MX_IWDG_Init();
 800ed0e:	f000 f9e3 	bl	800f0d8 <MX_IWDG_Init>
  MX_ADC1_Init();
 800ed12:	f000 f923 	bl	800ef5c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

    /* Initialize system modules */
    ret |= System_InitWdg();
 800ed16:	f7fe fdd5 	bl	800d8c4 <System_InitWdg>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	89fb      	ldrh	r3, [r7, #14]
 800ed20:	4313      	orrs	r3, r2
 800ed22:	81fb      	strh	r3, [r7, #14]
    ret |= System_ReloadWdg();
 800ed24:	f7fe fdf2 	bl	800d90c <System_ReloadWdg>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	461a      	mov	r2, r3
 800ed2c:	89fb      	ldrh	r3, [r7, #14]
 800ed2e:	4313      	orrs	r3, r2
 800ed30:	81fb      	strh	r3, [r7, #14]
    System_CrcInit();
 800ed32:	f7fe fd99 	bl	800d868 <System_CrcInit>
    ret |= Config_Init();
 800ed36:	f7fe f83c 	bl	800cdb2 <Config_Init>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	89fb      	ldrh	r3, [r7, #14]
 800ed40:	4313      	orrs	r3, r2
 800ed42:	81fb      	strh	r3, [r7, #14]
    ret |= Control_Init();
 800ed44:	f7fe f91c 	bl	800cf80 <Control_Init>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	89fb      	ldrh	r3, [r7, #14]
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	81fb      	strh	r3, [r7, #14]

    /* Initialize flash memory module */
    ret |= FlashApp_Init();
 800ed52:	f7fe f9d7 	bl	800d104 <FlashApp_Init>
 800ed56:	4603      	mov	r3, r0
 800ed58:	461a      	mov	r2, r3
 800ed5a:	89fb      	ldrh	r3, [r7, #14]
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	81fb      	strh	r3, [r7, #14]

    /* Initialize communication modules */
    ret |= MbSlave_Init();
 800ed60:	f7ff faca 	bl	800e2f8 <MbSlave_Init>
 800ed64:	4603      	mov	r3, r0
 800ed66:	461a      	mov	r2, r3
 800ed68:	89fb      	ldrh	r3, [r7, #14]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	81fb      	strh	r3, [r7, #14]

    /* Initialize test modules */
    /* TODO */
    Probe_Init();
 800ed6e:	f005 fc43 	bl	80145f8 <Probe_Init>
    /* Reload watchdog and check for errors in the initialization process */
    ret |= System_ReloadWdg();
 800ed72:	f7fe fdcb 	bl	800d90c <System_ReloadWdg>
 800ed76:	4603      	mov	r3, r0
 800ed78:	461a      	mov	r2, r3
 800ed7a:	89fb      	ldrh	r3, [r7, #14]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	81fb      	strh	r3, [r7, #14]

    //Switch_Init();

    // CHECK_ERROR(ret, ERROR_CODE_init);
    tick_med = HAL_GetTick();
 800ed80:	f000 ff06 	bl	800fb90 <HAL_GetTick>
 800ed84:	60b8      	str	r0, [r7, #8]
    tick_slow = HAL_GetTick();
 800ed86:	f000 ff03 	bl	800fb90 <HAL_GetTick>
 800ed8a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        /* High priority - real-time handles */
        MbSlave_Handle();
 800ed8c:	f7ff fbd4 	bl	800e538 <MbSlave_Handle>
        Probe_Handle();
 800ed90:	f005 fc42 	bl	8014618 <Probe_Handle>

        /* Medium priority - fast handles */
        if (TICK_EXPIRED(tick_med))
 800ed94:	f000 fefc 	bl	800fb90 <HAL_GetTick>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	68bb      	ldr	r3, [r7, #8]
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800eda2:	4293      	cmp	r3, r2
 800eda4:	d218      	bcs.n	800edd8 <main+0x114>
        {
            tick_med += PERIOD_HANDLE_MED_PRIO;
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	3305      	adds	r3, #5
 800edaa:	60bb      	str	r3, [r7, #8]
            start = HAL_GetTick();
 800edac:	f000 fef0 	bl	800fb90 <HAL_GetTick>
 800edb0:	6038      	str	r0, [r7, #0]

            /* Test modules handles */
            /* TODO */

            /* Medium priority time measurement */
            max_med = MAX(max_med, HAL_GetTick() - start);
 800edb2:	f000 feed 	bl	800fb90 <HAL_GetTick>
 800edb6:	4602      	mov	r2, r0
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	1ad2      	subs	r2, r2, r3
 800edbc:	4b2a      	ldr	r3, [pc, #168]	@ (800ee68 <main+0x1a4>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d905      	bls.n	800edd0 <main+0x10c>
 800edc4:	f000 fee4 	bl	800fb90 <HAL_GetTick>
 800edc8:	4602      	mov	r2, r0
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	1ad3      	subs	r3, r2, r3
 800edce:	e001      	b.n	800edd4 <main+0x110>
 800edd0:	4b25      	ldr	r3, [pc, #148]	@ (800ee68 <main+0x1a4>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4a24      	ldr	r2, [pc, #144]	@ (800ee68 <main+0x1a4>)
 800edd6:	6013      	str	r3, [r2, #0]
        }

        /* Low priority - slow handles */
        if (TICK_EXPIRED(tick_slow))
 800edd8:	f000 feda 	bl	800fb90 <HAL_GetTick>
 800eddc:	4602      	mov	r2, r0
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	1ad3      	subs	r3, r2, r3
 800ede2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d2d0      	bcs.n	800ed8c <main+0xc8>
//            if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_valuess, 1) != HAL_OK)
//            {
//                Error_Handler();
//            }

            tick_slow = HAL_GetTick() + PERIOD_HANDLE_LOW_PRIO;
 800edea:	f000 fed1 	bl	800fb90 <HAL_GetTick>
 800edee:	4603      	mov	r3, r0
 800edf0:	3332      	adds	r3, #50	@ 0x32
 800edf2:	607b      	str	r3, [r7, #4]
            start = HAL_GetTick();
 800edf4:	f000 fecc 	bl	800fb90 <HAL_GetTick>
 800edf8:	6038      	str	r0, [r7, #0]

            /* Communication handles */
            ret |= Control_Handle();
 800edfa:	f7fe f8cf 	bl	800cf9c <Control_Handle>
 800edfe:	4603      	mov	r3, r0
 800ee00:	461a      	mov	r2, r3
 800ee02:	89fb      	ldrh	r3, [r7, #14]
 800ee04:	4313      	orrs	r3, r2
 800ee06:	81fb      	strh	r3, [r7, #14]
            ret |= MbSlave_UpdateSlaveAddress();
 800ee08:	f7ff fc2c 	bl	800e664 <MbSlave_UpdateSlaveAddress>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	461a      	mov	r2, r3
 800ee10:	89fb      	ldrh	r3, [r7, #14]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	81fb      	strh	r3, [r7, #14]

            /* Flash memory handle */
            ret |= FlashApp_Handle();
 800ee16:	f7fe f98f 	bl	800d138 <FlashApp_Handle>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	89fb      	ldrh	r3, [r7, #14]
 800ee20:	4313      	orrs	r3, r2
 800ee22:	81fb      	strh	r3, [r7, #14]

            /* Test modules handles */
            /* TODO */

            /* Low-priority time measurement */
            max_low = MAX(max_low, HAL_GetTick() - start);
 800ee24:	f000 feb4 	bl	800fb90 <HAL_GetTick>
 800ee28:	4602      	mov	r2, r0
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	1ad2      	subs	r2, r2, r3
 800ee2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ee6c <main+0x1a8>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d905      	bls.n	800ee42 <main+0x17e>
 800ee36:	f000 feab 	bl	800fb90 <HAL_GetTick>
 800ee3a:	4602      	mov	r2, r0
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	e001      	b.n	800ee46 <main+0x182>
 800ee42:	4b0a      	ldr	r3, [pc, #40]	@ (800ee6c <main+0x1a8>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	4a09      	ldr	r2, [pc, #36]	@ (800ee6c <main+0x1a8>)
 800ee48:	6013      	str	r3, [r2, #0]

            /* Watchdog reload */
            ret |= System_ReloadWdg();
 800ee4a:	f7fe fd5f 	bl	800d90c <System_ReloadWdg>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	461a      	mov	r2, r3
 800ee52:	89fb      	ldrh	r3, [r7, #14]
 800ee54:	4313      	orrs	r3, r2
 800ee56:	81fb      	strh	r3, [r7, #14]
            HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800ee58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ee5c:	4804      	ldr	r0, [pc, #16]	@ (800ee70 <main+0x1ac>)
 800ee5e:	f002 fd02 	bl	8011866 <HAL_GPIO_TogglePin>
            //conf.sys.io_input = Switch_GetAll();
            MbSlave_UpdateSlaveAddress();
 800ee62:	f7ff fbff 	bl	800e664 <MbSlave_UpdateSlaveAddress>
        MbSlave_Handle();
 800ee66:	e791      	b.n	800ed8c <main+0xc8>
 800ee68:	20000b20 	.word	0x20000b20
 800ee6c:	20000b1c 	.word	0x20000b1c
 800ee70:	40020400 	.word	0x40020400

0800ee74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b094      	sub	sp, #80	@ 0x50
 800ee78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800ee7a:	f107 031c 	add.w	r3, r7, #28
 800ee7e:	2234      	movs	r2, #52	@ 0x34
 800ee80:	2100      	movs	r1, #0
 800ee82:	4618      	mov	r0, r3
 800ee84:	f005 ff82 	bl	8014d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800ee88:	f107 0308 	add.w	r3, r7, #8
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	601a      	str	r2, [r3, #0]
 800ee90:	605a      	str	r2, [r3, #4]
 800ee92:	609a      	str	r2, [r3, #8]
 800ee94:	60da      	str	r2, [r3, #12]
 800ee96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800ee98:	2300      	movs	r3, #0
 800ee9a:	607b      	str	r3, [r7, #4]
 800ee9c:	4b2d      	ldr	r3, [pc, #180]	@ (800ef54 <SystemClock_Config+0xe0>)
 800ee9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eea0:	4a2c      	ldr	r2, [pc, #176]	@ (800ef54 <SystemClock_Config+0xe0>)
 800eea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eea6:	6413      	str	r3, [r2, #64]	@ 0x40
 800eea8:	4b2a      	ldr	r3, [pc, #168]	@ (800ef54 <SystemClock_Config+0xe0>)
 800eeaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eeac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800eeb0:	607b      	str	r3, [r7, #4]
 800eeb2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	603b      	str	r3, [r7, #0]
 800eeb8:	4b27      	ldr	r3, [pc, #156]	@ (800ef58 <SystemClock_Config+0xe4>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a26      	ldr	r2, [pc, #152]	@ (800ef58 <SystemClock_Config+0xe4>)
 800eebe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800eec2:	6013      	str	r3, [r2, #0]
 800eec4:	4b24      	ldr	r3, [pc, #144]	@ (800ef58 <SystemClock_Config+0xe4>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800eecc:	603b      	str	r3, [r7, #0]
 800eece:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800eed0:	230a      	movs	r3, #10
 800eed2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800eed4:	2301      	movs	r3, #1
 800eed6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800eed8:	2310      	movs	r3, #16
 800eeda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800eedc:	2301      	movs	r3, #1
 800eede:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800eee0:	2302      	movs	r3, #2
 800eee2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800eee4:	2300      	movs	r3, #0
 800eee6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800eee8:	2308      	movs	r3, #8
 800eeea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800eeec:	23b4      	movs	r3, #180	@ 0xb4
 800eeee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800eef0:	2302      	movs	r3, #2
 800eef2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800eef4:	2302      	movs	r3, #2
 800eef6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800eef8:	2302      	movs	r3, #2
 800eefa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800eefc:	f107 031c 	add.w	r3, r7, #28
 800ef00:	4618      	mov	r0, r3
 800ef02:	f003 f99b 	bl	801223c <HAL_RCC_OscConfig>
 800ef06:	4603      	mov	r3, r0
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d001      	beq.n	800ef10 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800ef0c:	f000 facf 	bl	800f4ae <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800ef10:	f002 fe80 	bl	8011c14 <HAL_PWREx_EnableOverDrive>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800ef1a:	f000 fac8 	bl	800f4ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ef1e:	230f      	movs	r3, #15
 800ef20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800ef22:	2302      	movs	r3, #2
 800ef24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ef26:	2300      	movs	r3, #0
 800ef28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800ef2a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800ef2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800ef30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ef34:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800ef36:	f107 0308 	add.w	r3, r7, #8
 800ef3a:	2105      	movs	r1, #5
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f002 feb9 	bl	8011cb4 <HAL_RCC_ClockConfig>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d001      	beq.n	800ef4c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800ef48:	f000 fab1 	bl	800f4ae <Error_Handler>
  }
}
 800ef4c:	bf00      	nop
 800ef4e:	3750      	adds	r7, #80	@ 0x50
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	40023800 	.word	0x40023800
 800ef58:	40007000 	.word	0x40007000

0800ef5c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b084      	sub	sp, #16
 800ef60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800ef62:	463b      	mov	r3, r7
 800ef64:	2200      	movs	r2, #0
 800ef66:	601a      	str	r2, [r3, #0]
 800ef68:	605a      	str	r2, [r3, #4]
 800ef6a:	609a      	str	r2, [r3, #8]
 800ef6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800ef6e:	4b36      	ldr	r3, [pc, #216]	@ (800f048 <MX_ADC1_Init+0xec>)
 800ef70:	4a36      	ldr	r2, [pc, #216]	@ (800f04c <MX_ADC1_Init+0xf0>)
 800ef72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800ef74:	4b34      	ldr	r3, [pc, #208]	@ (800f048 <MX_ADC1_Init+0xec>)
 800ef76:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ef7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800ef7c:	4b32      	ldr	r3, [pc, #200]	@ (800f048 <MX_ADC1_Init+0xec>)
 800ef7e:	2200      	movs	r2, #0
 800ef80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800ef82:	4b31      	ldr	r3, [pc, #196]	@ (800f048 <MX_ADC1_Init+0xec>)
 800ef84:	2201      	movs	r2, #1
 800ef86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800ef88:	4b2f      	ldr	r3, [pc, #188]	@ (800f048 <MX_ADC1_Init+0xec>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800ef8e:	4b2e      	ldr	r3, [pc, #184]	@ (800f048 <MX_ADC1_Init+0xec>)
 800ef90:	2200      	movs	r2, #0
 800ef92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800ef96:	4b2c      	ldr	r3, [pc, #176]	@ (800f048 <MX_ADC1_Init+0xec>)
 800ef98:	2200      	movs	r2, #0
 800ef9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800ef9c:	4b2a      	ldr	r3, [pc, #168]	@ (800f048 <MX_ADC1_Init+0xec>)
 800ef9e:	4a2c      	ldr	r2, [pc, #176]	@ (800f050 <MX_ADC1_Init+0xf4>)
 800efa0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800efa2:	4b29      	ldr	r3, [pc, #164]	@ (800f048 <MX_ADC1_Init+0xec>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800efa8:	4b27      	ldr	r3, [pc, #156]	@ (800f048 <MX_ADC1_Init+0xec>)
 800efaa:	2204      	movs	r2, #4
 800efac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800efae:	4b26      	ldr	r3, [pc, #152]	@ (800f048 <MX_ADC1_Init+0xec>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800efb6:	4b24      	ldr	r3, [pc, #144]	@ (800f048 <MX_ADC1_Init+0xec>)
 800efb8:	2201      	movs	r2, #1
 800efba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800efbc:	4822      	ldr	r0, [pc, #136]	@ (800f048 <MX_ADC1_Init+0xec>)
 800efbe:	f000 fe17 	bl	800fbf0 <HAL_ADC_Init>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d001      	beq.n	800efcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800efc8:	f000 fa71 	bl	800f4ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800efcc:	2305      	movs	r3, #5
 800efce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800efd0:	2301      	movs	r3, #1
 800efd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800efd4:	2300      	movs	r3, #0
 800efd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800efd8:	463b      	mov	r3, r7
 800efda:	4619      	mov	r1, r3
 800efdc:	481a      	ldr	r0, [pc, #104]	@ (800f048 <MX_ADC1_Init+0xec>)
 800efde:	f000 ff73 	bl	800fec8 <HAL_ADC_ConfigChannel>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d001      	beq.n	800efec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800efe8:	f000 fa61 	bl	800f4ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800efec:	2306      	movs	r3, #6
 800efee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800eff0:	2302      	movs	r3, #2
 800eff2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800eff4:	463b      	mov	r3, r7
 800eff6:	4619      	mov	r1, r3
 800eff8:	4813      	ldr	r0, [pc, #76]	@ (800f048 <MX_ADC1_Init+0xec>)
 800effa:	f000 ff65 	bl	800fec8 <HAL_ADC_ConfigChannel>
 800effe:	4603      	mov	r3, r0
 800f000:	2b00      	cmp	r3, #0
 800f002:	d001      	beq.n	800f008 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800f004:	f000 fa53 	bl	800f4ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800f008:	2307      	movs	r3, #7
 800f00a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800f00c:	2303      	movs	r3, #3
 800f00e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f010:	463b      	mov	r3, r7
 800f012:	4619      	mov	r1, r3
 800f014:	480c      	ldr	r0, [pc, #48]	@ (800f048 <MX_ADC1_Init+0xec>)
 800f016:	f000 ff57 	bl	800fec8 <HAL_ADC_ConfigChannel>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d001      	beq.n	800f024 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800f020:	f000 fa45 	bl	800f4ae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800f024:	2308      	movs	r3, #8
 800f026:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800f028:	2304      	movs	r3, #4
 800f02a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f02c:	463b      	mov	r3, r7
 800f02e:	4619      	mov	r1, r3
 800f030:	4805      	ldr	r0, [pc, #20]	@ (800f048 <MX_ADC1_Init+0xec>)
 800f032:	f000 ff49 	bl	800fec8 <HAL_ADC_ConfigChannel>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d001      	beq.n	800f040 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800f03c:	f000 fa37 	bl	800f4ae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800f040:	bf00      	nop
 800f042:	3710      	adds	r7, #16
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	200008dc 	.word	0x200008dc
 800f04c:	40012000 	.word	0x40012000
 800f050:	0f000001 	.word	0x0f000001

0800f054 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800f058:	4b06      	ldr	r3, [pc, #24]	@ (800f074 <MX_CRC_Init+0x20>)
 800f05a:	4a07      	ldr	r2, [pc, #28]	@ (800f078 <MX_CRC_Init+0x24>)
 800f05c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800f05e:	4805      	ldr	r0, [pc, #20]	@ (800f074 <MX_CRC_Init+0x20>)
 800f060:	f001 fb51 	bl	8010706 <HAL_CRC_Init>
 800f064:	4603      	mov	r3, r0
 800f066:	2b00      	cmp	r3, #0
 800f068:	d001      	beq.n	800f06e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800f06a:	f000 fa20 	bl	800f4ae <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800f06e:	bf00      	nop
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	20000984 	.word	0x20000984
 800f078:	40023000 	.word	0x40023000

0800f07c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800f080:	4b12      	ldr	r3, [pc, #72]	@ (800f0cc <MX_I2C1_Init+0x50>)
 800f082:	4a13      	ldr	r2, [pc, #76]	@ (800f0d0 <MX_I2C1_Init+0x54>)
 800f084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800f086:	4b11      	ldr	r3, [pc, #68]	@ (800f0cc <MX_I2C1_Init+0x50>)
 800f088:	4a12      	ldr	r2, [pc, #72]	@ (800f0d4 <MX_I2C1_Init+0x58>)
 800f08a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800f08c:	4b0f      	ldr	r3, [pc, #60]	@ (800f0cc <MX_I2C1_Init+0x50>)
 800f08e:	2200      	movs	r2, #0
 800f090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800f092:	4b0e      	ldr	r3, [pc, #56]	@ (800f0cc <MX_I2C1_Init+0x50>)
 800f094:	2200      	movs	r2, #0
 800f096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f098:	4b0c      	ldr	r3, [pc, #48]	@ (800f0cc <MX_I2C1_Init+0x50>)
 800f09a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800f09e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f0a0:	4b0a      	ldr	r3, [pc, #40]	@ (800f0cc <MX_I2C1_Init+0x50>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800f0a6:	4b09      	ldr	r3, [pc, #36]	@ (800f0cc <MX_I2C1_Init+0x50>)
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f0ac:	4b07      	ldr	r3, [pc, #28]	@ (800f0cc <MX_I2C1_Init+0x50>)
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f0b2:	4b06      	ldr	r3, [pc, #24]	@ (800f0cc <MX_I2C1_Init+0x50>)
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f0b8:	4804      	ldr	r0, [pc, #16]	@ (800f0cc <MX_I2C1_Init+0x50>)
 800f0ba:	f002 fc13 	bl	80118e4 <HAL_I2C_Init>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d001      	beq.n	800f0c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800f0c4:	f000 f9f3 	bl	800f4ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800f0c8:	bf00      	nop
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	2000098c 	.word	0x2000098c
 800f0d0:	40005400 	.word	0x40005400
 800f0d4:	000186a0 	.word	0x000186a0

0800f0d8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800f0dc:	4b09      	ldr	r3, [pc, #36]	@ (800f104 <MX_IWDG_Init+0x2c>)
 800f0de:	4a0a      	ldr	r2, [pc, #40]	@ (800f108 <MX_IWDG_Init+0x30>)
 800f0e0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800f0e2:	4b08      	ldr	r3, [pc, #32]	@ (800f104 <MX_IWDG_Init+0x2c>)
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 800f0e8:	4b06      	ldr	r3, [pc, #24]	@ (800f104 <MX_IWDG_Init+0x2c>)
 800f0ea:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800f0ee:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800f0f0:	4804      	ldr	r0, [pc, #16]	@ (800f104 <MX_IWDG_Init+0x2c>)
 800f0f2:	f002 fd3b 	bl	8011b6c <HAL_IWDG_Init>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800f0fc:	f000 f9d7 	bl	800f4ae <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800f100:	bf00      	nop
 800f102:	bd80      	pop	{r7, pc}
 800f104:	200009e0 	.word	0x200009e0
 800f108:	40003000 	.word	0x40003000

0800f10c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800f110:	4b17      	ldr	r3, [pc, #92]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f112:	4a18      	ldr	r2, [pc, #96]	@ (800f174 <MX_SPI2_Init+0x68>)
 800f114:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800f116:	4b16      	ldr	r3, [pc, #88]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f118:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800f11c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800f11e:	4b14      	ldr	r3, [pc, #80]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f120:	2200      	movs	r2, #0
 800f122:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800f124:	4b12      	ldr	r3, [pc, #72]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f126:	2200      	movs	r2, #0
 800f128:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f12a:	4b11      	ldr	r3, [pc, #68]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800f130:	4b0f      	ldr	r3, [pc, #60]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f132:	2200      	movs	r2, #0
 800f134:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800f136:	4b0e      	ldr	r3, [pc, #56]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f138:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f13c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f13e:	4b0c      	ldr	r3, [pc, #48]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f140:	2200      	movs	r2, #0
 800f142:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f144:	4b0a      	ldr	r3, [pc, #40]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f146:	2200      	movs	r2, #0
 800f148:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800f14a:	4b09      	ldr	r3, [pc, #36]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f14c:	2200      	movs	r2, #0
 800f14e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f150:	4b07      	ldr	r3, [pc, #28]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f152:	2200      	movs	r2, #0
 800f154:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800f156:	4b06      	ldr	r3, [pc, #24]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f158:	220a      	movs	r2, #10
 800f15a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800f15c:	4804      	ldr	r0, [pc, #16]	@ (800f170 <MX_SPI2_Init+0x64>)
 800f15e:	f003 fb0b 	bl	8012778 <HAL_SPI_Init>
 800f162:	4603      	mov	r3, r0
 800f164:	2b00      	cmp	r3, #0
 800f166:	d001      	beq.n	800f16c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800f168:	f000 f9a1 	bl	800f4ae <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800f16c:	bf00      	nop
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	200009ec 	.word	0x200009ec
 800f174:	40003800 	.word	0x40003800

0800f178 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f17e:	f107 0308 	add.w	r3, r7, #8
 800f182:	2200      	movs	r2, #0
 800f184:	601a      	str	r2, [r3, #0]
 800f186:	605a      	str	r2, [r3, #4]
 800f188:	609a      	str	r2, [r3, #8]
 800f18a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f18c:	463b      	mov	r3, r7
 800f18e:	2200      	movs	r2, #0
 800f190:	601a      	str	r2, [r3, #0]
 800f192:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800f194:	4b1d      	ldr	r3, [pc, #116]	@ (800f20c <MX_TIM2_Init+0x94>)
 800f196:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800f19a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45-1;
 800f19c:	4b1b      	ldr	r3, [pc, #108]	@ (800f20c <MX_TIM2_Init+0x94>)
 800f19e:	222c      	movs	r2, #44	@ 0x2c
 800f1a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f1a2:	4b1a      	ldr	r3, [pc, #104]	@ (800f20c <MX_TIM2_Init+0x94>)
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 45-1;
 800f1a8:	4b18      	ldr	r3, [pc, #96]	@ (800f20c <MX_TIM2_Init+0x94>)
 800f1aa:	222c      	movs	r2, #44	@ 0x2c
 800f1ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f1ae:	4b17      	ldr	r3, [pc, #92]	@ (800f20c <MX_TIM2_Init+0x94>)
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f1b4:	4b15      	ldr	r3, [pc, #84]	@ (800f20c <MX_TIM2_Init+0x94>)
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800f1ba:	4814      	ldr	r0, [pc, #80]	@ (800f20c <MX_TIM2_Init+0x94>)
 800f1bc:	f003 fb65 	bl	801288a <HAL_TIM_Base_Init>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d001      	beq.n	800f1ca <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800f1c6:	f000 f972 	bl	800f4ae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f1ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f1ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800f1d0:	f107 0308 	add.w	r3, r7, #8
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	480d      	ldr	r0, [pc, #52]	@ (800f20c <MX_TIM2_Init+0x94>)
 800f1d8:	f003 fd35 	bl	8012c46 <HAL_TIM_ConfigClockSource>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d001      	beq.n	800f1e6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800f1e2:	f000 f964 	bl	800f4ae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f1e6:	2300      	movs	r3, #0
 800f1e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800f1ee:	463b      	mov	r3, r7
 800f1f0:	4619      	mov	r1, r3
 800f1f2:	4806      	ldr	r0, [pc, #24]	@ (800f20c <MX_TIM2_Init+0x94>)
 800f1f4:	f003 ff56 	bl	80130a4 <HAL_TIMEx_MasterConfigSynchronization>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d001      	beq.n	800f202 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800f1fe:	f000 f956 	bl	800f4ae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800f202:	bf00      	nop
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	20000a44 	.word	0x20000a44

0800f210 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800f214:	4b11      	ldr	r3, [pc, #68]	@ (800f25c <MX_UART5_Init+0x4c>)
 800f216:	4a12      	ldr	r2, [pc, #72]	@ (800f260 <MX_UART5_Init+0x50>)
 800f218:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800f21a:	4b10      	ldr	r3, [pc, #64]	@ (800f25c <MX_UART5_Init+0x4c>)
 800f21c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800f220:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800f222:	4b0e      	ldr	r3, [pc, #56]	@ (800f25c <MX_UART5_Init+0x4c>)
 800f224:	2200      	movs	r2, #0
 800f226:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800f228:	4b0c      	ldr	r3, [pc, #48]	@ (800f25c <MX_UART5_Init+0x4c>)
 800f22a:	2200      	movs	r2, #0
 800f22c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800f22e:	4b0b      	ldr	r3, [pc, #44]	@ (800f25c <MX_UART5_Init+0x4c>)
 800f230:	2200      	movs	r2, #0
 800f232:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800f234:	4b09      	ldr	r3, [pc, #36]	@ (800f25c <MX_UART5_Init+0x4c>)
 800f236:	220c      	movs	r2, #12
 800f238:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f23a:	4b08      	ldr	r3, [pc, #32]	@ (800f25c <MX_UART5_Init+0x4c>)
 800f23c:	2200      	movs	r2, #0
 800f23e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800f240:	4b06      	ldr	r3, [pc, #24]	@ (800f25c <MX_UART5_Init+0x4c>)
 800f242:	2200      	movs	r2, #0
 800f244:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800f246:	4805      	ldr	r0, [pc, #20]	@ (800f25c <MX_UART5_Init+0x4c>)
 800f248:	f003 ffbc 	bl	80131c4 <HAL_UART_Init>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800f252:	f000 f92c 	bl	800f4ae <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800f256:	bf00      	nop
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	20000a8c 	.word	0x20000a8c
 800f260:	40005000 	.word	0x40005000

0800f264 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800f268:	4b11      	ldr	r3, [pc, #68]	@ (800f2b0 <MX_USART1_UART_Init+0x4c>)
 800f26a:	4a12      	ldr	r2, [pc, #72]	@ (800f2b4 <MX_USART1_UART_Init+0x50>)
 800f26c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800f26e:	4b10      	ldr	r3, [pc, #64]	@ (800f2b0 <MX_USART1_UART_Init+0x4c>)
 800f270:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800f274:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800f276:	4b0e      	ldr	r3, [pc, #56]	@ (800f2b0 <MX_USART1_UART_Init+0x4c>)
 800f278:	2200      	movs	r2, #0
 800f27a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800f27c:	4b0c      	ldr	r3, [pc, #48]	@ (800f2b0 <MX_USART1_UART_Init+0x4c>)
 800f27e:	2200      	movs	r2, #0
 800f280:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800f282:	4b0b      	ldr	r3, [pc, #44]	@ (800f2b0 <MX_USART1_UART_Init+0x4c>)
 800f284:	2200      	movs	r2, #0
 800f286:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800f288:	4b09      	ldr	r3, [pc, #36]	@ (800f2b0 <MX_USART1_UART_Init+0x4c>)
 800f28a:	220c      	movs	r2, #12
 800f28c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800f28e:	4b08      	ldr	r3, [pc, #32]	@ (800f2b0 <MX_USART1_UART_Init+0x4c>)
 800f290:	2200      	movs	r2, #0
 800f292:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800f294:	4b06      	ldr	r3, [pc, #24]	@ (800f2b0 <MX_USART1_UART_Init+0x4c>)
 800f296:	2200      	movs	r2, #0
 800f298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800f29a:	4805      	ldr	r0, [pc, #20]	@ (800f2b0 <MX_USART1_UART_Init+0x4c>)
 800f29c:	f003 ff92 	bl	80131c4 <HAL_UART_Init>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d001      	beq.n	800f2aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800f2a6:	f000 f902 	bl	800f4ae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800f2aa:	bf00      	nop
 800f2ac:	bd80      	pop	{r7, pc}
 800f2ae:	bf00      	nop
 800f2b0:	20000ad4 	.word	0x20000ad4
 800f2b4:	40011000 	.word	0x40011000

0800f2b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f2be:	2300      	movs	r3, #0
 800f2c0:	607b      	str	r3, [r7, #4]
 800f2c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f2f4 <MX_DMA_Init+0x3c>)
 800f2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2c6:	4a0b      	ldr	r2, [pc, #44]	@ (800f2f4 <MX_DMA_Init+0x3c>)
 800f2c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f2cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800f2ce:	4b09      	ldr	r3, [pc, #36]	@ (800f2f4 <MX_DMA_Init+0x3c>)
 800f2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f2d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800f2d6:	607b      	str	r3, [r7, #4]
 800f2d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800f2da:	2200      	movs	r2, #0
 800f2dc:	2100      	movs	r1, #0
 800f2de:	2038      	movs	r0, #56	@ 0x38
 800f2e0:	f001 f9bf 	bl	8010662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f2e4:	2038      	movs	r0, #56	@ 0x38
 800f2e6:	f001 f9d8 	bl	801069a <HAL_NVIC_EnableIRQ>

}
 800f2ea:	bf00      	nop
 800f2ec:	3708      	adds	r7, #8
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop
 800f2f4:	40023800 	.word	0x40023800

0800f2f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b08a      	sub	sp, #40	@ 0x28
 800f2fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2fe:	f107 0314 	add.w	r3, r7, #20
 800f302:	2200      	movs	r2, #0
 800f304:	601a      	str	r2, [r3, #0]
 800f306:	605a      	str	r2, [r3, #4]
 800f308:	609a      	str	r2, [r3, #8]
 800f30a:	60da      	str	r2, [r3, #12]
 800f30c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f30e:	2300      	movs	r3, #0
 800f310:	613b      	str	r3, [r7, #16]
 800f312:	4b5b      	ldr	r3, [pc, #364]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f316:	4a5a      	ldr	r2, [pc, #360]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f318:	f043 0304 	orr.w	r3, r3, #4
 800f31c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f31e:	4b58      	ldr	r3, [pc, #352]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f322:	f003 0304 	and.w	r3, r3, #4
 800f326:	613b      	str	r3, [r7, #16]
 800f328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f32a:	2300      	movs	r3, #0
 800f32c:	60fb      	str	r3, [r7, #12]
 800f32e:	4b54      	ldr	r3, [pc, #336]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f332:	4a53      	ldr	r2, [pc, #332]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f338:	6313      	str	r3, [r2, #48]	@ 0x30
 800f33a:	4b51      	ldr	r3, [pc, #324]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f33e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f342:	60fb      	str	r3, [r7, #12]
 800f344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f346:	2300      	movs	r3, #0
 800f348:	60bb      	str	r3, [r7, #8]
 800f34a:	4b4d      	ldr	r3, [pc, #308]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f34c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f34e:	4a4c      	ldr	r2, [pc, #304]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f350:	f043 0301 	orr.w	r3, r3, #1
 800f354:	6313      	str	r3, [r2, #48]	@ 0x30
 800f356:	4b4a      	ldr	r3, [pc, #296]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f35a:	f003 0301 	and.w	r3, r3, #1
 800f35e:	60bb      	str	r3, [r7, #8]
 800f360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f362:	2300      	movs	r3, #0
 800f364:	607b      	str	r3, [r7, #4]
 800f366:	4b46      	ldr	r3, [pc, #280]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f36a:	4a45      	ldr	r2, [pc, #276]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f36c:	f043 0302 	orr.w	r3, r3, #2
 800f370:	6313      	str	r3, [r2, #48]	@ 0x30
 800f372:	4b43      	ldr	r3, [pc, #268]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f376:	f003 0302 	and.w	r3, r3, #2
 800f37a:	607b      	str	r3, [r7, #4]
 800f37c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f37e:	2300      	movs	r3, #0
 800f380:	603b      	str	r3, [r7, #0]
 800f382:	4b3f      	ldr	r3, [pc, #252]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f386:	4a3e      	ldr	r2, [pc, #248]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f388:	f043 0308 	orr.w	r3, r3, #8
 800f38c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f38e:	4b3c      	ldr	r3, [pc, #240]	@ (800f480 <MX_GPIO_Init+0x188>)
 800f390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f392:	f003 0308 	and.w	r3, r3, #8
 800f396:	603b      	str	r3, [r7, #0]
 800f398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800f39a:	2200      	movs	r2, #0
 800f39c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800f3a0:	4838      	ldr	r0, [pc, #224]	@ (800f484 <MX_GPIO_Init+0x18c>)
 800f3a2:	f002 fa47 	bl	8011834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_SET);
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800f3ac:	4836      	ldr	r0, [pc, #216]	@ (800f488 <MX_GPIO_Init+0x190>)
 800f3ae:	f002 fa41 	bl	8011834 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800f3b8:	4834      	ldr	r0, [pc, #208]	@ (800f48c <MX_GPIO_Init+0x194>)
 800f3ba:	f002 fa3b 	bl	8011834 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800f3be:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800f3c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f3c4:	2301      	movs	r3, #1
 800f3c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3d0:	f107 0314 	add.w	r3, r7, #20
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	482b      	ldr	r0, [pc, #172]	@ (800f484 <MX_GPIO_Init+0x18c>)
 800f3d8:	f002 f898 	bl	801150c <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 800f3dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f3e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 800f3ee:	f107 0314 	add.w	r3, r7, #20
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	4824      	ldr	r0, [pc, #144]	@ (800f488 <MX_GPIO_Init+0x190>)
 800f3f6:	f002 f889 	bl	801150c <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 800f3fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f3fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800f400:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800f404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f406:	2300      	movs	r3, #0
 800f408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 800f40a:	f107 0314 	add.w	r3, r7, #20
 800f40e:	4619      	mov	r1, r3
 800f410:	481d      	ldr	r0, [pc, #116]	@ (800f488 <MX_GPIO_Init+0x190>)
 800f412:	f002 f87b 	bl	801150c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800f416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f41a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f41c:	2300      	movs	r3, #0
 800f41e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f420:	2300      	movs	r3, #0
 800f422:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f424:	f107 0314 	add.w	r3, r7, #20
 800f428:	4619      	mov	r1, r3
 800f42a:	4817      	ldr	r0, [pc, #92]	@ (800f488 <MX_GPIO_Init+0x190>)
 800f42c:	f002 f86e 	bl	801150c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800f430:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800f434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f436:	2300      	movs	r3, #0
 800f438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f43a:	2300      	movs	r3, #0
 800f43c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f43e:	f107 0314 	add.w	r3, r7, #20
 800f442:	4619      	mov	r1, r3
 800f444:	480f      	ldr	r0, [pc, #60]	@ (800f484 <MX_GPIO_Init+0x18c>)
 800f446:	f002 f861 	bl	801150c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800f44a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f44e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f450:	2301      	movs	r3, #1
 800f452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f454:	2300      	movs	r3, #0
 800f456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f458:	2300      	movs	r3, #0
 800f45a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f45c:	f107 0314 	add.w	r3, r7, #20
 800f460:	4619      	mov	r1, r3
 800f462:	480a      	ldr	r0, [pc, #40]	@ (800f48c <MX_GPIO_Init+0x194>)
 800f464:	f002 f852 	bl	801150c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800f468:	2200      	movs	r2, #0
 800f46a:	2100      	movs	r1, #0
 800f46c:	2028      	movs	r0, #40	@ 0x28
 800f46e:	f001 f8f8 	bl	8010662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800f472:	2028      	movs	r0, #40	@ 0x28
 800f474:	f001 f911 	bl	801069a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800f478:	bf00      	nop
 800f47a:	3728      	adds	r7, #40	@ 0x28
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}
 800f480:	40023800 	.word	0x40023800
 800f484:	40020800 	.word	0x40020800
 800f488:	40020400 	.word	0x40020400
 800f48c:	40020000 	.word	0x40020000

0800f490 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 4 */
/**
 * @brief  Callback funkce po dokončení ADC konverze (DMA).
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4a0:	d101      	bne.n	800f4a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    {

        StartAdcMeasurement();
 800f4a2:	f005 fa21 	bl	80148e8 <StartAdcMeasurement>

    }
}
 800f4a6:	bf00      	nop
 800f4a8:	3708      	adds	r7, #8
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}

0800f4ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f4ae:	b480      	push	{r7}
 800f4b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800f4b2:	b672      	cpsid	i
}
 800f4b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800f4b6:	bf00      	nop
 800f4b8:	e7fd      	b.n	800f4b6 <Error_Handler+0x8>
	...

0800f4bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b083      	sub	sp, #12
 800f4c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	607b      	str	r3, [r7, #4]
 800f4c6:	4b10      	ldr	r3, [pc, #64]	@ (800f508 <HAL_MspInit+0x4c>)
 800f4c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4ca:	4a0f      	ldr	r2, [pc, #60]	@ (800f508 <HAL_MspInit+0x4c>)
 800f4cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f4d0:	6453      	str	r3, [r2, #68]	@ 0x44
 800f4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800f508 <HAL_MspInit+0x4c>)
 800f4d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f4d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f4da:	607b      	str	r3, [r7, #4]
 800f4dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f4de:	2300      	movs	r3, #0
 800f4e0:	603b      	str	r3, [r7, #0]
 800f4e2:	4b09      	ldr	r3, [pc, #36]	@ (800f508 <HAL_MspInit+0x4c>)
 800f4e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4e6:	4a08      	ldr	r2, [pc, #32]	@ (800f508 <HAL_MspInit+0x4c>)
 800f4e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f4ec:	6413      	str	r3, [r2, #64]	@ 0x40
 800f4ee:	4b06      	ldr	r3, [pc, #24]	@ (800f508 <HAL_MspInit+0x4c>)
 800f4f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f4f6:	603b      	str	r3, [r7, #0]
 800f4f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f4fa:	bf00      	nop
 800f4fc:	370c      	adds	r7, #12
 800f4fe:	46bd      	mov	sp, r7
 800f500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f504:	4770      	bx	lr
 800f506:	bf00      	nop
 800f508:	40023800 	.word	0x40023800

0800f50c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b08a      	sub	sp, #40	@ 0x28
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f514:	f107 0314 	add.w	r3, r7, #20
 800f518:	2200      	movs	r2, #0
 800f51a:	601a      	str	r2, [r3, #0]
 800f51c:	605a      	str	r2, [r3, #4]
 800f51e:	609a      	str	r2, [r3, #8]
 800f520:	60da      	str	r2, [r3, #12]
 800f522:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	4a3b      	ldr	r2, [pc, #236]	@ (800f618 <HAL_ADC_MspInit+0x10c>)
 800f52a:	4293      	cmp	r3, r2
 800f52c:	d170      	bne.n	800f610 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f52e:	2300      	movs	r3, #0
 800f530:	613b      	str	r3, [r7, #16]
 800f532:	4b3a      	ldr	r3, [pc, #232]	@ (800f61c <HAL_ADC_MspInit+0x110>)
 800f534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f536:	4a39      	ldr	r2, [pc, #228]	@ (800f61c <HAL_ADC_MspInit+0x110>)
 800f538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f53c:	6453      	str	r3, [r2, #68]	@ 0x44
 800f53e:	4b37      	ldr	r3, [pc, #220]	@ (800f61c <HAL_ADC_MspInit+0x110>)
 800f540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f546:	613b      	str	r3, [r7, #16]
 800f548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f54a:	2300      	movs	r3, #0
 800f54c:	60fb      	str	r3, [r7, #12]
 800f54e:	4b33      	ldr	r3, [pc, #204]	@ (800f61c <HAL_ADC_MspInit+0x110>)
 800f550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f552:	4a32      	ldr	r2, [pc, #200]	@ (800f61c <HAL_ADC_MspInit+0x110>)
 800f554:	f043 0301 	orr.w	r3, r3, #1
 800f558:	6313      	str	r3, [r2, #48]	@ 0x30
 800f55a:	4b30      	ldr	r3, [pc, #192]	@ (800f61c <HAL_ADC_MspInit+0x110>)
 800f55c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	60fb      	str	r3, [r7, #12]
 800f564:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f566:	2300      	movs	r3, #0
 800f568:	60bb      	str	r3, [r7, #8]
 800f56a:	4b2c      	ldr	r3, [pc, #176]	@ (800f61c <HAL_ADC_MspInit+0x110>)
 800f56c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f56e:	4a2b      	ldr	r2, [pc, #172]	@ (800f61c <HAL_ADC_MspInit+0x110>)
 800f570:	f043 0302 	orr.w	r3, r3, #2
 800f574:	6313      	str	r3, [r2, #48]	@ 0x30
 800f576:	4b29      	ldr	r3, [pc, #164]	@ (800f61c <HAL_ADC_MspInit+0x110>)
 800f578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f57a:	f003 0302 	and.w	r3, r3, #2
 800f57e:	60bb      	str	r3, [r7, #8]
 800f580:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 800f582:	23fe      	movs	r3, #254	@ 0xfe
 800f584:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f586:	2303      	movs	r3, #3
 800f588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f58a:	2300      	movs	r3, #0
 800f58c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f58e:	f107 0314 	add.w	r3, r7, #20
 800f592:	4619      	mov	r1, r3
 800f594:	4822      	ldr	r0, [pc, #136]	@ (800f620 <HAL_ADC_MspInit+0x114>)
 800f596:	f001 ffb9 	bl	801150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f59a:	2301      	movs	r3, #1
 800f59c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f59e:	2303      	movs	r3, #3
 800f5a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f5a6:	f107 0314 	add.w	r3, r7, #20
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	481d      	ldr	r0, [pc, #116]	@ (800f624 <HAL_ADC_MspInit+0x118>)
 800f5ae:	f001 ffad 	bl	801150c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f5b2:	4b1d      	ldr	r3, [pc, #116]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5b4:	4a1d      	ldr	r2, [pc, #116]	@ (800f62c <HAL_ADC_MspInit+0x120>)
 800f5b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f5b8:	4b1b      	ldr	r3, [pc, #108]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f5be:	4b1a      	ldr	r3, [pc, #104]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f5c4:	4b18      	ldr	r3, [pc, #96]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f5ca:	4b17      	ldr	r3, [pc, #92]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800f5d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f5d2:	4b15      	ldr	r3, [pc, #84]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f5d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f5da:	4b13      	ldr	r3, [pc, #76]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800f5e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800f5e2:	4b11      	ldr	r3, [pc, #68]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800f5e8:	4b0f      	ldr	r3, [pc, #60]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f5ee:	4b0e      	ldr	r3, [pc, #56]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f5f4:	480c      	ldr	r0, [pc, #48]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f5f6:	f001 f8a3 	bl	8010740 <HAL_DMA_Init>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d001      	beq.n	800f604 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 800f600:	f7ff ff55 	bl	800f4ae <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4a08      	ldr	r2, [pc, #32]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f608:	639a      	str	r2, [r3, #56]	@ 0x38
 800f60a:	4a07      	ldr	r2, [pc, #28]	@ (800f628 <HAL_ADC_MspInit+0x11c>)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800f610:	bf00      	nop
 800f612:	3728      	adds	r7, #40	@ 0x28
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}
 800f618:	40012000 	.word	0x40012000
 800f61c:	40023800 	.word	0x40023800
 800f620:	40020000 	.word	0x40020000
 800f624:	40020400 	.word	0x40020400
 800f628:	20000924 	.word	0x20000924
 800f62c:	40026410 	.word	0x40026410

0800f630 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800f630:	b480      	push	{r7}
 800f632:	b085      	sub	sp, #20
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4a0b      	ldr	r2, [pc, #44]	@ (800f66c <HAL_CRC_MspInit+0x3c>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d10d      	bne.n	800f65e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800f642:	2300      	movs	r3, #0
 800f644:	60fb      	str	r3, [r7, #12]
 800f646:	4b0a      	ldr	r3, [pc, #40]	@ (800f670 <HAL_CRC_MspInit+0x40>)
 800f648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f64a:	4a09      	ldr	r2, [pc, #36]	@ (800f670 <HAL_CRC_MspInit+0x40>)
 800f64c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800f650:	6313      	str	r3, [r2, #48]	@ 0x30
 800f652:	4b07      	ldr	r3, [pc, #28]	@ (800f670 <HAL_CRC_MspInit+0x40>)
 800f654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f656:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800f65a:	60fb      	str	r3, [r7, #12]
 800f65c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800f65e:	bf00      	nop
 800f660:	3714      	adds	r7, #20
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	40023000 	.word	0x40023000
 800f670:	40023800 	.word	0x40023800

0800f674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b08a      	sub	sp, #40	@ 0x28
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f67c:	f107 0314 	add.w	r3, r7, #20
 800f680:	2200      	movs	r2, #0
 800f682:	601a      	str	r2, [r3, #0]
 800f684:	605a      	str	r2, [r3, #4]
 800f686:	609a      	str	r2, [r3, #8]
 800f688:	60da      	str	r2, [r3, #12]
 800f68a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	4a19      	ldr	r2, [pc, #100]	@ (800f6f8 <HAL_I2C_MspInit+0x84>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d12b      	bne.n	800f6ee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f696:	2300      	movs	r3, #0
 800f698:	613b      	str	r3, [r7, #16]
 800f69a:	4b18      	ldr	r3, [pc, #96]	@ (800f6fc <HAL_I2C_MspInit+0x88>)
 800f69c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f69e:	4a17      	ldr	r2, [pc, #92]	@ (800f6fc <HAL_I2C_MspInit+0x88>)
 800f6a0:	f043 0302 	orr.w	r3, r3, #2
 800f6a4:	6313      	str	r3, [r2, #48]	@ 0x30
 800f6a6:	4b15      	ldr	r3, [pc, #84]	@ (800f6fc <HAL_I2C_MspInit+0x88>)
 800f6a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6aa:	f003 0302 	and.w	r3, r3, #2
 800f6ae:	613b      	str	r3, [r7, #16]
 800f6b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800f6b2:	23c0      	movs	r3, #192	@ 0xc0
 800f6b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f6b6:	2312      	movs	r3, #18
 800f6b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6be:	2303      	movs	r3, #3
 800f6c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f6c2:	2304      	movs	r3, #4
 800f6c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f6c6:	f107 0314 	add.w	r3, r7, #20
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	480c      	ldr	r0, [pc, #48]	@ (800f700 <HAL_I2C_MspInit+0x8c>)
 800f6ce:	f001 ff1d 	bl	801150c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	60fb      	str	r3, [r7, #12]
 800f6d6:	4b09      	ldr	r3, [pc, #36]	@ (800f6fc <HAL_I2C_MspInit+0x88>)
 800f6d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6da:	4a08      	ldr	r2, [pc, #32]	@ (800f6fc <HAL_I2C_MspInit+0x88>)
 800f6dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f6e0:	6413      	str	r3, [r2, #64]	@ 0x40
 800f6e2:	4b06      	ldr	r3, [pc, #24]	@ (800f6fc <HAL_I2C_MspInit+0x88>)
 800f6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f6e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800f6ea:	60fb      	str	r3, [r7, #12]
 800f6ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800f6ee:	bf00      	nop
 800f6f0:	3728      	adds	r7, #40	@ 0x28
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	40005400 	.word	0x40005400
 800f6fc:	40023800 	.word	0x40023800
 800f700:	40020400 	.word	0x40020400

0800f704 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b08a      	sub	sp, #40	@ 0x28
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f70c:	f107 0314 	add.w	r3, r7, #20
 800f710:	2200      	movs	r2, #0
 800f712:	601a      	str	r2, [r3, #0]
 800f714:	605a      	str	r2, [r3, #4]
 800f716:	609a      	str	r2, [r3, #8]
 800f718:	60da      	str	r2, [r3, #12]
 800f71a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	4a30      	ldr	r2, [pc, #192]	@ (800f7e4 <HAL_SPI_MspInit+0xe0>)
 800f722:	4293      	cmp	r3, r2
 800f724:	d15a      	bne.n	800f7dc <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800f726:	2300      	movs	r3, #0
 800f728:	613b      	str	r3, [r7, #16]
 800f72a:	4b2f      	ldr	r3, [pc, #188]	@ (800f7e8 <HAL_SPI_MspInit+0xe4>)
 800f72c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f72e:	4a2e      	ldr	r2, [pc, #184]	@ (800f7e8 <HAL_SPI_MspInit+0xe4>)
 800f730:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f734:	6413      	str	r3, [r2, #64]	@ 0x40
 800f736:	4b2c      	ldr	r3, [pc, #176]	@ (800f7e8 <HAL_SPI_MspInit+0xe4>)
 800f738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f73a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f73e:	613b      	str	r3, [r7, #16]
 800f740:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f742:	2300      	movs	r3, #0
 800f744:	60fb      	str	r3, [r7, #12]
 800f746:	4b28      	ldr	r3, [pc, #160]	@ (800f7e8 <HAL_SPI_MspInit+0xe4>)
 800f748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f74a:	4a27      	ldr	r2, [pc, #156]	@ (800f7e8 <HAL_SPI_MspInit+0xe4>)
 800f74c:	f043 0304 	orr.w	r3, r3, #4
 800f750:	6313      	str	r3, [r2, #48]	@ 0x30
 800f752:	4b25      	ldr	r3, [pc, #148]	@ (800f7e8 <HAL_SPI_MspInit+0xe4>)
 800f754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f756:	f003 0304 	and.w	r3, r3, #4
 800f75a:	60fb      	str	r3, [r7, #12]
 800f75c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f75e:	2300      	movs	r3, #0
 800f760:	60bb      	str	r3, [r7, #8]
 800f762:	4b21      	ldr	r3, [pc, #132]	@ (800f7e8 <HAL_SPI_MspInit+0xe4>)
 800f764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f766:	4a20      	ldr	r2, [pc, #128]	@ (800f7e8 <HAL_SPI_MspInit+0xe4>)
 800f768:	f043 0302 	orr.w	r3, r3, #2
 800f76c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f76e:	4b1e      	ldr	r3, [pc, #120]	@ (800f7e8 <HAL_SPI_MspInit+0xe4>)
 800f770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f772:	f003 0302 	and.w	r3, r3, #2
 800f776:	60bb      	str	r3, [r7, #8]
 800f778:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f77a:	2302      	movs	r3, #2
 800f77c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f77e:	2302      	movs	r3, #2
 800f780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f782:	2300      	movs	r3, #0
 800f784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f786:	2303      	movs	r3, #3
 800f788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800f78a:	2307      	movs	r3, #7
 800f78c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f78e:	f107 0314 	add.w	r3, r7, #20
 800f792:	4619      	mov	r1, r3
 800f794:	4815      	ldr	r0, [pc, #84]	@ (800f7ec <HAL_SPI_MspInit+0xe8>)
 800f796:	f001 feb9 	bl	801150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f79a:	2304      	movs	r3, #4
 800f79c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f79e:	2302      	movs	r3, #2
 800f7a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7a6:	2303      	movs	r3, #3
 800f7a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f7aa:	2305      	movs	r3, #5
 800f7ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f7ae:	f107 0314 	add.w	r3, r7, #20
 800f7b2:	4619      	mov	r1, r3
 800f7b4:	480d      	ldr	r0, [pc, #52]	@ (800f7ec <HAL_SPI_MspInit+0xe8>)
 800f7b6:	f001 fea9 	bl	801150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800f7ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f7cc:	2305      	movs	r3, #5
 800f7ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f7d0:	f107 0314 	add.w	r3, r7, #20
 800f7d4:	4619      	mov	r1, r3
 800f7d6:	4806      	ldr	r0, [pc, #24]	@ (800f7f0 <HAL_SPI_MspInit+0xec>)
 800f7d8:	f001 fe98 	bl	801150c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800f7dc:	bf00      	nop
 800f7de:	3728      	adds	r7, #40	@ 0x28
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	40003800 	.word	0x40003800
 800f7e8:	40023800 	.word	0x40023800
 800f7ec:	40020800 	.word	0x40020800
 800f7f0:	40020400 	.word	0x40020400

0800f7f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f804:	d115      	bne.n	800f832 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800f806:	2300      	movs	r3, #0
 800f808:	60fb      	str	r3, [r7, #12]
 800f80a:	4b0c      	ldr	r3, [pc, #48]	@ (800f83c <HAL_TIM_Base_MspInit+0x48>)
 800f80c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f80e:	4a0b      	ldr	r2, [pc, #44]	@ (800f83c <HAL_TIM_Base_MspInit+0x48>)
 800f810:	f043 0301 	orr.w	r3, r3, #1
 800f814:	6413      	str	r3, [r2, #64]	@ 0x40
 800f816:	4b09      	ldr	r3, [pc, #36]	@ (800f83c <HAL_TIM_Base_MspInit+0x48>)
 800f818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f81a:	f003 0301 	and.w	r3, r3, #1
 800f81e:	60fb      	str	r3, [r7, #12]
 800f820:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800f822:	2200      	movs	r2, #0
 800f824:	2100      	movs	r1, #0
 800f826:	201c      	movs	r0, #28
 800f828:	f000 ff1b 	bl	8010662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800f82c:	201c      	movs	r0, #28
 800f82e:	f000 ff34 	bl	801069a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800f832:	bf00      	nop
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}
 800f83a:	bf00      	nop
 800f83c:	40023800 	.word	0x40023800

0800f840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b08c      	sub	sp, #48	@ 0x30
 800f844:	af00      	add	r7, sp, #0
 800f846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f848:	f107 031c 	add.w	r3, r7, #28
 800f84c:	2200      	movs	r2, #0
 800f84e:	601a      	str	r2, [r3, #0]
 800f850:	605a      	str	r2, [r3, #4]
 800f852:	609a      	str	r2, [r3, #8]
 800f854:	60da      	str	r2, [r3, #12]
 800f856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	4a46      	ldr	r2, [pc, #280]	@ (800f978 <HAL_UART_MspInit+0x138>)
 800f85e:	4293      	cmp	r3, r2
 800f860:	d153      	bne.n	800f90a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800f862:	2300      	movs	r3, #0
 800f864:	61bb      	str	r3, [r7, #24]
 800f866:	4b45      	ldr	r3, [pc, #276]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f86a:	4a44      	ldr	r2, [pc, #272]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f86c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f870:	6413      	str	r3, [r2, #64]	@ 0x40
 800f872:	4b42      	ldr	r3, [pc, #264]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800f87a:	61bb      	str	r3, [r7, #24]
 800f87c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f87e:	2300      	movs	r3, #0
 800f880:	617b      	str	r3, [r7, #20]
 800f882:	4b3e      	ldr	r3, [pc, #248]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f886:	4a3d      	ldr	r2, [pc, #244]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f888:	f043 0304 	orr.w	r3, r3, #4
 800f88c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f88e:	4b3b      	ldr	r3, [pc, #236]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f892:	f003 0304 	and.w	r3, r3, #4
 800f896:	617b      	str	r3, [r7, #20]
 800f898:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800f89a:	2300      	movs	r3, #0
 800f89c:	613b      	str	r3, [r7, #16]
 800f89e:	4b37      	ldr	r3, [pc, #220]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f8a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8a2:	4a36      	ldr	r2, [pc, #216]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f8a4:	f043 0308 	orr.w	r3, r3, #8
 800f8a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800f8aa:	4b34      	ldr	r3, [pc, #208]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f8ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f8ae:	f003 0308 	and.w	r3, r3, #8
 800f8b2:	613b      	str	r3, [r7, #16]
 800f8b4:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800f8b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f8ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8bc:	2302      	movs	r3, #2
 800f8be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8c4:	2303      	movs	r3, #3
 800f8c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800f8c8:	2308      	movs	r3, #8
 800f8ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f8cc:	f107 031c 	add.w	r3, r7, #28
 800f8d0:	4619      	mov	r1, r3
 800f8d2:	482b      	ldr	r0, [pc, #172]	@ (800f980 <HAL_UART_MspInit+0x140>)
 800f8d4:	f001 fe1a 	bl	801150c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800f8d8:	2304      	movs	r3, #4
 800f8da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8dc:	2302      	movs	r3, #2
 800f8de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f8e4:	2303      	movs	r3, #3
 800f8e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800f8e8:	2308      	movs	r3, #8
 800f8ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f8ec:	f107 031c 	add.w	r3, r7, #28
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	4824      	ldr	r0, [pc, #144]	@ (800f984 <HAL_UART_MspInit+0x144>)
 800f8f4:	f001 fe0a 	bl	801150c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	2035      	movs	r0, #53	@ 0x35
 800f8fe:	f000 feb0 	bl	8010662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800f902:	2035      	movs	r0, #53	@ 0x35
 800f904:	f000 fec9 	bl	801069a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800f908:	e031      	b.n	800f96e <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART1)
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4a1e      	ldr	r2, [pc, #120]	@ (800f988 <HAL_UART_MspInit+0x148>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d12c      	bne.n	800f96e <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART1_CLK_ENABLE();
 800f914:	2300      	movs	r3, #0
 800f916:	60fb      	str	r3, [r7, #12]
 800f918:	4b18      	ldr	r3, [pc, #96]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f91a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f91c:	4a17      	ldr	r2, [pc, #92]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f91e:	f043 0310 	orr.w	r3, r3, #16
 800f922:	6453      	str	r3, [r2, #68]	@ 0x44
 800f924:	4b15      	ldr	r3, [pc, #84]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f928:	f003 0310 	and.w	r3, r3, #16
 800f92c:	60fb      	str	r3, [r7, #12]
 800f92e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f930:	2300      	movs	r3, #0
 800f932:	60bb      	str	r3, [r7, #8]
 800f934:	4b11      	ldr	r3, [pc, #68]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f938:	4a10      	ldr	r2, [pc, #64]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f93a:	f043 0301 	orr.w	r3, r3, #1
 800f93e:	6313      	str	r3, [r2, #48]	@ 0x30
 800f940:	4b0e      	ldr	r3, [pc, #56]	@ (800f97c <HAL_UART_MspInit+0x13c>)
 800f942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f944:	f003 0301 	and.w	r3, r3, #1
 800f948:	60bb      	str	r3, [r7, #8]
 800f94a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800f94c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800f950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f952:	2302      	movs	r3, #2
 800f954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f956:	2300      	movs	r3, #0
 800f958:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f95a:	2303      	movs	r3, #3
 800f95c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800f95e:	2307      	movs	r3, #7
 800f960:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f962:	f107 031c 	add.w	r3, r7, #28
 800f966:	4619      	mov	r1, r3
 800f968:	4808      	ldr	r0, [pc, #32]	@ (800f98c <HAL_UART_MspInit+0x14c>)
 800f96a:	f001 fdcf 	bl	801150c <HAL_GPIO_Init>
}
 800f96e:	bf00      	nop
 800f970:	3730      	adds	r7, #48	@ 0x30
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	40005000 	.word	0x40005000
 800f97c:	40023800 	.word	0x40023800
 800f980:	40020800 	.word	0x40020800
 800f984:	40020c00 	.word	0x40020c00
 800f988:	40011000 	.word	0x40011000
 800f98c:	40020000 	.word	0x40020000

0800f990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f990:	b480      	push	{r7}
 800f992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) { }
 800f994:	bf00      	nop
 800f996:	e7fd      	b.n	800f994 <NMI_Handler+0x4>

0800f998 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f998:	bf00      	nop
 800f99a:	e7fd      	b.n	800f998 <HardFault_Handler>

0800f99c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  /* Přesměruj do HardFault pro konzistentní log (většina projektů stejně resetuje). */
  HardFault_Handler();
 800f9a0:	f7ff fffa 	bl	800f998 <HardFault_Handler>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f9a4:	bf00      	nop
 800f9a6:	e7fd      	b.n	800f9a4 <MemManage_Handler+0x8>

0800f9a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  HardFault_Handler();
 800f9ac:	f7ff fff4 	bl	800f998 <HardFault_Handler>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f9b0:	bf00      	nop
 800f9b2:	e7fd      	b.n	800f9b0 <BusFault_Handler+0x8>

0800f9b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  HardFault_Handler();
 800f9b8:	f7ff ffee 	bl	800f998 <HardFault_Handler>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f9bc:	bf00      	nop
 800f9be:	e7fd      	b.n	800f9bc <UsageFault_Handler+0x8>

0800f9c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800f9c0:	b480      	push	{r7}
 800f9c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */
  /* USER CODE END SVCall_IRQn 1 */
}
 800f9c4:	bf00      	nop
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9cc:	4770      	bx	lr

0800f9ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f9ce:	b480      	push	{r7}
 800f9d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f9d2:	bf00      	nop
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800f9dc:	b480      	push	{r7}
 800f9de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  /* USER CODE END PendSV_IRQn 1 */
}
 800f9e0:	bf00      	nop
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr

0800f9ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800f9ea:	b580      	push	{r7, lr}
 800f9ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800f9ee:	f000 f8bb 	bl	800fb68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
}
 800f9f2:	bf00      	nop
 800f9f4:	bd80      	pop	{r7, pc}
	...

0800f9f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800f9fc:	4802      	ldr	r0, [pc, #8]	@ (800fa08 <TIM2_IRQHandler+0x10>)
 800f9fe:	f003 f832 	bl	8012a66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 800fa02:	bf00      	nop
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	20000a44 	.word	0x20000a44

0800fa0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button_Pin);
 800fa10:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800fa14:	f001 ff42 	bl	801189c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800fa18:	bf00      	nop
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800fa20:	4802      	ldr	r0, [pc, #8]	@ (800fa2c <UART5_IRQHandler+0x10>)
 800fa22:	f003 fe41 	bl	80136a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */
  /* USER CODE END UART5_IRQn 1 */
}
 800fa26:	bf00      	nop
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	20000a8c 	.word	0x20000a8c

0800fa30 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800fa34:	4802      	ldr	r0, [pc, #8]	@ (800fa40 <DMA2_Stream0_IRQHandler+0x10>)
 800fa36:	f001 f81b 	bl	8010a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800fa3a:	bf00      	nop
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	20000924 	.word	0x20000924

0800fa44 <SystemInit>:
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 800fa44:	b480      	push	{r7}
 800fa46:	af00      	add	r7, sp, #0
    /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 800fa48:	4b07      	ldr	r3, [pc, #28]	@ (800fa68 <SystemInit+0x24>)
 800fa4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fa4e:	4a06      	ldr	r2, [pc, #24]	@ (800fa68 <SystemInit+0x24>)
 800fa50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fa54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

    /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
    SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 800fa58:	4b03      	ldr	r3, [pc, #12]	@ (800fa68 <SystemInit+0x24>)
 800fa5a:	4a04      	ldr	r2, [pc, #16]	@ (800fa6c <SystemInit+0x28>)
 800fa5c:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800fa5e:	bf00      	nop
 800fa60:	46bd      	mov	sp, r7
 800fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa66:	4770      	bx	lr
 800fa68:	e000ed00 	.word	0xe000ed00
 800fa6c:	0800c000 	.word	0x0800c000

0800fa70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800fa70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800faa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800fa74:	f7ff ffe6 	bl	800fa44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800fa78:	480c      	ldr	r0, [pc, #48]	@ (800faac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800fa7a:	490d      	ldr	r1, [pc, #52]	@ (800fab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800fa7c:	4a0d      	ldr	r2, [pc, #52]	@ (800fab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800fa7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800fa80:	e002      	b.n	800fa88 <LoopCopyDataInit>

0800fa82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800fa82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800fa84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800fa86:	3304      	adds	r3, #4

0800fa88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800fa88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800fa8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800fa8c:	d3f9      	bcc.n	800fa82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800fa8e:	4a0a      	ldr	r2, [pc, #40]	@ (800fab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800fa90:	4c0a      	ldr	r4, [pc, #40]	@ (800fabc <LoopFillZerobss+0x22>)
  movs r3, #0
 800fa92:	2300      	movs	r3, #0
  b LoopFillZerobss
 800fa94:	e001      	b.n	800fa9a <LoopFillZerobss>

0800fa96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800fa96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fa98:	3204      	adds	r2, #4

0800fa9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800fa9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800fa9c:	d3fb      	bcc.n	800fa96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800fa9e:	f005 f97d 	bl	8014d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800faa2:	f7ff f90f 	bl	800ecc4 <main>
  bx  lr    
 800faa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800faa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800faac:	200000c0 	.word	0x200000c0
  ldr r1, =_edata
 800fab0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 800fab4:	0801537c 	.word	0x0801537c
  ldr r2, =_sbss
 800fab8:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 800fabc:	2001e084 	.word	0x2001e084

0800fac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fac0:	e7fe      	b.n	800fac0 <ADC_IRQHandler>
	...

0800fac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800fac8:	4b0e      	ldr	r3, [pc, #56]	@ (800fb04 <HAL_Init+0x40>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a0d      	ldr	r2, [pc, #52]	@ (800fb04 <HAL_Init+0x40>)
 800face:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800fad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800fad4:	4b0b      	ldr	r3, [pc, #44]	@ (800fb04 <HAL_Init+0x40>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a0a      	ldr	r2, [pc, #40]	@ (800fb04 <HAL_Init+0x40>)
 800fada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800fade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800fae0:	4b08      	ldr	r3, [pc, #32]	@ (800fb04 <HAL_Init+0x40>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	4a07      	ldr	r2, [pc, #28]	@ (800fb04 <HAL_Init+0x40>)
 800fae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800faea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800faec:	2003      	movs	r0, #3
 800faee:	f000 fdad 	bl	801064c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800faf2:	200f      	movs	r0, #15
 800faf4:	f000 f808 	bl	800fb08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800faf8:	f7ff fce0 	bl	800f4bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800fafc:	2300      	movs	r3, #0
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	40023c00 	.word	0x40023c00

0800fb08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b082      	sub	sp, #8
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800fb10:	4b12      	ldr	r3, [pc, #72]	@ (800fb5c <HAL_InitTick+0x54>)
 800fb12:	681a      	ldr	r2, [r3, #0]
 800fb14:	4b12      	ldr	r3, [pc, #72]	@ (800fb60 <HAL_InitTick+0x58>)
 800fb16:	781b      	ldrb	r3, [r3, #0]
 800fb18:	4619      	mov	r1, r3
 800fb1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fb22:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb26:	4618      	mov	r0, r3
 800fb28:	f000 fdd3 	bl	80106d2 <HAL_SYSTICK_Config>
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d001      	beq.n	800fb36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800fb32:	2301      	movs	r3, #1
 800fb34:	e00e      	b.n	800fb54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	2b0f      	cmp	r3, #15
 800fb3a:	d80a      	bhi.n	800fb52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	6879      	ldr	r1, [r7, #4]
 800fb40:	f04f 30ff 	mov.w	r0, #4294967295
 800fb44:	f000 fd8d 	bl	8010662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800fb48:	4a06      	ldr	r2, [pc, #24]	@ (800fb64 <HAL_InitTick+0x5c>)
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	e000      	b.n	800fb54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800fb52:	2301      	movs	r3, #1
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	200000c0 	.word	0x200000c0
 800fb60:	200000c8 	.word	0x200000c8
 800fb64:	200000c4 	.word	0x200000c4

0800fb68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800fb6c:	4b06      	ldr	r3, [pc, #24]	@ (800fb88 <HAL_IncTick+0x20>)
 800fb6e:	781b      	ldrb	r3, [r3, #0]
 800fb70:	461a      	mov	r2, r3
 800fb72:	4b06      	ldr	r3, [pc, #24]	@ (800fb8c <HAL_IncTick+0x24>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4413      	add	r3, r2
 800fb78:	4a04      	ldr	r2, [pc, #16]	@ (800fb8c <HAL_IncTick+0x24>)
 800fb7a:	6013      	str	r3, [r2, #0]
}
 800fb7c:	bf00      	nop
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb84:	4770      	bx	lr
 800fb86:	bf00      	nop
 800fb88:	200000c8 	.word	0x200000c8
 800fb8c:	20000b24 	.word	0x20000b24

0800fb90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800fb90:	b480      	push	{r7}
 800fb92:	af00      	add	r7, sp, #0
  return uwTick;
 800fb94:	4b03      	ldr	r3, [pc, #12]	@ (800fba4 <HAL_GetTick+0x14>)
 800fb96:	681b      	ldr	r3, [r3, #0]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba0:	4770      	bx	lr
 800fba2:	bf00      	nop
 800fba4:	20000b24 	.word	0x20000b24

0800fba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800fbb0:	f7ff ffee 	bl	800fb90 <HAL_GetTick>
 800fbb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbc0:	d005      	beq.n	800fbce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800fbc2:	4b0a      	ldr	r3, [pc, #40]	@ (800fbec <HAL_Delay+0x44>)
 800fbc4:	781b      	ldrb	r3, [r3, #0]
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	4413      	add	r3, r2
 800fbcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800fbce:	bf00      	nop
 800fbd0:	f7ff ffde 	bl	800fb90 <HAL_GetTick>
 800fbd4:	4602      	mov	r2, r0
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d8f7      	bhi.n	800fbd0 <HAL_Delay+0x28>
  {
  }
}
 800fbe0:	bf00      	nop
 800fbe2:	bf00      	nop
 800fbe4:	3710      	adds	r7, #16
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	200000c8 	.word	0x200000c8

0800fbf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b084      	sub	sp, #16
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800fc02:	2301      	movs	r3, #1
 800fc04:	e033      	b.n	800fc6e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d109      	bne.n	800fc22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800fc0e:	6878      	ldr	r0, [r7, #4]
 800fc10:	f7ff fc7c 	bl	800f50c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2200      	movs	r2, #0
 800fc18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc26:	f003 0310 	and.w	r3, r3, #16
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d118      	bne.n	800fc60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800fc36:	f023 0302 	bic.w	r3, r3, #2
 800fc3a:	f043 0202 	orr.w	r2, r3, #2
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800fc42:	6878      	ldr	r0, [r7, #4]
 800fc44:	f000 fa72 	bl	801012c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fc52:	f023 0303 	bic.w	r3, r3, #3
 800fc56:	f043 0201 	orr.w	r2, r3, #1
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	641a      	str	r2, [r3, #64]	@ 0x40
 800fc5e:	e001      	b.n	800fc64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800fc60:	2301      	movs	r3, #1
 800fc62:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2200      	movs	r2, #0
 800fc68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800fc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
	...

0800fc78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b088      	sub	sp, #32
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800fc84:	2300      	movs	r3, #0
 800fc86:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800fc88:	2300      	movs	r3, #0
 800fc8a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fc92:	2b01      	cmp	r3, #1
 800fc94:	d101      	bne.n	800fc9a <HAL_ADC_Start_DMA+0x22>
 800fc96:	2302      	movs	r3, #2
 800fc98:	e0eb      	b.n	800fe72 <HAL_ADC_Start_DMA+0x1fa>
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	2201      	movs	r2, #1
 800fc9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	689b      	ldr	r3, [r3, #8]
 800fca8:	f003 0301 	and.w	r3, r3, #1
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	d018      	beq.n	800fce2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	689a      	ldr	r2, [r3, #8]
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f042 0201 	orr.w	r2, r2, #1
 800fcbe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800fcc0:	4b6e      	ldr	r3, [pc, #440]	@ (800fe7c <HAL_ADC_Start_DMA+0x204>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4a6e      	ldr	r2, [pc, #440]	@ (800fe80 <HAL_ADC_Start_DMA+0x208>)
 800fcc6:	fba2 2303 	umull	r2, r3, r2, r3
 800fcca:	0c9a      	lsrs	r2, r3, #18
 800fccc:	4613      	mov	r3, r2
 800fcce:	005b      	lsls	r3, r3, #1
 800fcd0:	4413      	add	r3, r2
 800fcd2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800fcd4:	e002      	b.n	800fcdc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	3b01      	subs	r3, #1
 800fcda:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d1f9      	bne.n	800fcd6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	689b      	ldr	r3, [r3, #8]
 800fce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fcec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fcf0:	d107      	bne.n	800fd02 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	689a      	ldr	r2, [r3, #8]
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fd00:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	689b      	ldr	r3, [r3, #8]
 800fd08:	f003 0301 	and.w	r3, r3, #1
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	f040 80a3 	bne.w	800fe58 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd16:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800fd1a:	f023 0301 	bic.w	r3, r3, #1
 800fd1e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d007      	beq.n	800fd44 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd38:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800fd3c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800fd4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fd50:	d106      	bne.n	800fd60 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd56:	f023 0206 	bic.w	r2, r3, #6
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	645a      	str	r2, [r3, #68]	@ 0x44
 800fd5e:	e002      	b.n	800fd66 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800fd60:	68fb      	ldr	r3, [r7, #12]
 800fd62:	2200      	movs	r2, #0
 800fd64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	2200      	movs	r2, #0
 800fd6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800fd6e:	4b45      	ldr	r3, [pc, #276]	@ (800fe84 <HAL_ADC_Start_DMA+0x20c>)
 800fd70:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd76:	4a44      	ldr	r2, [pc, #272]	@ (800fe88 <HAL_ADC_Start_DMA+0x210>)
 800fd78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd7e:	4a43      	ldr	r2, [pc, #268]	@ (800fe8c <HAL_ADC_Start_DMA+0x214>)
 800fd80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd86:	4a42      	ldr	r2, [pc, #264]	@ (800fe90 <HAL_ADC_Start_DMA+0x218>)
 800fd88:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800fd92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	685a      	ldr	r2, [r3, #4]
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800fda2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	689a      	ldr	r2, [r3, #8]
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800fdb2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	334c      	adds	r3, #76	@ 0x4c
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	68ba      	ldr	r2, [r7, #8]
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f000 fd6a 	bl	801089c <HAL_DMA_Start_IT>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800fdcc:	69bb      	ldr	r3, [r7, #24]
 800fdce:	685b      	ldr	r3, [r3, #4]
 800fdd0:	f003 031f 	and.w	r3, r3, #31
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d12a      	bne.n	800fe2e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	4a2d      	ldr	r2, [pc, #180]	@ (800fe94 <HAL_ADC_Start_DMA+0x21c>)
 800fdde:	4293      	cmp	r3, r2
 800fde0:	d015      	beq.n	800fe0e <HAL_ADC_Start_DMA+0x196>
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	4a2c      	ldr	r2, [pc, #176]	@ (800fe98 <HAL_ADC_Start_DMA+0x220>)
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d105      	bne.n	800fdf8 <HAL_ADC_Start_DMA+0x180>
 800fdec:	4b25      	ldr	r3, [pc, #148]	@ (800fe84 <HAL_ADC_Start_DMA+0x20c>)
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	f003 031f 	and.w	r3, r3, #31
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d00a      	beq.n	800fe0e <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a27      	ldr	r2, [pc, #156]	@ (800fe9c <HAL_ADC_Start_DMA+0x224>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d136      	bne.n	800fe70 <HAL_ADC_Start_DMA+0x1f8>
 800fe02:	4b20      	ldr	r3, [pc, #128]	@ (800fe84 <HAL_ADC_Start_DMA+0x20c>)
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	f003 0310 	and.w	r3, r3, #16
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d130      	bne.n	800fe70 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	689b      	ldr	r3, [r3, #8]
 800fe14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d129      	bne.n	800fe70 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	689a      	ldr	r2, [r3, #8]
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800fe2a:	609a      	str	r2, [r3, #8]
 800fe2c:	e020      	b.n	800fe70 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	4a18      	ldr	r2, [pc, #96]	@ (800fe94 <HAL_ADC_Start_DMA+0x21c>)
 800fe34:	4293      	cmp	r3, r2
 800fe36:	d11b      	bne.n	800fe70 <HAL_ADC_Start_DMA+0x1f8>
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	689b      	ldr	r3, [r3, #8]
 800fe3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d114      	bne.n	800fe70 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	689a      	ldr	r2, [r3, #8]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800fe54:	609a      	str	r2, [r3, #8]
 800fe56:	e00b      	b.n	800fe70 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe5c:	f043 0210 	orr.w	r2, r3, #16
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe68:	f043 0201 	orr.w	r2, r3, #1
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800fe70:	7ffb      	ldrb	r3, [r7, #31]
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3720      	adds	r7, #32
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
 800fe7a:	bf00      	nop
 800fe7c:	200000c0 	.word	0x200000c0
 800fe80:	431bde83 	.word	0x431bde83
 800fe84:	40012300 	.word	0x40012300
 800fe88:	08010325 	.word	0x08010325
 800fe8c:	080103df 	.word	0x080103df
 800fe90:	080103fb 	.word	0x080103fb
 800fe94:	40012000 	.word	0x40012000
 800fe98:	40012100 	.word	0x40012100
 800fe9c:	40012200 	.word	0x40012200

0800fea0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800fea0:	b480      	push	{r7}
 800fea2:	b083      	sub	sp, #12
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800fea8:	bf00      	nop
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800febc:	bf00      	nop
 800febe:	370c      	adds	r7, #12
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800fec8:	b480      	push	{r7}
 800feca:	b085      	sub	sp, #20
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800fed2:	2300      	movs	r3, #0
 800fed4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d101      	bne.n	800fee4 <HAL_ADC_ConfigChannel+0x1c>
 800fee0:	2302      	movs	r3, #2
 800fee2:	e113      	b.n	801010c <HAL_ADC_ConfigChannel+0x244>
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2201      	movs	r2, #1
 800fee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2b09      	cmp	r3, #9
 800fef2:	d925      	bls.n	800ff40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	68d9      	ldr	r1, [r3, #12]
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	b29b      	uxth	r3, r3
 800ff00:	461a      	mov	r2, r3
 800ff02:	4613      	mov	r3, r2
 800ff04:	005b      	lsls	r3, r3, #1
 800ff06:	4413      	add	r3, r2
 800ff08:	3b1e      	subs	r3, #30
 800ff0a:	2207      	movs	r2, #7
 800ff0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff10:	43da      	mvns	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	400a      	ands	r2, r1
 800ff18:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	68d9      	ldr	r1, [r3, #12]
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	689a      	ldr	r2, [r3, #8]
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	005b      	lsls	r3, r3, #1
 800ff30:	4403      	add	r3, r0
 800ff32:	3b1e      	subs	r3, #30
 800ff34:	409a      	lsls	r2, r3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	430a      	orrs	r2, r1
 800ff3c:	60da      	str	r2, [r3, #12]
 800ff3e:	e022      	b.n	800ff86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	6919      	ldr	r1, [r3, #16]
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	461a      	mov	r2, r3
 800ff4e:	4613      	mov	r3, r2
 800ff50:	005b      	lsls	r3, r3, #1
 800ff52:	4413      	add	r3, r2
 800ff54:	2207      	movs	r2, #7
 800ff56:	fa02 f303 	lsl.w	r3, r2, r3
 800ff5a:	43da      	mvns	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	400a      	ands	r2, r1
 800ff62:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	6919      	ldr	r1, [r3, #16]
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	689a      	ldr	r2, [r3, #8]
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	4618      	mov	r0, r3
 800ff76:	4603      	mov	r3, r0
 800ff78:	005b      	lsls	r3, r3, #1
 800ff7a:	4403      	add	r3, r0
 800ff7c:	409a      	lsls	r2, r3
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	430a      	orrs	r2, r1
 800ff84:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	685b      	ldr	r3, [r3, #4]
 800ff8a:	2b06      	cmp	r3, #6
 800ff8c:	d824      	bhi.n	800ffd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	685a      	ldr	r2, [r3, #4]
 800ff98:	4613      	mov	r3, r2
 800ff9a:	009b      	lsls	r3, r3, #2
 800ff9c:	4413      	add	r3, r2
 800ff9e:	3b05      	subs	r3, #5
 800ffa0:	221f      	movs	r2, #31
 800ffa2:	fa02 f303 	lsl.w	r3, r2, r3
 800ffa6:	43da      	mvns	r2, r3
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	400a      	ands	r2, r1
 800ffae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	b29b      	uxth	r3, r3
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	685a      	ldr	r2, [r3, #4]
 800ffc2:	4613      	mov	r3, r2
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	4413      	add	r3, r2
 800ffc8:	3b05      	subs	r3, #5
 800ffca:	fa00 f203 	lsl.w	r2, r0, r3
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	430a      	orrs	r2, r1
 800ffd4:	635a      	str	r2, [r3, #52]	@ 0x34
 800ffd6:	e04c      	b.n	8010072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	685b      	ldr	r3, [r3, #4]
 800ffdc:	2b0c      	cmp	r3, #12
 800ffde:	d824      	bhi.n	801002a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	685a      	ldr	r2, [r3, #4]
 800ffea:	4613      	mov	r3, r2
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	4413      	add	r3, r2
 800fff0:	3b23      	subs	r3, #35	@ 0x23
 800fff2:	221f      	movs	r2, #31
 800fff4:	fa02 f303 	lsl.w	r3, r2, r3
 800fff8:	43da      	mvns	r2, r3
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	400a      	ands	r2, r1
 8010000:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	b29b      	uxth	r3, r3
 801000e:	4618      	mov	r0, r3
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	685a      	ldr	r2, [r3, #4]
 8010014:	4613      	mov	r3, r2
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	4413      	add	r3, r2
 801001a:	3b23      	subs	r3, #35	@ 0x23
 801001c:	fa00 f203 	lsl.w	r2, r0, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	430a      	orrs	r2, r1
 8010026:	631a      	str	r2, [r3, #48]	@ 0x30
 8010028:	e023      	b.n	8010072 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8010030:	683b      	ldr	r3, [r7, #0]
 8010032:	685a      	ldr	r2, [r3, #4]
 8010034:	4613      	mov	r3, r2
 8010036:	009b      	lsls	r3, r3, #2
 8010038:	4413      	add	r3, r2
 801003a:	3b41      	subs	r3, #65	@ 0x41
 801003c:	221f      	movs	r2, #31
 801003e:	fa02 f303 	lsl.w	r3, r2, r3
 8010042:	43da      	mvns	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	400a      	ands	r2, r1
 801004a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8010052:	683b      	ldr	r3, [r7, #0]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	b29b      	uxth	r3, r3
 8010058:	4618      	mov	r0, r3
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	685a      	ldr	r2, [r3, #4]
 801005e:	4613      	mov	r3, r2
 8010060:	009b      	lsls	r3, r3, #2
 8010062:	4413      	add	r3, r2
 8010064:	3b41      	subs	r3, #65	@ 0x41
 8010066:	fa00 f203 	lsl.w	r2, r0, r3
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	430a      	orrs	r2, r1
 8010070:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010072:	4b29      	ldr	r3, [pc, #164]	@ (8010118 <HAL_ADC_ConfigChannel+0x250>)
 8010074:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a28      	ldr	r2, [pc, #160]	@ (801011c <HAL_ADC_ConfigChannel+0x254>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d10f      	bne.n	80100a0 <HAL_ADC_ConfigChannel+0x1d8>
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	2b12      	cmp	r3, #18
 8010086:	d10b      	bne.n	80100a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	4a1d      	ldr	r2, [pc, #116]	@ (801011c <HAL_ADC_ConfigChannel+0x254>)
 80100a6:	4293      	cmp	r3, r2
 80100a8:	d12b      	bne.n	8010102 <HAL_ADC_ConfigChannel+0x23a>
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4a1c      	ldr	r2, [pc, #112]	@ (8010120 <HAL_ADC_ConfigChannel+0x258>)
 80100b0:	4293      	cmp	r3, r2
 80100b2:	d003      	beq.n	80100bc <HAL_ADC_ConfigChannel+0x1f4>
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2b11      	cmp	r3, #17
 80100ba:	d122      	bne.n	8010102 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	685b      	ldr	r3, [r3, #4]
 80100c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	4a11      	ldr	r2, [pc, #68]	@ (8010120 <HAL_ADC_ConfigChannel+0x258>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d111      	bne.n	8010102 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80100de:	4b11      	ldr	r3, [pc, #68]	@ (8010124 <HAL_ADC_ConfigChannel+0x25c>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	4a11      	ldr	r2, [pc, #68]	@ (8010128 <HAL_ADC_ConfigChannel+0x260>)
 80100e4:	fba2 2303 	umull	r2, r3, r2, r3
 80100e8:	0c9a      	lsrs	r2, r3, #18
 80100ea:	4613      	mov	r3, r2
 80100ec:	009b      	lsls	r3, r3, #2
 80100ee:	4413      	add	r3, r2
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80100f4:	e002      	b.n	80100fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	3b01      	subs	r3, #1
 80100fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d1f9      	bne.n	80100f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 801010a:	2300      	movs	r3, #0
}
 801010c:	4618      	mov	r0, r3
 801010e:	3714      	adds	r7, #20
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr
 8010118:	40012300 	.word	0x40012300
 801011c:	40012000 	.word	0x40012000
 8010120:	10000012 	.word	0x10000012
 8010124:	200000c0 	.word	0x200000c0
 8010128:	431bde83 	.word	0x431bde83

0801012c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 801012c:	b480      	push	{r7}
 801012e:	b085      	sub	sp, #20
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010134:	4b79      	ldr	r3, [pc, #484]	@ (801031c <ADC_Init+0x1f0>)
 8010136:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	685a      	ldr	r2, [r3, #4]
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	431a      	orrs	r2, r3
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	685a      	ldr	r2, [r3, #4]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010160:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	6859      	ldr	r1, [r3, #4]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	691b      	ldr	r3, [r3, #16]
 801016c:	021a      	lsls	r2, r3, #8
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	430a      	orrs	r2, r1
 8010174:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	685a      	ldr	r2, [r3, #4]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8010184:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	6859      	ldr	r1, [r3, #4]
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	689a      	ldr	r2, [r3, #8]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	430a      	orrs	r2, r1
 8010196:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	689a      	ldr	r2, [r3, #8]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80101a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	6899      	ldr	r1, [r3, #8]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	68da      	ldr	r2, [r3, #12]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	430a      	orrs	r2, r1
 80101b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101be:	4a58      	ldr	r2, [pc, #352]	@ (8010320 <ADC_Init+0x1f4>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d022      	beq.n	801020a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	689a      	ldr	r2, [r3, #8]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80101d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	6899      	ldr	r1, [r3, #8]
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	430a      	orrs	r2, r1
 80101e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	689a      	ldr	r2, [r3, #8]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80101f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	6899      	ldr	r1, [r3, #8]
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	430a      	orrs	r2, r1
 8010206:	609a      	str	r2, [r3, #8]
 8010208:	e00f      	b.n	801022a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	689a      	ldr	r2, [r3, #8]
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8010218:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	689a      	ldr	r2, [r3, #8]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8010228:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	689a      	ldr	r2, [r3, #8]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	f022 0202 	bic.w	r2, r2, #2
 8010238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	6899      	ldr	r1, [r3, #8]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	7e1b      	ldrb	r3, [r3, #24]
 8010244:	005a      	lsls	r2, r3, #1
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	430a      	orrs	r2, r1
 801024c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d01b      	beq.n	8010290 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	685a      	ldr	r2, [r3, #4]
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8010266:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8010276:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	6859      	ldr	r1, [r3, #4]
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010282:	3b01      	subs	r3, #1
 8010284:	035a      	lsls	r2, r3, #13
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	430a      	orrs	r2, r1
 801028c:	605a      	str	r2, [r3, #4]
 801028e:	e007      	b.n	80102a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801029e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80102ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	69db      	ldr	r3, [r3, #28]
 80102ba:	3b01      	subs	r3, #1
 80102bc:	051a      	lsls	r2, r3, #20
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	430a      	orrs	r2, r1
 80102c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	689a      	ldr	r2, [r3, #8]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80102d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	6899      	ldr	r1, [r3, #8]
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80102e2:	025a      	lsls	r2, r3, #9
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	430a      	orrs	r2, r1
 80102ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	689a      	ldr	r2, [r3, #8]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80102fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	6899      	ldr	r1, [r3, #8]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	695b      	ldr	r3, [r3, #20]
 8010306:	029a      	lsls	r2, r3, #10
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	430a      	orrs	r2, r1
 801030e:	609a      	str	r2, [r3, #8]
}
 8010310:	bf00      	nop
 8010312:	3714      	adds	r7, #20
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr
 801031c:	40012300 	.word	0x40012300
 8010320:	0f000001 	.word	0x0f000001

08010324 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b084      	sub	sp, #16
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010330:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010336:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801033a:	2b00      	cmp	r3, #0
 801033c:	d13c      	bne.n	80103b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010342:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	689b      	ldr	r3, [r3, #8]
 8010350:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8010354:	2b00      	cmp	r3, #0
 8010356:	d12b      	bne.n	80103b0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 801035c:	2b00      	cmp	r3, #0
 801035e:	d127      	bne.n	80103b0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010366:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 801036a:	2b00      	cmp	r3, #0
 801036c:	d006      	beq.n	801037c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8010378:	2b00      	cmp	r3, #0
 801037a:	d119      	bne.n	80103b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	685a      	ldr	r2, [r3, #4]
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	f022 0220 	bic.w	r2, r2, #32
 801038a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010390:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801039c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d105      	bne.n	80103b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103a8:	f043 0201 	orr.w	r2, r3, #1
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f004 fcc1 	bl	8014d38 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80103b6:	e00e      	b.n	80103d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80103bc:	f003 0310 	and.w	r3, r3, #16
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d003      	beq.n	80103cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80103c4:	68f8      	ldr	r0, [r7, #12]
 80103c6:	f7ff fd75 	bl	800feb4 <HAL_ADC_ErrorCallback>
}
 80103ca:	e004      	b.n	80103d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	4798      	blx	r3
}
 80103d6:	bf00      	nop
 80103d8:	3710      	adds	r7, #16
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b084      	sub	sp, #16
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ea:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80103ec:	68f8      	ldr	r0, [r7, #12]
 80103ee:	f7ff fd57 	bl	800fea0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80103f2:	bf00      	nop
 80103f4:	3710      	adds	r7, #16
 80103f6:	46bd      	mov	sp, r7
 80103f8:	bd80      	pop	{r7, pc}

080103fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80103fa:	b580      	push	{r7, lr}
 80103fc:	b084      	sub	sp, #16
 80103fe:	af00      	add	r7, sp, #0
 8010400:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010406:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2240      	movs	r2, #64	@ 0x40
 801040c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010412:	f043 0204 	orr.w	r2, r3, #4
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801041a:	68f8      	ldr	r0, [r7, #12]
 801041c:	f7ff fd4a 	bl	800feb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010420:	bf00      	nop
 8010422:	3710      	adds	r7, #16
 8010424:	46bd      	mov	sp, r7
 8010426:	bd80      	pop	{r7, pc}

08010428 <__NVIC_SetPriorityGrouping>:
{
 8010428:	b480      	push	{r7}
 801042a:	b085      	sub	sp, #20
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f003 0307 	and.w	r3, r3, #7
 8010436:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8010438:	4b0c      	ldr	r3, [pc, #48]	@ (801046c <__NVIC_SetPriorityGrouping+0x44>)
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801043e:	68ba      	ldr	r2, [r7, #8]
 8010440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8010444:	4013      	ands	r3, r2
 8010446:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8010450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8010454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801045a:	4a04      	ldr	r2, [pc, #16]	@ (801046c <__NVIC_SetPriorityGrouping+0x44>)
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	60d3      	str	r3, [r2, #12]
}
 8010460:	bf00      	nop
 8010462:	3714      	adds	r7, #20
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr
 801046c:	e000ed00 	.word	0xe000ed00

08010470 <__NVIC_GetPriorityGrouping>:
{
 8010470:	b480      	push	{r7}
 8010472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8010474:	4b04      	ldr	r3, [pc, #16]	@ (8010488 <__NVIC_GetPriorityGrouping+0x18>)
 8010476:	68db      	ldr	r3, [r3, #12]
 8010478:	0a1b      	lsrs	r3, r3, #8
 801047a:	f003 0307 	and.w	r3, r3, #7
}
 801047e:	4618      	mov	r0, r3
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr
 8010488:	e000ed00 	.word	0xe000ed00

0801048c <__NVIC_EnableIRQ>:
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	4603      	mov	r3, r0
 8010494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801049a:	2b00      	cmp	r3, #0
 801049c:	db0b      	blt.n	80104b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801049e:	79fb      	ldrb	r3, [r7, #7]
 80104a0:	f003 021f 	and.w	r2, r3, #31
 80104a4:	4907      	ldr	r1, [pc, #28]	@ (80104c4 <__NVIC_EnableIRQ+0x38>)
 80104a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104aa:	095b      	lsrs	r3, r3, #5
 80104ac:	2001      	movs	r0, #1
 80104ae:	fa00 f202 	lsl.w	r2, r0, r2
 80104b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80104b6:	bf00      	nop
 80104b8:	370c      	adds	r7, #12
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop
 80104c4:	e000e100 	.word	0xe000e100

080104c8 <__NVIC_DisableIRQ>:
{
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	4603      	mov	r3, r0
 80104d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80104d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	db12      	blt.n	8010500 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80104da:	79fb      	ldrb	r3, [r7, #7]
 80104dc:	f003 021f 	and.w	r2, r3, #31
 80104e0:	490a      	ldr	r1, [pc, #40]	@ (801050c <__NVIC_DisableIRQ+0x44>)
 80104e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104e6:	095b      	lsrs	r3, r3, #5
 80104e8:	2001      	movs	r0, #1
 80104ea:	fa00 f202 	lsl.w	r2, r0, r2
 80104ee:	3320      	adds	r3, #32
 80104f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80104f4:	f3bf 8f4f 	dsb	sy
}
 80104f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80104fa:	f3bf 8f6f 	isb	sy
}
 80104fe:	bf00      	nop
}
 8010500:	bf00      	nop
 8010502:	370c      	adds	r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801050a:	4770      	bx	lr
 801050c:	e000e100 	.word	0xe000e100

08010510 <__NVIC_ClearPendingIRQ>:
{
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	4603      	mov	r3, r0
 8010518:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801051a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801051e:	2b00      	cmp	r3, #0
 8010520:	db0c      	blt.n	801053c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010522:	79fb      	ldrb	r3, [r7, #7]
 8010524:	f003 021f 	and.w	r2, r3, #31
 8010528:	4907      	ldr	r1, [pc, #28]	@ (8010548 <__NVIC_ClearPendingIRQ+0x38>)
 801052a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801052e:	095b      	lsrs	r3, r3, #5
 8010530:	2001      	movs	r0, #1
 8010532:	fa00 f202 	lsl.w	r2, r0, r2
 8010536:	3360      	adds	r3, #96	@ 0x60
 8010538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801053c:	bf00      	nop
 801053e:	370c      	adds	r7, #12
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr
 8010548:	e000e100 	.word	0xe000e100

0801054c <__NVIC_SetPriority>:
{
 801054c:	b480      	push	{r7}
 801054e:	b083      	sub	sp, #12
 8010550:	af00      	add	r7, sp, #0
 8010552:	4603      	mov	r3, r0
 8010554:	6039      	str	r1, [r7, #0]
 8010556:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801055c:	2b00      	cmp	r3, #0
 801055e:	db0a      	blt.n	8010576 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	b2da      	uxtb	r2, r3
 8010564:	490c      	ldr	r1, [pc, #48]	@ (8010598 <__NVIC_SetPriority+0x4c>)
 8010566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801056a:	0112      	lsls	r2, r2, #4
 801056c:	b2d2      	uxtb	r2, r2
 801056e:	440b      	add	r3, r1
 8010570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8010574:	e00a      	b.n	801058c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	b2da      	uxtb	r2, r3
 801057a:	4908      	ldr	r1, [pc, #32]	@ (801059c <__NVIC_SetPriority+0x50>)
 801057c:	79fb      	ldrb	r3, [r7, #7]
 801057e:	f003 030f 	and.w	r3, r3, #15
 8010582:	3b04      	subs	r3, #4
 8010584:	0112      	lsls	r2, r2, #4
 8010586:	b2d2      	uxtb	r2, r2
 8010588:	440b      	add	r3, r1
 801058a:	761a      	strb	r2, [r3, #24]
}
 801058c:	bf00      	nop
 801058e:	370c      	adds	r7, #12
 8010590:	46bd      	mov	sp, r7
 8010592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010596:	4770      	bx	lr
 8010598:	e000e100 	.word	0xe000e100
 801059c:	e000ed00 	.word	0xe000ed00

080105a0 <NVIC_EncodePriority>:
{
 80105a0:	b480      	push	{r7}
 80105a2:	b089      	sub	sp, #36	@ 0x24
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	60f8      	str	r0, [r7, #12]
 80105a8:	60b9      	str	r1, [r7, #8]
 80105aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f003 0307 	and.w	r3, r3, #7
 80105b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80105b4:	69fb      	ldr	r3, [r7, #28]
 80105b6:	f1c3 0307 	rsb	r3, r3, #7
 80105ba:	2b04      	cmp	r3, #4
 80105bc:	bf28      	it	cs
 80105be:	2304      	movcs	r3, #4
 80105c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80105c2:	69fb      	ldr	r3, [r7, #28]
 80105c4:	3304      	adds	r3, #4
 80105c6:	2b06      	cmp	r3, #6
 80105c8:	d902      	bls.n	80105d0 <NVIC_EncodePriority+0x30>
 80105ca:	69fb      	ldr	r3, [r7, #28]
 80105cc:	3b03      	subs	r3, #3
 80105ce:	e000      	b.n	80105d2 <NVIC_EncodePriority+0x32>
 80105d0:	2300      	movs	r3, #0
 80105d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80105d4:	f04f 32ff 	mov.w	r2, #4294967295
 80105d8:	69bb      	ldr	r3, [r7, #24]
 80105da:	fa02 f303 	lsl.w	r3, r2, r3
 80105de:	43da      	mvns	r2, r3
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	401a      	ands	r2, r3
 80105e4:	697b      	ldr	r3, [r7, #20]
 80105e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80105e8:	f04f 31ff 	mov.w	r1, #4294967295
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	fa01 f303 	lsl.w	r3, r1, r3
 80105f2:	43d9      	mvns	r1, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80105f8:	4313      	orrs	r3, r2
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	3724      	adds	r7, #36	@ 0x24
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr
	...

08010608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	3b01      	subs	r3, #1
 8010614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010618:	d301      	bcc.n	801061e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801061a:	2301      	movs	r3, #1
 801061c:	e00f      	b.n	801063e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801061e:	4a0a      	ldr	r2, [pc, #40]	@ (8010648 <SysTick_Config+0x40>)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	3b01      	subs	r3, #1
 8010624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8010626:	210f      	movs	r1, #15
 8010628:	f04f 30ff 	mov.w	r0, #4294967295
 801062c:	f7ff ff8e 	bl	801054c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010630:	4b05      	ldr	r3, [pc, #20]	@ (8010648 <SysTick_Config+0x40>)
 8010632:	2200      	movs	r2, #0
 8010634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010636:	4b04      	ldr	r3, [pc, #16]	@ (8010648 <SysTick_Config+0x40>)
 8010638:	2207      	movs	r2, #7
 801063a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801063c:	2300      	movs	r3, #0
}
 801063e:	4618      	mov	r0, r3
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	e000e010 	.word	0xe000e010

0801064c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b082      	sub	sp, #8
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f7ff fee7 	bl	8010428 <__NVIC_SetPriorityGrouping>
}
 801065a:	bf00      	nop
 801065c:	3708      	adds	r7, #8
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}

08010662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010662:	b580      	push	{r7, lr}
 8010664:	b086      	sub	sp, #24
 8010666:	af00      	add	r7, sp, #0
 8010668:	4603      	mov	r3, r0
 801066a:	60b9      	str	r1, [r7, #8]
 801066c:	607a      	str	r2, [r7, #4]
 801066e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8010670:	2300      	movs	r3, #0
 8010672:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8010674:	f7ff fefc 	bl	8010470 <__NVIC_GetPriorityGrouping>
 8010678:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801067a:	687a      	ldr	r2, [r7, #4]
 801067c:	68b9      	ldr	r1, [r7, #8]
 801067e:	6978      	ldr	r0, [r7, #20]
 8010680:	f7ff ff8e 	bl	80105a0 <NVIC_EncodePriority>
 8010684:	4602      	mov	r2, r0
 8010686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801068a:	4611      	mov	r1, r2
 801068c:	4618      	mov	r0, r3
 801068e:	f7ff ff5d 	bl	801054c <__NVIC_SetPriority>
}
 8010692:	bf00      	nop
 8010694:	3718      	adds	r7, #24
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}

0801069a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801069a:	b580      	push	{r7, lr}
 801069c:	b082      	sub	sp, #8
 801069e:	af00      	add	r7, sp, #0
 80106a0:	4603      	mov	r3, r0
 80106a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80106a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7ff feef 	bl	801048c <__NVIC_EnableIRQ>
}
 80106ae:	bf00      	nop
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b082      	sub	sp, #8
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	4603      	mov	r3, r0
 80106be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80106c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106c4:	4618      	mov	r0, r3
 80106c6:	f7ff feff 	bl	80104c8 <__NVIC_DisableIRQ>
}
 80106ca:	bf00      	nop
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}

080106d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80106d2:	b580      	push	{r7, lr}
 80106d4:	b082      	sub	sp, #8
 80106d6:	af00      	add	r7, sp, #0
 80106d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7ff ff94 	bl	8010608 <SysTick_Config>
 80106e0:	4603      	mov	r3, r0
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3708      	adds	r7, #8
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}

080106ea <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80106ea:	b580      	push	{r7, lr}
 80106ec:	b082      	sub	sp, #8
 80106ee:	af00      	add	r7, sp, #0
 80106f0:	4603      	mov	r3, r0
 80106f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80106f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7ff ff09 	bl	8010510 <__NVIC_ClearPendingIRQ>
}
 80106fe:	bf00      	nop
 8010700:	3708      	adds	r7, #8
 8010702:	46bd      	mov	sp, r7
 8010704:	bd80      	pop	{r7, pc}

08010706 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8010706:	b580      	push	{r7, lr}
 8010708:	b082      	sub	sp, #8
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d101      	bne.n	8010718 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8010714:	2301      	movs	r3, #1
 8010716:	e00e      	b.n	8010736 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	795b      	ldrb	r3, [r3, #5]
 801071c:	b2db      	uxtb	r3, r3
 801071e:	2b00      	cmp	r3, #0
 8010720:	d105      	bne.n	801072e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	2200      	movs	r2, #0
 8010726:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8010728:	6878      	ldr	r0, [r7, #4]
 801072a:	f7fe ff81 	bl	800f630 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2201      	movs	r2, #1
 8010732:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8010734:	2300      	movs	r3, #0
}
 8010736:	4618      	mov	r0, r3
 8010738:	3708      	adds	r7, #8
 801073a:	46bd      	mov	sp, r7
 801073c:	bd80      	pop	{r7, pc}
	...

08010740 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b086      	sub	sp, #24
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8010748:	2300      	movs	r3, #0
 801074a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 801074c:	f7ff fa20 	bl	800fb90 <HAL_GetTick>
 8010750:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d101      	bne.n	801075c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8010758:	2301      	movs	r3, #1
 801075a:	e099      	b.n	8010890 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2202      	movs	r2, #2
 8010760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	681a      	ldr	r2, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f022 0201 	bic.w	r2, r2, #1
 801077a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801077c:	e00f      	b.n	801079e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801077e:	f7ff fa07 	bl	800fb90 <HAL_GetTick>
 8010782:	4602      	mov	r2, r0
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	2b05      	cmp	r3, #5
 801078a:	d908      	bls.n	801079e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2220      	movs	r2, #32
 8010790:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2203      	movs	r2, #3
 8010796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 801079a:	2303      	movs	r3, #3
 801079c:	e078      	b.n	8010890 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f003 0301 	and.w	r3, r3, #1
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1e8      	bne.n	801077e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80107b4:	697a      	ldr	r2, [r7, #20]
 80107b6:	4b38      	ldr	r3, [pc, #224]	@ (8010898 <HAL_DMA_Init+0x158>)
 80107b8:	4013      	ands	r3, r2
 80107ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	685a      	ldr	r2, [r3, #4]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	689b      	ldr	r3, [r3, #8]
 80107c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80107ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	691b      	ldr	r3, [r3, #16]
 80107d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80107d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	699b      	ldr	r3, [r3, #24]
 80107dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80107e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	6a1b      	ldr	r3, [r3, #32]
 80107e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80107ea:	697a      	ldr	r2, [r7, #20]
 80107ec:	4313      	orrs	r3, r2
 80107ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107f4:	2b04      	cmp	r3, #4
 80107f6:	d107      	bne.n	8010808 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010800:	4313      	orrs	r3, r2
 8010802:	697a      	ldr	r2, [r7, #20]
 8010804:	4313      	orrs	r3, r2
 8010806:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	697a      	ldr	r2, [r7, #20]
 801080e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	695b      	ldr	r3, [r3, #20]
 8010816:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	f023 0307 	bic.w	r3, r3, #7
 801081e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010824:	697a      	ldr	r2, [r7, #20]
 8010826:	4313      	orrs	r3, r2
 8010828:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801082e:	2b04      	cmp	r3, #4
 8010830:	d117      	bne.n	8010862 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010836:	697a      	ldr	r2, [r7, #20]
 8010838:	4313      	orrs	r3, r2
 801083a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010840:	2b00      	cmp	r3, #0
 8010842:	d00e      	beq.n	8010862 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f000 fb01 	bl	8010e4c <DMA_CheckFifoParam>
 801084a:	4603      	mov	r3, r0
 801084c:	2b00      	cmp	r3, #0
 801084e:	d008      	beq.n	8010862 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2240      	movs	r2, #64	@ 0x40
 8010854:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2201      	movs	r2, #1
 801085a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 801085e:	2301      	movs	r3, #1
 8010860:	e016      	b.n	8010890 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	697a      	ldr	r2, [r7, #20]
 8010868:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f000 fab8 	bl	8010de0 <DMA_CalcBaseAndBitshift>
 8010870:	4603      	mov	r3, r0
 8010872:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010878:	223f      	movs	r2, #63	@ 0x3f
 801087a:	409a      	lsls	r2, r3
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	2200      	movs	r2, #0
 8010884:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	2201      	movs	r2, #1
 801088a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3718      	adds	r7, #24
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	f010803f 	.word	0xf010803f

0801089c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b086      	sub	sp, #24
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	607a      	str	r2, [r7, #4]
 80108a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80108aa:	2300      	movs	r3, #0
 80108ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80108ba:	2b01      	cmp	r3, #1
 80108bc:	d101      	bne.n	80108c2 <HAL_DMA_Start_IT+0x26>
 80108be:	2302      	movs	r3, #2
 80108c0:	e040      	b.n	8010944 <HAL_DMA_Start_IT+0xa8>
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	2201      	movs	r2, #1
 80108c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	2b01      	cmp	r3, #1
 80108d4:	d12f      	bne.n	8010936 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2202      	movs	r2, #2
 80108da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2200      	movs	r2, #0
 80108e2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	687a      	ldr	r2, [r7, #4]
 80108e8:	68b9      	ldr	r1, [r7, #8]
 80108ea:	68f8      	ldr	r0, [r7, #12]
 80108ec:	f000 fa4a 	bl	8010d84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80108f4:	223f      	movs	r2, #63	@ 0x3f
 80108f6:	409a      	lsls	r2, r3
 80108f8:	693b      	ldr	r3, [r7, #16]
 80108fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f042 0216 	orr.w	r2, r2, #22
 801090a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010910:	2b00      	cmp	r3, #0
 8010912:	d007      	beq.n	8010924 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	681a      	ldr	r2, [r3, #0]
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	f042 0208 	orr.w	r2, r2, #8
 8010922:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	681a      	ldr	r2, [r3, #0]
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f042 0201 	orr.w	r2, r2, #1
 8010932:	601a      	str	r2, [r3, #0]
 8010934:	e005      	b.n	8010942 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2200      	movs	r2, #0
 801093a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 801093e:	2302      	movs	r3, #2
 8010940:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8010942:	7dfb      	ldrb	r3, [r7, #23]
}
 8010944:	4618      	mov	r0, r3
 8010946:	3718      	adds	r7, #24
 8010948:	46bd      	mov	sp, r7
 801094a:	bd80      	pop	{r7, pc}

0801094c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b084      	sub	sp, #16
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010958:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801095a:	f7ff f919 	bl	800fb90 <HAL_GetTick>
 801095e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010966:	b2db      	uxtb	r3, r3
 8010968:	2b02      	cmp	r3, #2
 801096a:	d008      	beq.n	801097e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2280      	movs	r2, #128	@ 0x80
 8010970:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 801097a:	2301      	movs	r3, #1
 801097c:	e052      	b.n	8010a24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f022 0216 	bic.w	r2, r2, #22
 801098c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	695a      	ldr	r2, [r3, #20]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801099c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d103      	bne.n	80109ae <HAL_DMA_Abort+0x62>
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d007      	beq.n	80109be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f022 0208 	bic.w	r2, r2, #8
 80109bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	681a      	ldr	r2, [r3, #0]
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	f022 0201 	bic.w	r2, r2, #1
 80109cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80109ce:	e013      	b.n	80109f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80109d0:	f7ff f8de 	bl	800fb90 <HAL_GetTick>
 80109d4:	4602      	mov	r2, r0
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	1ad3      	subs	r3, r2, r3
 80109da:	2b05      	cmp	r3, #5
 80109dc:	d90c      	bls.n	80109f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2220      	movs	r2, #32
 80109e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2203      	movs	r2, #3
 80109e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2200      	movs	r2, #0
 80109f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80109f4:	2303      	movs	r3, #3
 80109f6:	e015      	b.n	8010a24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	f003 0301 	and.w	r3, r3, #1
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1e4      	bne.n	80109d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a0a:	223f      	movs	r2, #63	@ 0x3f
 8010a0c:	409a      	lsls	r2, r3
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	2201      	movs	r2, #1
 8010a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8010a22:	2300      	movs	r3, #0
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3710      	adds	r7, #16
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b083      	sub	sp, #12
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010a3a:	b2db      	uxtb	r3, r3
 8010a3c:	2b02      	cmp	r3, #2
 8010a3e:	d004      	beq.n	8010a4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	2280      	movs	r2, #128	@ 0x80
 8010a44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8010a46:	2301      	movs	r3, #1
 8010a48:	e00c      	b.n	8010a64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	2205      	movs	r2, #5
 8010a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	681a      	ldr	r2, [r3, #0]
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	f022 0201 	bic.w	r2, r2, #1
 8010a60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010a62:	2300      	movs	r3, #0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	370c      	adds	r7, #12
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a6e:	4770      	bx	lr

08010a70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b086      	sub	sp, #24
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8010a7c:	4b8e      	ldr	r3, [pc, #568]	@ (8010cb8 <HAL_DMA_IRQHandler+0x248>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4a8e      	ldr	r2, [pc, #568]	@ (8010cbc <HAL_DMA_IRQHandler+0x24c>)
 8010a82:	fba2 2303 	umull	r2, r3, r2, r3
 8010a86:	0a9b      	lsrs	r3, r3, #10
 8010a88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8010a90:	693b      	ldr	r3, [r7, #16]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010a9a:	2208      	movs	r2, #8
 8010a9c:	409a      	lsls	r2, r3
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d01a      	beq.n	8010adc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f003 0304 	and.w	r3, r3, #4
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d013      	beq.n	8010adc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	681a      	ldr	r2, [r3, #0]
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	f022 0204 	bic.w	r2, r2, #4
 8010ac2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ac8:	2208      	movs	r2, #8
 8010aca:	409a      	lsls	r2, r3
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010ad4:	f043 0201 	orr.w	r2, r3, #1
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	409a      	lsls	r2, r3
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	4013      	ands	r3, r2
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d012      	beq.n	8010b12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	695b      	ldr	r3, [r3, #20]
 8010af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d00b      	beq.n	8010b12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010afe:	2201      	movs	r2, #1
 8010b00:	409a      	lsls	r2, r3
 8010b02:	693b      	ldr	r3, [r7, #16]
 8010b04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b0a:	f043 0202 	orr.w	r2, r3, #2
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b16:	2204      	movs	r2, #4
 8010b18:	409a      	lsls	r2, r3
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	4013      	ands	r3, r2
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d012      	beq.n	8010b48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f003 0302 	and.w	r3, r3, #2
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d00b      	beq.n	8010b48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b34:	2204      	movs	r2, #4
 8010b36:	409a      	lsls	r2, r3
 8010b38:	693b      	ldr	r3, [r7, #16]
 8010b3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b40:	f043 0204 	orr.w	r2, r3, #4
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b4c:	2210      	movs	r2, #16
 8010b4e:	409a      	lsls	r2, r3
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	4013      	ands	r3, r2
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d043      	beq.n	8010be0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f003 0308 	and.w	r3, r3, #8
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d03c      	beq.n	8010be0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010b6a:	2210      	movs	r2, #16
 8010b6c:	409a      	lsls	r2, r3
 8010b6e:	693b      	ldr	r3, [r7, #16]
 8010b70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d018      	beq.n	8010bb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d108      	bne.n	8010ba0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d024      	beq.n	8010be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	4798      	blx	r3
 8010b9e:	e01f      	b.n	8010be0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d01b      	beq.n	8010be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010bac:	6878      	ldr	r0, [r7, #4]
 8010bae:	4798      	blx	r3
 8010bb0:	e016      	b.n	8010be0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d107      	bne.n	8010bd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	681a      	ldr	r2, [r3, #0]
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	f022 0208 	bic.w	r2, r2, #8
 8010bce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d003      	beq.n	8010be0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010be4:	2220      	movs	r2, #32
 8010be6:	409a      	lsls	r2, r3
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	4013      	ands	r3, r2
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f000 808f 	beq.w	8010d10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f003 0310 	and.w	r3, r3, #16
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	f000 8087 	beq.w	8010d10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c06:	2220      	movs	r2, #32
 8010c08:	409a      	lsls	r2, r3
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8010c14:	b2db      	uxtb	r3, r3
 8010c16:	2b05      	cmp	r3, #5
 8010c18:	d136      	bne.n	8010c88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f022 0216 	bic.w	r2, r2, #22
 8010c28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	695a      	ldr	r2, [r3, #20]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010c38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d103      	bne.n	8010c4a <HAL_DMA_IRQHandler+0x1da>
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d007      	beq.n	8010c5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	681a      	ldr	r2, [r3, #0]
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f022 0208 	bic.w	r2, r2, #8
 8010c58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010c5e:	223f      	movs	r2, #63	@ 0x3f
 8010c60:	409a      	lsls	r2, r3
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2201      	movs	r2, #1
 8010c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2200      	movs	r2, #0
 8010c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d07e      	beq.n	8010d7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	4798      	blx	r3
        }
        return;
 8010c86:	e079      	b.n	8010d7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d01d      	beq.n	8010cd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10d      	bne.n	8010cc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d031      	beq.n	8010d10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	4798      	blx	r3
 8010cb4:	e02c      	b.n	8010d10 <HAL_DMA_IRQHandler+0x2a0>
 8010cb6:	bf00      	nop
 8010cb8:	200000c0 	.word	0x200000c0
 8010cbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d023      	beq.n	8010d10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ccc:	6878      	ldr	r0, [r7, #4]
 8010cce:	4798      	blx	r3
 8010cd0:	e01e      	b.n	8010d10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d10f      	bne.n	8010d00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	681a      	ldr	r2, [r3, #0]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	f022 0210 	bic.w	r2, r2, #16
 8010cee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d003      	beq.n	8010d10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d032      	beq.n	8010d7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d1c:	f003 0301 	and.w	r3, r3, #1
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d022      	beq.n	8010d6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2205      	movs	r2, #5
 8010d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	681a      	ldr	r2, [r3, #0]
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	f022 0201 	bic.w	r2, r2, #1
 8010d3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	3301      	adds	r3, #1
 8010d40:	60bb      	str	r3, [r7, #8]
 8010d42:	697a      	ldr	r2, [r7, #20]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d307      	bcc.n	8010d58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f003 0301 	and.w	r3, r3, #1
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d1f2      	bne.n	8010d3c <HAL_DMA_IRQHandler+0x2cc>
 8010d56:	e000      	b.n	8010d5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8010d58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	2200      	movs	r2, #0
 8010d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d005      	beq.n	8010d7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010d76:	6878      	ldr	r0, [r7, #4]
 8010d78:	4798      	blx	r3
 8010d7a:	e000      	b.n	8010d7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8010d7c:	bf00      	nop
    }
  }
}
 8010d7e:	3718      	adds	r7, #24
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b085      	sub	sp, #20
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	607a      	str	r2, [r7, #4]
 8010d90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	681a      	ldr	r2, [r3, #0]
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8010da0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	683a      	ldr	r2, [r7, #0]
 8010da8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	689b      	ldr	r3, [r3, #8]
 8010dae:	2b40      	cmp	r3, #64	@ 0x40
 8010db0:	d108      	bne.n	8010dc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	68ba      	ldr	r2, [r7, #8]
 8010dc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8010dc2:	e007      	b.n	8010dd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	68ba      	ldr	r2, [r7, #8]
 8010dca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	60da      	str	r2, [r3, #12]
}
 8010dd4:	bf00      	nop
 8010dd6:	3714      	adds	r7, #20
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr

08010de0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	3b10      	subs	r3, #16
 8010df0:	4a14      	ldr	r2, [pc, #80]	@ (8010e44 <DMA_CalcBaseAndBitshift+0x64>)
 8010df2:	fba2 2303 	umull	r2, r3, r2, r3
 8010df6:	091b      	lsrs	r3, r3, #4
 8010df8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8010dfa:	4a13      	ldr	r2, [pc, #76]	@ (8010e48 <DMA_CalcBaseAndBitshift+0x68>)
 8010dfc:	68fb      	ldr	r3, [r7, #12]
 8010dfe:	4413      	add	r3, r2
 8010e00:	781b      	ldrb	r3, [r3, #0]
 8010e02:	461a      	mov	r2, r3
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	2b03      	cmp	r3, #3
 8010e0c:	d909      	bls.n	8010e22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8010e16:	f023 0303 	bic.w	r3, r3, #3
 8010e1a:	1d1a      	adds	r2, r3, #4
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8010e20:	e007      	b.n	8010e32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8010e2a:	f023 0303 	bic.w	r3, r3, #3
 8010e2e:	687a      	ldr	r2, [r7, #4]
 8010e30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8010e36:	4618      	mov	r0, r3
 8010e38:	3714      	adds	r7, #20
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e40:	4770      	bx	lr
 8010e42:	bf00      	nop
 8010e44:	aaaaaaab 	.word	0xaaaaaaab
 8010e48:	08015320 	.word	0x08015320

08010e4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8010e4c:	b480      	push	{r7}
 8010e4e:	b085      	sub	sp, #20
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010e54:	2300      	movs	r3, #0
 8010e56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	699b      	ldr	r3, [r3, #24]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d11f      	bne.n	8010ea6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8010e66:	68bb      	ldr	r3, [r7, #8]
 8010e68:	2b03      	cmp	r3, #3
 8010e6a:	d856      	bhi.n	8010f1a <DMA_CheckFifoParam+0xce>
 8010e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8010e74 <DMA_CheckFifoParam+0x28>)
 8010e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e72:	bf00      	nop
 8010e74:	08010e85 	.word	0x08010e85
 8010e78:	08010e97 	.word	0x08010e97
 8010e7c:	08010e85 	.word	0x08010e85
 8010e80:	08010f1b 	.word	0x08010f1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d046      	beq.n	8010f1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8010e90:	2301      	movs	r3, #1
 8010e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010e94:	e043      	b.n	8010f1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8010e9e:	d140      	bne.n	8010f22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8010ea0:	2301      	movs	r3, #1
 8010ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010ea4:	e03d      	b.n	8010f22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	699b      	ldr	r3, [r3, #24]
 8010eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010eae:	d121      	bne.n	8010ef4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	2b03      	cmp	r3, #3
 8010eb4:	d837      	bhi.n	8010f26 <DMA_CheckFifoParam+0xda>
 8010eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8010ebc <DMA_CheckFifoParam+0x70>)
 8010eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ebc:	08010ecd 	.word	0x08010ecd
 8010ec0:	08010ed3 	.word	0x08010ed3
 8010ec4:	08010ecd 	.word	0x08010ecd
 8010ec8:	08010ee5 	.word	0x08010ee5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8010ecc:	2301      	movs	r3, #1
 8010ece:	73fb      	strb	r3, [r7, #15]
      break;
 8010ed0:	e030      	b.n	8010f34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ed6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d025      	beq.n	8010f2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8010ede:	2301      	movs	r3, #1
 8010ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010ee2:	e022      	b.n	8010f2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ee8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8010eec:	d11f      	bne.n	8010f2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8010eee:	2301      	movs	r3, #1
 8010ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8010ef2:	e01c      	b.n	8010f2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8010ef4:	68bb      	ldr	r3, [r7, #8]
 8010ef6:	2b02      	cmp	r3, #2
 8010ef8:	d903      	bls.n	8010f02 <DMA_CheckFifoParam+0xb6>
 8010efa:	68bb      	ldr	r3, [r7, #8]
 8010efc:	2b03      	cmp	r3, #3
 8010efe:	d003      	beq.n	8010f08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8010f00:	e018      	b.n	8010f34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8010f02:	2301      	movs	r3, #1
 8010f04:	73fb      	strb	r3, [r7, #15]
      break;
 8010f06:	e015      	b.n	8010f34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d00e      	beq.n	8010f32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8010f14:	2301      	movs	r3, #1
 8010f16:	73fb      	strb	r3, [r7, #15]
      break;
 8010f18:	e00b      	b.n	8010f32 <DMA_CheckFifoParam+0xe6>
      break;
 8010f1a:	bf00      	nop
 8010f1c:	e00a      	b.n	8010f34 <DMA_CheckFifoParam+0xe8>
      break;
 8010f1e:	bf00      	nop
 8010f20:	e008      	b.n	8010f34 <DMA_CheckFifoParam+0xe8>
      break;
 8010f22:	bf00      	nop
 8010f24:	e006      	b.n	8010f34 <DMA_CheckFifoParam+0xe8>
      break;
 8010f26:	bf00      	nop
 8010f28:	e004      	b.n	8010f34 <DMA_CheckFifoParam+0xe8>
      break;
 8010f2a:	bf00      	nop
 8010f2c:	e002      	b.n	8010f34 <DMA_CheckFifoParam+0xe8>
      break;   
 8010f2e:	bf00      	nop
 8010f30:	e000      	b.n	8010f34 <DMA_CheckFifoParam+0xe8>
      break;
 8010f32:	bf00      	nop
    }
  } 
  
  return status; 
 8010f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3714      	adds	r7, #20
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop

08010f44 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b086      	sub	sp, #24
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	60f8      	str	r0, [r7, #12]
 8010f4c:	60b9      	str	r1, [r7, #8]
 8010f4e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8010f52:	4b23      	ldr	r3, [pc, #140]	@ (8010fe0 <HAL_FLASH_Program+0x9c>)
 8010f54:	7e1b      	ldrb	r3, [r3, #24]
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d101      	bne.n	8010f5e <HAL_FLASH_Program+0x1a>
 8010f5a:	2302      	movs	r3, #2
 8010f5c:	e03b      	b.n	8010fd6 <HAL_FLASH_Program+0x92>
 8010f5e:	4b20      	ldr	r3, [pc, #128]	@ (8010fe0 <HAL_FLASH_Program+0x9c>)
 8010f60:	2201      	movs	r2, #1
 8010f62:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010f64:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8010f68:	f000 f870 	bl	801104c <FLASH_WaitForLastOperation>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8010f70:	7dfb      	ldrb	r3, [r7, #23]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d12b      	bne.n	8010fce <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d105      	bne.n	8010f88 <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8010f7c:	783b      	ldrb	r3, [r7, #0]
 8010f7e:	4619      	mov	r1, r3
 8010f80:	68b8      	ldr	r0, [r7, #8]
 8010f82:	f000 f91b 	bl	80111bc <FLASH_Program_Byte>
 8010f86:	e016      	b.n	8010fb6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d105      	bne.n	8010f9a <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8010f8e:	883b      	ldrh	r3, [r7, #0]
 8010f90:	4619      	mov	r1, r3
 8010f92:	68b8      	ldr	r0, [r7, #8]
 8010f94:	f000 f8ee 	bl	8011174 <FLASH_Program_HalfWord>
 8010f98:	e00d      	b.n	8010fb6 <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2b02      	cmp	r3, #2
 8010f9e:	d105      	bne.n	8010fac <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	4619      	mov	r1, r3
 8010fa4:	68b8      	ldr	r0, [r7, #8]
 8010fa6:	f000 f8c3 	bl	8011130 <FLASH_Program_Word>
 8010faa:	e004      	b.n	8010fb6 <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8010fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fb0:	68b8      	ldr	r0, [r7, #8]
 8010fb2:	f000 f88b 	bl	80110cc <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8010fb6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8010fba:	f000 f847 	bl	801104c <FLASH_WaitForLastOperation>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8010fc2:	4b08      	ldr	r3, [pc, #32]	@ (8010fe4 <HAL_FLASH_Program+0xa0>)
 8010fc4:	691b      	ldr	r3, [r3, #16]
 8010fc6:	4a07      	ldr	r2, [pc, #28]	@ (8010fe4 <HAL_FLASH_Program+0xa0>)
 8010fc8:	f023 0301 	bic.w	r3, r3, #1
 8010fcc:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8010fce:	4b04      	ldr	r3, [pc, #16]	@ (8010fe0 <HAL_FLASH_Program+0x9c>)
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	761a      	strb	r2, [r3, #24]

  return status;
 8010fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3718      	adds	r7, #24
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	20000b28 	.word	0x20000b28
 8010fe4:	40023c00 	.word	0x40023c00

08010fe8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8010fe8:	b480      	push	{r7}
 8010fea:	b083      	sub	sp, #12
 8010fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8010ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8011020 <HAL_FLASH_Unlock+0x38>)
 8010ff4:	691b      	ldr	r3, [r3, #16]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	da0b      	bge.n	8011012 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8010ffa:	4b09      	ldr	r3, [pc, #36]	@ (8011020 <HAL_FLASH_Unlock+0x38>)
 8010ffc:	4a09      	ldr	r2, [pc, #36]	@ (8011024 <HAL_FLASH_Unlock+0x3c>)
 8010ffe:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011000:	4b07      	ldr	r3, [pc, #28]	@ (8011020 <HAL_FLASH_Unlock+0x38>)
 8011002:	4a09      	ldr	r2, [pc, #36]	@ (8011028 <HAL_FLASH_Unlock+0x40>)
 8011004:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8011006:	4b06      	ldr	r3, [pc, #24]	@ (8011020 <HAL_FLASH_Unlock+0x38>)
 8011008:	691b      	ldr	r3, [r3, #16]
 801100a:	2b00      	cmp	r3, #0
 801100c:	da01      	bge.n	8011012 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801100e:	2301      	movs	r3, #1
 8011010:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8011012:	79fb      	ldrb	r3, [r7, #7]
}
 8011014:	4618      	mov	r0, r3
 8011016:	370c      	adds	r7, #12
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr
 8011020:	40023c00 	.word	0x40023c00
 8011024:	45670123 	.word	0x45670123
 8011028:	cdef89ab 	.word	0xcdef89ab

0801102c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801102c:	b480      	push	{r7}
 801102e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8011030:	4b05      	ldr	r3, [pc, #20]	@ (8011048 <HAL_FLASH_Lock+0x1c>)
 8011032:	691b      	ldr	r3, [r3, #16]
 8011034:	4a04      	ldr	r2, [pc, #16]	@ (8011048 <HAL_FLASH_Lock+0x1c>)
 8011036:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801103a:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 801103c:	2300      	movs	r3, #0
}
 801103e:	4618      	mov	r0, r3
 8011040:	46bd      	mov	sp, r7
 8011042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011046:	4770      	bx	lr
 8011048:	40023c00 	.word	0x40023c00

0801104c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8011054:	2300      	movs	r3, #0
 8011056:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011058:	4b1a      	ldr	r3, [pc, #104]	@ (80110c4 <FLASH_WaitForLastOperation+0x78>)
 801105a:	2200      	movs	r2, #0
 801105c:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 801105e:	f7fe fd97 	bl	800fb90 <HAL_GetTick>
 8011062:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8011064:	e010      	b.n	8011088 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	f1b3 3fff 	cmp.w	r3, #4294967295
 801106c:	d00c      	beq.n	8011088 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d007      	beq.n	8011084 <FLASH_WaitForLastOperation+0x38>
 8011074:	f7fe fd8c 	bl	800fb90 <HAL_GetTick>
 8011078:	4602      	mov	r2, r0
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	1ad3      	subs	r3, r2, r3
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	429a      	cmp	r2, r3
 8011082:	d201      	bcs.n	8011088 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8011084:	2303      	movs	r3, #3
 8011086:	e019      	b.n	80110bc <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8011088:	4b0f      	ldr	r3, [pc, #60]	@ (80110c8 <FLASH_WaitForLastOperation+0x7c>)
 801108a:	68db      	ldr	r3, [r3, #12]
 801108c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011090:	2b00      	cmp	r3, #0
 8011092:	d1e8      	bne.n	8011066 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8011094:	4b0c      	ldr	r3, [pc, #48]	@ (80110c8 <FLASH_WaitForLastOperation+0x7c>)
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	f003 0301 	and.w	r3, r3, #1
 801109c:	2b00      	cmp	r3, #0
 801109e:	d002      	beq.n	80110a6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80110a0:	4b09      	ldr	r3, [pc, #36]	@ (80110c8 <FLASH_WaitForLastOperation+0x7c>)
 80110a2:	2201      	movs	r2, #1
 80110a4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80110a6:	4b08      	ldr	r3, [pc, #32]	@ (80110c8 <FLASH_WaitForLastOperation+0x7c>)
 80110a8:	68db      	ldr	r3, [r3, #12]
 80110aa:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d003      	beq.n	80110ba <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80110b2:	f000 f8a5 	bl	8011200 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80110b6:	2301      	movs	r3, #1
 80110b8:	e000      	b.n	80110bc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80110ba:	2300      	movs	r3, #0

}
 80110bc:	4618      	mov	r0, r3
 80110be:	3710      	adds	r7, #16
 80110c0:	46bd      	mov	sp, r7
 80110c2:	bd80      	pop	{r7, pc}
 80110c4:	20000b28 	.word	0x20000b28
 80110c8:	40023c00 	.word	0x40023c00

080110cc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b085      	sub	sp, #20
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80110d8:	4b14      	ldr	r3, [pc, #80]	@ (801112c <FLASH_Program_DoubleWord+0x60>)
 80110da:	691b      	ldr	r3, [r3, #16]
 80110dc:	4a13      	ldr	r2, [pc, #76]	@ (801112c <FLASH_Program_DoubleWord+0x60>)
 80110de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80110e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80110e4:	4b11      	ldr	r3, [pc, #68]	@ (801112c <FLASH_Program_DoubleWord+0x60>)
 80110e6:	691b      	ldr	r3, [r3, #16]
 80110e8:	4a10      	ldr	r2, [pc, #64]	@ (801112c <FLASH_Program_DoubleWord+0x60>)
 80110ea:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80110ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80110f0:	4b0e      	ldr	r3, [pc, #56]	@ (801112c <FLASH_Program_DoubleWord+0x60>)
 80110f2:	691b      	ldr	r3, [r3, #16]
 80110f4:	4a0d      	ldr	r2, [pc, #52]	@ (801112c <FLASH_Program_DoubleWord+0x60>)
 80110f6:	f043 0301 	orr.w	r3, r3, #1
 80110fa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	683a      	ldr	r2, [r7, #0]
 8011100:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8011102:	f3bf 8f6f 	isb	sy
}
 8011106:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8011108:	e9d7 0100 	ldrd	r0, r1, [r7]
 801110c:	f04f 0200 	mov.w	r2, #0
 8011110:	f04f 0300 	mov.w	r3, #0
 8011114:	000a      	movs	r2, r1
 8011116:	2300      	movs	r3, #0
 8011118:	68f9      	ldr	r1, [r7, #12]
 801111a:	3104      	adds	r1, #4
 801111c:	4613      	mov	r3, r2
 801111e:	600b      	str	r3, [r1, #0]
}
 8011120:	bf00      	nop
 8011122:	3714      	adds	r7, #20
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr
 801112c:	40023c00 	.word	0x40023c00

08011130 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801113a:	4b0d      	ldr	r3, [pc, #52]	@ (8011170 <FLASH_Program_Word+0x40>)
 801113c:	691b      	ldr	r3, [r3, #16]
 801113e:	4a0c      	ldr	r2, [pc, #48]	@ (8011170 <FLASH_Program_Word+0x40>)
 8011140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011144:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8011146:	4b0a      	ldr	r3, [pc, #40]	@ (8011170 <FLASH_Program_Word+0x40>)
 8011148:	691b      	ldr	r3, [r3, #16]
 801114a:	4a09      	ldr	r2, [pc, #36]	@ (8011170 <FLASH_Program_Word+0x40>)
 801114c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8011150:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011152:	4b07      	ldr	r3, [pc, #28]	@ (8011170 <FLASH_Program_Word+0x40>)
 8011154:	691b      	ldr	r3, [r3, #16]
 8011156:	4a06      	ldr	r2, [pc, #24]	@ (8011170 <FLASH_Program_Word+0x40>)
 8011158:	f043 0301 	orr.w	r3, r3, #1
 801115c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	683a      	ldr	r2, [r7, #0]
 8011162:	601a      	str	r2, [r3, #0]
}
 8011164:	bf00      	nop
 8011166:	370c      	adds	r7, #12
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr
 8011170:	40023c00 	.word	0x40023c00

08011174 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8011174:	b480      	push	{r7}
 8011176:	b083      	sub	sp, #12
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	460b      	mov	r3, r1
 801117e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8011180:	4b0d      	ldr	r3, [pc, #52]	@ (80111b8 <FLASH_Program_HalfWord+0x44>)
 8011182:	691b      	ldr	r3, [r3, #16]
 8011184:	4a0c      	ldr	r2, [pc, #48]	@ (80111b8 <FLASH_Program_HalfWord+0x44>)
 8011186:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801118a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 801118c:	4b0a      	ldr	r3, [pc, #40]	@ (80111b8 <FLASH_Program_HalfWord+0x44>)
 801118e:	691b      	ldr	r3, [r3, #16]
 8011190:	4a09      	ldr	r2, [pc, #36]	@ (80111b8 <FLASH_Program_HalfWord+0x44>)
 8011192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011196:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8011198:	4b07      	ldr	r3, [pc, #28]	@ (80111b8 <FLASH_Program_HalfWord+0x44>)
 801119a:	691b      	ldr	r3, [r3, #16]
 801119c:	4a06      	ldr	r2, [pc, #24]	@ (80111b8 <FLASH_Program_HalfWord+0x44>)
 801119e:	f043 0301 	orr.w	r3, r3, #1
 80111a2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	887a      	ldrh	r2, [r7, #2]
 80111a8:	801a      	strh	r2, [r3, #0]
}
 80111aa:	bf00      	nop
 80111ac:	370c      	adds	r7, #12
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop
 80111b8:	40023c00 	.word	0x40023c00

080111bc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80111bc:	b480      	push	{r7}
 80111be:	b083      	sub	sp, #12
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	460b      	mov	r3, r1
 80111c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80111c8:	4b0c      	ldr	r3, [pc, #48]	@ (80111fc <FLASH_Program_Byte+0x40>)
 80111ca:	691b      	ldr	r3, [r3, #16]
 80111cc:	4a0b      	ldr	r2, [pc, #44]	@ (80111fc <FLASH_Program_Byte+0x40>)
 80111ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80111d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80111d4:	4b09      	ldr	r3, [pc, #36]	@ (80111fc <FLASH_Program_Byte+0x40>)
 80111d6:	4a09      	ldr	r2, [pc, #36]	@ (80111fc <FLASH_Program_Byte+0x40>)
 80111d8:	691b      	ldr	r3, [r3, #16]
 80111da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80111dc:	4b07      	ldr	r3, [pc, #28]	@ (80111fc <FLASH_Program_Byte+0x40>)
 80111de:	691b      	ldr	r3, [r3, #16]
 80111e0:	4a06      	ldr	r2, [pc, #24]	@ (80111fc <FLASH_Program_Byte+0x40>)
 80111e2:	f043 0301 	orr.w	r3, r3, #1
 80111e6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	78fa      	ldrb	r2, [r7, #3]
 80111ec:	701a      	strb	r2, [r3, #0]
}
 80111ee:	bf00      	nop
 80111f0:	370c      	adds	r7, #12
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	40023c00 	.word	0x40023c00

08011200 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8011200:	b480      	push	{r7}
 8011202:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8011204:	4b2f      	ldr	r3, [pc, #188]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	f003 0310 	and.w	r3, r3, #16
 801120c:	2b00      	cmp	r3, #0
 801120e:	d008      	beq.n	8011222 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8011210:	4b2d      	ldr	r3, [pc, #180]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 8011212:	69db      	ldr	r3, [r3, #28]
 8011214:	f043 0310 	orr.w	r3, r3, #16
 8011218:	4a2b      	ldr	r2, [pc, #172]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 801121a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 801121c:	4b29      	ldr	r3, [pc, #164]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 801121e:	2210      	movs	r2, #16
 8011220:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8011222:	4b28      	ldr	r3, [pc, #160]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 8011224:	68db      	ldr	r3, [r3, #12]
 8011226:	f003 0320 	and.w	r3, r3, #32
 801122a:	2b00      	cmp	r3, #0
 801122c:	d008      	beq.n	8011240 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 801122e:	4b26      	ldr	r3, [pc, #152]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 8011230:	69db      	ldr	r3, [r3, #28]
 8011232:	f043 0308 	orr.w	r3, r3, #8
 8011236:	4a24      	ldr	r2, [pc, #144]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 8011238:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 801123a:	4b22      	ldr	r3, [pc, #136]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 801123c:	2220      	movs	r2, #32
 801123e:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8011240:	4b20      	ldr	r3, [pc, #128]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011248:	2b00      	cmp	r3, #0
 801124a:	d008      	beq.n	801125e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 801124c:	4b1e      	ldr	r3, [pc, #120]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 801124e:	69db      	ldr	r3, [r3, #28]
 8011250:	f043 0304 	orr.w	r3, r3, #4
 8011254:	4a1c      	ldr	r2, [pc, #112]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 8011256:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8011258:	4b1a      	ldr	r3, [pc, #104]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 801125a:	2240      	movs	r2, #64	@ 0x40
 801125c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 801125e:	4b19      	ldr	r3, [pc, #100]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 8011260:	68db      	ldr	r3, [r3, #12]
 8011262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011266:	2b00      	cmp	r3, #0
 8011268:	d008      	beq.n	801127c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 801126a:	4b17      	ldr	r3, [pc, #92]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 801126c:	69db      	ldr	r3, [r3, #28]
 801126e:	f043 0302 	orr.w	r3, r3, #2
 8011272:	4a15      	ldr	r2, [pc, #84]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 8011274:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8011276:	4b13      	ldr	r3, [pc, #76]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 8011278:	2280      	movs	r2, #128	@ 0x80
 801127a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 801127c:	4b11      	ldr	r3, [pc, #68]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011284:	2b00      	cmp	r3, #0
 8011286:	d009      	beq.n	801129c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8011288:	4b0f      	ldr	r3, [pc, #60]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 801128a:	69db      	ldr	r3, [r3, #28]
 801128c:	f043 0301 	orr.w	r3, r3, #1
 8011290:	4a0d      	ldr	r2, [pc, #52]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 8011292:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8011294:	4b0b      	ldr	r3, [pc, #44]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 8011296:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801129a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 801129c:	4b09      	ldr	r3, [pc, #36]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	f003 0302 	and.w	r3, r3, #2
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d008      	beq.n	80112ba <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80112a8:	4b07      	ldr	r3, [pc, #28]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 80112aa:	69db      	ldr	r3, [r3, #28]
 80112ac:	f043 0320 	orr.w	r3, r3, #32
 80112b0:	4a05      	ldr	r2, [pc, #20]	@ (80112c8 <FLASH_SetErrorCode+0xc8>)
 80112b2:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80112b4:	4b03      	ldr	r3, [pc, #12]	@ (80112c4 <FLASH_SetErrorCode+0xc4>)
 80112b6:	2202      	movs	r2, #2
 80112b8:	60da      	str	r2, [r3, #12]
  }
}
 80112ba:	bf00      	nop
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	40023c00 	.word	0x40023c00
 80112c8:	20000b28 	.word	0x20000b28

080112cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t index = 0U;
 80112d6:	2300      	movs	r3, #0
 80112d8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80112da:	4b31      	ldr	r3, [pc, #196]	@ (80113a0 <HAL_FLASHEx_Erase+0xd4>)
 80112dc:	7e1b      	ldrb	r3, [r3, #24]
 80112de:	2b01      	cmp	r3, #1
 80112e0:	d101      	bne.n	80112e6 <HAL_FLASHEx_Erase+0x1a>
 80112e2:	2302      	movs	r3, #2
 80112e4:	e058      	b.n	8011398 <HAL_FLASHEx_Erase+0xcc>
 80112e6:	4b2e      	ldr	r3, [pc, #184]	@ (80113a0 <HAL_FLASHEx_Erase+0xd4>)
 80112e8:	2201      	movs	r2, #1
 80112ea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80112ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80112f0:	f7ff feac 	bl	801104c <FLASH_WaitForLastOperation>
 80112f4:	4603      	mov	r3, r0
 80112f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80112f8:	7bfb      	ldrb	r3, [r7, #15]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d148      	bne.n	8011390 <HAL_FLASHEx_Erase+0xc4>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	f04f 32ff 	mov.w	r2, #4294967295
 8011304:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2b01      	cmp	r3, #1
 801130c:	d115      	bne.n	801133a <HAL_FLASHEx_Erase+0x6e>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	691b      	ldr	r3, [r3, #16]
 8011312:	b2da      	uxtb	r2, r3
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	4619      	mov	r1, r3
 801131a:	4610      	mov	r0, r2
 801131c:	f000 f844 	bl	80113a8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011320:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8011324:	f7ff fe92 	bl	801104c <FLASH_WaitForLastOperation>
 8011328:	4603      	mov	r3, r0
 801132a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 801132c:	4b1d      	ldr	r3, [pc, #116]	@ (80113a4 <HAL_FLASHEx_Erase+0xd8>)
 801132e:	691b      	ldr	r3, [r3, #16]
 8011330:	4a1c      	ldr	r2, [pc, #112]	@ (80113a4 <HAL_FLASHEx_Erase+0xd8>)
 8011332:	f023 0304 	bic.w	r3, r3, #4
 8011336:	6113      	str	r3, [r2, #16]
 8011338:	e028      	b.n	801138c <HAL_FLASHEx_Erase+0xc0>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	689b      	ldr	r3, [r3, #8]
 801133e:	60bb      	str	r3, [r7, #8]
 8011340:	e01c      	b.n	801137c <HAL_FLASHEx_Erase+0xb0>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	691b      	ldr	r3, [r3, #16]
 8011346:	b2db      	uxtb	r3, r3
 8011348:	4619      	mov	r1, r3
 801134a:	68b8      	ldr	r0, [r7, #8]
 801134c:	f000 f850 	bl	80113f0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011350:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8011354:	f7ff fe7a 	bl	801104c <FLASH_WaitForLastOperation>
 8011358:	4603      	mov	r3, r0
 801135a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 801135c:	4b11      	ldr	r3, [pc, #68]	@ (80113a4 <HAL_FLASHEx_Erase+0xd8>)
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	4a10      	ldr	r2, [pc, #64]	@ (80113a4 <HAL_FLASHEx_Erase+0xd8>)
 8011362:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8011366:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8011368:	7bfb      	ldrb	r3, [r7, #15]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d003      	beq.n	8011376 <HAL_FLASHEx_Erase+0xaa>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	68ba      	ldr	r2, [r7, #8]
 8011372:	601a      	str	r2, [r3, #0]
          break;
 8011374:	e00a      	b.n	801138c <HAL_FLASHEx_Erase+0xc0>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	3301      	adds	r3, #1
 801137a:	60bb      	str	r3, [r7, #8]
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	68da      	ldr	r2, [r3, #12]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	689b      	ldr	r3, [r3, #8]
 8011384:	4413      	add	r3, r2
 8011386:	68ba      	ldr	r2, [r7, #8]
 8011388:	429a      	cmp	r2, r3
 801138a:	d3da      	bcc.n	8011342 <HAL_FLASHEx_Erase+0x76>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801138c:	f000 f878 	bl	8011480 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8011390:	4b03      	ldr	r3, [pc, #12]	@ (80113a0 <HAL_FLASHEx_Erase+0xd4>)
 8011392:	2200      	movs	r2, #0
 8011394:	761a      	strb	r2, [r3, #24]

  return status;
 8011396:	7bfb      	ldrb	r3, [r7, #15]
}
 8011398:	4618      	mov	r0, r3
 801139a:	3710      	adds	r7, #16
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}
 80113a0:	20000b28 	.word	0x20000b28
 80113a4:	40023c00 	.word	0x40023c00

080113a8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80113a8:	b480      	push	{r7}
 80113aa:	b083      	sub	sp, #12
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	4603      	mov	r3, r0
 80113b0:	6039      	str	r1, [r7, #0]
 80113b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80113b4:	4b0d      	ldr	r3, [pc, #52]	@ (80113ec <FLASH_MassErase+0x44>)
 80113b6:	691b      	ldr	r3, [r3, #16]
 80113b8:	4a0c      	ldr	r2, [pc, #48]	@ (80113ec <FLASH_MassErase+0x44>)
 80113ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80113be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80113c0:	4b0a      	ldr	r3, [pc, #40]	@ (80113ec <FLASH_MassErase+0x44>)
 80113c2:	691b      	ldr	r3, [r3, #16]
 80113c4:	4a09      	ldr	r2, [pc, #36]	@ (80113ec <FLASH_MassErase+0x44>)
 80113c6:	f043 0304 	orr.w	r3, r3, #4
 80113ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80113cc:	4b07      	ldr	r3, [pc, #28]	@ (80113ec <FLASH_MassErase+0x44>)
 80113ce:	691a      	ldr	r2, [r3, #16]
 80113d0:	79fb      	ldrb	r3, [r7, #7]
 80113d2:	021b      	lsls	r3, r3, #8
 80113d4:	4313      	orrs	r3, r2
 80113d6:	4a05      	ldr	r2, [pc, #20]	@ (80113ec <FLASH_MassErase+0x44>)
 80113d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80113dc:	6113      	str	r3, [r2, #16]
}
 80113de:	bf00      	nop
 80113e0:	370c      	adds	r7, #12
 80113e2:	46bd      	mov	sp, r7
 80113e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop
 80113ec:	40023c00 	.word	0x40023c00

080113f0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80113f0:	b480      	push	{r7}
 80113f2:	b085      	sub	sp, #20
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	460b      	mov	r3, r1
 80113fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80113fc:	2300      	movs	r3, #0
 80113fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8011400:	78fb      	ldrb	r3, [r7, #3]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d102      	bne.n	801140c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8011406:	2300      	movs	r3, #0
 8011408:	60fb      	str	r3, [r7, #12]
 801140a:	e010      	b.n	801142e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 801140c:	78fb      	ldrb	r3, [r7, #3]
 801140e:	2b01      	cmp	r3, #1
 8011410:	d103      	bne.n	801141a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8011412:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011416:	60fb      	str	r3, [r7, #12]
 8011418:	e009      	b.n	801142e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 801141a:	78fb      	ldrb	r3, [r7, #3]
 801141c:	2b02      	cmp	r3, #2
 801141e:	d103      	bne.n	8011428 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8011420:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011424:	60fb      	str	r3, [r7, #12]
 8011426:	e002      	b.n	801142e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8011428:	f44f 7340 	mov.w	r3, #768	@ 0x300
 801142c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 801142e:	4b13      	ldr	r3, [pc, #76]	@ (801147c <FLASH_Erase_Sector+0x8c>)
 8011430:	691b      	ldr	r3, [r3, #16]
 8011432:	4a12      	ldr	r2, [pc, #72]	@ (801147c <FLASH_Erase_Sector+0x8c>)
 8011434:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8011438:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 801143a:	4b10      	ldr	r3, [pc, #64]	@ (801147c <FLASH_Erase_Sector+0x8c>)
 801143c:	691a      	ldr	r2, [r3, #16]
 801143e:	490f      	ldr	r1, [pc, #60]	@ (801147c <FLASH_Erase_Sector+0x8c>)
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	4313      	orrs	r3, r2
 8011444:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8011446:	4b0d      	ldr	r3, [pc, #52]	@ (801147c <FLASH_Erase_Sector+0x8c>)
 8011448:	691b      	ldr	r3, [r3, #16]
 801144a:	4a0c      	ldr	r2, [pc, #48]	@ (801147c <FLASH_Erase_Sector+0x8c>)
 801144c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8011450:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8011452:	4b0a      	ldr	r3, [pc, #40]	@ (801147c <FLASH_Erase_Sector+0x8c>)
 8011454:	691a      	ldr	r2, [r3, #16]
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	00db      	lsls	r3, r3, #3
 801145a:	4313      	orrs	r3, r2
 801145c:	4a07      	ldr	r2, [pc, #28]	@ (801147c <FLASH_Erase_Sector+0x8c>)
 801145e:	f043 0302 	orr.w	r3, r3, #2
 8011462:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8011464:	4b05      	ldr	r3, [pc, #20]	@ (801147c <FLASH_Erase_Sector+0x8c>)
 8011466:	691b      	ldr	r3, [r3, #16]
 8011468:	4a04      	ldr	r2, [pc, #16]	@ (801147c <FLASH_Erase_Sector+0x8c>)
 801146a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801146e:	6113      	str	r3, [r2, #16]
}
 8011470:	bf00      	nop
 8011472:	3714      	adds	r7, #20
 8011474:	46bd      	mov	sp, r7
 8011476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801147a:	4770      	bx	lr
 801147c:	40023c00 	.word	0x40023c00

08011480 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8011480:	b480      	push	{r7}
 8011482:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8011484:	4b20      	ldr	r3, [pc, #128]	@ (8011508 <FLASH_FlushCaches+0x88>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801148c:	2b00      	cmp	r3, #0
 801148e:	d017      	beq.n	80114c0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8011490:	4b1d      	ldr	r3, [pc, #116]	@ (8011508 <FLASH_FlushCaches+0x88>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	4a1c      	ldr	r2, [pc, #112]	@ (8011508 <FLASH_FlushCaches+0x88>)
 8011496:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 801149a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801149c:	4b1a      	ldr	r3, [pc, #104]	@ (8011508 <FLASH_FlushCaches+0x88>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	4a19      	ldr	r2, [pc, #100]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80114a6:	6013      	str	r3, [r2, #0]
 80114a8:	4b17      	ldr	r3, [pc, #92]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	4a16      	ldr	r2, [pc, #88]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80114b2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80114b4:	4b14      	ldr	r3, [pc, #80]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	4a13      	ldr	r2, [pc, #76]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80114be:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80114c0:	4b11      	ldr	r3, [pc, #68]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d017      	beq.n	80114fc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80114cc:	4b0e      	ldr	r3, [pc, #56]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4a0d      	ldr	r2, [pc, #52]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80114d6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80114d8:	4b0b      	ldr	r3, [pc, #44]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	4a0a      	ldr	r2, [pc, #40]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80114e2:	6013      	str	r3, [r2, #0]
 80114e4:	4b08      	ldr	r3, [pc, #32]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	4a07      	ldr	r2, [pc, #28]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80114ee:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80114f0:	4b05      	ldr	r3, [pc, #20]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	4a04      	ldr	r2, [pc, #16]	@ (8011508 <FLASH_FlushCaches+0x88>)
 80114f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80114fa:	6013      	str	r3, [r2, #0]
  }
}
 80114fc:	bf00      	nop
 80114fe:	46bd      	mov	sp, r7
 8011500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011504:	4770      	bx	lr
 8011506:	bf00      	nop
 8011508:	40023c00 	.word	0x40023c00

0801150c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801150c:	b480      	push	{r7}
 801150e:	b089      	sub	sp, #36	@ 0x24
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8011516:	2300      	movs	r3, #0
 8011518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801151a:	2300      	movs	r3, #0
 801151c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801151e:	2300      	movs	r3, #0
 8011520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8011522:	2300      	movs	r3, #0
 8011524:	61fb      	str	r3, [r7, #28]
 8011526:	e165      	b.n	80117f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8011528:	2201      	movs	r2, #1
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	fa02 f303 	lsl.w	r3, r2, r3
 8011530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	697a      	ldr	r2, [r7, #20]
 8011538:	4013      	ands	r3, r2
 801153a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801153c:	693a      	ldr	r2, [r7, #16]
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	429a      	cmp	r2, r3
 8011542:	f040 8154 	bne.w	80117ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	f003 0303 	and.w	r3, r3, #3
 801154e:	2b01      	cmp	r3, #1
 8011550:	d005      	beq.n	801155e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801155a:	2b02      	cmp	r3, #2
 801155c:	d130      	bne.n	80115c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	689b      	ldr	r3, [r3, #8]
 8011562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	005b      	lsls	r3, r3, #1
 8011568:	2203      	movs	r2, #3
 801156a:	fa02 f303 	lsl.w	r3, r2, r3
 801156e:	43db      	mvns	r3, r3
 8011570:	69ba      	ldr	r2, [r7, #24]
 8011572:	4013      	ands	r3, r2
 8011574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	68da      	ldr	r2, [r3, #12]
 801157a:	69fb      	ldr	r3, [r7, #28]
 801157c:	005b      	lsls	r3, r3, #1
 801157e:	fa02 f303 	lsl.w	r3, r2, r3
 8011582:	69ba      	ldr	r2, [r7, #24]
 8011584:	4313      	orrs	r3, r2
 8011586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	69ba      	ldr	r2, [r7, #24]
 801158c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	685b      	ldr	r3, [r3, #4]
 8011592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8011594:	2201      	movs	r2, #1
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	fa02 f303 	lsl.w	r3, r2, r3
 801159c:	43db      	mvns	r3, r3
 801159e:	69ba      	ldr	r2, [r7, #24]
 80115a0:	4013      	ands	r3, r2
 80115a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	091b      	lsrs	r3, r3, #4
 80115aa:	f003 0201 	and.w	r2, r3, #1
 80115ae:	69fb      	ldr	r3, [r7, #28]
 80115b0:	fa02 f303 	lsl.w	r3, r2, r3
 80115b4:	69ba      	ldr	r2, [r7, #24]
 80115b6:	4313      	orrs	r3, r2
 80115b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	69ba      	ldr	r2, [r7, #24]
 80115be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	685b      	ldr	r3, [r3, #4]
 80115c4:	f003 0303 	and.w	r3, r3, #3
 80115c8:	2b03      	cmp	r3, #3
 80115ca:	d017      	beq.n	80115fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	68db      	ldr	r3, [r3, #12]
 80115d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80115d2:	69fb      	ldr	r3, [r7, #28]
 80115d4:	005b      	lsls	r3, r3, #1
 80115d6:	2203      	movs	r2, #3
 80115d8:	fa02 f303 	lsl.w	r3, r2, r3
 80115dc:	43db      	mvns	r3, r3
 80115de:	69ba      	ldr	r2, [r7, #24]
 80115e0:	4013      	ands	r3, r2
 80115e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80115e4:	683b      	ldr	r3, [r7, #0]
 80115e6:	689a      	ldr	r2, [r3, #8]
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	005b      	lsls	r3, r3, #1
 80115ec:	fa02 f303 	lsl.w	r3, r2, r3
 80115f0:	69ba      	ldr	r2, [r7, #24]
 80115f2:	4313      	orrs	r3, r2
 80115f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	69ba      	ldr	r2, [r7, #24]
 80115fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	f003 0303 	and.w	r3, r3, #3
 8011604:	2b02      	cmp	r3, #2
 8011606:	d123      	bne.n	8011650 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8011608:	69fb      	ldr	r3, [r7, #28]
 801160a:	08da      	lsrs	r2, r3, #3
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	3208      	adds	r2, #8
 8011610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011614:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8011616:	69fb      	ldr	r3, [r7, #28]
 8011618:	f003 0307 	and.w	r3, r3, #7
 801161c:	009b      	lsls	r3, r3, #2
 801161e:	220f      	movs	r2, #15
 8011620:	fa02 f303 	lsl.w	r3, r2, r3
 8011624:	43db      	mvns	r3, r3
 8011626:	69ba      	ldr	r2, [r7, #24]
 8011628:	4013      	ands	r3, r2
 801162a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	691a      	ldr	r2, [r3, #16]
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	f003 0307 	and.w	r3, r3, #7
 8011636:	009b      	lsls	r3, r3, #2
 8011638:	fa02 f303 	lsl.w	r3, r2, r3
 801163c:	69ba      	ldr	r2, [r7, #24]
 801163e:	4313      	orrs	r3, r2
 8011640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	08da      	lsrs	r2, r3, #3
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	3208      	adds	r2, #8
 801164a:	69b9      	ldr	r1, [r7, #24]
 801164c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8011656:	69fb      	ldr	r3, [r7, #28]
 8011658:	005b      	lsls	r3, r3, #1
 801165a:	2203      	movs	r2, #3
 801165c:	fa02 f303 	lsl.w	r3, r2, r3
 8011660:	43db      	mvns	r3, r3
 8011662:	69ba      	ldr	r2, [r7, #24]
 8011664:	4013      	ands	r3, r2
 8011666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8011668:	683b      	ldr	r3, [r7, #0]
 801166a:	685b      	ldr	r3, [r3, #4]
 801166c:	f003 0203 	and.w	r2, r3, #3
 8011670:	69fb      	ldr	r3, [r7, #28]
 8011672:	005b      	lsls	r3, r3, #1
 8011674:	fa02 f303 	lsl.w	r3, r2, r3
 8011678:	69ba      	ldr	r2, [r7, #24]
 801167a:	4313      	orrs	r3, r2
 801167c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	69ba      	ldr	r2, [r7, #24]
 8011682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	685b      	ldr	r3, [r3, #4]
 8011688:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801168c:	2b00      	cmp	r3, #0
 801168e:	f000 80ae 	beq.w	80117ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011692:	2300      	movs	r3, #0
 8011694:	60fb      	str	r3, [r7, #12]
 8011696:	4b5d      	ldr	r3, [pc, #372]	@ (801180c <HAL_GPIO_Init+0x300>)
 8011698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801169a:	4a5c      	ldr	r2, [pc, #368]	@ (801180c <HAL_GPIO_Init+0x300>)
 801169c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80116a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80116a2:	4b5a      	ldr	r3, [pc, #360]	@ (801180c <HAL_GPIO_Init+0x300>)
 80116a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80116aa:	60fb      	str	r3, [r7, #12]
 80116ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80116ae:	4a58      	ldr	r2, [pc, #352]	@ (8011810 <HAL_GPIO_Init+0x304>)
 80116b0:	69fb      	ldr	r3, [r7, #28]
 80116b2:	089b      	lsrs	r3, r3, #2
 80116b4:	3302      	adds	r3, #2
 80116b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	f003 0303 	and.w	r3, r3, #3
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	220f      	movs	r2, #15
 80116c6:	fa02 f303 	lsl.w	r3, r2, r3
 80116ca:	43db      	mvns	r3, r3
 80116cc:	69ba      	ldr	r2, [r7, #24]
 80116ce:	4013      	ands	r3, r2
 80116d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	4a4f      	ldr	r2, [pc, #316]	@ (8011814 <HAL_GPIO_Init+0x308>)
 80116d6:	4293      	cmp	r3, r2
 80116d8:	d025      	beq.n	8011726 <HAL_GPIO_Init+0x21a>
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	4a4e      	ldr	r2, [pc, #312]	@ (8011818 <HAL_GPIO_Init+0x30c>)
 80116de:	4293      	cmp	r3, r2
 80116e0:	d01f      	beq.n	8011722 <HAL_GPIO_Init+0x216>
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4a4d      	ldr	r2, [pc, #308]	@ (801181c <HAL_GPIO_Init+0x310>)
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d019      	beq.n	801171e <HAL_GPIO_Init+0x212>
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	4a4c      	ldr	r2, [pc, #304]	@ (8011820 <HAL_GPIO_Init+0x314>)
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d013      	beq.n	801171a <HAL_GPIO_Init+0x20e>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4a4b      	ldr	r2, [pc, #300]	@ (8011824 <HAL_GPIO_Init+0x318>)
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d00d      	beq.n	8011716 <HAL_GPIO_Init+0x20a>
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	4a4a      	ldr	r2, [pc, #296]	@ (8011828 <HAL_GPIO_Init+0x31c>)
 80116fe:	4293      	cmp	r3, r2
 8011700:	d007      	beq.n	8011712 <HAL_GPIO_Init+0x206>
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	4a49      	ldr	r2, [pc, #292]	@ (801182c <HAL_GPIO_Init+0x320>)
 8011706:	4293      	cmp	r3, r2
 8011708:	d101      	bne.n	801170e <HAL_GPIO_Init+0x202>
 801170a:	2306      	movs	r3, #6
 801170c:	e00c      	b.n	8011728 <HAL_GPIO_Init+0x21c>
 801170e:	2307      	movs	r3, #7
 8011710:	e00a      	b.n	8011728 <HAL_GPIO_Init+0x21c>
 8011712:	2305      	movs	r3, #5
 8011714:	e008      	b.n	8011728 <HAL_GPIO_Init+0x21c>
 8011716:	2304      	movs	r3, #4
 8011718:	e006      	b.n	8011728 <HAL_GPIO_Init+0x21c>
 801171a:	2303      	movs	r3, #3
 801171c:	e004      	b.n	8011728 <HAL_GPIO_Init+0x21c>
 801171e:	2302      	movs	r3, #2
 8011720:	e002      	b.n	8011728 <HAL_GPIO_Init+0x21c>
 8011722:	2301      	movs	r3, #1
 8011724:	e000      	b.n	8011728 <HAL_GPIO_Init+0x21c>
 8011726:	2300      	movs	r3, #0
 8011728:	69fa      	ldr	r2, [r7, #28]
 801172a:	f002 0203 	and.w	r2, r2, #3
 801172e:	0092      	lsls	r2, r2, #2
 8011730:	4093      	lsls	r3, r2
 8011732:	69ba      	ldr	r2, [r7, #24]
 8011734:	4313      	orrs	r3, r2
 8011736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8011738:	4935      	ldr	r1, [pc, #212]	@ (8011810 <HAL_GPIO_Init+0x304>)
 801173a:	69fb      	ldr	r3, [r7, #28]
 801173c:	089b      	lsrs	r3, r3, #2
 801173e:	3302      	adds	r3, #2
 8011740:	69ba      	ldr	r2, [r7, #24]
 8011742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011746:	4b3a      	ldr	r3, [pc, #232]	@ (8011830 <HAL_GPIO_Init+0x324>)
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	43db      	mvns	r3, r3
 8011750:	69ba      	ldr	r2, [r7, #24]
 8011752:	4013      	ands	r3, r2
 8011754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801175e:	2b00      	cmp	r3, #0
 8011760:	d003      	beq.n	801176a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8011762:	69ba      	ldr	r2, [r7, #24]
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	4313      	orrs	r3, r2
 8011768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801176a:	4a31      	ldr	r2, [pc, #196]	@ (8011830 <HAL_GPIO_Init+0x324>)
 801176c:	69bb      	ldr	r3, [r7, #24]
 801176e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8011770:	4b2f      	ldr	r3, [pc, #188]	@ (8011830 <HAL_GPIO_Init+0x324>)
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	43db      	mvns	r3, r3
 801177a:	69ba      	ldr	r2, [r7, #24]
 801177c:	4013      	ands	r3, r2
 801177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8011780:	683b      	ldr	r3, [r7, #0]
 8011782:	685b      	ldr	r3, [r3, #4]
 8011784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011788:	2b00      	cmp	r3, #0
 801178a:	d003      	beq.n	8011794 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 801178c:	69ba      	ldr	r2, [r7, #24]
 801178e:	693b      	ldr	r3, [r7, #16]
 8011790:	4313      	orrs	r3, r2
 8011792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8011794:	4a26      	ldr	r2, [pc, #152]	@ (8011830 <HAL_GPIO_Init+0x324>)
 8011796:	69bb      	ldr	r3, [r7, #24]
 8011798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801179a:	4b25      	ldr	r3, [pc, #148]	@ (8011830 <HAL_GPIO_Init+0x324>)
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	43db      	mvns	r3, r3
 80117a4:	69ba      	ldr	r2, [r7, #24]
 80117a6:	4013      	ands	r3, r2
 80117a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	685b      	ldr	r3, [r3, #4]
 80117ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d003      	beq.n	80117be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80117b6:	69ba      	ldr	r2, [r7, #24]
 80117b8:	693b      	ldr	r3, [r7, #16]
 80117ba:	4313      	orrs	r3, r2
 80117bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80117be:	4a1c      	ldr	r2, [pc, #112]	@ (8011830 <HAL_GPIO_Init+0x324>)
 80117c0:	69bb      	ldr	r3, [r7, #24]
 80117c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80117c4:	4b1a      	ldr	r3, [pc, #104]	@ (8011830 <HAL_GPIO_Init+0x324>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	43db      	mvns	r3, r3
 80117ce:	69ba      	ldr	r2, [r7, #24]
 80117d0:	4013      	ands	r3, r2
 80117d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d003      	beq.n	80117e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80117e0:	69ba      	ldr	r2, [r7, #24]
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	4313      	orrs	r3, r2
 80117e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80117e8:	4a11      	ldr	r2, [pc, #68]	@ (8011830 <HAL_GPIO_Init+0x324>)
 80117ea:	69bb      	ldr	r3, [r7, #24]
 80117ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	3301      	adds	r3, #1
 80117f2:	61fb      	str	r3, [r7, #28]
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	2b0f      	cmp	r3, #15
 80117f8:	f67f ae96 	bls.w	8011528 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80117fc:	bf00      	nop
 80117fe:	bf00      	nop
 8011800:	3724      	adds	r7, #36	@ 0x24
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr
 801180a:	bf00      	nop
 801180c:	40023800 	.word	0x40023800
 8011810:	40013800 	.word	0x40013800
 8011814:	40020000 	.word	0x40020000
 8011818:	40020400 	.word	0x40020400
 801181c:	40020800 	.word	0x40020800
 8011820:	40020c00 	.word	0x40020c00
 8011824:	40021000 	.word	0x40021000
 8011828:	40021400 	.word	0x40021400
 801182c:	40021800 	.word	0x40021800
 8011830:	40013c00 	.word	0x40013c00

08011834 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8011834:	b480      	push	{r7}
 8011836:	b083      	sub	sp, #12
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	460b      	mov	r3, r1
 801183e:	807b      	strh	r3, [r7, #2]
 8011840:	4613      	mov	r3, r2
 8011842:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8011844:	787b      	ldrb	r3, [r7, #1]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d003      	beq.n	8011852 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801184a:	887a      	ldrh	r2, [r7, #2]
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8011850:	e003      	b.n	801185a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8011852:	887b      	ldrh	r3, [r7, #2]
 8011854:	041a      	lsls	r2, r3, #16
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	619a      	str	r2, [r3, #24]
}
 801185a:	bf00      	nop
 801185c:	370c      	adds	r7, #12
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr

08011866 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8011866:	b480      	push	{r7}
 8011868:	b085      	sub	sp, #20
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
 801186e:	460b      	mov	r3, r1
 8011870:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	695b      	ldr	r3, [r3, #20]
 8011876:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8011878:	887a      	ldrh	r2, [r7, #2]
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	4013      	ands	r3, r2
 801187e:	041a      	lsls	r2, r3, #16
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	43d9      	mvns	r1, r3
 8011884:	887b      	ldrh	r3, [r7, #2]
 8011886:	400b      	ands	r3, r1
 8011888:	431a      	orrs	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	619a      	str	r2, [r3, #24]
}
 801188e:	bf00      	nop
 8011890:	3714      	adds	r7, #20
 8011892:	46bd      	mov	sp, r7
 8011894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011898:	4770      	bx	lr
	...

0801189c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	4603      	mov	r3, r0
 80118a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80118a6:	4b08      	ldr	r3, [pc, #32]	@ (80118c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80118a8:	695a      	ldr	r2, [r3, #20]
 80118aa:	88fb      	ldrh	r3, [r7, #6]
 80118ac:	4013      	ands	r3, r2
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d006      	beq.n	80118c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80118b2:	4a05      	ldr	r2, [pc, #20]	@ (80118c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80118b4:	88fb      	ldrh	r3, [r7, #6]
 80118b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80118b8:	88fb      	ldrh	r3, [r7, #6]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f000 f806 	bl	80118cc <HAL_GPIO_EXTI_Callback>
  }
}
 80118c0:	bf00      	nop
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	40013c00 	.word	0x40013c00

080118cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	4603      	mov	r3, r0
 80118d4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80118d6:	bf00      	nop
 80118d8:	370c      	adds	r7, #12
 80118da:	46bd      	mov	sp, r7
 80118dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e0:	4770      	bx	lr
	...

080118e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80118e4:	b580      	push	{r7, lr}
 80118e6:	b084      	sub	sp, #16
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d101      	bne.n	80118f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80118f2:	2301      	movs	r3, #1
 80118f4:	e12b      	b.n	8011b4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80118fc:	b2db      	uxtb	r3, r3
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d106      	bne.n	8011910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	2200      	movs	r2, #0
 8011906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f7fd feb2 	bl	800f674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	2224      	movs	r2, #36	@ 0x24
 8011914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	681a      	ldr	r2, [r3, #0]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	f022 0201 	bic.w	r2, r2, #1
 8011926:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	681b      	ldr	r3, [r3, #0]
 801192c:	681a      	ldr	r2, [r3, #0]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8011936:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	681a      	ldr	r2, [r3, #0]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8011946:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8011948:	f000 faa6 	bl	8011e98 <HAL_RCC_GetPCLK1Freq>
 801194c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	4a81      	ldr	r2, [pc, #516]	@ (8011b58 <HAL_I2C_Init+0x274>)
 8011954:	4293      	cmp	r3, r2
 8011956:	d807      	bhi.n	8011968 <HAL_I2C_Init+0x84>
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	4a80      	ldr	r2, [pc, #512]	@ (8011b5c <HAL_I2C_Init+0x278>)
 801195c:	4293      	cmp	r3, r2
 801195e:	bf94      	ite	ls
 8011960:	2301      	movls	r3, #1
 8011962:	2300      	movhi	r3, #0
 8011964:	b2db      	uxtb	r3, r3
 8011966:	e006      	b.n	8011976 <HAL_I2C_Init+0x92>
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	4a7d      	ldr	r2, [pc, #500]	@ (8011b60 <HAL_I2C_Init+0x27c>)
 801196c:	4293      	cmp	r3, r2
 801196e:	bf94      	ite	ls
 8011970:	2301      	movls	r3, #1
 8011972:	2300      	movhi	r3, #0
 8011974:	b2db      	uxtb	r3, r3
 8011976:	2b00      	cmp	r3, #0
 8011978:	d001      	beq.n	801197e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801197a:	2301      	movs	r3, #1
 801197c:	e0e7      	b.n	8011b4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	4a78      	ldr	r2, [pc, #480]	@ (8011b64 <HAL_I2C_Init+0x280>)
 8011982:	fba2 2303 	umull	r2, r3, r2, r3
 8011986:	0c9b      	lsrs	r3, r3, #18
 8011988:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	68ba      	ldr	r2, [r7, #8]
 801199a:	430a      	orrs	r2, r1
 801199c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	6a1b      	ldr	r3, [r3, #32]
 80119a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	685b      	ldr	r3, [r3, #4]
 80119ac:	4a6a      	ldr	r2, [pc, #424]	@ (8011b58 <HAL_I2C_Init+0x274>)
 80119ae:	4293      	cmp	r3, r2
 80119b0:	d802      	bhi.n	80119b8 <HAL_I2C_Init+0xd4>
 80119b2:	68bb      	ldr	r3, [r7, #8]
 80119b4:	3301      	adds	r3, #1
 80119b6:	e009      	b.n	80119cc <HAL_I2C_Init+0xe8>
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80119be:	fb02 f303 	mul.w	r3, r2, r3
 80119c2:	4a69      	ldr	r2, [pc, #420]	@ (8011b68 <HAL_I2C_Init+0x284>)
 80119c4:	fba2 2303 	umull	r2, r3, r2, r3
 80119c8:	099b      	lsrs	r3, r3, #6
 80119ca:	3301      	adds	r3, #1
 80119cc:	687a      	ldr	r2, [r7, #4]
 80119ce:	6812      	ldr	r2, [r2, #0]
 80119d0:	430b      	orrs	r3, r1
 80119d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	69db      	ldr	r3, [r3, #28]
 80119da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80119de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	685b      	ldr	r3, [r3, #4]
 80119e6:	495c      	ldr	r1, [pc, #368]	@ (8011b58 <HAL_I2C_Init+0x274>)
 80119e8:	428b      	cmp	r3, r1
 80119ea:	d819      	bhi.n	8011a20 <HAL_I2C_Init+0x13c>
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	1e59      	subs	r1, r3, #1
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	005b      	lsls	r3, r3, #1
 80119f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80119fa:	1c59      	adds	r1, r3, #1
 80119fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8011a00:	400b      	ands	r3, r1
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d00a      	beq.n	8011a1c <HAL_I2C_Init+0x138>
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	1e59      	subs	r1, r3, #1
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	005b      	lsls	r3, r3, #1
 8011a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8011a14:	3301      	adds	r3, #1
 8011a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011a1a:	e051      	b.n	8011ac0 <HAL_I2C_Init+0x1dc>
 8011a1c:	2304      	movs	r3, #4
 8011a1e:	e04f      	b.n	8011ac0 <HAL_I2C_Init+0x1dc>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	689b      	ldr	r3, [r3, #8]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d111      	bne.n	8011a4c <HAL_I2C_Init+0x168>
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	1e58      	subs	r0, r3, #1
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	6859      	ldr	r1, [r3, #4]
 8011a30:	460b      	mov	r3, r1
 8011a32:	005b      	lsls	r3, r3, #1
 8011a34:	440b      	add	r3, r1
 8011a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	bf0c      	ite	eq
 8011a44:	2301      	moveq	r3, #1
 8011a46:	2300      	movne	r3, #0
 8011a48:	b2db      	uxtb	r3, r3
 8011a4a:	e012      	b.n	8011a72 <HAL_I2C_Init+0x18e>
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	1e58      	subs	r0, r3, #1
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6859      	ldr	r1, [r3, #4]
 8011a54:	460b      	mov	r3, r1
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	440b      	add	r3, r1
 8011a5a:	0099      	lsls	r1, r3, #2
 8011a5c:	440b      	add	r3, r1
 8011a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8011a62:	3301      	adds	r3, #1
 8011a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	bf0c      	ite	eq
 8011a6c:	2301      	moveq	r3, #1
 8011a6e:	2300      	movne	r3, #0
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d001      	beq.n	8011a7a <HAL_I2C_Init+0x196>
 8011a76:	2301      	movs	r3, #1
 8011a78:	e022      	b.n	8011ac0 <HAL_I2C_Init+0x1dc>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	689b      	ldr	r3, [r3, #8]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d10e      	bne.n	8011aa0 <HAL_I2C_Init+0x1bc>
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	1e58      	subs	r0, r3, #1
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6859      	ldr	r1, [r3, #4]
 8011a8a:	460b      	mov	r3, r1
 8011a8c:	005b      	lsls	r3, r3, #1
 8011a8e:	440b      	add	r3, r1
 8011a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8011a94:	3301      	adds	r3, #1
 8011a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011a9e:	e00f      	b.n	8011ac0 <HAL_I2C_Init+0x1dc>
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	1e58      	subs	r0, r3, #1
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	6859      	ldr	r1, [r3, #4]
 8011aa8:	460b      	mov	r3, r1
 8011aaa:	009b      	lsls	r3, r3, #2
 8011aac:	440b      	add	r3, r1
 8011aae:	0099      	lsls	r1, r3, #2
 8011ab0:	440b      	add	r3, r1
 8011ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011abc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8011ac0:	6879      	ldr	r1, [r7, #4]
 8011ac2:	6809      	ldr	r1, [r1, #0]
 8011ac4:	4313      	orrs	r3, r2
 8011ac6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	69da      	ldr	r2, [r3, #28]
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6a1b      	ldr	r3, [r3, #32]
 8011ada:	431a      	orrs	r2, r3
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	430a      	orrs	r2, r1
 8011ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	689b      	ldr	r3, [r3, #8]
 8011aea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8011aee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	6911      	ldr	r1, [r2, #16]
 8011af6:	687a      	ldr	r2, [r7, #4]
 8011af8:	68d2      	ldr	r2, [r2, #12]
 8011afa:	4311      	orrs	r1, r2
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	6812      	ldr	r2, [r2, #0]
 8011b00:	430b      	orrs	r3, r1
 8011b02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	68db      	ldr	r3, [r3, #12]
 8011b0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	695a      	ldr	r2, [r3, #20]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	699b      	ldr	r3, [r3, #24]
 8011b16:	431a      	orrs	r2, r3
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	430a      	orrs	r2, r1
 8011b1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	681a      	ldr	r2, [r3, #0]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f042 0201 	orr.w	r2, r2, #1
 8011b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2200      	movs	r2, #0
 8011b34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2220      	movs	r2, #32
 8011b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2200      	movs	r2, #0
 8011b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2200      	movs	r2, #0
 8011b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8011b4c:	2300      	movs	r3, #0
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3710      	adds	r7, #16
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	bf00      	nop
 8011b58:	000186a0 	.word	0x000186a0
 8011b5c:	001e847f 	.word	0x001e847f
 8011b60:	003d08ff 	.word	0x003d08ff
 8011b64:	431bde83 	.word	0x431bde83
 8011b68:	10624dd3 	.word	0x10624dd3

08011b6c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d101      	bne.n	8011b7e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	e036      	b.n	8011bec <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8011b86:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8011b90:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	687a      	ldr	r2, [r7, #4]
 8011b98:	6852      	ldr	r2, [r2, #4]
 8011b9a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	687a      	ldr	r2, [r7, #4]
 8011ba2:	6892      	ldr	r2, [r2, #8]
 8011ba4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8011ba6:	f7fd fff3 	bl	800fb90 <HAL_GetTick>
 8011baa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8011bac:	e011      	b.n	8011bd2 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8011bae:	f7fd ffef 	bl	800fb90 <HAL_GetTick>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	1ad3      	subs	r3, r2, r3
 8011bb8:	f641 0201 	movw	r2, #6145	@ 0x1801
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	d908      	bls.n	8011bd2 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	68db      	ldr	r3, [r3, #12]
 8011bc6:	f003 0303 	and.w	r3, r3, #3
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d001      	beq.n	8011bd2 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8011bce:	2303      	movs	r3, #3
 8011bd0:	e00c      	b.n	8011bec <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	68db      	ldr	r3, [r3, #12]
 8011bd8:	f003 0303 	and.w	r3, r3, #3
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d1e6      	bne.n	8011bae <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8011be8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011bea:	2300      	movs	r3, #0
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3710      	adds	r7, #16
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b083      	sub	sp, #12
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8011c04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8011c06:	2300      	movs	r3, #0
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	370c      	adds	r7, #12
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c12:	4770      	bx	lr

08011c14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8011c1a:	2300      	movs	r3, #0
 8011c1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8011c1e:	2300      	movs	r3, #0
 8011c20:	603b      	str	r3, [r7, #0]
 8011c22:	4b20      	ldr	r3, [pc, #128]	@ (8011ca4 <HAL_PWREx_EnableOverDrive+0x90>)
 8011c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c26:	4a1f      	ldr	r2, [pc, #124]	@ (8011ca4 <HAL_PWREx_EnableOverDrive+0x90>)
 8011c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8011c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8011ca4 <HAL_PWREx_EnableOverDrive+0x90>)
 8011c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8011c36:	603b      	str	r3, [r7, #0]
 8011c38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8011c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8011ca8 <HAL_PWREx_EnableOverDrive+0x94>)
 8011c3c:	2201      	movs	r2, #1
 8011c3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011c40:	f7fd ffa6 	bl	800fb90 <HAL_GetTick>
 8011c44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8011c46:	e009      	b.n	8011c5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8011c48:	f7fd ffa2 	bl	800fb90 <HAL_GetTick>
 8011c4c:	4602      	mov	r2, r0
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	1ad3      	subs	r3, r2, r3
 8011c52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011c56:	d901      	bls.n	8011c5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8011c58:	2303      	movs	r3, #3
 8011c5a:	e01f      	b.n	8011c9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8011c5c:	4b13      	ldr	r3, [pc, #76]	@ (8011cac <HAL_PWREx_EnableOverDrive+0x98>)
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8011c64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011c68:	d1ee      	bne.n	8011c48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8011c6a:	4b11      	ldr	r3, [pc, #68]	@ (8011cb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8011c6c:	2201      	movs	r2, #1
 8011c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8011c70:	f7fd ff8e 	bl	800fb90 <HAL_GetTick>
 8011c74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8011c76:	e009      	b.n	8011c8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8011c78:	f7fd ff8a 	bl	800fb90 <HAL_GetTick>
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	1ad3      	subs	r3, r2, r3
 8011c82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011c86:	d901      	bls.n	8011c8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8011c88:	2303      	movs	r3, #3
 8011c8a:	e007      	b.n	8011c9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8011c8c:	4b07      	ldr	r3, [pc, #28]	@ (8011cac <HAL_PWREx_EnableOverDrive+0x98>)
 8011c8e:	685b      	ldr	r3, [r3, #4]
 8011c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011c94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011c98:	d1ee      	bne.n	8011c78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8011c9a:	2300      	movs	r3, #0
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3708      	adds	r7, #8
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bd80      	pop	{r7, pc}
 8011ca4:	40023800 	.word	0x40023800
 8011ca8:	420e0040 	.word	0x420e0040
 8011cac:	40007000 	.word	0x40007000
 8011cb0:	420e0044 	.word	0x420e0044

08011cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d101      	bne.n	8011cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	e0cc      	b.n	8011e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8011cc8:	4b68      	ldr	r3, [pc, #416]	@ (8011e6c <HAL_RCC_ClockConfig+0x1b8>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	f003 030f 	and.w	r3, r3, #15
 8011cd0:	683a      	ldr	r2, [r7, #0]
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d90c      	bls.n	8011cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011cd6:	4b65      	ldr	r3, [pc, #404]	@ (8011e6c <HAL_RCC_ClockConfig+0x1b8>)
 8011cd8:	683a      	ldr	r2, [r7, #0]
 8011cda:	b2d2      	uxtb	r2, r2
 8011cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011cde:	4b63      	ldr	r3, [pc, #396]	@ (8011e6c <HAL_RCC_ClockConfig+0x1b8>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f003 030f 	and.w	r3, r3, #15
 8011ce6:	683a      	ldr	r2, [r7, #0]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d001      	beq.n	8011cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8011cec:	2301      	movs	r3, #1
 8011cee:	e0b8      	b.n	8011e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f003 0302 	and.w	r3, r3, #2
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d020      	beq.n	8011d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	f003 0304 	and.w	r3, r3, #4
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d005      	beq.n	8011d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8011d08:	4b59      	ldr	r3, [pc, #356]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011d0a:	689b      	ldr	r3, [r3, #8]
 8011d0c:	4a58      	ldr	r2, [pc, #352]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011d0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8011d12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	f003 0308 	and.w	r3, r3, #8
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d005      	beq.n	8011d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8011d20:	4b53      	ldr	r3, [pc, #332]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011d22:	689b      	ldr	r3, [r3, #8]
 8011d24:	4a52      	ldr	r2, [pc, #328]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011d26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8011d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011d2c:	4b50      	ldr	r3, [pc, #320]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011d2e:	689b      	ldr	r3, [r3, #8]
 8011d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	689b      	ldr	r3, [r3, #8]
 8011d38:	494d      	ldr	r1, [pc, #308]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011d3a:	4313      	orrs	r3, r2
 8011d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	f003 0301 	and.w	r3, r3, #1
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d044      	beq.n	8011dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	685b      	ldr	r3, [r3, #4]
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d107      	bne.n	8011d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8011d52:	4b47      	ldr	r3, [pc, #284]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d119      	bne.n	8011d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e07f      	b.n	8011e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	685b      	ldr	r3, [r3, #4]
 8011d66:	2b02      	cmp	r3, #2
 8011d68:	d003      	beq.n	8011d72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8011d6e:	2b03      	cmp	r3, #3
 8011d70:	d107      	bne.n	8011d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8011d72:	4b3f      	ldr	r3, [pc, #252]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d109      	bne.n	8011d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011d7e:	2301      	movs	r3, #1
 8011d80:	e06f      	b.n	8011e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8011d82:	4b3b      	ldr	r3, [pc, #236]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	f003 0302 	and.w	r3, r3, #2
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d101      	bne.n	8011d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8011d8e:	2301      	movs	r3, #1
 8011d90:	e067      	b.n	8011e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011d92:	4b37      	ldr	r3, [pc, #220]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011d94:	689b      	ldr	r3, [r3, #8]
 8011d96:	f023 0203 	bic.w	r2, r3, #3
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	4934      	ldr	r1, [pc, #208]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011da0:	4313      	orrs	r3, r2
 8011da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011da4:	f7fd fef4 	bl	800fb90 <HAL_GetTick>
 8011da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011daa:	e00a      	b.n	8011dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011dac:	f7fd fef0 	bl	800fb90 <HAL_GetTick>
 8011db0:	4602      	mov	r2, r0
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8011dba:	4293      	cmp	r3, r2
 8011dbc:	d901      	bls.n	8011dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8011dbe:	2303      	movs	r3, #3
 8011dc0:	e04f      	b.n	8011e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011dc4:	689b      	ldr	r3, [r3, #8]
 8011dc6:	f003 020c 	and.w	r2, r3, #12
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	685b      	ldr	r3, [r3, #4]
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d1eb      	bne.n	8011dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011dd4:	4b25      	ldr	r3, [pc, #148]	@ (8011e6c <HAL_RCC_ClockConfig+0x1b8>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	f003 030f 	and.w	r3, r3, #15
 8011ddc:	683a      	ldr	r2, [r7, #0]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d20c      	bcs.n	8011dfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011de2:	4b22      	ldr	r3, [pc, #136]	@ (8011e6c <HAL_RCC_ClockConfig+0x1b8>)
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	b2d2      	uxtb	r2, r2
 8011de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011dea:	4b20      	ldr	r3, [pc, #128]	@ (8011e6c <HAL_RCC_ClockConfig+0x1b8>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	f003 030f 	and.w	r3, r3, #15
 8011df2:	683a      	ldr	r2, [r7, #0]
 8011df4:	429a      	cmp	r2, r3
 8011df6:	d001      	beq.n	8011dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e032      	b.n	8011e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f003 0304 	and.w	r3, r3, #4
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d008      	beq.n	8011e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011e08:	4b19      	ldr	r3, [pc, #100]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011e0a:	689b      	ldr	r3, [r3, #8]
 8011e0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	4916      	ldr	r1, [pc, #88]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011e16:	4313      	orrs	r3, r2
 8011e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	f003 0308 	and.w	r3, r3, #8
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d009      	beq.n	8011e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8011e26:	4b12      	ldr	r3, [pc, #72]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011e28:	689b      	ldr	r3, [r3, #8]
 8011e2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	691b      	ldr	r3, [r3, #16]
 8011e32:	00db      	lsls	r3, r3, #3
 8011e34:	490e      	ldr	r1, [pc, #56]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011e36:	4313      	orrs	r3, r2
 8011e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8011e3a:	f000 f855 	bl	8011ee8 <HAL_RCC_GetSysClockFreq>
 8011e3e:	4602      	mov	r2, r0
 8011e40:	4b0b      	ldr	r3, [pc, #44]	@ (8011e70 <HAL_RCC_ClockConfig+0x1bc>)
 8011e42:	689b      	ldr	r3, [r3, #8]
 8011e44:	091b      	lsrs	r3, r3, #4
 8011e46:	f003 030f 	and.w	r3, r3, #15
 8011e4a:	490a      	ldr	r1, [pc, #40]	@ (8011e74 <HAL_RCC_ClockConfig+0x1c0>)
 8011e4c:	5ccb      	ldrb	r3, [r1, r3]
 8011e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8011e52:	4a09      	ldr	r2, [pc, #36]	@ (8011e78 <HAL_RCC_ClockConfig+0x1c4>)
 8011e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8011e56:	4b09      	ldr	r3, [pc, #36]	@ (8011e7c <HAL_RCC_ClockConfig+0x1c8>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fd fe54 	bl	800fb08 <HAL_InitTick>

  return HAL_OK;
 8011e60:	2300      	movs	r3, #0
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3710      	adds	r7, #16
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	40023c00 	.word	0x40023c00
 8011e70:	40023800 	.word	0x40023800
 8011e74:	08015308 	.word	0x08015308
 8011e78:	200000c0 	.word	0x200000c0
 8011e7c:	200000c4 	.word	0x200000c4

08011e80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011e80:	b480      	push	{r7}
 8011e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8011e84:	4b03      	ldr	r3, [pc, #12]	@ (8011e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8011e86:	681b      	ldr	r3, [r3, #0]
}
 8011e88:	4618      	mov	r0, r3
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e90:	4770      	bx	lr
 8011e92:	bf00      	nop
 8011e94:	200000c0 	.word	0x200000c0

08011e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8011e9c:	f7ff fff0 	bl	8011e80 <HAL_RCC_GetHCLKFreq>
 8011ea0:	4602      	mov	r2, r0
 8011ea2:	4b05      	ldr	r3, [pc, #20]	@ (8011eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011ea4:	689b      	ldr	r3, [r3, #8]
 8011ea6:	0a9b      	lsrs	r3, r3, #10
 8011ea8:	f003 0307 	and.w	r3, r3, #7
 8011eac:	4903      	ldr	r1, [pc, #12]	@ (8011ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8011eae:	5ccb      	ldrb	r3, [r1, r3]
 8011eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	bd80      	pop	{r7, pc}
 8011eb8:	40023800 	.word	0x40023800
 8011ebc:	08015318 	.word	0x08015318

08011ec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8011ec4:	f7ff ffdc 	bl	8011e80 <HAL_RCC_GetHCLKFreq>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	4b05      	ldr	r3, [pc, #20]	@ (8011ee0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011ecc:	689b      	ldr	r3, [r3, #8]
 8011ece:	0b5b      	lsrs	r3, r3, #13
 8011ed0:	f003 0307 	and.w	r3, r3, #7
 8011ed4:	4903      	ldr	r1, [pc, #12]	@ (8011ee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011ed6:	5ccb      	ldrb	r3, [r1, r3]
 8011ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	40023800 	.word	0x40023800
 8011ee4:	08015318 	.word	0x08015318

08011ee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8011ee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011eec:	b0a6      	sub	sp, #152	@ 0x98
 8011eee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8011efc:	2300      	movs	r3, #0
 8011efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8011f02:	2300      	movs	r3, #0
 8011f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8011f0e:	4bc8      	ldr	r3, [pc, #800]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 8011f10:	689b      	ldr	r3, [r3, #8]
 8011f12:	f003 030c 	and.w	r3, r3, #12
 8011f16:	2b0c      	cmp	r3, #12
 8011f18:	f200 817e 	bhi.w	8012218 <HAL_RCC_GetSysClockFreq+0x330>
 8011f1c:	a201      	add	r2, pc, #4	@ (adr r2, 8011f24 <HAL_RCC_GetSysClockFreq+0x3c>)
 8011f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f22:	bf00      	nop
 8011f24:	08011f59 	.word	0x08011f59
 8011f28:	08012219 	.word	0x08012219
 8011f2c:	08012219 	.word	0x08012219
 8011f30:	08012219 	.word	0x08012219
 8011f34:	08011f61 	.word	0x08011f61
 8011f38:	08012219 	.word	0x08012219
 8011f3c:	08012219 	.word	0x08012219
 8011f40:	08012219 	.word	0x08012219
 8011f44:	08011f69 	.word	0x08011f69
 8011f48:	08012219 	.word	0x08012219
 8011f4c:	08012219 	.word	0x08012219
 8011f50:	08012219 	.word	0x08012219
 8011f54:	080120d3 	.word	0x080120d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8011f58:	4bb6      	ldr	r3, [pc, #728]	@ (8012234 <HAL_RCC_GetSysClockFreq+0x34c>)
 8011f5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011f5e:	e15f      	b.n	8012220 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8011f60:	4bb5      	ldr	r3, [pc, #724]	@ (8012238 <HAL_RCC_GetSysClockFreq+0x350>)
 8011f62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8011f66:	e15b      	b.n	8012220 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8011f68:	4bb1      	ldr	r3, [pc, #708]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011f70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8011f74:	4bae      	ldr	r3, [pc, #696]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 8011f76:	685b      	ldr	r3, [r3, #4]
 8011f78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d031      	beq.n	8011fe4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011f80:	4bab      	ldr	r3, [pc, #684]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	099b      	lsrs	r3, r3, #6
 8011f86:	2200      	movs	r2, #0
 8011f88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011f8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011f8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f92:	663b      	str	r3, [r7, #96]	@ 0x60
 8011f94:	2300      	movs	r3, #0
 8011f96:	667b      	str	r3, [r7, #100]	@ 0x64
 8011f98:	4ba7      	ldr	r3, [pc, #668]	@ (8012238 <HAL_RCC_GetSysClockFreq+0x350>)
 8011f9a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8011f9e:	462a      	mov	r2, r5
 8011fa0:	fb03 f202 	mul.w	r2, r3, r2
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	4621      	mov	r1, r4
 8011fa8:	fb01 f303 	mul.w	r3, r1, r3
 8011fac:	4413      	add	r3, r2
 8011fae:	4aa2      	ldr	r2, [pc, #648]	@ (8012238 <HAL_RCC_GetSysClockFreq+0x350>)
 8011fb0:	4621      	mov	r1, r4
 8011fb2:	fba1 1202 	umull	r1, r2, r1, r2
 8011fb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8011fb8:	460a      	mov	r2, r1
 8011fba:	67ba      	str	r2, [r7, #120]	@ 0x78
 8011fbc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011fbe:	4413      	add	r3, r2
 8011fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011fc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011fca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8011fcc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8011fd0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8011fd4:	f7fa fd56 	bl	800ca84 <__aeabi_uldivmod>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	460b      	mov	r3, r1
 8011fdc:	4613      	mov	r3, r2
 8011fde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011fe2:	e064      	b.n	80120ae <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8011fe4:	4b92      	ldr	r3, [pc, #584]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	099b      	lsrs	r3, r3, #6
 8011fea:	2200      	movs	r2, #0
 8011fec:	653b      	str	r3, [r7, #80]	@ 0x50
 8011fee:	657a      	str	r2, [r7, #84]	@ 0x54
 8011ff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ffc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8012000:	4622      	mov	r2, r4
 8012002:	462b      	mov	r3, r5
 8012004:	f04f 0000 	mov.w	r0, #0
 8012008:	f04f 0100 	mov.w	r1, #0
 801200c:	0159      	lsls	r1, r3, #5
 801200e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8012012:	0150      	lsls	r0, r2, #5
 8012014:	4602      	mov	r2, r0
 8012016:	460b      	mov	r3, r1
 8012018:	4621      	mov	r1, r4
 801201a:	1a51      	subs	r1, r2, r1
 801201c:	6139      	str	r1, [r7, #16]
 801201e:	4629      	mov	r1, r5
 8012020:	eb63 0301 	sbc.w	r3, r3, r1
 8012024:	617b      	str	r3, [r7, #20]
 8012026:	f04f 0200 	mov.w	r2, #0
 801202a:	f04f 0300 	mov.w	r3, #0
 801202e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8012032:	4659      	mov	r1, fp
 8012034:	018b      	lsls	r3, r1, #6
 8012036:	4651      	mov	r1, sl
 8012038:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 801203c:	4651      	mov	r1, sl
 801203e:	018a      	lsls	r2, r1, #6
 8012040:	4651      	mov	r1, sl
 8012042:	ebb2 0801 	subs.w	r8, r2, r1
 8012046:	4659      	mov	r1, fp
 8012048:	eb63 0901 	sbc.w	r9, r3, r1
 801204c:	f04f 0200 	mov.w	r2, #0
 8012050:	f04f 0300 	mov.w	r3, #0
 8012054:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012058:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801205c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012060:	4690      	mov	r8, r2
 8012062:	4699      	mov	r9, r3
 8012064:	4623      	mov	r3, r4
 8012066:	eb18 0303 	adds.w	r3, r8, r3
 801206a:	60bb      	str	r3, [r7, #8]
 801206c:	462b      	mov	r3, r5
 801206e:	eb49 0303 	adc.w	r3, r9, r3
 8012072:	60fb      	str	r3, [r7, #12]
 8012074:	f04f 0200 	mov.w	r2, #0
 8012078:	f04f 0300 	mov.w	r3, #0
 801207c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8012080:	4629      	mov	r1, r5
 8012082:	028b      	lsls	r3, r1, #10
 8012084:	4621      	mov	r1, r4
 8012086:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801208a:	4621      	mov	r1, r4
 801208c:	028a      	lsls	r2, r1, #10
 801208e:	4610      	mov	r0, r2
 8012090:	4619      	mov	r1, r3
 8012092:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012096:	2200      	movs	r2, #0
 8012098:	643b      	str	r3, [r7, #64]	@ 0x40
 801209a:	647a      	str	r2, [r7, #68]	@ 0x44
 801209c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80120a0:	f7fa fcf0 	bl	800ca84 <__aeabi_uldivmod>
 80120a4:	4602      	mov	r2, r0
 80120a6:	460b      	mov	r3, r1
 80120a8:	4613      	mov	r3, r2
 80120aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80120ae:	4b60      	ldr	r3, [pc, #384]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	0c1b      	lsrs	r3, r3, #16
 80120b4:	f003 0303 	and.w	r3, r3, #3
 80120b8:	3301      	adds	r3, #1
 80120ba:	005b      	lsls	r3, r3, #1
 80120bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80120c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80120c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80120c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80120cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80120d0:	e0a6      	b.n	8012220 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80120d2:	4b57      	ldr	r3, [pc, #348]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 80120d4:	685b      	ldr	r3, [r3, #4]
 80120d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80120da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80120de:	4b54      	ldr	r3, [pc, #336]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d02a      	beq.n	8012140 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80120ea:	4b51      	ldr	r3, [pc, #324]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	099b      	lsrs	r3, r3, #6
 80120f0:	2200      	movs	r2, #0
 80120f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80120f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80120f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80120fc:	2100      	movs	r1, #0
 80120fe:	4b4e      	ldr	r3, [pc, #312]	@ (8012238 <HAL_RCC_GetSysClockFreq+0x350>)
 8012100:	fb03 f201 	mul.w	r2, r3, r1
 8012104:	2300      	movs	r3, #0
 8012106:	fb00 f303 	mul.w	r3, r0, r3
 801210a:	4413      	add	r3, r2
 801210c:	4a4a      	ldr	r2, [pc, #296]	@ (8012238 <HAL_RCC_GetSysClockFreq+0x350>)
 801210e:	fba0 1202 	umull	r1, r2, r0, r2
 8012112:	677a      	str	r2, [r7, #116]	@ 0x74
 8012114:	460a      	mov	r2, r1
 8012116:	673a      	str	r2, [r7, #112]	@ 0x70
 8012118:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801211a:	4413      	add	r3, r2
 801211c:	677b      	str	r3, [r7, #116]	@ 0x74
 801211e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8012122:	2200      	movs	r2, #0
 8012124:	633b      	str	r3, [r7, #48]	@ 0x30
 8012126:	637a      	str	r2, [r7, #52]	@ 0x34
 8012128:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 801212c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8012130:	f7fa fca8 	bl	800ca84 <__aeabi_uldivmod>
 8012134:	4602      	mov	r2, r0
 8012136:	460b      	mov	r3, r1
 8012138:	4613      	mov	r3, r2
 801213a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801213e:	e05b      	b.n	80121f8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8012140:	4b3b      	ldr	r3, [pc, #236]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 8012142:	685b      	ldr	r3, [r3, #4]
 8012144:	099b      	lsrs	r3, r3, #6
 8012146:	2200      	movs	r2, #0
 8012148:	62bb      	str	r3, [r7, #40]	@ 0x28
 801214a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801214e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012152:	623b      	str	r3, [r7, #32]
 8012154:	2300      	movs	r3, #0
 8012156:	627b      	str	r3, [r7, #36]	@ 0x24
 8012158:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801215c:	4642      	mov	r2, r8
 801215e:	464b      	mov	r3, r9
 8012160:	f04f 0000 	mov.w	r0, #0
 8012164:	f04f 0100 	mov.w	r1, #0
 8012168:	0159      	lsls	r1, r3, #5
 801216a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801216e:	0150      	lsls	r0, r2, #5
 8012170:	4602      	mov	r2, r0
 8012172:	460b      	mov	r3, r1
 8012174:	4641      	mov	r1, r8
 8012176:	ebb2 0a01 	subs.w	sl, r2, r1
 801217a:	4649      	mov	r1, r9
 801217c:	eb63 0b01 	sbc.w	fp, r3, r1
 8012180:	f04f 0200 	mov.w	r2, #0
 8012184:	f04f 0300 	mov.w	r3, #0
 8012188:	ea4f 138b 	mov.w	r3, fp, lsl #6
 801218c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8012190:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8012194:	ebb2 040a 	subs.w	r4, r2, sl
 8012198:	eb63 050b 	sbc.w	r5, r3, fp
 801219c:	f04f 0200 	mov.w	r2, #0
 80121a0:	f04f 0300 	mov.w	r3, #0
 80121a4:	00eb      	lsls	r3, r5, #3
 80121a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80121aa:	00e2      	lsls	r2, r4, #3
 80121ac:	4614      	mov	r4, r2
 80121ae:	461d      	mov	r5, r3
 80121b0:	4643      	mov	r3, r8
 80121b2:	18e3      	adds	r3, r4, r3
 80121b4:	603b      	str	r3, [r7, #0]
 80121b6:	464b      	mov	r3, r9
 80121b8:	eb45 0303 	adc.w	r3, r5, r3
 80121bc:	607b      	str	r3, [r7, #4]
 80121be:	f04f 0200 	mov.w	r2, #0
 80121c2:	f04f 0300 	mov.w	r3, #0
 80121c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80121ca:	4629      	mov	r1, r5
 80121cc:	028b      	lsls	r3, r1, #10
 80121ce:	4621      	mov	r1, r4
 80121d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80121d4:	4621      	mov	r1, r4
 80121d6:	028a      	lsls	r2, r1, #10
 80121d8:	4610      	mov	r0, r2
 80121da:	4619      	mov	r1, r3
 80121dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80121e0:	2200      	movs	r2, #0
 80121e2:	61bb      	str	r3, [r7, #24]
 80121e4:	61fa      	str	r2, [r7, #28]
 80121e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80121ea:	f7fa fc4b 	bl	800ca84 <__aeabi_uldivmod>
 80121ee:	4602      	mov	r2, r0
 80121f0:	460b      	mov	r3, r1
 80121f2:	4613      	mov	r3, r2
 80121f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80121f8:	4b0d      	ldr	r3, [pc, #52]	@ (8012230 <HAL_RCC_GetSysClockFreq+0x348>)
 80121fa:	685b      	ldr	r3, [r3, #4]
 80121fc:	0f1b      	lsrs	r3, r3, #28
 80121fe:	f003 0307 	and.w	r3, r3, #7
 8012202:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8012206:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801220a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012212:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8012216:	e003      	b.n	8012220 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8012218:	4b06      	ldr	r3, [pc, #24]	@ (8012234 <HAL_RCC_GetSysClockFreq+0x34c>)
 801221a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 801221e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8012220:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8012224:	4618      	mov	r0, r3
 8012226:	3798      	adds	r7, #152	@ 0x98
 8012228:	46bd      	mov	sp, r7
 801222a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801222e:	bf00      	nop
 8012230:	40023800 	.word	0x40023800
 8012234:	00f42400 	.word	0x00f42400
 8012238:	017d7840 	.word	0x017d7840

0801223c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b086      	sub	sp, #24
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d101      	bne.n	801224e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801224a:	2301      	movs	r3, #1
 801224c:	e28d      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	f003 0301 	and.w	r3, r3, #1
 8012256:	2b00      	cmp	r3, #0
 8012258:	f000 8083 	beq.w	8012362 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801225c:	4b94      	ldr	r3, [pc, #592]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 801225e:	689b      	ldr	r3, [r3, #8]
 8012260:	f003 030c 	and.w	r3, r3, #12
 8012264:	2b04      	cmp	r3, #4
 8012266:	d019      	beq.n	801229c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8012268:	4b91      	ldr	r3, [pc, #580]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 801226a:	689b      	ldr	r3, [r3, #8]
 801226c:	f003 030c 	and.w	r3, r3, #12
        || \
 8012270:	2b08      	cmp	r3, #8
 8012272:	d106      	bne.n	8012282 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8012274:	4b8e      	ldr	r3, [pc, #568]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801227c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8012280:	d00c      	beq.n	801229c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012282:	4b8b      	ldr	r3, [pc, #556]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012284:	689b      	ldr	r3, [r3, #8]
 8012286:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 801228a:	2b0c      	cmp	r3, #12
 801228c:	d112      	bne.n	80122b4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801228e:	4b88      	ldr	r3, [pc, #544]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8012296:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801229a:	d10b      	bne.n	80122b4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801229c:	4b84      	ldr	r3, [pc, #528]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d05b      	beq.n	8012360 <HAL_RCC_OscConfig+0x124>
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	685b      	ldr	r3, [r3, #4]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d157      	bne.n	8012360 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80122b0:	2301      	movs	r3, #1
 80122b2:	e25a      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80122bc:	d106      	bne.n	80122cc <HAL_RCC_OscConfig+0x90>
 80122be:	4b7c      	ldr	r3, [pc, #496]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	4a7b      	ldr	r2, [pc, #492]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80122c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80122c8:	6013      	str	r3, [r2, #0]
 80122ca:	e01d      	b.n	8012308 <HAL_RCC_OscConfig+0xcc>
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	685b      	ldr	r3, [r3, #4]
 80122d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80122d4:	d10c      	bne.n	80122f0 <HAL_RCC_OscConfig+0xb4>
 80122d6:	4b76      	ldr	r3, [pc, #472]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	4a75      	ldr	r2, [pc, #468]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80122dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80122e0:	6013      	str	r3, [r2, #0]
 80122e2:	4b73      	ldr	r3, [pc, #460]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	4a72      	ldr	r2, [pc, #456]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80122e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80122ec:	6013      	str	r3, [r2, #0]
 80122ee:	e00b      	b.n	8012308 <HAL_RCC_OscConfig+0xcc>
 80122f0:	4b6f      	ldr	r3, [pc, #444]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	4a6e      	ldr	r2, [pc, #440]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80122f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80122fa:	6013      	str	r3, [r2, #0]
 80122fc:	4b6c      	ldr	r3, [pc, #432]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	4a6b      	ldr	r2, [pc, #428]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8012306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d013      	beq.n	8012338 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012310:	f7fd fc3e 	bl	800fb90 <HAL_GetTick>
 8012314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012316:	e008      	b.n	801232a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012318:	f7fd fc3a 	bl	800fb90 <HAL_GetTick>
 801231c:	4602      	mov	r2, r0
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	1ad3      	subs	r3, r2, r3
 8012322:	2b64      	cmp	r3, #100	@ 0x64
 8012324:	d901      	bls.n	801232a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8012326:	2303      	movs	r3, #3
 8012328:	e21f      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801232a:	4b61      	ldr	r3, [pc, #388]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012332:	2b00      	cmp	r3, #0
 8012334:	d0f0      	beq.n	8012318 <HAL_RCC_OscConfig+0xdc>
 8012336:	e014      	b.n	8012362 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012338:	f7fd fc2a 	bl	800fb90 <HAL_GetTick>
 801233c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801233e:	e008      	b.n	8012352 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8012340:	f7fd fc26 	bl	800fb90 <HAL_GetTick>
 8012344:	4602      	mov	r2, r0
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	1ad3      	subs	r3, r2, r3
 801234a:	2b64      	cmp	r3, #100	@ 0x64
 801234c:	d901      	bls.n	8012352 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 801234e:	2303      	movs	r3, #3
 8012350:	e20b      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012352:	4b57      	ldr	r3, [pc, #348]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801235a:	2b00      	cmp	r3, #0
 801235c:	d1f0      	bne.n	8012340 <HAL_RCC_OscConfig+0x104>
 801235e:	e000      	b.n	8012362 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	f003 0302 	and.w	r3, r3, #2
 801236a:	2b00      	cmp	r3, #0
 801236c:	d06f      	beq.n	801244e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801236e:	4b50      	ldr	r3, [pc, #320]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012370:	689b      	ldr	r3, [r3, #8]
 8012372:	f003 030c 	and.w	r3, r3, #12
 8012376:	2b00      	cmp	r3, #0
 8012378:	d017      	beq.n	80123aa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 801237a:	4b4d      	ldr	r3, [pc, #308]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 801237c:	689b      	ldr	r3, [r3, #8]
 801237e:	f003 030c 	and.w	r3, r3, #12
        || \
 8012382:	2b08      	cmp	r3, #8
 8012384:	d105      	bne.n	8012392 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8012386:	4b4a      	ldr	r3, [pc, #296]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012388:	685b      	ldr	r3, [r3, #4]
 801238a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801238e:	2b00      	cmp	r3, #0
 8012390:	d00b      	beq.n	80123aa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012392:	4b47      	ldr	r3, [pc, #284]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012394:	689b      	ldr	r3, [r3, #8]
 8012396:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 801239a:	2b0c      	cmp	r3, #12
 801239c:	d11c      	bne.n	80123d8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801239e:	4b44      	ldr	r3, [pc, #272]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80123a0:	685b      	ldr	r3, [r3, #4]
 80123a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d116      	bne.n	80123d8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80123aa:	4b41      	ldr	r3, [pc, #260]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	f003 0302 	and.w	r3, r3, #2
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d005      	beq.n	80123c2 <HAL_RCC_OscConfig+0x186>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	68db      	ldr	r3, [r3, #12]
 80123ba:	2b01      	cmp	r3, #1
 80123bc:	d001      	beq.n	80123c2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80123be:	2301      	movs	r3, #1
 80123c0:	e1d3      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80123c2:	4b3b      	ldr	r3, [pc, #236]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	691b      	ldr	r3, [r3, #16]
 80123ce:	00db      	lsls	r3, r3, #3
 80123d0:	4937      	ldr	r1, [pc, #220]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 80123d2:	4313      	orrs	r3, r2
 80123d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80123d6:	e03a      	b.n	801244e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	68db      	ldr	r3, [r3, #12]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d020      	beq.n	8012422 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80123e0:	4b34      	ldr	r3, [pc, #208]	@ (80124b4 <HAL_RCC_OscConfig+0x278>)
 80123e2:	2201      	movs	r2, #1
 80123e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80123e6:	f7fd fbd3 	bl	800fb90 <HAL_GetTick>
 80123ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80123ec:	e008      	b.n	8012400 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80123ee:	f7fd fbcf 	bl	800fb90 <HAL_GetTick>
 80123f2:	4602      	mov	r2, r0
 80123f4:	693b      	ldr	r3, [r7, #16]
 80123f6:	1ad3      	subs	r3, r2, r3
 80123f8:	2b02      	cmp	r3, #2
 80123fa:	d901      	bls.n	8012400 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80123fc:	2303      	movs	r3, #3
 80123fe:	e1b4      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012400:	4b2b      	ldr	r3, [pc, #172]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	f003 0302 	and.w	r3, r3, #2
 8012408:	2b00      	cmp	r3, #0
 801240a:	d0f0      	beq.n	80123ee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801240c:	4b28      	ldr	r3, [pc, #160]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	691b      	ldr	r3, [r3, #16]
 8012418:	00db      	lsls	r3, r3, #3
 801241a:	4925      	ldr	r1, [pc, #148]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 801241c:	4313      	orrs	r3, r2
 801241e:	600b      	str	r3, [r1, #0]
 8012420:	e015      	b.n	801244e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012422:	4b24      	ldr	r3, [pc, #144]	@ (80124b4 <HAL_RCC_OscConfig+0x278>)
 8012424:	2200      	movs	r2, #0
 8012426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012428:	f7fd fbb2 	bl	800fb90 <HAL_GetTick>
 801242c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801242e:	e008      	b.n	8012442 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8012430:	f7fd fbae 	bl	800fb90 <HAL_GetTick>
 8012434:	4602      	mov	r2, r0
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	2b02      	cmp	r3, #2
 801243c:	d901      	bls.n	8012442 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801243e:	2303      	movs	r3, #3
 8012440:	e193      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012442:	4b1b      	ldr	r3, [pc, #108]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	f003 0302 	and.w	r3, r3, #2
 801244a:	2b00      	cmp	r3, #0
 801244c:	d1f0      	bne.n	8012430 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	f003 0308 	and.w	r3, r3, #8
 8012456:	2b00      	cmp	r3, #0
 8012458:	d036      	beq.n	80124c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	695b      	ldr	r3, [r3, #20]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d016      	beq.n	8012490 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012462:	4b15      	ldr	r3, [pc, #84]	@ (80124b8 <HAL_RCC_OscConfig+0x27c>)
 8012464:	2201      	movs	r2, #1
 8012466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012468:	f7fd fb92 	bl	800fb90 <HAL_GetTick>
 801246c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801246e:	e008      	b.n	8012482 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8012470:	f7fd fb8e 	bl	800fb90 <HAL_GetTick>
 8012474:	4602      	mov	r2, r0
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	1ad3      	subs	r3, r2, r3
 801247a:	2b02      	cmp	r3, #2
 801247c:	d901      	bls.n	8012482 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 801247e:	2303      	movs	r3, #3
 8012480:	e173      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012482:	4b0b      	ldr	r3, [pc, #44]	@ (80124b0 <HAL_RCC_OscConfig+0x274>)
 8012484:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012486:	f003 0302 	and.w	r3, r3, #2
 801248a:	2b00      	cmp	r3, #0
 801248c:	d0f0      	beq.n	8012470 <HAL_RCC_OscConfig+0x234>
 801248e:	e01b      	b.n	80124c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012490:	4b09      	ldr	r3, [pc, #36]	@ (80124b8 <HAL_RCC_OscConfig+0x27c>)
 8012492:	2200      	movs	r2, #0
 8012494:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012496:	f7fd fb7b 	bl	800fb90 <HAL_GetTick>
 801249a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801249c:	e00e      	b.n	80124bc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801249e:	f7fd fb77 	bl	800fb90 <HAL_GetTick>
 80124a2:	4602      	mov	r2, r0
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	1ad3      	subs	r3, r2, r3
 80124a8:	2b02      	cmp	r3, #2
 80124aa:	d907      	bls.n	80124bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80124ac:	2303      	movs	r3, #3
 80124ae:	e15c      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
 80124b0:	40023800 	.word	0x40023800
 80124b4:	42470000 	.word	0x42470000
 80124b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80124bc:	4b8a      	ldr	r3, [pc, #552]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80124be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124c0:	f003 0302 	and.w	r3, r3, #2
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d1ea      	bne.n	801249e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	f003 0304 	and.w	r3, r3, #4
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	f000 8097 	beq.w	8012604 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80124d6:	2300      	movs	r3, #0
 80124d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80124da:	4b83      	ldr	r3, [pc, #524]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80124dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d10f      	bne.n	8012506 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80124e6:	2300      	movs	r3, #0
 80124e8:	60bb      	str	r3, [r7, #8]
 80124ea:	4b7f      	ldr	r3, [pc, #508]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80124ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124ee:	4a7e      	ldr	r2, [pc, #504]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80124f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80124f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80124f6:	4b7c      	ldr	r3, [pc, #496]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80124f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80124fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80124fe:	60bb      	str	r3, [r7, #8]
 8012500:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012502:	2301      	movs	r3, #1
 8012504:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012506:	4b79      	ldr	r3, [pc, #484]	@ (80126ec <HAL_RCC_OscConfig+0x4b0>)
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801250e:	2b00      	cmp	r3, #0
 8012510:	d118      	bne.n	8012544 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012512:	4b76      	ldr	r3, [pc, #472]	@ (80126ec <HAL_RCC_OscConfig+0x4b0>)
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	4a75      	ldr	r2, [pc, #468]	@ (80126ec <HAL_RCC_OscConfig+0x4b0>)
 8012518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801251c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801251e:	f7fd fb37 	bl	800fb90 <HAL_GetTick>
 8012522:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012524:	e008      	b.n	8012538 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012526:	f7fd fb33 	bl	800fb90 <HAL_GetTick>
 801252a:	4602      	mov	r2, r0
 801252c:	693b      	ldr	r3, [r7, #16]
 801252e:	1ad3      	subs	r3, r2, r3
 8012530:	2b02      	cmp	r3, #2
 8012532:	d901      	bls.n	8012538 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8012534:	2303      	movs	r3, #3
 8012536:	e118      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012538:	4b6c      	ldr	r3, [pc, #432]	@ (80126ec <HAL_RCC_OscConfig+0x4b0>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012540:	2b00      	cmp	r3, #0
 8012542:	d0f0      	beq.n	8012526 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	689b      	ldr	r3, [r3, #8]
 8012548:	2b01      	cmp	r3, #1
 801254a:	d106      	bne.n	801255a <HAL_RCC_OscConfig+0x31e>
 801254c:	4b66      	ldr	r3, [pc, #408]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 801254e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012550:	4a65      	ldr	r2, [pc, #404]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 8012552:	f043 0301 	orr.w	r3, r3, #1
 8012556:	6713      	str	r3, [r2, #112]	@ 0x70
 8012558:	e01c      	b.n	8012594 <HAL_RCC_OscConfig+0x358>
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	689b      	ldr	r3, [r3, #8]
 801255e:	2b05      	cmp	r3, #5
 8012560:	d10c      	bne.n	801257c <HAL_RCC_OscConfig+0x340>
 8012562:	4b61      	ldr	r3, [pc, #388]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 8012564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012566:	4a60      	ldr	r2, [pc, #384]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 8012568:	f043 0304 	orr.w	r3, r3, #4
 801256c:	6713      	str	r3, [r2, #112]	@ 0x70
 801256e:	4b5e      	ldr	r3, [pc, #376]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 8012570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012572:	4a5d      	ldr	r2, [pc, #372]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 8012574:	f043 0301 	orr.w	r3, r3, #1
 8012578:	6713      	str	r3, [r2, #112]	@ 0x70
 801257a:	e00b      	b.n	8012594 <HAL_RCC_OscConfig+0x358>
 801257c:	4b5a      	ldr	r3, [pc, #360]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 801257e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012580:	4a59      	ldr	r2, [pc, #356]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 8012582:	f023 0301 	bic.w	r3, r3, #1
 8012586:	6713      	str	r3, [r2, #112]	@ 0x70
 8012588:	4b57      	ldr	r3, [pc, #348]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 801258a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801258c:	4a56      	ldr	r2, [pc, #344]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 801258e:	f023 0304 	bic.w	r3, r3, #4
 8012592:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	689b      	ldr	r3, [r3, #8]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d015      	beq.n	80125c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801259c:	f7fd faf8 	bl	800fb90 <HAL_GetTick>
 80125a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80125a2:	e00a      	b.n	80125ba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80125a4:	f7fd faf4 	bl	800fb90 <HAL_GetTick>
 80125a8:	4602      	mov	r2, r0
 80125aa:	693b      	ldr	r3, [r7, #16]
 80125ac:	1ad3      	subs	r3, r2, r3
 80125ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80125b2:	4293      	cmp	r3, r2
 80125b4:	d901      	bls.n	80125ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80125b6:	2303      	movs	r3, #3
 80125b8:	e0d7      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80125ba:	4b4b      	ldr	r3, [pc, #300]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80125bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125be:	f003 0302 	and.w	r3, r3, #2
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d0ee      	beq.n	80125a4 <HAL_RCC_OscConfig+0x368>
 80125c6:	e014      	b.n	80125f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80125c8:	f7fd fae2 	bl	800fb90 <HAL_GetTick>
 80125cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80125ce:	e00a      	b.n	80125e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80125d0:	f7fd fade 	bl	800fb90 <HAL_GetTick>
 80125d4:	4602      	mov	r2, r0
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	1ad3      	subs	r3, r2, r3
 80125da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80125de:	4293      	cmp	r3, r2
 80125e0:	d901      	bls.n	80125e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80125e2:	2303      	movs	r3, #3
 80125e4:	e0c1      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80125e6:	4b40      	ldr	r3, [pc, #256]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80125e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125ea:	f003 0302 	and.w	r3, r3, #2
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d1ee      	bne.n	80125d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80125f2:	7dfb      	ldrb	r3, [r7, #23]
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d105      	bne.n	8012604 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80125f8:	4b3b      	ldr	r3, [pc, #236]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80125fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80125fc:	4a3a      	ldr	r2, [pc, #232]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80125fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8012602:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	699b      	ldr	r3, [r3, #24]
 8012608:	2b00      	cmp	r3, #0
 801260a:	f000 80ad 	beq.w	8012768 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801260e:	4b36      	ldr	r3, [pc, #216]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 8012610:	689b      	ldr	r3, [r3, #8]
 8012612:	f003 030c 	and.w	r3, r3, #12
 8012616:	2b08      	cmp	r3, #8
 8012618:	d060      	beq.n	80126dc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	699b      	ldr	r3, [r3, #24]
 801261e:	2b02      	cmp	r3, #2
 8012620:	d145      	bne.n	80126ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012622:	4b33      	ldr	r3, [pc, #204]	@ (80126f0 <HAL_RCC_OscConfig+0x4b4>)
 8012624:	2200      	movs	r2, #0
 8012626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012628:	f7fd fab2 	bl	800fb90 <HAL_GetTick>
 801262c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801262e:	e008      	b.n	8012642 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8012630:	f7fd faae 	bl	800fb90 <HAL_GetTick>
 8012634:	4602      	mov	r2, r0
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	1ad3      	subs	r3, r2, r3
 801263a:	2b02      	cmp	r3, #2
 801263c:	d901      	bls.n	8012642 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 801263e:	2303      	movs	r3, #3
 8012640:	e093      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012642:	4b29      	ldr	r3, [pc, #164]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801264a:	2b00      	cmp	r3, #0
 801264c:	d1f0      	bne.n	8012630 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	69da      	ldr	r2, [r3, #28]
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	6a1b      	ldr	r3, [r3, #32]
 8012656:	431a      	orrs	r2, r3
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801265c:	019b      	lsls	r3, r3, #6
 801265e:	431a      	orrs	r2, r3
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012664:	085b      	lsrs	r3, r3, #1
 8012666:	3b01      	subs	r3, #1
 8012668:	041b      	lsls	r3, r3, #16
 801266a:	431a      	orrs	r2, r3
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012670:	061b      	lsls	r3, r3, #24
 8012672:	431a      	orrs	r2, r3
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012678:	071b      	lsls	r3, r3, #28
 801267a:	491b      	ldr	r1, [pc, #108]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 801267c:	4313      	orrs	r3, r2
 801267e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012680:	4b1b      	ldr	r3, [pc, #108]	@ (80126f0 <HAL_RCC_OscConfig+0x4b4>)
 8012682:	2201      	movs	r2, #1
 8012684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012686:	f7fd fa83 	bl	800fb90 <HAL_GetTick>
 801268a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801268c:	e008      	b.n	80126a0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801268e:	f7fd fa7f 	bl	800fb90 <HAL_GetTick>
 8012692:	4602      	mov	r2, r0
 8012694:	693b      	ldr	r3, [r7, #16]
 8012696:	1ad3      	subs	r3, r2, r3
 8012698:	2b02      	cmp	r3, #2
 801269a:	d901      	bls.n	80126a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 801269c:	2303      	movs	r3, #3
 801269e:	e064      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80126a0:	4b11      	ldr	r3, [pc, #68]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80126a2:	681b      	ldr	r3, [r3, #0]
 80126a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d0f0      	beq.n	801268e <HAL_RCC_OscConfig+0x452>
 80126ac:	e05c      	b.n	8012768 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80126ae:	4b10      	ldr	r3, [pc, #64]	@ (80126f0 <HAL_RCC_OscConfig+0x4b4>)
 80126b0:	2200      	movs	r2, #0
 80126b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80126b4:	f7fd fa6c 	bl	800fb90 <HAL_GetTick>
 80126b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80126ba:	e008      	b.n	80126ce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80126bc:	f7fd fa68 	bl	800fb90 <HAL_GetTick>
 80126c0:	4602      	mov	r2, r0
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	1ad3      	subs	r3, r2, r3
 80126c6:	2b02      	cmp	r3, #2
 80126c8:	d901      	bls.n	80126ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80126ca:	2303      	movs	r3, #3
 80126cc:	e04d      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80126ce:	4b06      	ldr	r3, [pc, #24]	@ (80126e8 <HAL_RCC_OscConfig+0x4ac>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d1f0      	bne.n	80126bc <HAL_RCC_OscConfig+0x480>
 80126da:	e045      	b.n	8012768 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	699b      	ldr	r3, [r3, #24]
 80126e0:	2b01      	cmp	r3, #1
 80126e2:	d107      	bne.n	80126f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80126e4:	2301      	movs	r3, #1
 80126e6:	e040      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
 80126e8:	40023800 	.word	0x40023800
 80126ec:	40007000 	.word	0x40007000
 80126f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80126f4:	4b1f      	ldr	r3, [pc, #124]	@ (8012774 <HAL_RCC_OscConfig+0x538>)
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	699b      	ldr	r3, [r3, #24]
 80126fe:	2b01      	cmp	r3, #1
 8012700:	d030      	beq.n	8012764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801270c:	429a      	cmp	r2, r3
 801270e:	d129      	bne.n	8012764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801271a:	429a      	cmp	r2, r3
 801271c:	d122      	bne.n	8012764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 801271e:	68fa      	ldr	r2, [r7, #12]
 8012720:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8012724:	4013      	ands	r3, r2
 8012726:	687a      	ldr	r2, [r7, #4]
 8012728:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801272a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801272c:	4293      	cmp	r3, r2
 801272e:	d119      	bne.n	8012764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801273a:	085b      	lsrs	r3, r3, #1
 801273c:	3b01      	subs	r3, #1
 801273e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012740:	429a      	cmp	r2, r3
 8012742:	d10f      	bne.n	8012764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801274e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012750:	429a      	cmp	r2, r3
 8012752:	d107      	bne.n	8012764 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801275e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8012760:	429a      	cmp	r2, r3
 8012762:	d001      	beq.n	8012768 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8012764:	2301      	movs	r3, #1
 8012766:	e000      	b.n	801276a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8012768:	2300      	movs	r3, #0
}
 801276a:	4618      	mov	r0, r3
 801276c:	3718      	adds	r7, #24
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}
 8012772:	bf00      	nop
 8012774:	40023800 	.word	0x40023800

08012778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d101      	bne.n	801278a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8012786:	2301      	movs	r3, #1
 8012788:	e07b      	b.n	8012882 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801278e:	2b00      	cmp	r3, #0
 8012790:	d108      	bne.n	80127a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	685b      	ldr	r3, [r3, #4]
 8012796:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 801279a:	d009      	beq.n	80127b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2200      	movs	r2, #0
 80127a0:	61da      	str	r2, [r3, #28]
 80127a2:	e005      	b.n	80127b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2200      	movs	r2, #0
 80127a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2200      	movs	r2, #0
 80127ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2200      	movs	r2, #0
 80127b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d106      	bne.n	80127d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	2200      	movs	r2, #0
 80127c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80127ca:	6878      	ldr	r0, [r7, #4]
 80127cc:	f7fc ff9a 	bl	800f704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	2202      	movs	r2, #2
 80127d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80127e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	685b      	ldr	r3, [r3, #4]
 80127ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	689b      	ldr	r3, [r3, #8]
 80127f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80127f8:	431a      	orrs	r2, r3
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012802:	431a      	orrs	r2, r3
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	691b      	ldr	r3, [r3, #16]
 8012808:	f003 0302 	and.w	r3, r3, #2
 801280c:	431a      	orrs	r2, r3
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	695b      	ldr	r3, [r3, #20]
 8012812:	f003 0301 	and.w	r3, r3, #1
 8012816:	431a      	orrs	r2, r3
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	699b      	ldr	r3, [r3, #24]
 801281c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012820:	431a      	orrs	r2, r3
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	69db      	ldr	r3, [r3, #28]
 8012826:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801282a:	431a      	orrs	r2, r3
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6a1b      	ldr	r3, [r3, #32]
 8012830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012834:	ea42 0103 	orr.w	r1, r2, r3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801283c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	430a      	orrs	r2, r1
 8012846:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	699b      	ldr	r3, [r3, #24]
 801284c:	0c1b      	lsrs	r3, r3, #16
 801284e:	f003 0104 	and.w	r1, r3, #4
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012856:	f003 0210 	and.w	r2, r3, #16
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	430a      	orrs	r2, r1
 8012860:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	69da      	ldr	r2, [r3, #28]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8012870:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	2200      	movs	r2, #0
 8012876:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2201      	movs	r2, #1
 801287c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8012880:	2300      	movs	r3, #0
}
 8012882:	4618      	mov	r0, r3
 8012884:	3708      	adds	r7, #8
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801288a:	b580      	push	{r7, lr}
 801288c:	b082      	sub	sp, #8
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d101      	bne.n	801289c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012898:	2301      	movs	r3, #1
 801289a:	e041      	b.n	8012920 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d106      	bne.n	80128b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2200      	movs	r2, #0
 80128ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f7fc ff9f 	bl	800f7f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2202      	movs	r2, #2
 80128ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	3304      	adds	r3, #4
 80128c6:	4619      	mov	r1, r3
 80128c8:	4610      	mov	r0, r2
 80128ca:	f000 faab 	bl	8012e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	2201      	movs	r2, #1
 80128d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2201      	movs	r2, #1
 80128da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	2201      	movs	r2, #1
 80128e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	2201      	movs	r2, #1
 80128ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2201      	movs	r2, #1
 80128f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	2201      	movs	r2, #1
 80128fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2201      	movs	r2, #1
 8012902:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2201      	movs	r2, #1
 801290a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	2201      	movs	r2, #1
 8012912:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2201      	movs	r2, #1
 801291a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801291e:	2300      	movs	r3, #0
}
 8012920:	4618      	mov	r0, r3
 8012922:	3708      	adds	r7, #8
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}

08012928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012928:	b480      	push	{r7}
 801292a:	b085      	sub	sp, #20
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8012936:	b2db      	uxtb	r3, r3
 8012938:	2b01      	cmp	r3, #1
 801293a:	d001      	beq.n	8012940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801293c:	2301      	movs	r3, #1
 801293e:	e04e      	b.n	80129de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	2202      	movs	r2, #2
 8012944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	68da      	ldr	r2, [r3, #12]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	f042 0201 	orr.w	r2, r2, #1
 8012956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	4a23      	ldr	r2, [pc, #140]	@ (80129ec <HAL_TIM_Base_Start_IT+0xc4>)
 801295e:	4293      	cmp	r3, r2
 8012960:	d022      	beq.n	80129a8 <HAL_TIM_Base_Start_IT+0x80>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801296a:	d01d      	beq.n	80129a8 <HAL_TIM_Base_Start_IT+0x80>
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	4a1f      	ldr	r2, [pc, #124]	@ (80129f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d018      	beq.n	80129a8 <HAL_TIM_Base_Start_IT+0x80>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	4a1e      	ldr	r2, [pc, #120]	@ (80129f4 <HAL_TIM_Base_Start_IT+0xcc>)
 801297c:	4293      	cmp	r3, r2
 801297e:	d013      	beq.n	80129a8 <HAL_TIM_Base_Start_IT+0x80>
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	4a1c      	ldr	r2, [pc, #112]	@ (80129f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8012986:	4293      	cmp	r3, r2
 8012988:	d00e      	beq.n	80129a8 <HAL_TIM_Base_Start_IT+0x80>
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	4a1b      	ldr	r2, [pc, #108]	@ (80129fc <HAL_TIM_Base_Start_IT+0xd4>)
 8012990:	4293      	cmp	r3, r2
 8012992:	d009      	beq.n	80129a8 <HAL_TIM_Base_Start_IT+0x80>
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	4a19      	ldr	r2, [pc, #100]	@ (8012a00 <HAL_TIM_Base_Start_IT+0xd8>)
 801299a:	4293      	cmp	r3, r2
 801299c:	d004      	beq.n	80129a8 <HAL_TIM_Base_Start_IT+0x80>
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	4a18      	ldr	r2, [pc, #96]	@ (8012a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80129a4:	4293      	cmp	r3, r2
 80129a6:	d111      	bne.n	80129cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	689b      	ldr	r3, [r3, #8]
 80129ae:	f003 0307 	and.w	r3, r3, #7
 80129b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	2b06      	cmp	r3, #6
 80129b8:	d010      	beq.n	80129dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	681a      	ldr	r2, [r3, #0]
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f042 0201 	orr.w	r2, r2, #1
 80129c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129ca:	e007      	b.n	80129dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	f042 0201 	orr.w	r2, r2, #1
 80129da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80129dc:	2300      	movs	r3, #0
}
 80129de:	4618      	mov	r0, r3
 80129e0:	3714      	adds	r7, #20
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop
 80129ec:	40010000 	.word	0x40010000
 80129f0:	40000400 	.word	0x40000400
 80129f4:	40000800 	.word	0x40000800
 80129f8:	40000c00 	.word	0x40000c00
 80129fc:	40010400 	.word	0x40010400
 8012a00:	40014000 	.word	0x40014000
 8012a04:	40001800 	.word	0x40001800

08012a08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b083      	sub	sp, #12
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	68da      	ldr	r2, [r3, #12]
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f022 0201 	bic.w	r2, r2, #1
 8012a1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	6a1a      	ldr	r2, [r3, #32]
 8012a26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8012a2a:	4013      	ands	r3, r2
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d10f      	bne.n	8012a50 <HAL_TIM_Base_Stop_IT+0x48>
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	6a1a      	ldr	r2, [r3, #32]
 8012a36:	f240 4344 	movw	r3, #1092	@ 0x444
 8012a3a:	4013      	ands	r3, r2
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d107      	bne.n	8012a50 <HAL_TIM_Base_Stop_IT+0x48>
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	681a      	ldr	r2, [r3, #0]
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	f022 0201 	bic.w	r2, r2, #1
 8012a4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	2201      	movs	r2, #1
 8012a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8012a58:	2300      	movs	r3, #0
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	370c      	adds	r7, #12
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr

08012a66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b084      	sub	sp, #16
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	68db      	ldr	r3, [r3, #12]
 8012a74:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	691b      	ldr	r3, [r3, #16]
 8012a7c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	f003 0302 	and.w	r3, r3, #2
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d020      	beq.n	8012aca <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	f003 0302 	and.w	r3, r3, #2
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d01b      	beq.n	8012aca <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	f06f 0202 	mvn.w	r2, #2
 8012a9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	2201      	movs	r2, #1
 8012aa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	699b      	ldr	r3, [r3, #24]
 8012aa8:	f003 0303 	and.w	r3, r3, #3
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d003      	beq.n	8012ab8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012ab0:	6878      	ldr	r0, [r7, #4]
 8012ab2:	f000 f999 	bl	8012de8 <HAL_TIM_IC_CaptureCallback>
 8012ab6:	e005      	b.n	8012ac4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f000 f98b 	bl	8012dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012abe:	6878      	ldr	r0, [r7, #4]
 8012ac0:	f000 f99c 	bl	8012dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	f003 0304 	and.w	r3, r3, #4
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d020      	beq.n	8012b16 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	f003 0304 	and.w	r3, r3, #4
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d01b      	beq.n	8012b16 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	f06f 0204 	mvn.w	r2, #4
 8012ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	2202      	movs	r2, #2
 8012aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	699b      	ldr	r3, [r3, #24]
 8012af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d003      	beq.n	8012b04 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f000 f973 	bl	8012de8 <HAL_TIM_IC_CaptureCallback>
 8012b02:	e005      	b.n	8012b10 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f000 f965 	bl	8012dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b0a:	6878      	ldr	r0, [r7, #4]
 8012b0c:	f000 f976 	bl	8012dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	2200      	movs	r2, #0
 8012b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	f003 0308 	and.w	r3, r3, #8
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d020      	beq.n	8012b62 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	f003 0308 	and.w	r3, r3, #8
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d01b      	beq.n	8012b62 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	f06f 0208 	mvn.w	r2, #8
 8012b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2204      	movs	r2, #4
 8012b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	69db      	ldr	r3, [r3, #28]
 8012b40:	f003 0303 	and.w	r3, r3, #3
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d003      	beq.n	8012b50 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012b48:	6878      	ldr	r0, [r7, #4]
 8012b4a:	f000 f94d 	bl	8012de8 <HAL_TIM_IC_CaptureCallback>
 8012b4e:	e005      	b.n	8012b5c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f000 f93f 	bl	8012dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 f950 	bl	8012dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	2200      	movs	r2, #0
 8012b60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8012b62:	68bb      	ldr	r3, [r7, #8]
 8012b64:	f003 0310 	and.w	r3, r3, #16
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d020      	beq.n	8012bae <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	f003 0310 	and.w	r3, r3, #16
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d01b      	beq.n	8012bae <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	f06f 0210 	mvn.w	r2, #16
 8012b7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2208      	movs	r2, #8
 8012b84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	69db      	ldr	r3, [r3, #28]
 8012b8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d003      	beq.n	8012b9c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f000 f927 	bl	8012de8 <HAL_TIM_IC_CaptureCallback>
 8012b9a:	e005      	b.n	8012ba8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012b9c:	6878      	ldr	r0, [r7, #4]
 8012b9e:	f000 f919 	bl	8012dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012ba2:	6878      	ldr	r0, [r7, #4]
 8012ba4:	f000 f92a 	bl	8012dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2200      	movs	r2, #0
 8012bac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	f003 0301 	and.w	r3, r3, #1
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d00c      	beq.n	8012bd2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	f003 0301 	and.w	r3, r3, #1
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d007      	beq.n	8012bd2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	f06f 0201 	mvn.w	r2, #1
 8012bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012bcc:	6878      	ldr	r0, [r7, #4]
 8012bce:	f7fc fc5f 	bl	800f490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d00c      	beq.n	8012bf6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d007      	beq.n	8012bf6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8012bee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012bf0:	6878      	ldr	r0, [r7, #4]
 8012bf2:	f000 fadd 	bl	80131b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d00c      	beq.n	8012c1a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d007      	beq.n	8012c1a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8012c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f000 f8fb 	bl	8012e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8012c1a:	68bb      	ldr	r3, [r7, #8]
 8012c1c:	f003 0320 	and.w	r3, r3, #32
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d00c      	beq.n	8012c3e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	f003 0320 	and.w	r3, r3, #32
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d007      	beq.n	8012c3e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f06f 0220 	mvn.w	r2, #32
 8012c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8012c38:	6878      	ldr	r0, [r7, #4]
 8012c3a:	f000 faaf 	bl	801319c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8012c3e:	bf00      	nop
 8012c40:	3710      	adds	r7, #16
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}

08012c46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012c46:	b580      	push	{r7, lr}
 8012c48:	b084      	sub	sp, #16
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	6078      	str	r0, [r7, #4]
 8012c4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012c50:	2300      	movs	r3, #0
 8012c52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012c5a:	2b01      	cmp	r3, #1
 8012c5c:	d101      	bne.n	8012c62 <HAL_TIM_ConfigClockSource+0x1c>
 8012c5e:	2302      	movs	r3, #2
 8012c60:	e0b4      	b.n	8012dcc <HAL_TIM_ConfigClockSource+0x186>
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2201      	movs	r2, #1
 8012c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	2202      	movs	r2, #2
 8012c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	689b      	ldr	r3, [r3, #8]
 8012c78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012c7a:	68bb      	ldr	r3, [r7, #8]
 8012c7c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8012c80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8012c88:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	68ba      	ldr	r2, [r7, #8]
 8012c90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012c9a:	d03e      	beq.n	8012d1a <HAL_TIM_ConfigClockSource+0xd4>
 8012c9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012ca0:	f200 8087 	bhi.w	8012db2 <HAL_TIM_ConfigClockSource+0x16c>
 8012ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012ca8:	f000 8086 	beq.w	8012db8 <HAL_TIM_ConfigClockSource+0x172>
 8012cac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012cb0:	d87f      	bhi.n	8012db2 <HAL_TIM_ConfigClockSource+0x16c>
 8012cb2:	2b70      	cmp	r3, #112	@ 0x70
 8012cb4:	d01a      	beq.n	8012cec <HAL_TIM_ConfigClockSource+0xa6>
 8012cb6:	2b70      	cmp	r3, #112	@ 0x70
 8012cb8:	d87b      	bhi.n	8012db2 <HAL_TIM_ConfigClockSource+0x16c>
 8012cba:	2b60      	cmp	r3, #96	@ 0x60
 8012cbc:	d050      	beq.n	8012d60 <HAL_TIM_ConfigClockSource+0x11a>
 8012cbe:	2b60      	cmp	r3, #96	@ 0x60
 8012cc0:	d877      	bhi.n	8012db2 <HAL_TIM_ConfigClockSource+0x16c>
 8012cc2:	2b50      	cmp	r3, #80	@ 0x50
 8012cc4:	d03c      	beq.n	8012d40 <HAL_TIM_ConfigClockSource+0xfa>
 8012cc6:	2b50      	cmp	r3, #80	@ 0x50
 8012cc8:	d873      	bhi.n	8012db2 <HAL_TIM_ConfigClockSource+0x16c>
 8012cca:	2b40      	cmp	r3, #64	@ 0x40
 8012ccc:	d058      	beq.n	8012d80 <HAL_TIM_ConfigClockSource+0x13a>
 8012cce:	2b40      	cmp	r3, #64	@ 0x40
 8012cd0:	d86f      	bhi.n	8012db2 <HAL_TIM_ConfigClockSource+0x16c>
 8012cd2:	2b30      	cmp	r3, #48	@ 0x30
 8012cd4:	d064      	beq.n	8012da0 <HAL_TIM_ConfigClockSource+0x15a>
 8012cd6:	2b30      	cmp	r3, #48	@ 0x30
 8012cd8:	d86b      	bhi.n	8012db2 <HAL_TIM_ConfigClockSource+0x16c>
 8012cda:	2b20      	cmp	r3, #32
 8012cdc:	d060      	beq.n	8012da0 <HAL_TIM_ConfigClockSource+0x15a>
 8012cde:	2b20      	cmp	r3, #32
 8012ce0:	d867      	bhi.n	8012db2 <HAL_TIM_ConfigClockSource+0x16c>
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d05c      	beq.n	8012da0 <HAL_TIM_ConfigClockSource+0x15a>
 8012ce6:	2b10      	cmp	r3, #16
 8012ce8:	d05a      	beq.n	8012da0 <HAL_TIM_ConfigClockSource+0x15a>
 8012cea:	e062      	b.n	8012db2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012cfc:	f000 f9b2 	bl	8013064 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	689b      	ldr	r3, [r3, #8]
 8012d06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8012d0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	68ba      	ldr	r2, [r7, #8]
 8012d16:	609a      	str	r2, [r3, #8]
      break;
 8012d18:	e04f      	b.n	8012dba <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8012d2a:	f000 f99b 	bl	8013064 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	689a      	ldr	r2, [r3, #8]
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012d3c:	609a      	str	r2, [r3, #8]
      break;
 8012d3e:	e03c      	b.n	8012dba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	f000 f90f 	bl	8012f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	2150      	movs	r1, #80	@ 0x50
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f000 f968 	bl	801302e <TIM_ITRx_SetConfig>
      break;
 8012d5e:	e02c      	b.n	8012dba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	f000 f92e 	bl	8012fce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	2160      	movs	r1, #96	@ 0x60
 8012d78:	4618      	mov	r0, r3
 8012d7a:	f000 f958 	bl	801302e <TIM_ITRx_SetConfig>
      break;
 8012d7e:	e01c      	b.n	8012dba <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8012d8c:	461a      	mov	r2, r3
 8012d8e:	f000 f8ef 	bl	8012f70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	2140      	movs	r1, #64	@ 0x40
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f000 f948 	bl	801302e <TIM_ITRx_SetConfig>
      break;
 8012d9e:	e00c      	b.n	8012dba <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	681a      	ldr	r2, [r3, #0]
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	4619      	mov	r1, r3
 8012daa:	4610      	mov	r0, r2
 8012dac:	f000 f93f 	bl	801302e <TIM_ITRx_SetConfig>
      break;
 8012db0:	e003      	b.n	8012dba <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8012db2:	2301      	movs	r3, #1
 8012db4:	73fb      	strb	r3, [r7, #15]
      break;
 8012db6:	e000      	b.n	8012dba <HAL_TIM_ConfigClockSource+0x174>
      break;
 8012db8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2201      	movs	r2, #1
 8012dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8012dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dcc:	4618      	mov	r0, r3
 8012dce:	3710      	adds	r7, #16
 8012dd0:	46bd      	mov	sp, r7
 8012dd2:	bd80      	pop	{r7, pc}

08012dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b083      	sub	sp, #12
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012ddc:	bf00      	nop
 8012dde:	370c      	adds	r7, #12
 8012de0:	46bd      	mov	sp, r7
 8012de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de6:	4770      	bx	lr

08012de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012de8:	b480      	push	{r7}
 8012dea:	b083      	sub	sp, #12
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012df0:	bf00      	nop
 8012df2:	370c      	adds	r7, #12
 8012df4:	46bd      	mov	sp, r7
 8012df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dfa:	4770      	bx	lr

08012dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012dfc:	b480      	push	{r7}
 8012dfe:	b083      	sub	sp, #12
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012e04:	bf00      	nop
 8012e06:	370c      	adds	r7, #12
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0e:	4770      	bx	lr

08012e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012e18:	bf00      	nop
 8012e1a:	370c      	adds	r7, #12
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr

08012e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8012e24:	b480      	push	{r7}
 8012e26:	b085      	sub	sp, #20
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	4a43      	ldr	r2, [pc, #268]	@ (8012f44 <TIM_Base_SetConfig+0x120>)
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d013      	beq.n	8012e64 <TIM_Base_SetConfig+0x40>
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e42:	d00f      	beq.n	8012e64 <TIM_Base_SetConfig+0x40>
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	4a40      	ldr	r2, [pc, #256]	@ (8012f48 <TIM_Base_SetConfig+0x124>)
 8012e48:	4293      	cmp	r3, r2
 8012e4a:	d00b      	beq.n	8012e64 <TIM_Base_SetConfig+0x40>
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8012f4c <TIM_Base_SetConfig+0x128>)
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d007      	beq.n	8012e64 <TIM_Base_SetConfig+0x40>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	4a3e      	ldr	r2, [pc, #248]	@ (8012f50 <TIM_Base_SetConfig+0x12c>)
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	d003      	beq.n	8012e64 <TIM_Base_SetConfig+0x40>
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	4a3d      	ldr	r2, [pc, #244]	@ (8012f54 <TIM_Base_SetConfig+0x130>)
 8012e60:	4293      	cmp	r3, r2
 8012e62:	d108      	bne.n	8012e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8012e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	685b      	ldr	r3, [r3, #4]
 8012e70:	68fa      	ldr	r2, [r7, #12]
 8012e72:	4313      	orrs	r3, r2
 8012e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	4a32      	ldr	r2, [pc, #200]	@ (8012f44 <TIM_Base_SetConfig+0x120>)
 8012e7a:	4293      	cmp	r3, r2
 8012e7c:	d02b      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e84:	d027      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	4a2f      	ldr	r2, [pc, #188]	@ (8012f48 <TIM_Base_SetConfig+0x124>)
 8012e8a:	4293      	cmp	r3, r2
 8012e8c:	d023      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	4a2e      	ldr	r2, [pc, #184]	@ (8012f4c <TIM_Base_SetConfig+0x128>)
 8012e92:	4293      	cmp	r3, r2
 8012e94:	d01f      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	4a2d      	ldr	r2, [pc, #180]	@ (8012f50 <TIM_Base_SetConfig+0x12c>)
 8012e9a:	4293      	cmp	r3, r2
 8012e9c:	d01b      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	4a2c      	ldr	r2, [pc, #176]	@ (8012f54 <TIM_Base_SetConfig+0x130>)
 8012ea2:	4293      	cmp	r3, r2
 8012ea4:	d017      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8012f58 <TIM_Base_SetConfig+0x134>)
 8012eaa:	4293      	cmp	r3, r2
 8012eac:	d013      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8012f5c <TIM_Base_SetConfig+0x138>)
 8012eb2:	4293      	cmp	r3, r2
 8012eb4:	d00f      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	4a29      	ldr	r2, [pc, #164]	@ (8012f60 <TIM_Base_SetConfig+0x13c>)
 8012eba:	4293      	cmp	r3, r2
 8012ebc:	d00b      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	4a28      	ldr	r2, [pc, #160]	@ (8012f64 <TIM_Base_SetConfig+0x140>)
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	d007      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	4a27      	ldr	r2, [pc, #156]	@ (8012f68 <TIM_Base_SetConfig+0x144>)
 8012eca:	4293      	cmp	r3, r2
 8012ecc:	d003      	beq.n	8012ed6 <TIM_Base_SetConfig+0xb2>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	4a26      	ldr	r2, [pc, #152]	@ (8012f6c <TIM_Base_SetConfig+0x148>)
 8012ed2:	4293      	cmp	r3, r2
 8012ed4:	d108      	bne.n	8012ee8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8012edc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	68db      	ldr	r3, [r3, #12]
 8012ee2:	68fa      	ldr	r2, [r7, #12]
 8012ee4:	4313      	orrs	r3, r2
 8012ee6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	695b      	ldr	r3, [r3, #20]
 8012ef2:	4313      	orrs	r3, r2
 8012ef4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	689a      	ldr	r2, [r3, #8]
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	4a0e      	ldr	r2, [pc, #56]	@ (8012f44 <TIM_Base_SetConfig+0x120>)
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	d003      	beq.n	8012f16 <TIM_Base_SetConfig+0xf2>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	4a10      	ldr	r2, [pc, #64]	@ (8012f54 <TIM_Base_SetConfig+0x130>)
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d103      	bne.n	8012f1e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	691a      	ldr	r2, [r3, #16]
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	f043 0204 	orr.w	r2, r3, #4
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	2201      	movs	r2, #1
 8012f2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	68fa      	ldr	r2, [r7, #12]
 8012f34:	601a      	str	r2, [r3, #0]
}
 8012f36:	bf00      	nop
 8012f38:	3714      	adds	r7, #20
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr
 8012f42:	bf00      	nop
 8012f44:	40010000 	.word	0x40010000
 8012f48:	40000400 	.word	0x40000400
 8012f4c:	40000800 	.word	0x40000800
 8012f50:	40000c00 	.word	0x40000c00
 8012f54:	40010400 	.word	0x40010400
 8012f58:	40014000 	.word	0x40014000
 8012f5c:	40014400 	.word	0x40014400
 8012f60:	40014800 	.word	0x40014800
 8012f64:	40001800 	.word	0x40001800
 8012f68:	40001c00 	.word	0x40001c00
 8012f6c:	40002000 	.word	0x40002000

08012f70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012f70:	b480      	push	{r7}
 8012f72:	b087      	sub	sp, #28
 8012f74:	af00      	add	r7, sp, #0
 8012f76:	60f8      	str	r0, [r7, #12]
 8012f78:	60b9      	str	r1, [r7, #8]
 8012f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	6a1b      	ldr	r3, [r3, #32]
 8012f80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	6a1b      	ldr	r3, [r3, #32]
 8012f86:	f023 0201 	bic.w	r2, r3, #1
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	699b      	ldr	r3, [r3, #24]
 8012f92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012f94:	693b      	ldr	r3, [r7, #16]
 8012f96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8012f9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	011b      	lsls	r3, r3, #4
 8012fa0:	693a      	ldr	r2, [r7, #16]
 8012fa2:	4313      	orrs	r3, r2
 8012fa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012fa6:	697b      	ldr	r3, [r7, #20]
 8012fa8:	f023 030a 	bic.w	r3, r3, #10
 8012fac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012fae:	697a      	ldr	r2, [r7, #20]
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	4313      	orrs	r3, r2
 8012fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	693a      	ldr	r2, [r7, #16]
 8012fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	697a      	ldr	r2, [r7, #20]
 8012fc0:	621a      	str	r2, [r3, #32]
}
 8012fc2:	bf00      	nop
 8012fc4:	371c      	adds	r7, #28
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fcc:	4770      	bx	lr

08012fce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012fce:	b480      	push	{r7}
 8012fd0:	b087      	sub	sp, #28
 8012fd2:	af00      	add	r7, sp, #0
 8012fd4:	60f8      	str	r0, [r7, #12]
 8012fd6:	60b9      	str	r1, [r7, #8]
 8012fd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	6a1b      	ldr	r3, [r3, #32]
 8012fde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	6a1b      	ldr	r3, [r3, #32]
 8012fe4:	f023 0210 	bic.w	r2, r3, #16
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	699b      	ldr	r3, [r3, #24]
 8012ff0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012ff2:	693b      	ldr	r3, [r7, #16]
 8012ff4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8012ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	031b      	lsls	r3, r3, #12
 8012ffe:	693a      	ldr	r2, [r7, #16]
 8013000:	4313      	orrs	r3, r2
 8013002:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801300a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801300c:	68bb      	ldr	r3, [r7, #8]
 801300e:	011b      	lsls	r3, r3, #4
 8013010:	697a      	ldr	r2, [r7, #20]
 8013012:	4313      	orrs	r3, r2
 8013014:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	693a      	ldr	r2, [r7, #16]
 801301a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	697a      	ldr	r2, [r7, #20]
 8013020:	621a      	str	r2, [r3, #32]
}
 8013022:	bf00      	nop
 8013024:	371c      	adds	r7, #28
 8013026:	46bd      	mov	sp, r7
 8013028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302c:	4770      	bx	lr

0801302e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801302e:	b480      	push	{r7}
 8013030:	b085      	sub	sp, #20
 8013032:	af00      	add	r7, sp, #0
 8013034:	6078      	str	r0, [r7, #4]
 8013036:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	689b      	ldr	r3, [r3, #8]
 801303c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8013044:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8013046:	683a      	ldr	r2, [r7, #0]
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	4313      	orrs	r3, r2
 801304c:	f043 0307 	orr.w	r3, r3, #7
 8013050:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	68fa      	ldr	r2, [r7, #12]
 8013056:	609a      	str	r2, [r3, #8]
}
 8013058:	bf00      	nop
 801305a:	3714      	adds	r7, #20
 801305c:	46bd      	mov	sp, r7
 801305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013062:	4770      	bx	lr

08013064 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8013064:	b480      	push	{r7}
 8013066:	b087      	sub	sp, #28
 8013068:	af00      	add	r7, sp, #0
 801306a:	60f8      	str	r0, [r7, #12]
 801306c:	60b9      	str	r1, [r7, #8]
 801306e:	607a      	str	r2, [r7, #4]
 8013070:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	689b      	ldr	r3, [r3, #8]
 8013076:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801307e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	021a      	lsls	r2, r3, #8
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	431a      	orrs	r2, r3
 8013088:	68bb      	ldr	r3, [r7, #8]
 801308a:	4313      	orrs	r3, r2
 801308c:	697a      	ldr	r2, [r7, #20]
 801308e:	4313      	orrs	r3, r2
 8013090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	697a      	ldr	r2, [r7, #20]
 8013096:	609a      	str	r2, [r3, #8]
}
 8013098:	bf00      	nop
 801309a:	371c      	adds	r7, #28
 801309c:	46bd      	mov	sp, r7
 801309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130a2:	4770      	bx	lr

080130a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80130a4:	b480      	push	{r7}
 80130a6:	b085      	sub	sp, #20
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
 80130ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80130ae:	687b      	ldr	r3, [r7, #4]
 80130b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d101      	bne.n	80130bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80130b8:	2302      	movs	r3, #2
 80130ba:	e05a      	b.n	8013172 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2201      	movs	r2, #1
 80130c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2202      	movs	r2, #2
 80130c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	689b      	ldr	r3, [r3, #8]
 80130da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80130e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	681b      	ldr	r3, [r3, #0]
 80130e8:	68fa      	ldr	r2, [r7, #12]
 80130ea:	4313      	orrs	r3, r2
 80130ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	68fa      	ldr	r2, [r7, #12]
 80130f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	4a21      	ldr	r2, [pc, #132]	@ (8013180 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80130fc:	4293      	cmp	r3, r2
 80130fe:	d022      	beq.n	8013146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013108:	d01d      	beq.n	8013146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	4a1d      	ldr	r2, [pc, #116]	@ (8013184 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8013110:	4293      	cmp	r3, r2
 8013112:	d018      	beq.n	8013146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	4a1b      	ldr	r2, [pc, #108]	@ (8013188 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 801311a:	4293      	cmp	r3, r2
 801311c:	d013      	beq.n	8013146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	4a1a      	ldr	r2, [pc, #104]	@ (801318c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013124:	4293      	cmp	r3, r2
 8013126:	d00e      	beq.n	8013146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	4a18      	ldr	r2, [pc, #96]	@ (8013190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 801312e:	4293      	cmp	r3, r2
 8013130:	d009      	beq.n	8013146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	4a17      	ldr	r2, [pc, #92]	@ (8013194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8013138:	4293      	cmp	r3, r2
 801313a:	d004      	beq.n	8013146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	4a15      	ldr	r2, [pc, #84]	@ (8013198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013142:	4293      	cmp	r3, r2
 8013144:	d10c      	bne.n	8013160 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801314c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	685b      	ldr	r3, [r3, #4]
 8013152:	68ba      	ldr	r2, [r7, #8]
 8013154:	4313      	orrs	r3, r2
 8013156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	68ba      	ldr	r2, [r7, #8]
 801315e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	2201      	movs	r2, #1
 8013164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	2200      	movs	r2, #0
 801316c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8013170:	2300      	movs	r3, #0
}
 8013172:	4618      	mov	r0, r3
 8013174:	3714      	adds	r7, #20
 8013176:	46bd      	mov	sp, r7
 8013178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317c:	4770      	bx	lr
 801317e:	bf00      	nop
 8013180:	40010000 	.word	0x40010000
 8013184:	40000400 	.word	0x40000400
 8013188:	40000800 	.word	0x40000800
 801318c:	40000c00 	.word	0x40000c00
 8013190:	40010400 	.word	0x40010400
 8013194:	40014000 	.word	0x40014000
 8013198:	40001800 	.word	0x40001800

0801319c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801319c:	b480      	push	{r7}
 801319e:	b083      	sub	sp, #12
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80131a4:	bf00      	nop
 80131a6:	370c      	adds	r7, #12
 80131a8:	46bd      	mov	sp, r7
 80131aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ae:	4770      	bx	lr

080131b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80131b0:	b480      	push	{r7}
 80131b2:	b083      	sub	sp, #12
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80131b8:	bf00      	nop
 80131ba:	370c      	adds	r7, #12
 80131bc:	46bd      	mov	sp, r7
 80131be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c2:	4770      	bx	lr

080131c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d101      	bne.n	80131d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80131d2:	2301      	movs	r3, #1
 80131d4:	e042      	b.n	801325c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80131dc:	b2db      	uxtb	r3, r3
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d106      	bne.n	80131f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2200      	movs	r2, #0
 80131e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f7fc fb28 	bl	800f840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2224      	movs	r2, #36	@ 0x24
 80131f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	68da      	ldr	r2, [r3, #12]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8013206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f000 ff81 	bl	8014110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	691a      	ldr	r2, [r3, #16]
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801321c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	695a      	ldr	r2, [r3, #20]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801322c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	68da      	ldr	r2, [r3, #12]
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801323c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2200      	movs	r2, #0
 8013242:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2220      	movs	r2, #32
 8013248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	2220      	movs	r2, #32
 8013250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2200      	movs	r2, #0
 8013258:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 801325a:	2300      	movs	r3, #0
}
 801325c:	4618      	mov	r0, r3
 801325e:	3708      	adds	r7, #8
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8013264:	b480      	push	{r7}
 8013266:	b085      	sub	sp, #20
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	4613      	mov	r3, r2
 8013270:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013278:	b2db      	uxtb	r3, r3
 801327a:	2b20      	cmp	r3, #32
 801327c:	d121      	bne.n	80132c2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 801327e:	68bb      	ldr	r3, [r7, #8]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d002      	beq.n	801328a <HAL_UART_Transmit_IT+0x26>
 8013284:	88fb      	ldrh	r3, [r7, #6]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d101      	bne.n	801328e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801328a:	2301      	movs	r3, #1
 801328c:	e01a      	b.n	80132c4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	68ba      	ldr	r2, [r7, #8]
 8013292:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	88fa      	ldrh	r2, [r7, #6]
 8013298:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	88fa      	ldrh	r2, [r7, #6]
 801329e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	2200      	movs	r2, #0
 80132a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	2221      	movs	r2, #33	@ 0x21
 80132aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	68da      	ldr	r2, [r3, #12]
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80132bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80132be:	2300      	movs	r3, #0
 80132c0:	e000      	b.n	80132c4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80132c2:	2302      	movs	r3, #2
  }
}
 80132c4:	4618      	mov	r0, r3
 80132c6:	3714      	adds	r7, #20
 80132c8:	46bd      	mov	sp, r7
 80132ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ce:	4770      	bx	lr

080132d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b084      	sub	sp, #16
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	60f8      	str	r0, [r7, #12]
 80132d8:	60b9      	str	r1, [r7, #8]
 80132da:	4613      	mov	r3, r2
 80132dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80132e4:	b2db      	uxtb	r3, r3
 80132e6:	2b20      	cmp	r3, #32
 80132e8:	d112      	bne.n	8013310 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d002      	beq.n	80132f6 <HAL_UART_Receive_IT+0x26>
 80132f0:	88fb      	ldrh	r3, [r7, #6]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d101      	bne.n	80132fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80132f6:	2301      	movs	r3, #1
 80132f8:	e00b      	b.n	8013312 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	2200      	movs	r2, #0
 80132fe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8013300:	88fb      	ldrh	r3, [r7, #6]
 8013302:	461a      	mov	r2, r3
 8013304:	68b9      	ldr	r1, [r7, #8]
 8013306:	68f8      	ldr	r0, [r7, #12]
 8013308:	f000 fcb6 	bl	8013c78 <UART_Start_Receive_IT>
 801330c:	4603      	mov	r3, r0
 801330e:	e000      	b.n	8013312 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8013310:	2302      	movs	r3, #2
  }
}
 8013312:	4618      	mov	r0, r3
 8013314:	3710      	adds	r7, #16
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
	...

0801331c <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b0a2      	sub	sp, #136	@ 0x88
 8013320:	af00      	add	r7, sp, #0
 8013322:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8013324:	2301      	movs	r3, #1
 8013326:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	330c      	adds	r3, #12
 8013330:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013332:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013334:	e853 3f00 	ldrex	r3, [r3]
 8013338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801333a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801333c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8013340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	330c      	adds	r3, #12
 801334a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801334e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8013350:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013352:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013354:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013356:	e841 2300 	strex	r3, r2, [r1]
 801335a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801335c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801335e:	2b00      	cmp	r3, #0
 8013360:	d1e3      	bne.n	801332a <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	3314      	adds	r3, #20
 8013368:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801336a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801336c:	e853 3f00 	ldrex	r3, [r3]
 8013370:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013372:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013374:	f023 0301 	bic.w	r3, r3, #1
 8013378:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	3314      	adds	r3, #20
 8013380:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013382:	65ba      	str	r2, [r7, #88]	@ 0x58
 8013384:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013386:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013388:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801338a:	e841 2300 	strex	r3, r2, [r1]
 801338e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013390:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013392:	2b00      	cmp	r3, #0
 8013394:	d1e5      	bne.n	8013362 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801339a:	2b01      	cmp	r3, #1
 801339c:	d119      	bne.n	80133d2 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	330c      	adds	r3, #12
 80133a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133a8:	e853 3f00 	ldrex	r3, [r3]
 80133ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80133ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133b0:	f023 0310 	bic.w	r3, r3, #16
 80133b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	330c      	adds	r3, #12
 80133bc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80133be:	647a      	str	r2, [r7, #68]	@ 0x44
 80133c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80133c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80133c6:	e841 2300 	strex	r3, r2, [r1]
 80133ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80133cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d1e5      	bne.n	801339e <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d00f      	beq.n	80133fa <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	695b      	ldr	r3, [r3, #20]
 80133e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80133e4:	2b80      	cmp	r3, #128	@ 0x80
 80133e6:	d104      	bne.n	80133f2 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133ec:	4a53      	ldr	r2, [pc, #332]	@ (801353c <HAL_UART_Abort_IT+0x220>)
 80133ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80133f0:	e003      	b.n	80133fa <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80133f6:	2200      	movs	r2, #0
 80133f8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d00f      	beq.n	8013422 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	695b      	ldr	r3, [r3, #20]
 8013408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801340c:	2b40      	cmp	r3, #64	@ 0x40
 801340e:	d104      	bne.n	801341a <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013414:	4a4a      	ldr	r2, [pc, #296]	@ (8013540 <HAL_UART_Abort_IT+0x224>)
 8013416:	651a      	str	r2, [r3, #80]	@ 0x50
 8013418:	e003      	b.n	8013422 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801341e:	2200      	movs	r2, #0
 8013420:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	695b      	ldr	r3, [r3, #20]
 8013428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801342c:	2b80      	cmp	r3, #128	@ 0x80
 801342e:	d12d      	bne.n	801348c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	3314      	adds	r3, #20
 8013436:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801343a:	e853 3f00 	ldrex	r3, [r3]
 801343e:	623b      	str	r3, [r7, #32]
   return(result);
 8013440:	6a3b      	ldr	r3, [r7, #32]
 8013442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013446:	677b      	str	r3, [r7, #116]	@ 0x74
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	3314      	adds	r3, #20
 801344e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8013450:	633a      	str	r2, [r7, #48]	@ 0x30
 8013452:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013454:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013458:	e841 2300 	strex	r3, r2, [r1]
 801345c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801345e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013460:	2b00      	cmp	r3, #0
 8013462:	d1e5      	bne.n	8013430 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013468:	2b00      	cmp	r3, #0
 801346a:	d00f      	beq.n	801348c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013470:	4618      	mov	r0, r3
 8013472:	f7fd fadb 	bl	8010a2c <HAL_DMA_Abort_IT>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	d004      	beq.n	8013486 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013480:	2200      	movs	r2, #0
 8013482:	651a      	str	r2, [r3, #80]	@ 0x50
 8013484:	e002      	b.n	801348c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8013486:	2300      	movs	r3, #0
 8013488:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	695b      	ldr	r3, [r3, #20]
 8013492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013496:	2b40      	cmp	r3, #64	@ 0x40
 8013498:	d130      	bne.n	80134fc <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	3314      	adds	r3, #20
 80134a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134a2:	693b      	ldr	r3, [r7, #16]
 80134a4:	e853 3f00 	ldrex	r3, [r3]
 80134a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80134b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	3314      	adds	r3, #20
 80134b8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80134ba:	61fa      	str	r2, [r7, #28]
 80134bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134be:	69b9      	ldr	r1, [r7, #24]
 80134c0:	69fa      	ldr	r2, [r7, #28]
 80134c2:	e841 2300 	strex	r3, r2, [r1]
 80134c6:	617b      	str	r3, [r7, #20]
   return(result);
 80134c8:	697b      	ldr	r3, [r7, #20]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d1e5      	bne.n	801349a <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d012      	beq.n	80134fc <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fd faa6 	bl	8010a2c <HAL_DMA_Abort_IT>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d007      	beq.n	80134f6 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80134ea:	2200      	movs	r2, #0
 80134ec:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 80134ee:	2301      	movs	r3, #1
 80134f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80134f4:	e002      	b.n	80134fc <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80134f6:	2300      	movs	r3, #0
 80134f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80134fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013500:	2b01      	cmp	r3, #1
 8013502:	d116      	bne.n	8013532 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2200      	movs	r2, #0
 8013508:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	2200      	movs	r2, #0
 801350e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2200      	movs	r2, #0
 8013514:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	2220      	movs	r2, #32
 801351a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2220      	movs	r2, #32
 8013522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	2200      	movs	r2, #0
 801352a:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f000 fb83 	bl	8013c38 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8013532:	2300      	movs	r3, #0
}
 8013534:	4618      	mov	r0, r3
 8013536:	3788      	adds	r7, #136	@ 0x88
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}
 801353c:	08013dd5 	.word	0x08013dd5
 8013540:	08013e35 	.word	0x08013e35

08013544 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b09a      	sub	sp, #104	@ 0x68
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	330c      	adds	r3, #12
 8013552:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013556:	e853 3f00 	ldrex	r3, [r3]
 801355a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801355c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801355e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013562:	667b      	str	r3, [r7, #100]	@ 0x64
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	330c      	adds	r3, #12
 801356a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801356c:	657a      	str	r2, [r7, #84]	@ 0x54
 801356e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013570:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013572:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013574:	e841 2300 	strex	r3, r2, [r1]
 8013578:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801357a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801357c:	2b00      	cmp	r3, #0
 801357e:	d1e5      	bne.n	801354c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	3314      	adds	r3, #20
 8013586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801358a:	e853 3f00 	ldrex	r3, [r3]
 801358e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013592:	f023 0301 	bic.w	r3, r3, #1
 8013596:	663b      	str	r3, [r7, #96]	@ 0x60
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	3314      	adds	r3, #20
 801359e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80135a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80135a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80135a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80135a8:	e841 2300 	strex	r3, r2, [r1]
 80135ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80135ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d1e5      	bne.n	8013580 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135b8:	2b01      	cmp	r3, #1
 80135ba:	d119      	bne.n	80135f0 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	330c      	adds	r3, #12
 80135c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135c4:	6a3b      	ldr	r3, [r7, #32]
 80135c6:	e853 3f00 	ldrex	r3, [r3]
 80135ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80135cc:	69fb      	ldr	r3, [r7, #28]
 80135ce:	f023 0310 	bic.w	r3, r3, #16
 80135d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	330c      	adds	r3, #12
 80135da:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80135dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80135de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80135e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80135e4:	e841 2300 	strex	r3, r2, [r1]
 80135e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80135ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d1e5      	bne.n	80135bc <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	695b      	ldr	r3, [r3, #20]
 80135f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135fa:	2b40      	cmp	r3, #64	@ 0x40
 80135fc:	d13f      	bne.n	801367e <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	3314      	adds	r3, #20
 8013604:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	e853 3f00 	ldrex	r3, [r3]
 801360c:	60bb      	str	r3, [r7, #8]
   return(result);
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013614:	65bb      	str	r3, [r7, #88]	@ 0x58
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	3314      	adds	r3, #20
 801361c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801361e:	61ba      	str	r2, [r7, #24]
 8013620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013622:	6979      	ldr	r1, [r7, #20]
 8013624:	69ba      	ldr	r2, [r7, #24]
 8013626:	e841 2300 	strex	r3, r2, [r1]
 801362a:	613b      	str	r3, [r7, #16]
   return(result);
 801362c:	693b      	ldr	r3, [r7, #16]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d1e5      	bne.n	80135fe <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013636:	2b00      	cmp	r3, #0
 8013638:	d013      	beq.n	8013662 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801363e:	4a19      	ldr	r2, [pc, #100]	@ (80136a4 <HAL_UART_AbortReceive_IT+0x160>)
 8013640:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013646:	4618      	mov	r0, r3
 8013648:	f7fd f9f0 	bl	8010a2c <HAL_DMA_Abort_IT>
 801364c:	4603      	mov	r3, r0
 801364e:	2b00      	cmp	r3, #0
 8013650:	d022      	beq.n	8013698 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 801365c:	4610      	mov	r0, r2
 801365e:	4798      	blx	r3
 8013660:	e01a      	b.n	8013698 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	2200      	movs	r2, #0
 8013666:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	2220      	movs	r2, #32
 801366c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2200      	movs	r2, #0
 8013674:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f000 fae8 	bl	8013c4c <HAL_UART_AbortReceiveCpltCallback>
 801367c:	e00c      	b.n	8013698 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	2200      	movs	r2, #0
 8013682:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2220      	movs	r2, #32
 8013688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	2200      	movs	r2, #0
 8013690:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f000 fada 	bl	8013c4c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8013698:	2300      	movs	r3, #0
}
 801369a:	4618      	mov	r0, r3
 801369c:	3768      	adds	r7, #104	@ 0x68
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	08013e95 	.word	0x08013e95

080136a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80136a8:	b580      	push	{r7, lr}
 80136aa:	b0ba      	sub	sp, #232	@ 0xe8
 80136ac:	af00      	add	r7, sp, #0
 80136ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	68db      	ldr	r3, [r3, #12]
 80136c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	695b      	ldr	r3, [r3, #20]
 80136ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80136ce:	2300      	movs	r3, #0
 80136d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80136d4:	2300      	movs	r3, #0
 80136d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80136da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80136de:	f003 030f 	and.w	r3, r3, #15
 80136e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80136e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d10f      	bne.n	801370e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80136ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80136f2:	f003 0320 	and.w	r3, r3, #32
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d009      	beq.n	801370e <HAL_UART_IRQHandler+0x66>
 80136fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80136fe:	f003 0320 	and.w	r3, r3, #32
 8013702:	2b00      	cmp	r3, #0
 8013704:	d003      	beq.n	801370e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8013706:	6878      	ldr	r0, [r7, #4]
 8013708:	f000 fc44 	bl	8013f94 <UART_Receive_IT>
      return;
 801370c:	e273      	b.n	8013bf6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 801370e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8013712:	2b00      	cmp	r3, #0
 8013714:	f000 80de 	beq.w	80138d4 <HAL_UART_IRQHandler+0x22c>
 8013718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801371c:	f003 0301 	and.w	r3, r3, #1
 8013720:	2b00      	cmp	r3, #0
 8013722:	d106      	bne.n	8013732 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8013724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013728:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 801372c:	2b00      	cmp	r3, #0
 801372e:	f000 80d1 	beq.w	80138d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8013732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013736:	f003 0301 	and.w	r3, r3, #1
 801373a:	2b00      	cmp	r3, #0
 801373c:	d00b      	beq.n	8013756 <HAL_UART_IRQHandler+0xae>
 801373e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013746:	2b00      	cmp	r3, #0
 8013748:	d005      	beq.n	8013756 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801374e:	f043 0201 	orr.w	r2, r3, #1
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8013756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801375a:	f003 0304 	and.w	r3, r3, #4
 801375e:	2b00      	cmp	r3, #0
 8013760:	d00b      	beq.n	801377a <HAL_UART_IRQHandler+0xd2>
 8013762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8013766:	f003 0301 	and.w	r3, r3, #1
 801376a:	2b00      	cmp	r3, #0
 801376c:	d005      	beq.n	801377a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013772:	f043 0202 	orr.w	r2, r3, #2
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 801377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801377e:	f003 0302 	and.w	r3, r3, #2
 8013782:	2b00      	cmp	r3, #0
 8013784:	d00b      	beq.n	801379e <HAL_UART_IRQHandler+0xf6>
 8013786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801378a:	f003 0301 	and.w	r3, r3, #1
 801378e:	2b00      	cmp	r3, #0
 8013790:	d005      	beq.n	801379e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013796:	f043 0204 	orr.w	r2, r3, #4
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 801379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80137a2:	f003 0308 	and.w	r3, r3, #8
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d011      	beq.n	80137ce <HAL_UART_IRQHandler+0x126>
 80137aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80137ae:	f003 0320 	and.w	r3, r3, #32
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d105      	bne.n	80137c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80137b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80137ba:	f003 0301 	and.w	r3, r3, #1
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d005      	beq.n	80137ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137c6:	f043 0208 	orr.w	r2, r3, #8
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	f000 820a 	beq.w	8013bec <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80137d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80137dc:	f003 0320 	and.w	r3, r3, #32
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d008      	beq.n	80137f6 <HAL_UART_IRQHandler+0x14e>
 80137e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80137e8:	f003 0320 	and.w	r3, r3, #32
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d002      	beq.n	80137f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f000 fbcf 	bl	8013f94 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	695b      	ldr	r3, [r3, #20]
 80137fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013800:	2b40      	cmp	r3, #64	@ 0x40
 8013802:	bf0c      	ite	eq
 8013804:	2301      	moveq	r3, #1
 8013806:	2300      	movne	r3, #0
 8013808:	b2db      	uxtb	r3, r3
 801380a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013812:	f003 0308 	and.w	r3, r3, #8
 8013816:	2b00      	cmp	r3, #0
 8013818:	d103      	bne.n	8013822 <HAL_UART_IRQHandler+0x17a>
 801381a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801381e:	2b00      	cmp	r3, #0
 8013820:	d04f      	beq.n	80138c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f000 fa62 	bl	8013cec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	695b      	ldr	r3, [r3, #20]
 801382e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013832:	2b40      	cmp	r3, #64	@ 0x40
 8013834:	d141      	bne.n	80138ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	3314      	adds	r3, #20
 801383c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8013844:	e853 3f00 	ldrex	r3, [r3]
 8013848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 801384c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	3314      	adds	r3, #20
 801385e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8013862:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8013866:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801386a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801386e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8013872:	e841 2300 	strex	r3, r2, [r1]
 8013876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801387a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801387e:	2b00      	cmp	r3, #0
 8013880:	d1d9      	bne.n	8013836 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013886:	2b00      	cmp	r3, #0
 8013888:	d013      	beq.n	80138b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801388e:	4a8a      	ldr	r2, [pc, #552]	@ (8013ab8 <HAL_UART_IRQHandler+0x410>)
 8013890:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013896:	4618      	mov	r0, r3
 8013898:	f7fd f8c8 	bl	8010a2c <HAL_DMA_Abort_IT>
 801389c:	4603      	mov	r3, r0
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d016      	beq.n	80138d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80138a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80138a8:	687a      	ldr	r2, [r7, #4]
 80138aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80138ac:	4610      	mov	r0, r2
 80138ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80138b0:	e00e      	b.n	80138d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	f000 f9b6 	bl	8013c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80138b8:	e00a      	b.n	80138d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f000 f9b2 	bl	8013c24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80138c0:	e006      	b.n	80138d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f000 f9ae 	bl	8013c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2200      	movs	r2, #0
 80138cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80138ce:	e18d      	b.n	8013bec <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80138d0:	bf00      	nop
    return;
 80138d2:	e18b      	b.n	8013bec <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138d8:	2b01      	cmp	r3, #1
 80138da:	f040 8167 	bne.w	8013bac <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80138de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80138e2:	f003 0310 	and.w	r3, r3, #16
 80138e6:	2b00      	cmp	r3, #0
 80138e8:	f000 8160 	beq.w	8013bac <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80138ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80138f0:	f003 0310 	and.w	r3, r3, #16
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	f000 8159 	beq.w	8013bac <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80138fa:	2300      	movs	r3, #0
 80138fc:	60bb      	str	r3, [r7, #8]
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	681b      	ldr	r3, [r3, #0]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	60bb      	str	r3, [r7, #8]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	685b      	ldr	r3, [r3, #4]
 801390c:	60bb      	str	r3, [r7, #8]
 801390e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	695b      	ldr	r3, [r3, #20]
 8013916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801391a:	2b40      	cmp	r3, #64	@ 0x40
 801391c:	f040 80ce 	bne.w	8013abc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	685b      	ldr	r3, [r3, #4]
 8013928:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 801392c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8013930:	2b00      	cmp	r3, #0
 8013932:	f000 80a9 	beq.w	8013a88 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801393a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801393e:	429a      	cmp	r2, r3
 8013940:	f080 80a2 	bcs.w	8013a88 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801394a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013950:	69db      	ldr	r3, [r3, #28]
 8013952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013956:	f000 8088 	beq.w	8013a6a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	330c      	adds	r3, #12
 8013960:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013964:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013968:	e853 3f00 	ldrex	r3, [r3]
 801396c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8013970:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013974:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013978:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	330c      	adds	r3, #12
 8013982:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8013986:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801398a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801398e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013992:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013996:	e841 2300 	strex	r3, r2, [r1]
 801399a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801399e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d1d9      	bne.n	801395a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	3314      	adds	r3, #20
 80139ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80139b0:	e853 3f00 	ldrex	r3, [r3]
 80139b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80139b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80139b8:	f023 0301 	bic.w	r3, r3, #1
 80139bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	3314      	adds	r3, #20
 80139c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80139ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80139ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80139d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80139d6:	e841 2300 	strex	r3, r2, [r1]
 80139da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80139dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d1e1      	bne.n	80139a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	3314      	adds	r3, #20
 80139e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80139ec:	e853 3f00 	ldrex	r3, [r3]
 80139f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80139f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80139f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80139f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	3314      	adds	r3, #20
 8013a02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8013a06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8013a08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8013a0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013a0e:	e841 2300 	strex	r3, r2, [r1]
 8013a12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8013a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d1e3      	bne.n	80139e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	2220      	movs	r2, #32
 8013a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	2200      	movs	r2, #0
 8013a26:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	681b      	ldr	r3, [r3, #0]
 8013a2c:	330c      	adds	r3, #12
 8013a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a32:	e853 3f00 	ldrex	r3, [r3]
 8013a36:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8013a38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013a3a:	f023 0310 	bic.w	r3, r3, #16
 8013a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	330c      	adds	r3, #12
 8013a48:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8013a4c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8013a4e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a50:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013a52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013a54:	e841 2300 	strex	r3, r2, [r1]
 8013a58:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8013a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1e3      	bne.n	8013a28 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7fc ff71 	bl	801094c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	2202      	movs	r2, #2
 8013a6e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	1ad3      	subs	r3, r2, r3
 8013a7c:	b29b      	uxth	r3, r3
 8013a7e:	4619      	mov	r1, r3
 8013a80:	6878      	ldr	r0, [r7, #4]
 8013a82:	f000 f8ed 	bl	8013c60 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8013a86:	e0b3      	b.n	8013bf0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013a8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8013a90:	429a      	cmp	r2, r3
 8013a92:	f040 80ad 	bne.w	8013bf0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a9a:	69db      	ldr	r3, [r3, #28]
 8013a9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013aa0:	f040 80a6 	bne.w	8013bf0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2202      	movs	r2, #2
 8013aa8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8013aae:	4619      	mov	r1, r3
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f000 f8d5 	bl	8013c60 <HAL_UARTEx_RxEventCallback>
      return;
 8013ab6:	e09b      	b.n	8013bf0 <HAL_UART_IRQHandler+0x548>
 8013ab8:	08013db3 	.word	0x08013db3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8013ac4:	b29b      	uxth	r3, r3
 8013ac6:	1ad3      	subs	r3, r2, r3
 8013ac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8013ad0:	b29b      	uxth	r3, r3
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	f000 808e 	beq.w	8013bf4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8013ad8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	f000 8089 	beq.w	8013bf4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	330c      	adds	r3, #12
 8013ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aec:	e853 3f00 	ldrex	r3, [r3]
 8013af0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8013af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013af4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013af8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	330c      	adds	r3, #12
 8013b02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8013b06:	647a      	str	r2, [r7, #68]	@ 0x44
 8013b08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013b0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013b0e:	e841 2300 	strex	r3, r2, [r1]
 8013b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8013b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d1e3      	bne.n	8013ae2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	3314      	adds	r3, #20
 8013b20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b24:	e853 3f00 	ldrex	r3, [r3]
 8013b28:	623b      	str	r3, [r7, #32]
   return(result);
 8013b2a:	6a3b      	ldr	r3, [r7, #32]
 8013b2c:	f023 0301 	bic.w	r3, r3, #1
 8013b30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	3314      	adds	r3, #20
 8013b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8013b3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8013b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013b46:	e841 2300 	strex	r3, r2, [r1]
 8013b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8013b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d1e3      	bne.n	8013b1a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	2220      	movs	r2, #32
 8013b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	2200      	movs	r2, #0
 8013b5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	330c      	adds	r3, #12
 8013b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	e853 3f00 	ldrex	r3, [r3]
 8013b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	f023 0310 	bic.w	r3, r3, #16
 8013b76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	330c      	adds	r3, #12
 8013b80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8013b84:	61fa      	str	r2, [r7, #28]
 8013b86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b88:	69b9      	ldr	r1, [r7, #24]
 8013b8a:	69fa      	ldr	r2, [r7, #28]
 8013b8c:	e841 2300 	strex	r3, r2, [r1]
 8013b90:	617b      	str	r3, [r7, #20]
   return(result);
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d1e3      	bne.n	8013b60 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2202      	movs	r2, #2
 8013b9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8013b9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f000 f85b 	bl	8013c60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8013baa:	e023      	b.n	8013bf4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8013bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013bb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d009      	beq.n	8013bcc <HAL_UART_IRQHandler+0x524>
 8013bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d003      	beq.n	8013bcc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	f000 f97d 	bl	8013ec4 <UART_Transmit_IT>
    return;
 8013bca:	e014      	b.n	8013bf6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8013bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8013bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d00e      	beq.n	8013bf6 <HAL_UART_IRQHandler+0x54e>
 8013bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8013bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d008      	beq.n	8013bf6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8013be4:	6878      	ldr	r0, [r7, #4]
 8013be6:	f000 f9bd 	bl	8013f64 <UART_EndTransmit_IT>
    return;
 8013bea:	e004      	b.n	8013bf6 <HAL_UART_IRQHandler+0x54e>
    return;
 8013bec:	bf00      	nop
 8013bee:	e002      	b.n	8013bf6 <HAL_UART_IRQHandler+0x54e>
      return;
 8013bf0:	bf00      	nop
 8013bf2:	e000      	b.n	8013bf6 <HAL_UART_IRQHandler+0x54e>
      return;
 8013bf4:	bf00      	nop
  }
}
 8013bf6:	37e8      	adds	r7, #232	@ 0xe8
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}

08013bfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8013bfc:	b480      	push	{r7}
 8013bfe:	b083      	sub	sp, #12
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8013c04:	bf00      	nop
 8013c06:	370c      	adds	r7, #12
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c0e:	4770      	bx	lr

08013c10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8013c10:	b480      	push	{r7}
 8013c12:	b083      	sub	sp, #12
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8013c18:	bf00      	nop
 8013c1a:	370c      	adds	r7, #12
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr

08013c24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8013c24:	b480      	push	{r7}
 8013c26:	b083      	sub	sp, #12
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8013c2c:	bf00      	nop
 8013c2e:	370c      	adds	r7, #12
 8013c30:	46bd      	mov	sp, r7
 8013c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c36:	4770      	bx	lr

08013c38 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8013c38:	b480      	push	{r7}
 8013c3a:	b083      	sub	sp, #12
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8013c40:	bf00      	nop
 8013c42:	370c      	adds	r7, #12
 8013c44:	46bd      	mov	sp, r7
 8013c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4a:	4770      	bx	lr

08013c4c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8013c4c:	b480      	push	{r7}
 8013c4e:	b083      	sub	sp, #12
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8013c54:	bf00      	nop
 8013c56:	370c      	adds	r7, #12
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr

08013c60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8013c60:	b480      	push	{r7}
 8013c62:	b083      	sub	sp, #12
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	460b      	mov	r3, r1
 8013c6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8013c6c:	bf00      	nop
 8013c6e:	370c      	adds	r7, #12
 8013c70:	46bd      	mov	sp, r7
 8013c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c76:	4770      	bx	lr

08013c78 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013c78:	b480      	push	{r7}
 8013c7a:	b085      	sub	sp, #20
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	60f8      	str	r0, [r7, #12]
 8013c80:	60b9      	str	r1, [r7, #8]
 8013c82:	4613      	mov	r3, r2
 8013c84:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	68ba      	ldr	r2, [r7, #8]
 8013c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8013c8c:	68fb      	ldr	r3, [r7, #12]
 8013c8e:	88fa      	ldrh	r2, [r7, #6]
 8013c90:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	88fa      	ldrh	r2, [r7, #6]
 8013c96:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	2222      	movs	r2, #34	@ 0x22
 8013ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	691b      	ldr	r3, [r3, #16]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d007      	beq.n	8013cbe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	68da      	ldr	r2, [r3, #12]
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013cbc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	695a      	ldr	r2, [r3, #20]
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	f042 0201 	orr.w	r2, r2, #1
 8013ccc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	68da      	ldr	r2, [r3, #12]
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	f042 0220 	orr.w	r2, r2, #32
 8013cdc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013cde:	2300      	movs	r3, #0
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3714      	adds	r7, #20
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr

08013cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013cec:	b480      	push	{r7}
 8013cee:	b095      	sub	sp, #84	@ 0x54
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	330c      	adds	r3, #12
 8013cfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013cfe:	e853 3f00 	ldrex	r3, [r3]
 8013d02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8013d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8013d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	330c      	adds	r3, #12
 8013d12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013d14:	643a      	str	r2, [r7, #64]	@ 0x40
 8013d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8013d1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013d1c:	e841 2300 	strex	r3, r2, [r1]
 8013d20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8013d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d1e5      	bne.n	8013cf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	3314      	adds	r3, #20
 8013d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d30:	6a3b      	ldr	r3, [r7, #32]
 8013d32:	e853 3f00 	ldrex	r3, [r3]
 8013d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8013d38:	69fb      	ldr	r3, [r7, #28]
 8013d3a:	f023 0301 	bic.w	r3, r3, #1
 8013d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	3314      	adds	r3, #20
 8013d46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013d48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8013d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013d50:	e841 2300 	strex	r3, r2, [r1]
 8013d54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8013d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d1e5      	bne.n	8013d28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d60:	2b01      	cmp	r3, #1
 8013d62:	d119      	bne.n	8013d98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	330c      	adds	r3, #12
 8013d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	e853 3f00 	ldrex	r3, [r3]
 8013d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	f023 0310 	bic.w	r3, r3, #16
 8013d7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	330c      	adds	r3, #12
 8013d82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8013d84:	61ba      	str	r2, [r7, #24]
 8013d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d88:	6979      	ldr	r1, [r7, #20]
 8013d8a:	69ba      	ldr	r2, [r7, #24]
 8013d8c:	e841 2300 	strex	r3, r2, [r1]
 8013d90:	613b      	str	r3, [r7, #16]
   return(result);
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d1e5      	bne.n	8013d64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2220      	movs	r2, #32
 8013d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2200      	movs	r2, #0
 8013da4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8013da6:	bf00      	nop
 8013da8:	3754      	adds	r7, #84	@ 0x54
 8013daa:	46bd      	mov	sp, r7
 8013dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013db0:	4770      	bx	lr

08013db2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013db2:	b580      	push	{r7, lr}
 8013db4:	b084      	sub	sp, #16
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013dbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013dc6:	68f8      	ldr	r0, [r7, #12]
 8013dc8:	f7ff ff2c 	bl	8013c24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013dcc:	bf00      	nop
 8013dce:	3710      	adds	r7, #16
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	bd80      	pop	{r7, pc}

08013dd4 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013de0:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013de6:	2200      	movs	r2, #0
 8013de8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8013dea:	68fb      	ldr	r3, [r7, #12]
 8013dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d004      	beq.n	8013dfc <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d117      	bne.n	8013e2c <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	2200      	movs	r2, #0
 8013e06:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	2220      	movs	r2, #32
 8013e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2220      	movs	r2, #32
 8013e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e1e:	68fb      	ldr	r3, [r7, #12]
 8013e20:	2200      	movs	r2, #0
 8013e22:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8013e24:	68f8      	ldr	r0, [r7, #12]
 8013e26:	f7ff ff07 	bl	8013c38 <HAL_UART_AbortCpltCallback>
 8013e2a:	e000      	b.n	8013e2e <UART_DMATxAbortCallback+0x5a>
      return;
 8013e2c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013e2e:	3710      	adds	r7, #16
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b084      	sub	sp, #16
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e40:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e46:	2200      	movs	r2, #0
 8013e48:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d004      	beq.n	8013e5c <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d117      	bne.n	8013e8c <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	2200      	movs	r2, #0
 8013e66:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8013e6e:	68fb      	ldr	r3, [r7, #12]
 8013e70:	2220      	movs	r2, #32
 8013e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	2220      	movs	r2, #32
 8013e7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	2200      	movs	r2, #0
 8013e82:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8013e84:	68f8      	ldr	r0, [r7, #12]
 8013e86:	f7ff fed7 	bl	8013c38 <HAL_UART_AbortCpltCallback>
 8013e8a:	e000      	b.n	8013e8e <UART_DMARxAbortCallback+0x5a>
      return;
 8013e8c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013e8e:	3710      	adds	r7, #16
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}

08013e94 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ea0:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8013ea2:	68fb      	ldr	r3, [r7, #12]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	2220      	movs	r2, #32
 8013eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8013eb6:	68f8      	ldr	r0, [r7, #12]
 8013eb8:	f7ff fec8 	bl	8013c4c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013ebc:	bf00      	nop
 8013ebe:	3710      	adds	r7, #16
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bd80      	pop	{r7, pc}

08013ec4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	b085      	sub	sp, #20
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	2b21      	cmp	r3, #33	@ 0x21
 8013ed6:	d13e      	bne.n	8013f56 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	689b      	ldr	r3, [r3, #8]
 8013edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013ee0:	d114      	bne.n	8013f0c <UART_Transmit_IT+0x48>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	691b      	ldr	r3, [r3, #16]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d110      	bne.n	8013f0c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	6a1b      	ldr	r3, [r3, #32]
 8013eee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	881b      	ldrh	r3, [r3, #0]
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013efe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	6a1b      	ldr	r3, [r3, #32]
 8013f04:	1c9a      	adds	r2, r3, #2
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	621a      	str	r2, [r3, #32]
 8013f0a:	e008      	b.n	8013f1e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	6a1b      	ldr	r3, [r3, #32]
 8013f10:	1c59      	adds	r1, r3, #1
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	6211      	str	r1, [r2, #32]
 8013f16:	781a      	ldrb	r2, [r3, #0]
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	3b01      	subs	r3, #1
 8013f26:	b29b      	uxth	r3, r3
 8013f28:	687a      	ldr	r2, [r7, #4]
 8013f2a:	4619      	mov	r1, r3
 8013f2c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d10f      	bne.n	8013f52 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	68da      	ldr	r2, [r3, #12]
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013f40:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	68da      	ldr	r2, [r3, #12]
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8013f50:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8013f52:	2300      	movs	r3, #0
 8013f54:	e000      	b.n	8013f58 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8013f56:	2302      	movs	r3, #2
  }
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3714      	adds	r7, #20
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f62:	4770      	bx	lr

08013f64 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	68da      	ldr	r2, [r3, #12]
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8013f7a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2220      	movs	r2, #32
 8013f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f7ff fe39 	bl	8013bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8013f8a:	2300      	movs	r3, #0
}
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	3708      	adds	r7, #8
 8013f90:	46bd      	mov	sp, r7
 8013f92:	bd80      	pop	{r7, pc}

08013f94 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013f94:	b580      	push	{r7, lr}
 8013f96:	b08c      	sub	sp, #48	@ 0x30
 8013f98:	af00      	add	r7, sp, #0
 8013f9a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013faa:	b2db      	uxtb	r3, r3
 8013fac:	2b22      	cmp	r3, #34	@ 0x22
 8013fae:	f040 80aa 	bne.w	8014106 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	689b      	ldr	r3, [r3, #8]
 8013fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013fba:	d115      	bne.n	8013fe8 <UART_Receive_IT+0x54>
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	691b      	ldr	r3, [r3, #16]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d111      	bne.n	8013fe8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013fd6:	b29a      	uxth	r2, r3
 8013fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fe0:	1c9a      	adds	r2, r3, #2
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	629a      	str	r2, [r3, #40]	@ 0x28
 8013fe6:	e024      	b.n	8014032 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	689b      	ldr	r3, [r3, #8]
 8013ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013ff6:	d007      	beq.n	8014008 <UART_Receive_IT+0x74>
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	689b      	ldr	r3, [r3, #8]
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d10a      	bne.n	8014016 <UART_Receive_IT+0x82>
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	691b      	ldr	r3, [r3, #16]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d106      	bne.n	8014016 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	685b      	ldr	r3, [r3, #4]
 801400e:	b2da      	uxtb	r2, r3
 8014010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014012:	701a      	strb	r2, [r3, #0]
 8014014:	e008      	b.n	8014028 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	685b      	ldr	r3, [r3, #4]
 801401c:	b2db      	uxtb	r3, r3
 801401e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014022:	b2da      	uxtb	r2, r3
 8014024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014026:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801402c:	1c5a      	adds	r2, r3, #1
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8014036:	b29b      	uxth	r3, r3
 8014038:	3b01      	subs	r3, #1
 801403a:	b29b      	uxth	r3, r3
 801403c:	687a      	ldr	r2, [r7, #4]
 801403e:	4619      	mov	r1, r3
 8014040:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8014042:	2b00      	cmp	r3, #0
 8014044:	d15d      	bne.n	8014102 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	68da      	ldr	r2, [r3, #12]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	f022 0220 	bic.w	r2, r2, #32
 8014054:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	68da      	ldr	r2, [r3, #12]
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014064:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	695a      	ldr	r2, [r3, #20]
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	f022 0201 	bic.w	r2, r2, #1
 8014074:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2220      	movs	r2, #32
 801407a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	2200      	movs	r2, #0
 8014082:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014088:	2b01      	cmp	r3, #1
 801408a:	d135      	bne.n	80140f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2200      	movs	r2, #0
 8014090:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	330c      	adds	r3, #12
 8014098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	e853 3f00 	ldrex	r3, [r3]
 80140a0:	613b      	str	r3, [r7, #16]
   return(result);
 80140a2:	693b      	ldr	r3, [r7, #16]
 80140a4:	f023 0310 	bic.w	r3, r3, #16
 80140a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	330c      	adds	r3, #12
 80140b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80140b2:	623a      	str	r2, [r7, #32]
 80140b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140b6:	69f9      	ldr	r1, [r7, #28]
 80140b8:	6a3a      	ldr	r2, [r7, #32]
 80140ba:	e841 2300 	strex	r3, r2, [r1]
 80140be:	61bb      	str	r3, [r7, #24]
   return(result);
 80140c0:	69bb      	ldr	r3, [r7, #24]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d1e5      	bne.n	8014092 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	f003 0310 	and.w	r3, r3, #16
 80140d0:	2b10      	cmp	r3, #16
 80140d2:	d10a      	bne.n	80140ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80140d4:	2300      	movs	r3, #0
 80140d6:	60fb      	str	r3, [r7, #12]
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	60fb      	str	r3, [r7, #12]
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	685b      	ldr	r3, [r3, #4]
 80140e6:	60fb      	str	r3, [r7, #12]
 80140e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80140ee:	4619      	mov	r1, r3
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f7ff fdb5 	bl	8013c60 <HAL_UARTEx_RxEventCallback>
 80140f6:	e002      	b.n	80140fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f7ff fd89 	bl	8013c10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80140fe:	2300      	movs	r3, #0
 8014100:	e002      	b.n	8014108 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8014102:	2300      	movs	r3, #0
 8014104:	e000      	b.n	8014108 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8014106:	2302      	movs	r3, #2
  }
}
 8014108:	4618      	mov	r0, r3
 801410a:	3730      	adds	r7, #48	@ 0x30
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}

08014110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014114:	b0c0      	sub	sp, #256	@ 0x100
 8014116:	af00      	add	r7, sp, #0
 8014118:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801411c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	691b      	ldr	r3, [r3, #16]
 8014124:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8014128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801412c:	68d9      	ldr	r1, [r3, #12]
 801412e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014132:	681a      	ldr	r2, [r3, #0]
 8014134:	ea40 0301 	orr.w	r3, r0, r1
 8014138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801413e:	689a      	ldr	r2, [r3, #8]
 8014140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014144:	691b      	ldr	r3, [r3, #16]
 8014146:	431a      	orrs	r2, r3
 8014148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801414c:	695b      	ldr	r3, [r3, #20]
 801414e:	431a      	orrs	r2, r3
 8014150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014154:	69db      	ldr	r3, [r3, #28]
 8014156:	4313      	orrs	r3, r2
 8014158:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 801415c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	68db      	ldr	r3, [r3, #12]
 8014164:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8014168:	f021 010c 	bic.w	r1, r1, #12
 801416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014170:	681a      	ldr	r2, [r3, #0]
 8014172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8014176:	430b      	orrs	r3, r1
 8014178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 801417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	695b      	ldr	r3, [r3, #20]
 8014182:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8014186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801418a:	6999      	ldr	r1, [r3, #24]
 801418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014190:	681a      	ldr	r2, [r3, #0]
 8014192:	ea40 0301 	orr.w	r3, r0, r1
 8014196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801419c:	681a      	ldr	r2, [r3, #0]
 801419e:	4b8f      	ldr	r3, [pc, #572]	@ (80143dc <UART_SetConfig+0x2cc>)
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d005      	beq.n	80141b0 <UART_SetConfig+0xa0>
 80141a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	4b8d      	ldr	r3, [pc, #564]	@ (80143e0 <UART_SetConfig+0x2d0>)
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d104      	bne.n	80141ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80141b0:	f7fd fe86 	bl	8011ec0 <HAL_RCC_GetPCLK2Freq>
 80141b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80141b8:	e003      	b.n	80141c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80141ba:	f7fd fe6d 	bl	8011e98 <HAL_RCC_GetPCLK1Freq>
 80141be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80141c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80141c6:	69db      	ldr	r3, [r3, #28]
 80141c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80141cc:	f040 810c 	bne.w	80143e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80141d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80141d4:	2200      	movs	r2, #0
 80141d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80141da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80141de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80141e2:	4622      	mov	r2, r4
 80141e4:	462b      	mov	r3, r5
 80141e6:	1891      	adds	r1, r2, r2
 80141e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80141ea:	415b      	adcs	r3, r3
 80141ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80141ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80141f2:	4621      	mov	r1, r4
 80141f4:	eb12 0801 	adds.w	r8, r2, r1
 80141f8:	4629      	mov	r1, r5
 80141fa:	eb43 0901 	adc.w	r9, r3, r1
 80141fe:	f04f 0200 	mov.w	r2, #0
 8014202:	f04f 0300 	mov.w	r3, #0
 8014206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801420a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801420e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8014212:	4690      	mov	r8, r2
 8014214:	4699      	mov	r9, r3
 8014216:	4623      	mov	r3, r4
 8014218:	eb18 0303 	adds.w	r3, r8, r3
 801421c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8014220:	462b      	mov	r3, r5
 8014222:	eb49 0303 	adc.w	r3, r9, r3
 8014226:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801422e:	685b      	ldr	r3, [r3, #4]
 8014230:	2200      	movs	r2, #0
 8014232:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8014236:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801423a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801423e:	460b      	mov	r3, r1
 8014240:	18db      	adds	r3, r3, r3
 8014242:	653b      	str	r3, [r7, #80]	@ 0x50
 8014244:	4613      	mov	r3, r2
 8014246:	eb42 0303 	adc.w	r3, r2, r3
 801424a:	657b      	str	r3, [r7, #84]	@ 0x54
 801424c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8014250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8014254:	f7f8 fc16 	bl	800ca84 <__aeabi_uldivmod>
 8014258:	4602      	mov	r2, r0
 801425a:	460b      	mov	r3, r1
 801425c:	4b61      	ldr	r3, [pc, #388]	@ (80143e4 <UART_SetConfig+0x2d4>)
 801425e:	fba3 2302 	umull	r2, r3, r3, r2
 8014262:	095b      	lsrs	r3, r3, #5
 8014264:	011c      	lsls	r4, r3, #4
 8014266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801426a:	2200      	movs	r2, #0
 801426c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8014270:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8014274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8014278:	4642      	mov	r2, r8
 801427a:	464b      	mov	r3, r9
 801427c:	1891      	adds	r1, r2, r2
 801427e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8014280:	415b      	adcs	r3, r3
 8014282:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8014284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8014288:	4641      	mov	r1, r8
 801428a:	eb12 0a01 	adds.w	sl, r2, r1
 801428e:	4649      	mov	r1, r9
 8014290:	eb43 0b01 	adc.w	fp, r3, r1
 8014294:	f04f 0200 	mov.w	r2, #0
 8014298:	f04f 0300 	mov.w	r3, #0
 801429c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80142a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80142a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80142a8:	4692      	mov	sl, r2
 80142aa:	469b      	mov	fp, r3
 80142ac:	4643      	mov	r3, r8
 80142ae:	eb1a 0303 	adds.w	r3, sl, r3
 80142b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80142b6:	464b      	mov	r3, r9
 80142b8:	eb4b 0303 	adc.w	r3, fp, r3
 80142bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80142c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80142c4:	685b      	ldr	r3, [r3, #4]
 80142c6:	2200      	movs	r2, #0
 80142c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80142cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80142d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80142d4:	460b      	mov	r3, r1
 80142d6:	18db      	adds	r3, r3, r3
 80142d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80142da:	4613      	mov	r3, r2
 80142dc:	eb42 0303 	adc.w	r3, r2, r3
 80142e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80142e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80142e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80142ea:	f7f8 fbcb 	bl	800ca84 <__aeabi_uldivmod>
 80142ee:	4602      	mov	r2, r0
 80142f0:	460b      	mov	r3, r1
 80142f2:	4611      	mov	r1, r2
 80142f4:	4b3b      	ldr	r3, [pc, #236]	@ (80143e4 <UART_SetConfig+0x2d4>)
 80142f6:	fba3 2301 	umull	r2, r3, r3, r1
 80142fa:	095b      	lsrs	r3, r3, #5
 80142fc:	2264      	movs	r2, #100	@ 0x64
 80142fe:	fb02 f303 	mul.w	r3, r2, r3
 8014302:	1acb      	subs	r3, r1, r3
 8014304:	00db      	lsls	r3, r3, #3
 8014306:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801430a:	4b36      	ldr	r3, [pc, #216]	@ (80143e4 <UART_SetConfig+0x2d4>)
 801430c:	fba3 2302 	umull	r2, r3, r3, r2
 8014310:	095b      	lsrs	r3, r3, #5
 8014312:	005b      	lsls	r3, r3, #1
 8014314:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8014318:	441c      	add	r4, r3
 801431a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801431e:	2200      	movs	r2, #0
 8014320:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8014324:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8014328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 801432c:	4642      	mov	r2, r8
 801432e:	464b      	mov	r3, r9
 8014330:	1891      	adds	r1, r2, r2
 8014332:	63b9      	str	r1, [r7, #56]	@ 0x38
 8014334:	415b      	adcs	r3, r3
 8014336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801433c:	4641      	mov	r1, r8
 801433e:	1851      	adds	r1, r2, r1
 8014340:	6339      	str	r1, [r7, #48]	@ 0x30
 8014342:	4649      	mov	r1, r9
 8014344:	414b      	adcs	r3, r1
 8014346:	637b      	str	r3, [r7, #52]	@ 0x34
 8014348:	f04f 0200 	mov.w	r2, #0
 801434c:	f04f 0300 	mov.w	r3, #0
 8014350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8014354:	4659      	mov	r1, fp
 8014356:	00cb      	lsls	r3, r1, #3
 8014358:	4651      	mov	r1, sl
 801435a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801435e:	4651      	mov	r1, sl
 8014360:	00ca      	lsls	r2, r1, #3
 8014362:	4610      	mov	r0, r2
 8014364:	4619      	mov	r1, r3
 8014366:	4603      	mov	r3, r0
 8014368:	4642      	mov	r2, r8
 801436a:	189b      	adds	r3, r3, r2
 801436c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8014370:	464b      	mov	r3, r9
 8014372:	460a      	mov	r2, r1
 8014374:	eb42 0303 	adc.w	r3, r2, r3
 8014378:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014380:	685b      	ldr	r3, [r3, #4]
 8014382:	2200      	movs	r2, #0
 8014384:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8014388:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801438c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8014390:	460b      	mov	r3, r1
 8014392:	18db      	adds	r3, r3, r3
 8014394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014396:	4613      	mov	r3, r2
 8014398:	eb42 0303 	adc.w	r3, r2, r3
 801439c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801439e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80143a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80143a6:	f7f8 fb6d 	bl	800ca84 <__aeabi_uldivmod>
 80143aa:	4602      	mov	r2, r0
 80143ac:	460b      	mov	r3, r1
 80143ae:	4b0d      	ldr	r3, [pc, #52]	@ (80143e4 <UART_SetConfig+0x2d4>)
 80143b0:	fba3 1302 	umull	r1, r3, r3, r2
 80143b4:	095b      	lsrs	r3, r3, #5
 80143b6:	2164      	movs	r1, #100	@ 0x64
 80143b8:	fb01 f303 	mul.w	r3, r1, r3
 80143bc:	1ad3      	subs	r3, r2, r3
 80143be:	00db      	lsls	r3, r3, #3
 80143c0:	3332      	adds	r3, #50	@ 0x32
 80143c2:	4a08      	ldr	r2, [pc, #32]	@ (80143e4 <UART_SetConfig+0x2d4>)
 80143c4:	fba2 2303 	umull	r2, r3, r2, r3
 80143c8:	095b      	lsrs	r3, r3, #5
 80143ca:	f003 0207 	and.w	r2, r3, #7
 80143ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4422      	add	r2, r4
 80143d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80143d8:	e106      	b.n	80145e8 <UART_SetConfig+0x4d8>
 80143da:	bf00      	nop
 80143dc:	40011000 	.word	0x40011000
 80143e0:	40011400 	.word	0x40011400
 80143e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80143e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80143ec:	2200      	movs	r2, #0
 80143ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80143f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80143f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80143fa:	4642      	mov	r2, r8
 80143fc:	464b      	mov	r3, r9
 80143fe:	1891      	adds	r1, r2, r2
 8014400:	6239      	str	r1, [r7, #32]
 8014402:	415b      	adcs	r3, r3
 8014404:	627b      	str	r3, [r7, #36]	@ 0x24
 8014406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801440a:	4641      	mov	r1, r8
 801440c:	1854      	adds	r4, r2, r1
 801440e:	4649      	mov	r1, r9
 8014410:	eb43 0501 	adc.w	r5, r3, r1
 8014414:	f04f 0200 	mov.w	r2, #0
 8014418:	f04f 0300 	mov.w	r3, #0
 801441c:	00eb      	lsls	r3, r5, #3
 801441e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014422:	00e2      	lsls	r2, r4, #3
 8014424:	4614      	mov	r4, r2
 8014426:	461d      	mov	r5, r3
 8014428:	4643      	mov	r3, r8
 801442a:	18e3      	adds	r3, r4, r3
 801442c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014430:	464b      	mov	r3, r9
 8014432:	eb45 0303 	adc.w	r3, r5, r3
 8014436:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801443a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	2200      	movs	r2, #0
 8014442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8014446:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801444a:	f04f 0200 	mov.w	r2, #0
 801444e:	f04f 0300 	mov.w	r3, #0
 8014452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8014456:	4629      	mov	r1, r5
 8014458:	008b      	lsls	r3, r1, #2
 801445a:	4621      	mov	r1, r4
 801445c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014460:	4621      	mov	r1, r4
 8014462:	008a      	lsls	r2, r1, #2
 8014464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8014468:	f7f8 fb0c 	bl	800ca84 <__aeabi_uldivmod>
 801446c:	4602      	mov	r2, r0
 801446e:	460b      	mov	r3, r1
 8014470:	4b60      	ldr	r3, [pc, #384]	@ (80145f4 <UART_SetConfig+0x4e4>)
 8014472:	fba3 2302 	umull	r2, r3, r3, r2
 8014476:	095b      	lsrs	r3, r3, #5
 8014478:	011c      	lsls	r4, r3, #4
 801447a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801447e:	2200      	movs	r2, #0
 8014480:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014484:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8014488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 801448c:	4642      	mov	r2, r8
 801448e:	464b      	mov	r3, r9
 8014490:	1891      	adds	r1, r2, r2
 8014492:	61b9      	str	r1, [r7, #24]
 8014494:	415b      	adcs	r3, r3
 8014496:	61fb      	str	r3, [r7, #28]
 8014498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801449c:	4641      	mov	r1, r8
 801449e:	1851      	adds	r1, r2, r1
 80144a0:	6139      	str	r1, [r7, #16]
 80144a2:	4649      	mov	r1, r9
 80144a4:	414b      	adcs	r3, r1
 80144a6:	617b      	str	r3, [r7, #20]
 80144a8:	f04f 0200 	mov.w	r2, #0
 80144ac:	f04f 0300 	mov.w	r3, #0
 80144b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80144b4:	4659      	mov	r1, fp
 80144b6:	00cb      	lsls	r3, r1, #3
 80144b8:	4651      	mov	r1, sl
 80144ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80144be:	4651      	mov	r1, sl
 80144c0:	00ca      	lsls	r2, r1, #3
 80144c2:	4610      	mov	r0, r2
 80144c4:	4619      	mov	r1, r3
 80144c6:	4603      	mov	r3, r0
 80144c8:	4642      	mov	r2, r8
 80144ca:	189b      	adds	r3, r3, r2
 80144cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80144d0:	464b      	mov	r3, r9
 80144d2:	460a      	mov	r2, r1
 80144d4:	eb42 0303 	adc.w	r3, r2, r3
 80144d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80144dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80144e0:	685b      	ldr	r3, [r3, #4]
 80144e2:	2200      	movs	r2, #0
 80144e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80144e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80144e8:	f04f 0200 	mov.w	r2, #0
 80144ec:	f04f 0300 	mov.w	r3, #0
 80144f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80144f4:	4649      	mov	r1, r9
 80144f6:	008b      	lsls	r3, r1, #2
 80144f8:	4641      	mov	r1, r8
 80144fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80144fe:	4641      	mov	r1, r8
 8014500:	008a      	lsls	r2, r1, #2
 8014502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8014506:	f7f8 fabd 	bl	800ca84 <__aeabi_uldivmod>
 801450a:	4602      	mov	r2, r0
 801450c:	460b      	mov	r3, r1
 801450e:	4611      	mov	r1, r2
 8014510:	4b38      	ldr	r3, [pc, #224]	@ (80145f4 <UART_SetConfig+0x4e4>)
 8014512:	fba3 2301 	umull	r2, r3, r3, r1
 8014516:	095b      	lsrs	r3, r3, #5
 8014518:	2264      	movs	r2, #100	@ 0x64
 801451a:	fb02 f303 	mul.w	r3, r2, r3
 801451e:	1acb      	subs	r3, r1, r3
 8014520:	011b      	lsls	r3, r3, #4
 8014522:	3332      	adds	r3, #50	@ 0x32
 8014524:	4a33      	ldr	r2, [pc, #204]	@ (80145f4 <UART_SetConfig+0x4e4>)
 8014526:	fba2 2303 	umull	r2, r3, r2, r3
 801452a:	095b      	lsrs	r3, r3, #5
 801452c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8014530:	441c      	add	r4, r3
 8014532:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8014536:	2200      	movs	r2, #0
 8014538:	673b      	str	r3, [r7, #112]	@ 0x70
 801453a:	677a      	str	r2, [r7, #116]	@ 0x74
 801453c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8014540:	4642      	mov	r2, r8
 8014542:	464b      	mov	r3, r9
 8014544:	1891      	adds	r1, r2, r2
 8014546:	60b9      	str	r1, [r7, #8]
 8014548:	415b      	adcs	r3, r3
 801454a:	60fb      	str	r3, [r7, #12]
 801454c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014550:	4641      	mov	r1, r8
 8014552:	1851      	adds	r1, r2, r1
 8014554:	6039      	str	r1, [r7, #0]
 8014556:	4649      	mov	r1, r9
 8014558:	414b      	adcs	r3, r1
 801455a:	607b      	str	r3, [r7, #4]
 801455c:	f04f 0200 	mov.w	r2, #0
 8014560:	f04f 0300 	mov.w	r3, #0
 8014564:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8014568:	4659      	mov	r1, fp
 801456a:	00cb      	lsls	r3, r1, #3
 801456c:	4651      	mov	r1, sl
 801456e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014572:	4651      	mov	r1, sl
 8014574:	00ca      	lsls	r2, r1, #3
 8014576:	4610      	mov	r0, r2
 8014578:	4619      	mov	r1, r3
 801457a:	4603      	mov	r3, r0
 801457c:	4642      	mov	r2, r8
 801457e:	189b      	adds	r3, r3, r2
 8014580:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014582:	464b      	mov	r3, r9
 8014584:	460a      	mov	r2, r1
 8014586:	eb42 0303 	adc.w	r3, r2, r3
 801458a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8014590:	685b      	ldr	r3, [r3, #4]
 8014592:	2200      	movs	r2, #0
 8014594:	663b      	str	r3, [r7, #96]	@ 0x60
 8014596:	667a      	str	r2, [r7, #100]	@ 0x64
 8014598:	f04f 0200 	mov.w	r2, #0
 801459c:	f04f 0300 	mov.w	r3, #0
 80145a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80145a4:	4649      	mov	r1, r9
 80145a6:	008b      	lsls	r3, r1, #2
 80145a8:	4641      	mov	r1, r8
 80145aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80145ae:	4641      	mov	r1, r8
 80145b0:	008a      	lsls	r2, r1, #2
 80145b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80145b6:	f7f8 fa65 	bl	800ca84 <__aeabi_uldivmod>
 80145ba:	4602      	mov	r2, r0
 80145bc:	460b      	mov	r3, r1
 80145be:	4b0d      	ldr	r3, [pc, #52]	@ (80145f4 <UART_SetConfig+0x4e4>)
 80145c0:	fba3 1302 	umull	r1, r3, r3, r2
 80145c4:	095b      	lsrs	r3, r3, #5
 80145c6:	2164      	movs	r1, #100	@ 0x64
 80145c8:	fb01 f303 	mul.w	r3, r1, r3
 80145cc:	1ad3      	subs	r3, r2, r3
 80145ce:	011b      	lsls	r3, r3, #4
 80145d0:	3332      	adds	r3, #50	@ 0x32
 80145d2:	4a08      	ldr	r2, [pc, #32]	@ (80145f4 <UART_SetConfig+0x4e4>)
 80145d4:	fba2 2303 	umull	r2, r3, r2, r3
 80145d8:	095b      	lsrs	r3, r3, #5
 80145da:	f003 020f 	and.w	r2, r3, #15
 80145de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	4422      	add	r2, r4
 80145e6:	609a      	str	r2, [r3, #8]
}
 80145e8:	bf00      	nop
 80145ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80145ee:	46bd      	mov	sp, r7
 80145f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80145f4:	51eb851f 	.word	0x51eb851f

080145f8 <Probe_Init>:
static inline void Filter_Reset(Filter_t *f);
static inline uint16_t Filter_Step(Filter_t *f, uint16_t x);

/* Public functions ----------------------------------------------------------*/
void Probe_Init(void)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	af00      	add	r7, sp, #0
    Probe_InitHAL();
 80145fc:	f000 f814 	bl	8014628 <Probe_InitHAL>
    Filter_Reset(&filter_main);
 8014600:	4803      	ldr	r0, [pc, #12]	@ (8014610 <Probe_Init+0x18>)
 8014602:	f000 f89c 	bl	801473e <Filter_Reset>
    Filter_Reset(&filter_extra);
 8014606:	4803      	ldr	r0, [pc, #12]	@ (8014614 <Probe_Init+0x1c>)
 8014608:	f000 f899 	bl	801473e <Filter_Reset>
}
 801460c:	bf00      	nop
 801460e:	bd80      	pop	{r7, pc}
 8014610:	2001e014 	.word	0x2001e014
 8014614:	2001e02c 	.word	0x2001e02c

08014618 <Probe_Handle>:

void Probe_Handle(void)
{
 8014618:	b480      	push	{r7}
 801461a:	af00      	add	r7, sp, #0

}
 801461c:	bf00      	nop
 801461e:	46bd      	mov	sp, r7
 8014620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014624:	4770      	bx	lr
	...

08014628 <Probe_InitHAL>:

/* Callback functions --------------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
void Probe_InitHAL(void)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	af00      	add	r7, sp, #0
    if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 801462c:	4802      	ldr	r0, [pc, #8]	@ (8014638 <Probe_InitHAL+0x10>)
 801462e:	f7fe f97b 	bl	8012928 <HAL_TIM_Base_Start_IT>
    {
        // error handler
    }
}
 8014632:	bf00      	nop
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	20000a44 	.word	0x20000a44

0801463c <AngleBufferFIFO_Reset>:

static inline void AngleBufferFIFO_Reset(AngleBufferFIFO_t *ab)
{
 801463c:	b480      	push	{r7}
 801463e:	b083      	sub	sp, #12
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
    ab->count = 0;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2200      	movs	r2, #0
 8014648:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
}
 801464c:	bf00      	nop
 801464e:	370c      	adds	r7, #12
 8014650:	46bd      	mov	sp, r7
 8014652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014656:	4770      	bx	lr

08014658 <AngleBufferFIFO_Add>:

/* Přidání nové hodnoty */
static inline void AngleBufferFIFO_Add(AngleBufferFIFO_t *ab, int16_t angle)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
 8014660:	460b      	mov	r3, r1
 8014662:	807b      	strh	r3, [r7, #2]
    // pokud se úhel dostane na hranici, resetujeme
    if (angle > 175 || angle < -175)
 8014664:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014668:	2baf      	cmp	r3, #175	@ 0xaf
 801466a:	dc04      	bgt.n	8014676 <AngleBufferFIFO_Add+0x1e>
 801466c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014670:	f113 0faf 	cmn.w	r3, #175	@ 0xaf
 8014674:	da0a      	bge.n	801468c <AngleBufferFIFO_Add+0x34>
    {
        AngleBufferFIFO_Reset(ab);
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f7ff ffe0 	bl	801463c <AngleBufferFIFO_Reset>
        ab->buf[0] = angle;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	887a      	ldrh	r2, [r7, #2]
 8014680:	801a      	strh	r2, [r3, #0]
        ab->count = 1;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2201      	movs	r2, #1
 8014686:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        return;
 801468a:	e027      	b.n	80146dc <AngleBufferFIFO_Add+0x84>
    }

    if (ab->count < ANGLE_BUFFER_LEN)
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014692:	2b13      	cmp	r3, #19
 8014694:	d80d      	bhi.n	80146b2 <AngleBufferFIFO_Add+0x5a>
    {
        ab->buf[ab->count++] = angle;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801469c:	1c5a      	adds	r2, r3, #1
 801469e:	b2d1      	uxtb	r1, r2
 80146a0:	687a      	ldr	r2, [r7, #4]
 80146a2:	f882 1028 	strb.w	r1, [r2, #40]	@ 0x28
 80146a6:	4619      	mov	r1, r3
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	887a      	ldrh	r2, [r7, #2]
 80146ac:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 80146b0:	e014      	b.n	80146dc <AngleBufferFIFO_Add+0x84>
    }
    else
    {
        for (uint8_t i = 0; i < ANGLE_BUFFER_LEN -1; i++)
 80146b2:	2300      	movs	r3, #0
 80146b4:	73fb      	strb	r3, [r7, #15]
 80146b6:	e00b      	b.n	80146d0 <AngleBufferFIFO_Add+0x78>
            ab->buf[i] = ab->buf[i + 1];
 80146b8:	7bfb      	ldrb	r3, [r7, #15]
 80146ba:	1c59      	adds	r1, r3, #1
 80146bc:	7bfa      	ldrb	r2, [r7, #15]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f933 1011 	ldrsh.w	r1, [r3, r1, lsl #1]
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint8_t i = 0; i < ANGLE_BUFFER_LEN -1; i++)
 80146ca:	7bfb      	ldrb	r3, [r7, #15]
 80146cc:	3301      	adds	r3, #1
 80146ce:	73fb      	strb	r3, [r7, #15]
 80146d0:	7bfb      	ldrb	r3, [r7, #15]
 80146d2:	2b12      	cmp	r3, #18
 80146d4:	d9f0      	bls.n	80146b8 <AngleBufferFIFO_Add+0x60>

        ab->buf[ANGLE_BUFFER_LEN -1] = angle;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	887a      	ldrh	r2, [r7, #2]
 80146da:	84da      	strh	r2, [r3, #38]	@ 0x26
    }
}
 80146dc:	3710      	adds	r7, #16
 80146de:	46bd      	mov	sp, r7
 80146e0:	bd80      	pop	{r7, pc}

080146e2 <Detect_RotationDirection>:

/* Detekce směru – porovnání první a poslední hodnoty */
static rotation_dir_t Detect_RotationDirection(AngleBufferFIFO_t *ab)
{
 80146e2:	b480      	push	{r7}
 80146e4:	b085      	sub	sp, #20
 80146e6:	af00      	add	r7, sp, #0
 80146e8:	6078      	str	r0, [r7, #4]
    if (ab->count < ANGLE_BUFFER_LEN)
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80146f0:	2b13      	cmp	r3, #19
 80146f2:	d801      	bhi.n	80146f8 <Detect_RotationDirection+0x16>
        return DIR_NONE;
 80146f4:	2300      	movs	r3, #0
 80146f6:	e01c      	b.n	8014732 <Detect_RotationDirection+0x50>

    int16_t first = ab->buf[0];
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	881b      	ldrh	r3, [r3, #0]
 80146fc:	81fb      	strh	r3, [r7, #14]
    int16_t last = ab->buf[ab->count - 1];
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014704:	1e5a      	subs	r2, r3, #1
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801470c:	81bb      	strh	r3, [r7, #12]

    int16_t diff = last - first;
 801470e:	89ba      	ldrh	r2, [r7, #12]
 8014710:	89fb      	ldrh	r3, [r7, #14]
 8014712:	1ad3      	subs	r3, r2, r3
 8014714:	b29b      	uxth	r3, r3
 8014716:	817b      	strh	r3, [r7, #10]

    if (diff > 0)
 8014718:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801471c:	2b00      	cmp	r3, #0
 801471e:	dd01      	ble.n	8014724 <Detect_RotationDirection+0x42>
        return DIR_CW;   // rostoucí
 8014720:	2301      	movs	r3, #1
 8014722:	e006      	b.n	8014732 <Detect_RotationDirection+0x50>
    if (diff < 0)
 8014724:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8014728:	2b00      	cmp	r3, #0
 801472a:	da01      	bge.n	8014730 <Detect_RotationDirection+0x4e>
        return DIR_CCW;  // klesající
 801472c:	2302      	movs	r3, #2
 801472e:	e000      	b.n	8014732 <Detect_RotationDirection+0x50>
    return DIR_NONE;
 8014730:	2300      	movs	r3, #0
}
 8014732:	4618      	mov	r0, r3
 8014734:	3714      	adds	r7, #20
 8014736:	46bd      	mov	sp, r7
 8014738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473c:	4770      	bx	lr

0801473e <Filter_Reset>:

/* Obecné funkce pro filtr */
static inline void Filter_Reset(Filter_t *f)
{
 801473e:	b480      	push	{r7}
 8014740:	b083      	sub	sp, #12
 8014742:	af00      	add	r7, sp, #0
 8014744:	6078      	str	r0, [r7, #4]
    f->exp_avg = 0.0f;
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	f04f 0200 	mov.w	r2, #0
 801474c:	601a      	str	r2, [r3, #0]
    f->movavg_index = 0;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2200      	movs	r2, #0
 8014752:	741a      	strb	r2, [r3, #16]
    f->movavg_count = 0;
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2200      	movs	r2, #0
 8014758:	745a      	strb	r2, [r3, #17]
    f->initialized = 0;
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	2200      	movs	r2, #0
 801475e:	749a      	strb	r2, [r3, #18]
    f->last_value = 0.0f;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f04f 0200 	mov.w	r2, #0
 8014766:	615a      	str	r2, [r3, #20]
}
 8014768:	bf00      	nop
 801476a:	370c      	adds	r7, #12
 801476c:	46bd      	mov	sp, r7
 801476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014772:	4770      	bx	lr

08014774 <Filter_Step>:

static inline uint16_t Filter_Step(Filter_t *f, uint16_t x)
{
 8014774:	b480      	push	{r7}
 8014776:	b087      	sub	sp, #28
 8014778:	af00      	add	r7, sp, #0
 801477a:	6078      	str	r0, [r7, #4]
 801477c:	460b      	mov	r3, r1
 801477e:	807b      	strh	r3, [r7, #2]
    if (!f->initialized)
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	7c9b      	ldrb	r3, [r3, #18]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d121      	bne.n	80147cc <Filter_Step+0x58>
    {
        f->exp_avg = (float) x;
 8014788:	887b      	ldrh	r3, [r7, #2]
 801478a:	ee07 3a90 	vmov	s15, r3
 801478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	edc3 7a00 	vstr	s15, [r3]
        f->last_value = f->exp_avg;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	681a      	ldr	r2, [r3, #0]
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	615a      	str	r2, [r3, #20]
        f->initialized = 1;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2201      	movs	r2, #1
 80147a4:	749a      	strb	r2, [r3, #18]
        f->movavg_buf[0] = f->exp_avg;
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	681a      	ldr	r2, [r3, #0]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	605a      	str	r2, [r3, #4]
        f->movavg_index = 1;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	2201      	movs	r2, #1
 80147b2:	741a      	strb	r2, [r3, #16]
        f->movavg_count = 1;
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	2201      	movs	r2, #1
 80147b8:	745a      	strb	r2, [r3, #17]
        return (uint16_t) f->exp_avg;
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	edd3 7a00 	vldr	s15, [r3]
 80147c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80147c4:	ee17 3a90 	vmov	r3, s15
 80147c8:	b29b      	uxth	r3, r3
 80147ca:	e081      	b.n	80148d0 <Filter_Step+0x15c>
    }
    else
    {
        f->exp_avg = (0.9f * f->exp_avg) + (0.1f * (float) x);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	edd3 7a00 	vldr	s15, [r3]
 80147d2:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80148dc <Filter_Step+0x168>
 80147d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80147da:	887b      	ldrh	r3, [r7, #2]
 80147dc:	ee07 3a90 	vmov	s15, r3
 80147e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80147e4:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 80148e0 <Filter_Step+0x16c>
 80147e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80147ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	edc3 7a00 	vstr	s15, [r3]
    }

    float diff = fabsf(f->exp_avg - f->last_value);
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	ed93 7a00 	vldr	s14, [r3]
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8014802:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014806:	eef0 7ae7 	vabs.f32	s15, s15
 801480a:	edc7 7a03 	vstr	s15, [r7, #12]

    if (diff <= 25.0f)
 801480e:	edd7 7a03 	vldr	s15, [r7, #12]
 8014812:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8014816:	eef4 7ac7 	vcmpe.f32	s15, s14
 801481a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801481e:	d84b      	bhi.n	80148b8 <Filter_Step+0x144>
    {
        f->movavg_buf[f->movavg_index] = f->exp_avg;
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	7c1b      	ldrb	r3, [r3, #16]
 8014824:	4618      	mov	r0, r3
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681a      	ldr	r2, [r3, #0]
 801482a:	6879      	ldr	r1, [r7, #4]
 801482c:	0083      	lsls	r3, r0, #2
 801482e:	440b      	add	r3, r1
 8014830:	3304      	adds	r3, #4
 8014832:	601a      	str	r2, [r3, #0]
        f->movavg_index = (f->movavg_index + 1) % MOVAVG_LEN;
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	7c1b      	ldrb	r3, [r3, #16]
 8014838:	1c5a      	adds	r2, r3, #1
 801483a:	4b2a      	ldr	r3, [pc, #168]	@ (80148e4 <Filter_Step+0x170>)
 801483c:	fb83 3102 	smull	r3, r1, r3, r2
 8014840:	17d3      	asrs	r3, r2, #31
 8014842:	1ac9      	subs	r1, r1, r3
 8014844:	460b      	mov	r3, r1
 8014846:	005b      	lsls	r3, r3, #1
 8014848:	440b      	add	r3, r1
 801484a:	1ad1      	subs	r1, r2, r3
 801484c:	b2ca      	uxtb	r2, r1
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	741a      	strb	r2, [r3, #16]
        if (f->movavg_count < MOVAVG_LEN)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	7c5b      	ldrb	r3, [r3, #17]
 8014856:	2b02      	cmp	r3, #2
 8014858:	d805      	bhi.n	8014866 <Filter_Step+0xf2>
            f->movavg_count++;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	7c5b      	ldrb	r3, [r3, #17]
 801485e:	3301      	adds	r3, #1
 8014860:	b2da      	uxtb	r2, r3
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	745a      	strb	r2, [r3, #17]

        float sum = 0.0f;
 8014866:	f04f 0300 	mov.w	r3, #0
 801486a:	617b      	str	r3, [r7, #20]
        for (uint8_t i = 0; i < f->movavg_count; i++)
 801486c:	2300      	movs	r3, #0
 801486e:	74fb      	strb	r3, [r7, #19]
 8014870:	e00f      	b.n	8014892 <Filter_Step+0x11e>
            sum += f->movavg_buf[i];
 8014872:	7cfb      	ldrb	r3, [r7, #19]
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	009b      	lsls	r3, r3, #2
 8014878:	4413      	add	r3, r2
 801487a:	3304      	adds	r3, #4
 801487c:	edd3 7a00 	vldr	s15, [r3]
 8014880:	ed97 7a05 	vldr	s14, [r7, #20]
 8014884:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014888:	edc7 7a05 	vstr	s15, [r7, #20]
        for (uint8_t i = 0; i < f->movavg_count; i++)
 801488c:	7cfb      	ldrb	r3, [r7, #19]
 801488e:	3301      	adds	r3, #1
 8014890:	74fb      	strb	r3, [r7, #19]
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	7c5b      	ldrb	r3, [r3, #17]
 8014896:	7cfa      	ldrb	r2, [r7, #19]
 8014898:	429a      	cmp	r2, r3
 801489a:	d3ea      	bcc.n	8014872 <Filter_Step+0xfe>

        f->last_value = sum / f->movavg_count;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	7c5b      	ldrb	r3, [r3, #17]
 80148a0:	ee07 3a90 	vmov	s15, r3
 80148a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80148a8:	edd7 6a05 	vldr	s13, [r7, #20]
 80148ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	edc3 7a05 	vstr	s15, [r3, #20]
 80148b6:	e003      	b.n	80148c0 <Filter_Step+0x14c>
    }
    else
    {
        f->last_value = f->exp_avg;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	681a      	ldr	r2, [r3, #0]
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	615a      	str	r2, [r3, #20]
    }

    return (uint16_t) f->last_value;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80148c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80148ca:	ee17 3a90 	vmov	r3, s15
 80148ce:	b29b      	uxth	r3, r3
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	371c      	adds	r7, #28
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr
 80148dc:	3f666666 	.word	0x3f666666
 80148e0:	3dcccccd 	.word	0x3dcccccd
 80148e4:	55555556 	.word	0x55555556

080148e8 <StartAdcMeasurement>:

/* ADC measurement start -----------------------------------------------------*/
void StartAdcMeasurement(void)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	af00      	add	r7, sp, #0
    if (adc_ready)
 80148ec:	4b0a      	ldr	r3, [pc, #40]	@ (8014918 <StartAdcMeasurement+0x30>)
 80148ee:	781b      	ldrb	r3, [r3, #0]
 80148f0:	b2db      	uxtb	r3, r3
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d008      	beq.n	8014908 <StartAdcMeasurement+0x20>
    {
        adc_ready = 0;
 80148f6:	4b08      	ldr	r3, [pc, #32]	@ (8014918 <StartAdcMeasurement+0x30>)
 80148f8:	2200      	movs	r2, #0
 80148fa:	701a      	strb	r2, [r3, #0]
        if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_values, ADC_CHANNEL_COUNT) != HAL_OK)
 80148fc:	2204      	movs	r2, #4
 80148fe:	4907      	ldr	r1, [pc, #28]	@ (801491c <StartAdcMeasurement+0x34>)
 8014900:	4807      	ldr	r0, [pc, #28]	@ (8014920 <StartAdcMeasurement+0x38>)
 8014902:	f7fb f9b9 	bl	800fc78 <HAL_ADC_Start_DMA>
    }
    else
    {
        adc_ready_counter++;
    }
}
 8014906:	e005      	b.n	8014914 <StartAdcMeasurement+0x2c>
        adc_ready_counter++;
 8014908:	4b06      	ldr	r3, [pc, #24]	@ (8014924 <StartAdcMeasurement+0x3c>)
 801490a:	881b      	ldrh	r3, [r3, #0]
 801490c:	3301      	adds	r3, #1
 801490e:	b29a      	uxth	r2, r3
 8014910:	4b04      	ldr	r3, [pc, #16]	@ (8014924 <StartAdcMeasurement+0x3c>)
 8014912:	801a      	strh	r2, [r3, #0]
}
 8014914:	bf00      	nop
 8014916:	bd80      	pop	{r7, pc}
 8014918:	200000c9 	.word	0x200000c9
 801491c:	2001e070 	.word	0x2001e070
 8014920:	200008dc 	.word	0x200008dc
 8014924:	2001e078 	.word	0x2001e078

08014928 <Detect_Step>:

static inline uint8_t Detect_Step(uint16_t main_val, uint16_t extra_val,
                                  int16_t angle)
{
 8014928:	b480      	push	{r7}
 801492a:	b085      	sub	sp, #20
 801492c:	af00      	add	r7, sp, #0
 801492e:	4603      	mov	r3, r0
 8014930:	80fb      	strh	r3, [r7, #6]
 8014932:	460b      	mov	r3, r1
 8014934:	80bb      	strh	r3, [r7, #4]
 8014936:	4613      	mov	r3, r2
 8014938:	807b      	strh	r3, [r7, #2]
    const int16_t hysteresis = 30;
 801493a:	231e      	movs	r3, #30
 801493c:	81fb      	strh	r3, [r7, #14]

    /* podmínka: oba kanály kolem středu */
    if (abs((int16_t) main_val - MIDDLE_VALUE) > hysteresis && abs(
 801493e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8014942:	f2a3 73fd 	subw	r3, r3, #2045	@ 0x7fd
 8014946:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 801494a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 801494e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014952:	429a      	cmp	r2, r3
 8014954:	dd10      	ble.n	8014978 <Detect_Step+0x50>
            (int16_t) extra_val - MIDDLE_VALUE)
 8014956:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801495a:	f2a3 73fd 	subw	r3, r3, #2045	@ 0x7fd
    if (abs((int16_t) main_val - MIDDLE_VALUE) > hysteresis && abs(
 801495e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8014962:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
                                                               > hysteresis)
 8014966:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
    if (abs((int16_t) main_val - MIDDLE_VALUE) > hysteresis && abs(
 801496a:	429a      	cmp	r2, r3
 801496c:	dd04      	ble.n	8014978 <Detect_Step+0x50>
    {

        step_state = STEP_ACTIVE;
 801496e:	4b07      	ldr	r3, [pc, #28]	@ (801498c <Detect_Step+0x64>)
 8014970:	2201      	movs	r2, #1
 8014972:	701a      	strb	r2, [r3, #0]
        return 1;
 8014974:	2301      	movs	r3, #1
 8014976:	e003      	b.n	8014980 <Detect_Step+0x58>

    }
    else
    {

        step_state = STEP_IDLE;
 8014978:	4b04      	ldr	r3, [pc, #16]	@ (801498c <Detect_Step+0x64>)
 801497a:	2200      	movs	r2, #0
 801497c:	701a      	strb	r2, [r3, #0]
    }

    return 0;
 801497e:	2300      	movs	r3, #0
}
 8014980:	4618      	mov	r0, r3
 8014982:	3714      	adds	r7, #20
 8014984:	46bd      	mov	sp, r7
 8014986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498a:	4770      	bx	lr
 801498c:	2001e06e 	.word	0x2001e06e

08014990 <StepCounter_Update>:
static void StepCounter_Update(rotation_dir_t dir, int16_t angle)
{
 8014990:	b480      	push	{r7}
 8014992:	b085      	sub	sp, #20
 8014994:	af00      	add	r7, sp, #0
 8014996:	4603      	mov	r3, r0
 8014998:	460a      	mov	r2, r1
 801499a:	71fb      	strb	r3, [r7, #7]
 801499c:	4613      	mov	r3, r2
 801499e:	80bb      	strh	r3, [r7, #4]
    for (uint8_t i = 0; i < STEP_ANGLES_COUNT; i++)
 80149a0:	2300      	movs	r3, #0
 80149a2:	73fb      	strb	r3, [r7, #15]
 80149a4:	e036      	b.n	8014a14 <StepCounter_Update+0x84>
    {
        if (abs(angle - step_angles[i]) <= STEP_TOLERANCE)
 80149a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80149aa:	7bfa      	ldrb	r2, [r7, #15]
 80149ac:	491e      	ldr	r1, [pc, #120]	@ (8014a28 <StepCounter_Update+0x98>)
 80149ae:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80149b2:	1a9b      	subs	r3, r3, r2
 80149b4:	f113 0f05 	cmn.w	r3, #5
 80149b8:	db29      	blt.n	8014a0e <StepCounter_Update+0x7e>
 80149ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80149be:	7bfa      	ldrb	r2, [r7, #15]
 80149c0:	4919      	ldr	r1, [pc, #100]	@ (8014a28 <StepCounter_Update+0x98>)
 80149c2:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 80149c6:	1a9b      	subs	r3, r3, r2
 80149c8:	2b05      	cmp	r3, #5
 80149ca:	dc20      	bgt.n	8014a0e <StepCounter_Update+0x7e>
        {
            // už jsme krok na tomhle úhlu počítali → přeskoč
            if (last_step_angle == step_angles[i])
 80149cc:	7bfb      	ldrb	r3, [r7, #15]
 80149ce:	4a16      	ldr	r2, [pc, #88]	@ (8014a28 <StepCounter_Update+0x98>)
 80149d0:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 80149d4:	4b15      	ldr	r3, [pc, #84]	@ (8014a2c <StepCounter_Update+0x9c>)
 80149d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149da:	429a      	cmp	r2, r3
 80149dc:	d01e      	beq.n	8014a1c <StepCounter_Update+0x8c>
                return;

            // nový krok → přičti/odečti
            if (dir == DIR_CW)
 80149de:	79fb      	ldrb	r3, [r7, #7]
 80149e0:	2b01      	cmp	r3, #1
 80149e2:	d105      	bne.n	80149f0 <StepCounter_Update+0x60>
                step_count++;
 80149e4:	4b12      	ldr	r3, [pc, #72]	@ (8014a30 <StepCounter_Update+0xa0>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	3301      	adds	r3, #1
 80149ea:	4a11      	ldr	r2, [pc, #68]	@ (8014a30 <StepCounter_Update+0xa0>)
 80149ec:	6013      	str	r3, [r2, #0]
 80149ee:	e007      	b.n	8014a00 <StepCounter_Update+0x70>
            else if (dir == DIR_CCW)
 80149f0:	79fb      	ldrb	r3, [r7, #7]
 80149f2:	2b02      	cmp	r3, #2
 80149f4:	d104      	bne.n	8014a00 <StepCounter_Update+0x70>
                step_count--;
 80149f6:	4b0e      	ldr	r3, [pc, #56]	@ (8014a30 <StepCounter_Update+0xa0>)
 80149f8:	681b      	ldr	r3, [r3, #0]
 80149fa:	3b01      	subs	r3, #1
 80149fc:	4a0c      	ldr	r2, [pc, #48]	@ (8014a30 <StepCounter_Update+0xa0>)
 80149fe:	6013      	str	r3, [r2, #0]

            last_step_angle = step_angles[i];  // zapamatuj si úhel
 8014a00:	7bfb      	ldrb	r3, [r7, #15]
 8014a02:	4a09      	ldr	r2, [pc, #36]	@ (8014a28 <StepCounter_Update+0x98>)
 8014a04:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8014a08:	4b08      	ldr	r3, [pc, #32]	@ (8014a2c <StepCounter_Update+0x9c>)
 8014a0a:	801a      	strh	r2, [r3, #0]
            return;
 8014a0c:	e007      	b.n	8014a1e <StepCounter_Update+0x8e>
    for (uint8_t i = 0; i < STEP_ANGLES_COUNT; i++)
 8014a0e:	7bfb      	ldrb	r3, [r7, #15]
 8014a10:	3301      	adds	r3, #1
 8014a12:	73fb      	strb	r3, [r7, #15]
 8014a14:	7bfb      	ldrb	r3, [r7, #15]
 8014a16:	2b04      	cmp	r3, #4
 8014a18:	d9c5      	bls.n	80149a6 <StepCounter_Update+0x16>
 8014a1a:	e000      	b.n	8014a1e <StepCounter_Update+0x8e>
                return;
 8014a1c:	bf00      	nop
        }
    }

}
 8014a1e:	3714      	adds	r7, #20
 8014a20:	46bd      	mov	sp, r7
 8014a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a26:	4770      	bx	lr
 8014a28:	08015328 	.word	0x08015328
 8014a2c:	200000ca 	.word	0x200000ca
 8014a30:	2001e07c 	.word	0x2001e07c
 8014a34:	00000000 	.word	0x00000000

08014a38 <Capture_HandleSample>:

/* Capture handler -----------------------------------------------------------*/
static inline void Capture_HandleSample(uint16_t adc_sample[])
{
 8014a38:	b580      	push	{r7, lr}
 8014a3a:	b086      	sub	sp, #24
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	6078      	str	r0, [r7, #4]
    uint16_t raw_main = adc_sample[MONITOR_CHANNEL];
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	885b      	ldrh	r3, [r3, #2]
 8014a44:	827b      	strh	r3, [r7, #18]
    uint16_t raw_extra = adc_sample[EXTRA_CHANNEL];
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	881b      	ldrh	r3, [r3, #0]
 8014a4a:	823b      	strh	r3, [r7, #16]

    uint16_t filt_main = Filter_Step(&filter_main, raw_main);
 8014a4c:	8a7b      	ldrh	r3, [r7, #18]
 8014a4e:	4619      	mov	r1, r3
 8014a50:	48ab      	ldr	r0, [pc, #684]	@ (8014d00 <Capture_HandleSample+0x2c8>)
 8014a52:	f7ff fe8f 	bl	8014774 <Filter_Step>
 8014a56:	4603      	mov	r3, r0
 8014a58:	82fb      	strh	r3, [r7, #22]
    uint16_t filt_extra = Filter_Step(&filter_extra, raw_extra);
 8014a5a:	8a3b      	ldrh	r3, [r7, #16]
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	48a9      	ldr	r0, [pc, #676]	@ (8014d04 <Capture_HandleSample+0x2cc>)
 8014a60:	f7ff fe88 	bl	8014774 <Filter_Step>
 8014a64:	4603      	mov	r3, r0
 8014a66:	82bb      	strh	r3, [r7, #20]

    float angle_rad = atan2f((float) raw_main - MIDDLE_VALUE,
 8014a68:	8a7b      	ldrh	r3, [r7, #18]
 8014a6a:	ee07 3a90 	vmov	s15, r3
 8014a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014a72:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8014d08 <Capture_HandleSample+0x2d0>
 8014a76:	ee37 7ac7 	vsub.f32	s14, s15, s14
                             (float) raw_extra - MIDDLE_VALUE);
 8014a7a:	8a3b      	ldrh	r3, [r7, #16]
 8014a7c:	ee07 3a90 	vmov	s15, r3
 8014a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
    float angle_rad = atan2f((float) raw_main - MIDDLE_VALUE,
 8014a84:	eddf 6aa0 	vldr	s13, [pc, #640]	@ 8014d08 <Capture_HandleSample+0x2d0>
 8014a88:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014a8c:	eef0 0a67 	vmov.f32	s1, s15
 8014a90:	eeb0 0a47 	vmov.f32	s0, s14
 8014a94:	f000 f9b4 	bl	8014e00 <atan2f>
 8014a98:	ed87 0a03 	vstr	s0, [r7, #12]
    angle_deg = (int16_t) (angle_rad * (180.0f / M_PI));
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f7f7 ff71 	bl	800c984 <__aeabi_f2d>
 8014aa2:	a395      	add	r3, pc, #596	@ (adr r3, 8014cf8 <Capture_HandleSample+0x2c0>)
 8014aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa8:	f7f7 fcde 	bl	800c468 <__aeabi_dmul>
 8014aac:	4602      	mov	r2, r0
 8014aae:	460b      	mov	r3, r1
 8014ab0:	4610      	mov	r0, r2
 8014ab2:	4619      	mov	r1, r3
 8014ab4:	f7f7 ffbe 	bl	800ca34 <__aeabi_d2iz>
 8014ab8:	4603      	mov	r3, r0
 8014aba:	b21a      	sxth	r2, r3
 8014abc:	4b93      	ldr	r3, [pc, #588]	@ (8014d0c <Capture_HandleSample+0x2d4>)
 8014abe:	801a      	strh	r2, [r3, #0]

    switch (capture_state)
 8014ac0:	4b93      	ldr	r3, [pc, #588]	@ (8014d10 <Capture_HandleSample+0x2d8>)
 8014ac2:	781b      	ldrb	r3, [r3, #0]
 8014ac4:	b2db      	uxtb	r3, r3
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d002      	beq.n	8014ad0 <Capture_HandleSample+0x98>
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d06f      	beq.n	8014bae <Capture_HandleSample+0x176>
            }
            break;

        case CAPT_DONE:
        default:
            break;
 8014ace:	e0e4      	b.n	8014c9a <Capture_HandleSample+0x262>
            if (abs(raw_main - TRIGGER_THRESHOLD) > 50)
 8014ad0:	8a7b      	ldrh	r3, [r7, #18]
 8014ad2:	f6a3 0302 	subw	r3, r3, #2050	@ 0x802
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	bfb8      	it	lt
 8014ada:	425b      	neglt	r3, r3
 8014adc:	2b32      	cmp	r3, #50	@ 0x32
 8014ade:	f340 80d9 	ble.w	8014c94 <Capture_HandleSample+0x25c>
                capture_state = CAPT_CAPTURING;
 8014ae2:	4b8b      	ldr	r3, [pc, #556]	@ (8014d10 <Capture_HandleSample+0x2d8>)
 8014ae4:	2201      	movs	r2, #1
 8014ae6:	701a      	strb	r2, [r3, #0]
                capture_count = 0;
 8014ae8:	4b8a      	ldr	r3, [pc, #552]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014aea:	2200      	movs	r2, #0
 8014aec:	601a      	str	r2, [r3, #0]
                Filter_Reset(&filter_main);
 8014aee:	4884      	ldr	r0, [pc, #528]	@ (8014d00 <Capture_HandleSample+0x2c8>)
 8014af0:	f7ff fe25 	bl	801473e <Filter_Reset>
                Filter_Reset(&filter_extra);
 8014af4:	4883      	ldr	r0, [pc, #524]	@ (8014d04 <Capture_HandleSample+0x2cc>)
 8014af6:	f7ff fe22 	bl	801473e <Filter_Reset>
                filt_main = Filter_Step(&filter_main, raw_main);
 8014afa:	8a7b      	ldrh	r3, [r7, #18]
 8014afc:	4619      	mov	r1, r3
 8014afe:	4880      	ldr	r0, [pc, #512]	@ (8014d00 <Capture_HandleSample+0x2c8>)
 8014b00:	f7ff fe38 	bl	8014774 <Filter_Step>
 8014b04:	4603      	mov	r3, r0
 8014b06:	82fb      	strh	r3, [r7, #22]
                filt_extra = Filter_Step(&filter_extra, raw_extra);
 8014b08:	8a3b      	ldrh	r3, [r7, #16]
 8014b0a:	4619      	mov	r1, r3
 8014b0c:	487d      	ldr	r0, [pc, #500]	@ (8014d04 <Capture_HandleSample+0x2cc>)
 8014b0e:	f7ff fe31 	bl	8014774 <Filter_Step>
 8014b12:	4603      	mov	r3, r0
 8014b14:	82bb      	strh	r3, [r7, #20]
                angle_rad = atan2f((float) raw_main - MIDDLE_VALUE,
 8014b16:	8a7b      	ldrh	r3, [r7, #18]
 8014b18:	ee07 3a90 	vmov	s15, r3
 8014b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014b20:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8014d08 <Capture_HandleSample+0x2d0>
 8014b24:	ee37 7ac7 	vsub.f32	s14, s15, s14
                                   (float) raw_extra - MIDDLE_VALUE);
 8014b28:	8a3b      	ldrh	r3, [r7, #16]
 8014b2a:	ee07 3a90 	vmov	s15, r3
 8014b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                angle_rad = atan2f((float) raw_main - MIDDLE_VALUE,
 8014b32:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8014d08 <Capture_HandleSample+0x2d0>
 8014b36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014b3a:	eef0 0a67 	vmov.f32	s1, s15
 8014b3e:	eeb0 0a47 	vmov.f32	s0, s14
 8014b42:	f000 f95d 	bl	8014e00 <atan2f>
 8014b46:	ed87 0a03 	vstr	s0, [r7, #12]
                angle_deg = (int16_t) (angle_rad * (180.0f / M_PI));
 8014b4a:	68f8      	ldr	r0, [r7, #12]
 8014b4c:	f7f7 ff1a 	bl	800c984 <__aeabi_f2d>
 8014b50:	a369      	add	r3, pc, #420	@ (adr r3, 8014cf8 <Capture_HandleSample+0x2c0>)
 8014b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b56:	f7f7 fc87 	bl	800c468 <__aeabi_dmul>
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	460b      	mov	r3, r1
 8014b5e:	4610      	mov	r0, r2
 8014b60:	4619      	mov	r1, r3
 8014b62:	f7f7 ff67 	bl	800ca34 <__aeabi_d2iz>
 8014b66:	4603      	mov	r3, r0
 8014b68:	b21a      	sxth	r2, r3
 8014b6a:	4b68      	ldr	r3, [pc, #416]	@ (8014d0c <Capture_HandleSample+0x2d4>)
 8014b6c:	801a      	strh	r2, [r3, #0]
                capture_buffer[capture_count] = filt_main;
 8014b6e:	4b69      	ldr	r3, [pc, #420]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	4969      	ldr	r1, [pc, #420]	@ (8014d18 <Capture_HandleSample+0x2e0>)
 8014b74:	8afa      	ldrh	r2, [r7, #22]
 8014b76:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                capture_buffer_ch2[capture_count] = filt_extra;
 8014b7a:	4b66      	ldr	r3, [pc, #408]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	4967      	ldr	r1, [pc, #412]	@ (8014d1c <Capture_HandleSample+0x2e4>)
 8014b80:	8aba      	ldrh	r2, [r7, #20]
 8014b82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                capture_buffer_angle[capture_count] = angle_deg;
 8014b86:	4b61      	ldr	r3, [pc, #388]	@ (8014d0c <Capture_HandleSample+0x2d4>)
 8014b88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014b8c:	4b61      	ldr	r3, [pc, #388]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	ee07 2a90 	vmov	s15, r2
 8014b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014b98:	4a61      	ldr	r2, [pc, #388]	@ (8014d20 <Capture_HandleSample+0x2e8>)
 8014b9a:	009b      	lsls	r3, r3, #2
 8014b9c:	4413      	add	r3, r2
 8014b9e:	edc3 7a00 	vstr	s15, [r3]
                capture_count++;
 8014ba2:	4b5c      	ldr	r3, [pc, #368]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014baa:	6013      	str	r3, [r2, #0]
            break;
 8014bac:	e072      	b.n	8014c94 <Capture_HandleSample+0x25c>
            if (capture_count < CAPTURE_SAMPLES)
 8014bae:	4b59      	ldr	r3, [pc, #356]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014bb0:	681b      	ldr	r3, [r3, #0]
 8014bb2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8014bb6:	4293      	cmp	r3, r2
 8014bb8:	d86e      	bhi.n	8014c98 <Capture_HandleSample+0x260>
                filt_main = Filter_Step(&filter_main, raw_main);
 8014bba:	8a7b      	ldrh	r3, [r7, #18]
 8014bbc:	4619      	mov	r1, r3
 8014bbe:	4850      	ldr	r0, [pc, #320]	@ (8014d00 <Capture_HandleSample+0x2c8>)
 8014bc0:	f7ff fdd8 	bl	8014774 <Filter_Step>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	82fb      	strh	r3, [r7, #22]
                filt_extra = Filter_Step(&filter_extra, raw_extra);
 8014bc8:	8a3b      	ldrh	r3, [r7, #16]
 8014bca:	4619      	mov	r1, r3
 8014bcc:	484d      	ldr	r0, [pc, #308]	@ (8014d04 <Capture_HandleSample+0x2cc>)
 8014bce:	f7ff fdd1 	bl	8014774 <Filter_Step>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	82bb      	strh	r3, [r7, #20]
                angle_rad = atan2f((float) filt_main - MIDDLE_VALUE,
 8014bd6:	8afb      	ldrh	r3, [r7, #22]
 8014bd8:	ee07 3a90 	vmov	s15, r3
 8014bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014be0:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8014d08 <Capture_HandleSample+0x2d0>
 8014be4:	ee37 7ac7 	vsub.f32	s14, s15, s14
                                   (float) filt_extra - MIDDLE_VALUE);
 8014be8:	8abb      	ldrh	r3, [r7, #20]
 8014bea:	ee07 3a90 	vmov	s15, r3
 8014bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                angle_rad = atan2f((float) filt_main - MIDDLE_VALUE,
 8014bf2:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8014d08 <Capture_HandleSample+0x2d0>
 8014bf6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014bfa:	eef0 0a67 	vmov.f32	s1, s15
 8014bfe:	eeb0 0a47 	vmov.f32	s0, s14
 8014c02:	f000 f8fd 	bl	8014e00 <atan2f>
 8014c06:	ed87 0a03 	vstr	s0, [r7, #12]
                angle_deg = (int16_t) (angle_rad * (180.0f / M_PI));
 8014c0a:	68f8      	ldr	r0, [r7, #12]
 8014c0c:	f7f7 feba 	bl	800c984 <__aeabi_f2d>
 8014c10:	a339      	add	r3, pc, #228	@ (adr r3, 8014cf8 <Capture_HandleSample+0x2c0>)
 8014c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c16:	f7f7 fc27 	bl	800c468 <__aeabi_dmul>
 8014c1a:	4602      	mov	r2, r0
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	4610      	mov	r0, r2
 8014c20:	4619      	mov	r1, r3
 8014c22:	f7f7 ff07 	bl	800ca34 <__aeabi_d2iz>
 8014c26:	4603      	mov	r3, r0
 8014c28:	b21a      	sxth	r2, r3
 8014c2a:	4b38      	ldr	r3, [pc, #224]	@ (8014d0c <Capture_HandleSample+0x2d4>)
 8014c2c:	801a      	strh	r2, [r3, #0]
                capture_buffer[capture_count] = filt_main;
 8014c2e:	4b39      	ldr	r3, [pc, #228]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	4939      	ldr	r1, [pc, #228]	@ (8014d18 <Capture_HandleSample+0x2e0>)
 8014c34:	8afa      	ldrh	r2, [r7, #22]
 8014c36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                capture_buffer_ch2[capture_count] = filt_extra;
 8014c3a:	4b36      	ldr	r3, [pc, #216]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014c3c:	681b      	ldr	r3, [r3, #0]
 8014c3e:	4937      	ldr	r1, [pc, #220]	@ (8014d1c <Capture_HandleSample+0x2e4>)
 8014c40:	8aba      	ldrh	r2, [r7, #20]
 8014c42:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
                capture_buffer_angle[capture_count] = angle_deg;
 8014c46:	4b31      	ldr	r3, [pc, #196]	@ (8014d0c <Capture_HandleSample+0x2d4>)
 8014c48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014c4c:	4b31      	ldr	r3, [pc, #196]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	ee07 2a90 	vmov	s15, r2
 8014c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c58:	4a31      	ldr	r2, [pc, #196]	@ (8014d20 <Capture_HandleSample+0x2e8>)
 8014c5a:	009b      	lsls	r3, r3, #2
 8014c5c:	4413      	add	r3, r2
 8014c5e:	edc3 7a00 	vstr	s15, [r3]
                capture_buffer_steps[capture_count] = step_count;
 8014c62:	4b2c      	ldr	r3, [pc, #176]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	4a2f      	ldr	r2, [pc, #188]	@ (8014d24 <Capture_HandleSample+0x2ec>)
 8014c68:	6812      	ldr	r2, [r2, #0]
 8014c6a:	492f      	ldr	r1, [pc, #188]	@ (8014d28 <Capture_HandleSample+0x2f0>)
 8014c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                capture_count++;
 8014c70:	4b28      	ldr	r3, [pc, #160]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	3301      	adds	r3, #1
 8014c76:	4a27      	ldr	r2, [pc, #156]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014c78:	6013      	str	r3, [r2, #0]
                if (capture_count >= CAPTURE_SAMPLES)
 8014c7a:	4b26      	ldr	r3, [pc, #152]	@ (8014d14 <Capture_HandleSample+0x2dc>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8014c82:	4293      	cmp	r3, r2
 8014c84:	d908      	bls.n	8014c98 <Capture_HandleSample+0x260>
                    capture_state = CAPT_DONE;
 8014c86:	4b22      	ldr	r3, [pc, #136]	@ (8014d10 <Capture_HandleSample+0x2d8>)
 8014c88:	2202      	movs	r2, #2
 8014c8a:	701a      	strb	r2, [r3, #0]
                    capture_ready = 1;
 8014c8c:	4b27      	ldr	r3, [pc, #156]	@ (8014d2c <Capture_HandleSample+0x2f4>)
 8014c8e:	2201      	movs	r2, #1
 8014c90:	701a      	strb	r2, [r3, #0]
            break;
 8014c92:	e001      	b.n	8014c98 <Capture_HandleSample+0x260>
            break;
 8014c94:	bf00      	nop
 8014c96:	e000      	b.n	8014c9a <Capture_HandleSample+0x262>
            break;
 8014c98:	bf00      	nop
    }
    if (Detect_Step(filt_main, filt_extra, angle_deg))
 8014c9a:	4b1c      	ldr	r3, [pc, #112]	@ (8014d0c <Capture_HandleSample+0x2d4>)
 8014c9c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014ca0:	8ab9      	ldrh	r1, [r7, #20]
 8014ca2:	8afb      	ldrh	r3, [r7, #22]
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f7ff fe3f 	bl	8014928 <Detect_Step>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d01e      	beq.n	8014cee <Capture_HandleSample+0x2b6>
    {
        AngleBufferFIFO_Add(&angle_buffer, angle_deg);
 8014cb0:	4b16      	ldr	r3, [pc, #88]	@ (8014d0c <Capture_HandleSample+0x2d4>)
 8014cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014cb6:	4619      	mov	r1, r3
 8014cb8:	481d      	ldr	r0, [pc, #116]	@ (8014d30 <Capture_HandleSample+0x2f8>)
 8014cba:	f7ff fccd 	bl	8014658 <AngleBufferFIFO_Add>

        dir = Detect_RotationDirection(&angle_buffer);
 8014cbe:	481c      	ldr	r0, [pc, #112]	@ (8014d30 <Capture_HandleSample+0x2f8>)
 8014cc0:	f7ff fd0f 	bl	80146e2 <Detect_RotationDirection>
 8014cc4:	4603      	mov	r3, r0
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8014d34 <Capture_HandleSample+0x2fc>)
 8014cca:	701a      	strb	r2, [r3, #0]

        if (dir == DIR_CW || dir == DIR_CCW)
 8014ccc:	4b19      	ldr	r3, [pc, #100]	@ (8014d34 <Capture_HandleSample+0x2fc>)
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	2b01      	cmp	r3, #1
 8014cd2:	d003      	beq.n	8014cdc <Capture_HandleSample+0x2a4>
 8014cd4:	4b17      	ldr	r3, [pc, #92]	@ (8014d34 <Capture_HandleSample+0x2fc>)
 8014cd6:	781b      	ldrb	r3, [r3, #0]
 8014cd8:	2b02      	cmp	r3, #2
 8014cda:	d108      	bne.n	8014cee <Capture_HandleSample+0x2b6>
        {
            StepCounter_Update(dir, angle_deg);
 8014cdc:	4b15      	ldr	r3, [pc, #84]	@ (8014d34 <Capture_HandleSample+0x2fc>)
 8014cde:	781b      	ldrb	r3, [r3, #0]
 8014ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8014d0c <Capture_HandleSample+0x2d4>)
 8014ce2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8014ce6:	4611      	mov	r1, r2
 8014ce8:	4618      	mov	r0, r3
 8014cea:	f7ff fe51 	bl	8014990 <StepCounter_Update>
        }
    }
}
 8014cee:	bf00      	nop
 8014cf0:	3718      	adds	r7, #24
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}
 8014cf6:	bf00      	nop
 8014cf8:	1a63c1f8 	.word	0x1a63c1f8
 8014cfc:	404ca5dc 	.word	0x404ca5dc
 8014d00:	2001e014 	.word	0x2001e014
 8014d04:	2001e02c 	.word	0x2001e02c
 8014d08:	44ffa000 	.word	0x44ffa000
 8014d0c:	2001e012 	.word	0x2001e012
 8014d10:	20000b48 	.word	0x20000b48
 8014d14:	20000b4c 	.word	0x20000b4c
 8014d18:	20000b50 	.word	0x20000b50
 8014d1c:	20005970 	.word	0x20005970
 8014d20:	2000a790 	.word	0x2000a790
 8014d24:	2001e07c 	.word	0x2001e07c
 8014d28:	200143d0 	.word	0x200143d0
 8014d2c:	2001e010 	.word	0x2001e010
 8014d30:	2001e044 	.word	0x2001e044
 8014d34:	2001e080 	.word	0x2001e080

08014d38 <HAL_ADC_ConvCpltCallback>:
{

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	4a06      	ldr	r2, [pc, #24]	@ (8014d60 <HAL_ADC_ConvCpltCallback+0x28>)
 8014d46:	4293      	cmp	r3, r2
 8014d48:	d105      	bne.n	8014d56 <HAL_ADC_ConvCpltCallback+0x1e>
    {

        Capture_HandleSample(adc_values);
 8014d4a:	4806      	ldr	r0, [pc, #24]	@ (8014d64 <HAL_ADC_ConvCpltCallback+0x2c>)
 8014d4c:	f7ff fe74 	bl	8014a38 <Capture_HandleSample>
        adc_ready = 1;
 8014d50:	4b05      	ldr	r3, [pc, #20]	@ (8014d68 <HAL_ADC_ConvCpltCallback+0x30>)
 8014d52:	2201      	movs	r2, #1
 8014d54:	701a      	strb	r2, [r3, #0]
    }
}
 8014d56:	bf00      	nop
 8014d58:	3708      	adds	r7, #8
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}
 8014d5e:	bf00      	nop
 8014d60:	40012000 	.word	0x40012000
 8014d64:	2001e070 	.word	0x2001e070
 8014d68:	200000c9 	.word	0x200000c9

08014d6c <memcmp>:
 8014d6c:	b510      	push	{r4, lr}
 8014d6e:	3901      	subs	r1, #1
 8014d70:	4402      	add	r2, r0
 8014d72:	4290      	cmp	r0, r2
 8014d74:	d101      	bne.n	8014d7a <memcmp+0xe>
 8014d76:	2000      	movs	r0, #0
 8014d78:	e005      	b.n	8014d86 <memcmp+0x1a>
 8014d7a:	7803      	ldrb	r3, [r0, #0]
 8014d7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014d80:	42a3      	cmp	r3, r4
 8014d82:	d001      	beq.n	8014d88 <memcmp+0x1c>
 8014d84:	1b18      	subs	r0, r3, r4
 8014d86:	bd10      	pop	{r4, pc}
 8014d88:	3001      	adds	r0, #1
 8014d8a:	e7f2      	b.n	8014d72 <memcmp+0x6>

08014d8c <memset>:
 8014d8c:	4402      	add	r2, r0
 8014d8e:	4603      	mov	r3, r0
 8014d90:	4293      	cmp	r3, r2
 8014d92:	d100      	bne.n	8014d96 <memset+0xa>
 8014d94:	4770      	bx	lr
 8014d96:	f803 1b01 	strb.w	r1, [r3], #1
 8014d9a:	e7f9      	b.n	8014d90 <memset+0x4>

08014d9c <__libc_init_array>:
 8014d9c:	b570      	push	{r4, r5, r6, lr}
 8014d9e:	4d0d      	ldr	r5, [pc, #52]	@ (8014dd4 <__libc_init_array+0x38>)
 8014da0:	4c0d      	ldr	r4, [pc, #52]	@ (8014dd8 <__libc_init_array+0x3c>)
 8014da2:	1b64      	subs	r4, r4, r5
 8014da4:	10a4      	asrs	r4, r4, #2
 8014da6:	2600      	movs	r6, #0
 8014da8:	42a6      	cmp	r6, r4
 8014daa:	d109      	bne.n	8014dc0 <__libc_init_array+0x24>
 8014dac:	4d0b      	ldr	r5, [pc, #44]	@ (8014ddc <__libc_init_array+0x40>)
 8014dae:	4c0c      	ldr	r4, [pc, #48]	@ (8014de0 <__libc_init_array+0x44>)
 8014db0:	f000 f9a4 	bl	80150fc <_init>
 8014db4:	1b64      	subs	r4, r4, r5
 8014db6:	10a4      	asrs	r4, r4, #2
 8014db8:	2600      	movs	r6, #0
 8014dba:	42a6      	cmp	r6, r4
 8014dbc:	d105      	bne.n	8014dca <__libc_init_array+0x2e>
 8014dbe:	bd70      	pop	{r4, r5, r6, pc}
 8014dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dc4:	4798      	blx	r3
 8014dc6:	3601      	adds	r6, #1
 8014dc8:	e7ee      	b.n	8014da8 <__libc_init_array+0xc>
 8014dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8014dce:	4798      	blx	r3
 8014dd0:	3601      	adds	r6, #1
 8014dd2:	e7f2      	b.n	8014dba <__libc_init_array+0x1e>
 8014dd4:	08015374 	.word	0x08015374
 8014dd8:	08015374 	.word	0x08015374
 8014ddc:	08015374 	.word	0x08015374
 8014de0:	08015378 	.word	0x08015378

08014de4 <memcpy>:
 8014de4:	440a      	add	r2, r1
 8014de6:	4291      	cmp	r1, r2
 8014de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8014dec:	d100      	bne.n	8014df0 <memcpy+0xc>
 8014dee:	4770      	bx	lr
 8014df0:	b510      	push	{r4, lr}
 8014df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014dfa:	4291      	cmp	r1, r2
 8014dfc:	d1f9      	bne.n	8014df2 <memcpy+0xe>
 8014dfe:	bd10      	pop	{r4, pc}

08014e00 <atan2f>:
 8014e00:	f000 b800 	b.w	8014e04 <__ieee754_atan2f>

08014e04 <__ieee754_atan2f>:
 8014e04:	ee10 2a90 	vmov	r2, s1
 8014e08:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8014e0c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014e10:	b510      	push	{r4, lr}
 8014e12:	eef0 7a40 	vmov.f32	s15, s0
 8014e16:	d806      	bhi.n	8014e26 <__ieee754_atan2f+0x22>
 8014e18:	ee10 0a10 	vmov	r0, s0
 8014e1c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8014e20:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014e24:	d904      	bls.n	8014e30 <__ieee754_atan2f+0x2c>
 8014e26:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8014e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8014e2e:	bd10      	pop	{r4, pc}
 8014e30:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8014e34:	d103      	bne.n	8014e3e <__ieee754_atan2f+0x3a>
 8014e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014e3a:	f000 b883 	b.w	8014f44 <atanf>
 8014e3e:	1794      	asrs	r4, r2, #30
 8014e40:	f004 0402 	and.w	r4, r4, #2
 8014e44:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8014e48:	b943      	cbnz	r3, 8014e5c <__ieee754_atan2f+0x58>
 8014e4a:	2c02      	cmp	r4, #2
 8014e4c:	d05e      	beq.n	8014f0c <__ieee754_atan2f+0x108>
 8014e4e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8014f20 <__ieee754_atan2f+0x11c>
 8014e52:	2c03      	cmp	r4, #3
 8014e54:	bf08      	it	eq
 8014e56:	eef0 7a47 	vmoveq.f32	s15, s14
 8014e5a:	e7e6      	b.n	8014e2a <__ieee754_atan2f+0x26>
 8014e5c:	b941      	cbnz	r1, 8014e70 <__ieee754_atan2f+0x6c>
 8014e5e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8014f24 <__ieee754_atan2f+0x120>
 8014e62:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8014f28 <__ieee754_atan2f+0x124>
 8014e66:	2800      	cmp	r0, #0
 8014e68:	bfb8      	it	lt
 8014e6a:	eef0 7a47 	vmovlt.f32	s15, s14
 8014e6e:	e7dc      	b.n	8014e2a <__ieee754_atan2f+0x26>
 8014e70:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014e74:	d110      	bne.n	8014e98 <__ieee754_atan2f+0x94>
 8014e76:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014e7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8014e7e:	d107      	bne.n	8014e90 <__ieee754_atan2f+0x8c>
 8014e80:	2c02      	cmp	r4, #2
 8014e82:	d846      	bhi.n	8014f12 <__ieee754_atan2f+0x10e>
 8014e84:	4b29      	ldr	r3, [pc, #164]	@ (8014f2c <__ieee754_atan2f+0x128>)
 8014e86:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014e8a:	edd3 7a00 	vldr	s15, [r3]
 8014e8e:	e7cc      	b.n	8014e2a <__ieee754_atan2f+0x26>
 8014e90:	2c02      	cmp	r4, #2
 8014e92:	d841      	bhi.n	8014f18 <__ieee754_atan2f+0x114>
 8014e94:	4b26      	ldr	r3, [pc, #152]	@ (8014f30 <__ieee754_atan2f+0x12c>)
 8014e96:	e7f6      	b.n	8014e86 <__ieee754_atan2f+0x82>
 8014e98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8014e9c:	d0df      	beq.n	8014e5e <__ieee754_atan2f+0x5a>
 8014e9e:	1a5b      	subs	r3, r3, r1
 8014ea0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8014ea4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8014ea8:	da1a      	bge.n	8014ee0 <__ieee754_atan2f+0xdc>
 8014eaa:	2a00      	cmp	r2, #0
 8014eac:	da01      	bge.n	8014eb2 <__ieee754_atan2f+0xae>
 8014eae:	313c      	adds	r1, #60	@ 0x3c
 8014eb0:	db19      	blt.n	8014ee6 <__ieee754_atan2f+0xe2>
 8014eb2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8014eb6:	f000 f919 	bl	80150ec <fabsf>
 8014eba:	f000 f843 	bl	8014f44 <atanf>
 8014ebe:	eef0 7a40 	vmov.f32	s15, s0
 8014ec2:	2c01      	cmp	r4, #1
 8014ec4:	d012      	beq.n	8014eec <__ieee754_atan2f+0xe8>
 8014ec6:	2c02      	cmp	r4, #2
 8014ec8:	d017      	beq.n	8014efa <__ieee754_atan2f+0xf6>
 8014eca:	2c00      	cmp	r4, #0
 8014ecc:	d0ad      	beq.n	8014e2a <__ieee754_atan2f+0x26>
 8014ece:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8014f34 <__ieee754_atan2f+0x130>
 8014ed2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014ed6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8014f38 <__ieee754_atan2f+0x134>
 8014eda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014ede:	e7a4      	b.n	8014e2a <__ieee754_atan2f+0x26>
 8014ee0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8014f24 <__ieee754_atan2f+0x120>
 8014ee4:	e7ed      	b.n	8014ec2 <__ieee754_atan2f+0xbe>
 8014ee6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8014f3c <__ieee754_atan2f+0x138>
 8014eea:	e7ea      	b.n	8014ec2 <__ieee754_atan2f+0xbe>
 8014eec:	ee17 3a90 	vmov	r3, s15
 8014ef0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8014ef4:	ee07 3a90 	vmov	s15, r3
 8014ef8:	e797      	b.n	8014e2a <__ieee754_atan2f+0x26>
 8014efa:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8014f34 <__ieee754_atan2f+0x130>
 8014efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014f02:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8014f38 <__ieee754_atan2f+0x134>
 8014f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014f0a:	e78e      	b.n	8014e2a <__ieee754_atan2f+0x26>
 8014f0c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8014f38 <__ieee754_atan2f+0x134>
 8014f10:	e78b      	b.n	8014e2a <__ieee754_atan2f+0x26>
 8014f12:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8014f40 <__ieee754_atan2f+0x13c>
 8014f16:	e788      	b.n	8014e2a <__ieee754_atan2f+0x26>
 8014f18:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8014f3c <__ieee754_atan2f+0x138>
 8014f1c:	e785      	b.n	8014e2a <__ieee754_atan2f+0x26>
 8014f1e:	bf00      	nop
 8014f20:	c0490fdb 	.word	0xc0490fdb
 8014f24:	3fc90fdb 	.word	0x3fc90fdb
 8014f28:	bfc90fdb 	.word	0xbfc90fdb
 8014f2c:	08015340 	.word	0x08015340
 8014f30:	08015334 	.word	0x08015334
 8014f34:	33bbbd2e 	.word	0x33bbbd2e
 8014f38:	40490fdb 	.word	0x40490fdb
 8014f3c:	00000000 	.word	0x00000000
 8014f40:	3f490fdb 	.word	0x3f490fdb

08014f44 <atanf>:
 8014f44:	b538      	push	{r3, r4, r5, lr}
 8014f46:	ee10 5a10 	vmov	r5, s0
 8014f4a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8014f4e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8014f52:	eef0 7a40 	vmov.f32	s15, s0
 8014f56:	d310      	bcc.n	8014f7a <atanf+0x36>
 8014f58:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8014f5c:	d904      	bls.n	8014f68 <atanf+0x24>
 8014f5e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8014f62:	eeb0 0a67 	vmov.f32	s0, s15
 8014f66:	bd38      	pop	{r3, r4, r5, pc}
 8014f68:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80150a0 <atanf+0x15c>
 8014f6c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80150a4 <atanf+0x160>
 8014f70:	2d00      	cmp	r5, #0
 8014f72:	bfc8      	it	gt
 8014f74:	eef0 7a47 	vmovgt.f32	s15, s14
 8014f78:	e7f3      	b.n	8014f62 <atanf+0x1e>
 8014f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80150a8 <atanf+0x164>)
 8014f7c:	429c      	cmp	r4, r3
 8014f7e:	d810      	bhi.n	8014fa2 <atanf+0x5e>
 8014f80:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8014f84:	d20a      	bcs.n	8014f9c <atanf+0x58>
 8014f86:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80150ac <atanf+0x168>
 8014f8a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014f92:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f9a:	dce2      	bgt.n	8014f62 <atanf+0x1e>
 8014f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8014fa0:	e013      	b.n	8014fca <atanf+0x86>
 8014fa2:	f000 f8a3 	bl	80150ec <fabsf>
 8014fa6:	4b42      	ldr	r3, [pc, #264]	@ (80150b0 <atanf+0x16c>)
 8014fa8:	429c      	cmp	r4, r3
 8014faa:	d84f      	bhi.n	801504c <atanf+0x108>
 8014fac:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8014fb0:	429c      	cmp	r4, r3
 8014fb2:	d841      	bhi.n	8015038 <atanf+0xf4>
 8014fb4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8014fb8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8014fbc:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014fc6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014fca:	1c5a      	adds	r2, r3, #1
 8014fcc:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014fd0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80150b4 <atanf+0x170>
 8014fd4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80150b8 <atanf+0x174>
 8014fd8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80150bc <atanf+0x178>
 8014fdc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014fe0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8014fe4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80150c0 <atanf+0x17c>
 8014fe8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014fec:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80150c4 <atanf+0x180>
 8014ff0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8014ff4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80150c8 <atanf+0x184>
 8014ff8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014ffc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80150cc <atanf+0x188>
 8015000:	eee7 5a26 	vfma.f32	s11, s14, s13
 8015004:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80150d0 <atanf+0x18c>
 8015008:	eea6 5a87 	vfma.f32	s10, s13, s14
 801500c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80150d4 <atanf+0x190>
 8015010:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015014:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80150d8 <atanf+0x194>
 8015018:	eea7 5a26 	vfma.f32	s10, s14, s13
 801501c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80150dc <atanf+0x198>
 8015020:	eea5 7a26 	vfma.f32	s14, s10, s13
 8015024:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015028:	eea5 7a86 	vfma.f32	s14, s11, s12
 801502c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8015030:	d121      	bne.n	8015076 <atanf+0x132>
 8015032:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015036:	e794      	b.n	8014f62 <atanf+0x1e>
 8015038:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801503c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8015040:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015044:	2301      	movs	r3, #1
 8015046:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801504a:	e7be      	b.n	8014fca <atanf+0x86>
 801504c:	4b24      	ldr	r3, [pc, #144]	@ (80150e0 <atanf+0x19c>)
 801504e:	429c      	cmp	r4, r3
 8015050:	d80b      	bhi.n	801506a <atanf+0x126>
 8015052:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8015056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801505a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801505e:	2302      	movs	r3, #2
 8015060:	ee70 6a67 	vsub.f32	s13, s0, s15
 8015064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015068:	e7af      	b.n	8014fca <atanf+0x86>
 801506a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801506e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015072:	2303      	movs	r3, #3
 8015074:	e7a9      	b.n	8014fca <atanf+0x86>
 8015076:	4a1b      	ldr	r2, [pc, #108]	@ (80150e4 <atanf+0x1a0>)
 8015078:	491b      	ldr	r1, [pc, #108]	@ (80150e8 <atanf+0x1a4>)
 801507a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801507e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015082:	edd3 6a00 	vldr	s13, [r3]
 8015086:	ee37 7a66 	vsub.f32	s14, s14, s13
 801508a:	2d00      	cmp	r5, #0
 801508c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015090:	edd2 7a00 	vldr	s15, [r2]
 8015094:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015098:	bfb8      	it	lt
 801509a:	eef1 7a67 	vneglt.f32	s15, s15
 801509e:	e760      	b.n	8014f62 <atanf+0x1e>
 80150a0:	bfc90fdb 	.word	0xbfc90fdb
 80150a4:	3fc90fdb 	.word	0x3fc90fdb
 80150a8:	3edfffff 	.word	0x3edfffff
 80150ac:	7149f2ca 	.word	0x7149f2ca
 80150b0:	3f97ffff 	.word	0x3f97ffff
 80150b4:	3c8569d7 	.word	0x3c8569d7
 80150b8:	3d4bda59 	.word	0x3d4bda59
 80150bc:	bd6ef16b 	.word	0xbd6ef16b
 80150c0:	3d886b35 	.word	0x3d886b35
 80150c4:	3dba2e6e 	.word	0x3dba2e6e
 80150c8:	3e124925 	.word	0x3e124925
 80150cc:	3eaaaaab 	.word	0x3eaaaaab
 80150d0:	bd15a221 	.word	0xbd15a221
 80150d4:	bd9d8795 	.word	0xbd9d8795
 80150d8:	bde38e38 	.word	0xbde38e38
 80150dc:	be4ccccd 	.word	0xbe4ccccd
 80150e0:	401bffff 	.word	0x401bffff
 80150e4:	0801535c 	.word	0x0801535c
 80150e8:	0801534c 	.word	0x0801534c

080150ec <fabsf>:
 80150ec:	ee10 3a10 	vmov	r3, s0
 80150f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80150f4:	ee00 3a10 	vmov	s0, r3
 80150f8:	4770      	bx	lr
	...

080150fc <_init>:
 80150fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150fe:	bf00      	nop
 8015100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015102:	bc08      	pop	{r3}
 8015104:	469e      	mov	lr, r3
 8015106:	4770      	bx	lr

08015108 <_fini>:
 8015108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801510a:	bf00      	nop
 801510c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801510e:	bc08      	pop	{r3}
 8015110:	469e      	mov	lr, r3
 8015112:	4770      	bx	lr
