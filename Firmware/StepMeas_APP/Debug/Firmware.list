
Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005784  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08005948  08005948  00006948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .sectionIsrConst 00000100  08005afc  08005afc  00006afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08005bfc  08005bfc  0000700c  2**0
                  CONTENTS
  5 .ARM          00000008  08005bfc  08005bfc  00006bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08005c04  08005c04  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08005c04  08005c04  00006c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  08005c08  08005c08  00006c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         0000000c  20000000  08005c0c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000598  2000000c  08005c18  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005a4  08005c18  000075a4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016f02  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000381b  00000000  00000000  0001df3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  00021760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001069  00000000  00000000  00022c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263e5  00000000  00000000  00023cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e160  00000000  00000000  0004a0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3fcc  00000000  00000000  0006820e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014c1da  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057a8  00000000  00000000  0014c220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001519c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005930 	.word	0x08005930

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005930 	.word	0x08005930

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <Config_Callback>:
  return ret;
}


Status_t Config_Callback(uint32_t id)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  Status_t ret = STATUS_OK;
 80004fc:	2300      	movs	r3, #0
 80004fe:	81fb      	strh	r3, [r7, #14]

  /* Check if some value need further action to propagate */
  switch (CONF_BLOCK_ID(id))
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	0e1b      	lsrs	r3, r3, #24
 8000504:	2b03      	cmp	r3, #3
#endif
      break;


    default:
      break;
 8000506:	bf00      	nop
  }
  return ret;
 8000508:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3714      	adds	r7, #20
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <Config_ApplyConfig>:
}



Status_t Config_ApplyConfig(uint32_t id)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  Status_t ret = STATUS_OK;
 8000520:	2300      	movs	r3, #0
 8000522:	81fb      	strh	r3, [r7, #14]

  /* Application-specific callback */
  Config_Callback(id);
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff ffe5 	bl	80004f4 <Config_Callback>

  /* If this value should be stored in Flash, notify flash task */
  if ((id & 0x070) == 0x070)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000530:	2b70      	cmp	r3, #112	@ 0x70
 8000532:	d101      	bne.n	8000538 <Config_ApplyConfig+0x20>
  {
    FlashApp_RequestConfStorage();
 8000534:	f000 f806 	bl	8000544 <FlashApp_RequestConfStorage>
  }

  return ret;
 8000538:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <FlashApp_RequestConfStorage>:
	HAL_Delay(100);

	return ret;
}

Status_t FlashApp_RequestConfStorage(void) {
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800054a:	2300      	movs	r3, #0
 800054c:	80fb      	strh	r3, [r7, #6]

	/* Do not store to flash in testing mode */
	if (!(conf.sys.status & STAT_BIT_TESTING)) {
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <FlashApp_RequestConfStorage+0x2c>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	2b00      	cmp	r3, #0
 8000558:	d102      	bne.n	8000560 <FlashApp_RequestConfStorage+0x1c>
		flashApp.config = CONFIG_STORE;
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <FlashApp_RequestConfStorage+0x30>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
	}

	return ret;
 8000560:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	20000030 	.word	0x20000030
 8000574:	20000028 	.word	0x20000028

08000578 <MbRtu_ReadInputRegCallback>:
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/


Status_t MbRtu_ReadInputRegCallback(uint16_t address, uint16_t *value)
{
 8000578:	b480      	push	{r7}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	6039      	str	r1, [r7, #0]
 8000582:	80fb      	strh	r3, [r7, #6]
  Status_t ret = STATUS_OK;
 8000584:	2300      	movs	r3, #0
 8000586:	82fb      	strh	r3, [r7, #22]

  UNUSED(mb);

  switch (address)
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	2b18      	cmp	r3, #24
 800058c:	f200 80cb 	bhi.w	8000726 <MbRtu_ReadInputRegCallback+0x1ae>
 8000590:	a201      	add	r2, pc, #4	@ (adr r2, 8000598 <MbRtu_ReadInputRegCallback+0x20>)
 8000592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000596:	bf00      	nop
 8000598:	080005fd 	.word	0x080005fd
 800059c:	08000609 	.word	0x08000609
 80005a0:	08000615 	.word	0x08000615
 80005a4:	08000621 	.word	0x08000621
 80005a8:	0800062d 	.word	0x0800062d
 80005ac:	08000639 	.word	0x08000639
 80005b0:	08000645 	.word	0x08000645
 80005b4:	0800064f 	.word	0x0800064f
 80005b8:	0800065b 	.word	0x0800065b
 80005bc:	08000667 	.word	0x08000667
 80005c0:	08000673 	.word	0x08000673
 80005c4:	0800067f 	.word	0x0800067f
 80005c8:	0800068b 	.word	0x0800068b
 80005cc:	08000697 	.word	0x08000697
 80005d0:	080006a3 	.word	0x080006a3
 80005d4:	080006af 	.word	0x080006af
 80005d8:	080006bb 	.word	0x080006bb
 80005dc:	080006c7 	.word	0x080006c7
 80005e0:	080006d3 	.word	0x080006d3
 80005e4:	080006df 	.word	0x080006df
 80005e8:	080006eb 	.word	0x080006eb
 80005ec:	080006f7 	.word	0x080006f7
 80005f0:	08000703 	.word	0x08000703
 80005f4:	0800070f 	.word	0x0800070f
 80005f8:	0800071b 	.word	0x0800071b
  {

    case MB_INPUT_SYS_UPTIME_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_UPTIME) + 0);
 80005fc:	4b56      	ldr	r3, [pc, #344]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	881a      	ldrh	r2, [r3, #0]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	801a      	strh	r2, [r3, #0]
      break;
 8000606:	e095      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_UPTIME_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_UPTIME) + 1);
 8000608:	4b53      	ldr	r3, [pc, #332]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	885a      	ldrh	r2, [r3, #2]
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	801a      	strh	r2, [r3, #0]
      break;
 8000612:	e08f      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_REGMAP_VERSION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_REGMAP_VERSION) + 0);
 8000614:	4b50      	ldr	r3, [pc, #320]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	889a      	ldrh	r2, [r3, #4]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	801a      	strh	r2, [r3, #0]
      break;
 800061e:	e089      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_REGMAP_VERSION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_REGMAP_VERSION) + 1);
 8000620:	4b4d      	ldr	r3, [pc, #308]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	88da      	ldrh	r2, [r3, #6]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	801a      	strh	r2, [r3, #0]
      break;
 800062a:	e083      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_STATUS_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_STATUS) + 0);
 800062c:	4b4a      	ldr	r3, [pc, #296]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	891a      	ldrh	r2, [r3, #8]
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	801a      	strh	r2, [r3, #0]
      break;
 8000636:	e07d      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_STATUS_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_STATUS) + 1);
 8000638:	4b47      	ldr	r3, [pc, #284]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	895a      	ldrh	r2, [r3, #10]
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	801a      	strh	r2, [r3, #0]
      break;
 8000642:	e077      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_SYS_IO_INPUT:
      *value = conf.sys.io_input;
 8000644:	4b45      	ldr	r3, [pc, #276]	@ (800075c <MbRtu_ReadInputRegCallback+0x1e4>)
 8000646:	8a9a      	ldrh	r2, [r3, #20]
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	801a      	strh	r2, [r3, #0]
      break;
 800064c:	e072      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_SERIAL_NUMBER_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_SERIAL_NUMBER) + 0);
 800064e:	4b42      	ldr	r3, [pc, #264]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	881a      	ldrh	r2, [r3, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	801a      	strh	r2, [r3, #0]
      break;
 8000658:	e06c      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_SERIAL_NUMBER_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_SERIAL_NUMBER) + 1);
 800065a:	4b3f      	ldr	r3, [pc, #252]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	885a      	ldrh	r2, [r3, #2]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	801a      	strh	r2, [r3, #0]
      break;
 8000664:	e066      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_DEVICE_ID_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_DEVICE_ID) + 0);
 8000666:	4b3c      	ldr	r3, [pc, #240]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 8000668:	685b      	ldr	r3, [r3, #4]
 800066a:	889a      	ldrh	r2, [r3, #4]
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	801a      	strh	r2, [r3, #0]
      break;
 8000670:	e060      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_DEVICE_ID_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_DEVICE_ID) + 1);
 8000672:	4b39      	ldr	r3, [pc, #228]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	88da      	ldrh	r2, [r3, #6]
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	801a      	strh	r2, [r3, #0]
      break;
 800067c:	e05a      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_HW_REVISION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_HW_REVISION) + 0);
 800067e:	4b36      	ldr	r3, [pc, #216]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	891a      	ldrh	r2, [r3, #8]
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	801a      	strh	r2, [r3, #0]
      break;
 8000688:	e054      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_HW_REVISION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_HW_REVISION) + 1);
 800068a:	4b33      	ldr	r3, [pc, #204]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	895a      	ldrh	r2, [r3, #10]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	801a      	strh	r2, [r3, #0]
      break;
 8000694:	e04e      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_BOOT_REVISION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_BOOT_REVISION) + 0);
 8000696:	4b30      	ldr	r3, [pc, #192]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	899a      	ldrh	r2, [r3, #12]
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	801a      	strh	r2, [r3, #0]
      break;
 80006a0:	e048      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FACT_BOOT_REVISION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FACT_BOOT_REVISION) + 1);
 80006a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	89da      	ldrh	r2, [r3, #14]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	801a      	strh	r2, [r3, #0]
      break;
 80006ac:	e042      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_REVISION_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_REVISION) + 0);
 80006ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	881a      	ldrh	r2, [r3, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	801a      	strh	r2, [r3, #0]
      break;
 80006b8:	e03c      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_REVISION_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_REVISION) + 1);
 80006ba:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	885a      	ldrh	r2, [r3, #2]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	801a      	strh	r2, [r3, #0]
      break;
 80006c4:	e036      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_ASSEMBLY_INFO_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_ASSEMBLY_INFO) + 0);
 80006c6:	4b24      	ldr	r3, [pc, #144]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	889a      	ldrh	r2, [r3, #4]
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	801a      	strh	r2, [r3, #0]
      break;
 80006d0:	e030      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_ASSEMBLY_INFO_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_ASSEMBLY_INFO) + 1);
 80006d2:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	88da      	ldrh	r2, [r3, #6]
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	801a      	strh	r2, [r3, #0]
      break;
 80006dc:	e02a      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_CHECKSUM_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_CHECKSUM) + 0);
 80006de:	4b1e      	ldr	r3, [pc, #120]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 80006e0:	689b      	ldr	r3, [r3, #8]
 80006e2:	891a      	ldrh	r2, [r3, #8]
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	801a      	strh	r2, [r3, #0]
      break;
 80006e8:	e024      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_CHECKSUM_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_CHECKSUM) + 1);
 80006ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	895a      	ldrh	r2, [r3, #10]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	801a      	strh	r2, [r3, #0]
      break;
 80006f4:	e01e      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_SIZE_0:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_SIZE) + 0);
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 80006f8:	689b      	ldr	r3, [r3, #8]
 80006fa:	899a      	ldrh	r2, [r3, #12]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	801a      	strh	r2, [r3, #0]
      break;
 8000700:	e018      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_FIRM_APP_SIZE_1:
      *value = *((uint16_t *)CONF_PTR(CONF_FIRM_APP_SIZE) + 1);
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 8000704:	689b      	ldr	r3, [r3, #8]
 8000706:	89da      	ldrh	r2, [r3, #14]
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	801a      	strh	r2, [r3, #0]
      break;
 800070c:	e012      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_DBG_WRITES_CONF_0:
      *value = *((uint16_t *)CONF_PTR(CONF_DBG_WRITES_CONF) + 0);
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	881a      	ldrh	r2, [r3, #0]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	801a      	strh	r2, [r3, #0]
      break;
 8000718:	e00c      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>
    case MB_INPUT_DBG_WRITES_CONF_1:
      *value = *((uint16_t *)CONF_PTR(CONF_DBG_WRITES_CONF) + 1);
 800071a:	4b0f      	ldr	r3, [pc, #60]	@ (8000758 <MbRtu_ReadInputRegCallback+0x1e0>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	885a      	ldrh	r2, [r3, #2]
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	801a      	strh	r2, [r3, #0]
      break;
 8000724:	e006      	b.n	8000734 <MbRtu_ReadInputRegCallback+0x1bc>


    default:
      *value = MB_READ_NOT_SUPPORTED;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800072c:	801a      	strh	r2, [r3, #0]
      ret = STATUS_ERROR;
 800072e:	2301      	movs	r3, #1
 8000730:	82fb      	strh	r3, [r7, #22]
      break;
 8000732:	bf00      	nop
  }

  /* Reverse byte order */
  *value = __REV16(*value);
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 800073a:	693b      	ldr	r3, [r7, #16]
 800073c:	ba5b      	rev16	r3, r3
 800073e:	60fb      	str	r3, [r7, #12]
  return result;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	b29a      	uxth	r2, r3
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	801a      	strh	r2, [r3, #0]

  return ret;
 8000748:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800074c:	4618      	mov	r0, r3
 800074e:	371c      	adds	r7, #28
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	08005948 	.word	0x08005948
 800075c:	20000030 	.word	0x20000030

08000760 <MbRtu_ReadHoldingRegCallback>:


Status_t MbRtu_ReadHoldingRegCallback(uint16_t address, uint16_t *value)
{
 8000760:	b480      	push	{r7}
 8000762:	b087      	sub	sp, #28
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	80fb      	strh	r3, [r7, #6]
  Status_t ret = STATUS_OK;
 800076c:	2300      	movs	r3, #0
 800076e:	82fb      	strh	r3, [r7, #22]

  switch (address)
 8000770:	88fb      	ldrh	r3, [r7, #6]
 8000772:	2b65      	cmp	r3, #101	@ 0x65
 8000774:	d05e      	beq.n	8000834 <MbRtu_ReadHoldingRegCallback+0xd4>
 8000776:	2b65      	cmp	r3, #101	@ 0x65
 8000778:	dc62      	bgt.n	8000840 <MbRtu_ReadHoldingRegCallback+0xe0>
 800077a:	2b08      	cmp	r3, #8
 800077c:	dc18      	bgt.n	80007b0 <MbRtu_ReadHoldingRegCallback+0x50>
 800077e:	2b00      	cmp	r3, #0
 8000780:	db5e      	blt.n	8000840 <MbRtu_ReadHoldingRegCallback+0xe0>
 8000782:	2b08      	cmp	r3, #8
 8000784:	d85c      	bhi.n	8000840 <MbRtu_ReadHoldingRegCallback+0xe0>
 8000786:	a201      	add	r2, pc, #4	@ (adr r2, 800078c <MbRtu_ReadHoldingRegCallback+0x2c>)
 8000788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078c:	080007b7 	.word	0x080007b7
 8000790:	080007c3 	.word	0x080007c3
 8000794:	080007cf 	.word	0x080007cf
 8000798:	080007db 	.word	0x080007db
 800079c:	080007e7 	.word	0x080007e7
 80007a0:	080007f5 	.word	0x080007f5
 80007a4:	08000803 	.word	0x08000803
 80007a8:	08000811 	.word	0x08000811
 80007ac:	0800081b 	.word	0x0800081b
 80007b0:	2b64      	cmp	r3, #100	@ 0x64
 80007b2:	d038      	beq.n	8000826 <MbRtu_ReadHoldingRegCallback+0xc6>
 80007b4:	e044      	b.n	8000840 <MbRtu_ReadHoldingRegCallback+0xe0>
  {

    case MB_HOLD_SYS_COMMAND_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 0);
 80007b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000874 <MbRtu_ReadHoldingRegCallback+0x114>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	899a      	ldrh	r2, [r3, #12]
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	801a      	strh	r2, [r3, #0]
      break;
 80007c0:	e045      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>
    case MB_HOLD_SYS_COMMAND_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 1);
 80007c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000874 <MbRtu_ReadHoldingRegCallback+0x114>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	89da      	ldrh	r2, [r3, #14]
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	801a      	strh	r2, [r3, #0]
      break;
 80007cc:	e03f      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>
    case MB_HOLD_SYS_TEST_0:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 0);
 80007ce:	4b29      	ldr	r3, [pc, #164]	@ (8000874 <MbRtu_ReadHoldingRegCallback+0x114>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	8a1a      	ldrh	r2, [r3, #16]
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	801a      	strh	r2, [r3, #0]
      break;
 80007d8:	e039      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>
    case MB_HOLD_SYS_TEST_1:
      *value = *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 1);
 80007da:	4b26      	ldr	r3, [pc, #152]	@ (8000874 <MbRtu_ReadHoldingRegCallback+0x114>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	8a5a      	ldrh	r2, [r3, #18]
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	801a      	strh	r2, [r3, #0]
      break;
 80007e4:	e033      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>
    case MB_HOLD_COM_MB_BAUD_RATE:
      *value = conf.com.mb_baud_rate;
 80007e6:	4b24      	ldr	r3, [pc, #144]	@ (8000878 <MbRtu_ReadHoldingRegCallback+0x118>)
 80007e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80007ec:	461a      	mov	r2, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	801a      	strh	r2, [r3, #0]
      break;
 80007f2:	e02c      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>
    case MB_HOLD_COM_MB_PARITY:
      *value = conf.com.mb_parity;
 80007f4:	4b20      	ldr	r3, [pc, #128]	@ (8000878 <MbRtu_ReadHoldingRegCallback+0x118>)
 80007f6:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80007fa:	461a      	mov	r2, r3
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	801a      	strh	r2, [r3, #0]
      break;
 8000800:	e025      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>
    case MB_HOLD_COM_MB_STOP_BITS:
      *value = conf.com.mb_stop_bits;
 8000802:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <MbRtu_ReadHoldingRegCallback+0x118>)
 8000804:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000808:	461a      	mov	r2, r3
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	801a      	strh	r2, [r3, #0]
      break;
 800080e:	e01e      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>
    case MB_HOLD_COM_MB_APPLY:
      *value = conf.com.mb_apply;
 8000810:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MbRtu_ReadHoldingRegCallback+0x118>)
 8000812:	8fda      	ldrh	r2, [r3, #62]	@ 0x3e
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	801a      	strh	r2, [r3, #0]
      break;
 8000818:	e019      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>
    case MB_HOLD_COM_MB_TIMEOUT:
      *value = conf.com.mb_timeout;
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MbRtu_ReadHoldingRegCallback+0x118>)
 800081c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	801a      	strh	r2, [r3, #0]
      break;
 8000824:	e013      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>
    case MB_HOLD_STPMEAS_MODE:
      *value = conf.stpmeas.mode;
 8000826:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MbRtu_ReadHoldingRegCallback+0x118>)
 8000828:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800082c:	461a      	mov	r2, r3
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	801a      	strh	r2, [r3, #0]
      break;
 8000832:	e00c      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>
    case MB_HOLD_STPMEAS_NTC_BETA:
      *value = conf.stpmeas.ntc_beta;
 8000834:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MbRtu_ReadHoldingRegCallback+0x118>)
 8000836:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	801a      	strh	r2, [r3, #0]
      break;
 800083e:	e006      	b.n	800084e <MbRtu_ReadHoldingRegCallback+0xee>


    default:
      *value = MB_READ_NOT_SUPPORTED;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000846:	801a      	strh	r2, [r3, #0]
      ret = STATUS_ERROR;
 8000848:	2301      	movs	r3, #1
 800084a:	82fb      	strh	r3, [r7, #22]
      break;
 800084c:	bf00      	nop
  }

  /* Reverse byte order */
  *value = __REV16(*value);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	881b      	ldrh	r3, [r3, #0]
 8000852:	613b      	str	r3, [r7, #16]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	ba5b      	rev16	r3, r3
 8000858:	60fb      	str	r3, [r7, #12]
  return result;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	b29a      	uxth	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	801a      	strh	r2, [r3, #0]

  return ret;
 8000862:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000866:	4618      	mov	r0, r3
 8000868:	371c      	adds	r7, #28
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	08005948 	.word	0x08005948
 8000878:	20000030 	.word	0x20000030

0800087c <MbRtu_WriteHoldingRegCallback>:




Status_t MbRtu_WriteHoldingRegCallback(uint16_t address, uint16_t value)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	460a      	mov	r2, r1
 8000886:	80fb      	strh	r3, [r7, #6]
 8000888:	4613      	mov	r3, r2
 800088a:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 800088c:	2300      	movs	r3, #0
 800088e:	81fb      	strh	r3, [r7, #14]
  uint32_t id = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]

  switch (address)
 8000894:	88fb      	ldrh	r3, [r7, #6]
 8000896:	2b65      	cmp	r3, #101	@ 0x65
 8000898:	d069      	beq.n	800096e <MbRtu_WriteHoldingRegCallback+0xf2>
 800089a:	2b65      	cmp	r3, #101	@ 0x65
 800089c:	dc6e      	bgt.n	800097c <MbRtu_WriteHoldingRegCallback+0x100>
 800089e:	2b08      	cmp	r3, #8
 80008a0:	dc18      	bgt.n	80008d4 <MbRtu_WriteHoldingRegCallback+0x58>
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	db6a      	blt.n	800097c <MbRtu_WriteHoldingRegCallback+0x100>
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	d868      	bhi.n	800097c <MbRtu_WriteHoldingRegCallback+0x100>
 80008aa:	a201      	add	r2, pc, #4	@ (adr r2, 80008b0 <MbRtu_WriteHoldingRegCallback+0x34>)
 80008ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b0:	080008db 	.word	0x080008db
 80008b4:	080008e7 	.word	0x080008e7
 80008b8:	080008f9 	.word	0x080008f9
 80008bc:	08000905 	.word	0x08000905
 80008c0:	08000915 	.word	0x08000915
 80008c4:	08000925 	.word	0x08000925
 80008c8:	08000935 	.word	0x08000935
 80008cc:	08000945 	.word	0x08000945
 80008d0:	08000951 	.word	0x08000951
 80008d4:	2b64      	cmp	r3, #100	@ 0x64
 80008d6:	d042      	beq.n	800095e <MbRtu_WriteHoldingRegCallback+0xe2>
 80008d8:	e050      	b.n	800097c <MbRtu_WriteHoldingRegCallback+0x100>
  {

    case MB_HOLD_SYS_COMMAND_0:
      *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 0) = value;
 80008da:	4b30      	ldr	r3, [pc, #192]	@ (800099c <MbRtu_WriteHoldingRegCallback+0x120>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	330c      	adds	r3, #12
 80008e0:	88ba      	ldrh	r2, [r7, #4]
 80008e2:	801a      	strh	r2, [r3, #0]
      break;
 80008e4:	e04d      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_SYS_COMMAND_1:
      *((uint16_t *)CONF_PTR(CONF_SYS_COMMAND) + 1) = value;
 80008e6:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <MbRtu_WriteHoldingRegCallback+0x120>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	330e      	adds	r3, #14
 80008ec:	88ba      	ldrh	r2, [r7, #4]
 80008ee:	801a      	strh	r2, [r3, #0]
      id = CONF_SYS_COMMAND;
 80008f0:	f24c 1352 	movw	r3, #49490	@ 0xc152
 80008f4:	60bb      	str	r3, [r7, #8]
      break;
 80008f6:	e044      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_SYS_TEST_0:
      *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 0) = value;
 80008f8:	4b28      	ldr	r3, [pc, #160]	@ (800099c <MbRtu_WriteHoldingRegCallback+0x120>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3310      	adds	r3, #16
 80008fe:	88ba      	ldrh	r2, [r7, #4]
 8000900:	801a      	strh	r2, [r3, #0]
      break;
 8000902:	e03e      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_SYS_TEST_1:
      *((uint16_t *)CONF_PTR(CONF_SYS_TEST) + 1) = value;
 8000904:	4b25      	ldr	r3, [pc, #148]	@ (800099c <MbRtu_WriteHoldingRegCallback+0x120>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	3312      	adds	r3, #18
 800090a:	88ba      	ldrh	r2, [r7, #4]
 800090c:	801a      	strh	r2, [r3, #0]
      id = CONF_SYS_TEST;
 800090e:	4b24      	ldr	r3, [pc, #144]	@ (80009a0 <MbRtu_WriteHoldingRegCallback+0x124>)
 8000910:	60bb      	str	r3, [r7, #8]
      break;
 8000912:	e036      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_BAUD_RATE:
      conf.com.mb_baud_rate = (com_mb_baud_rate_t)value;
 8000914:	88bb      	ldrh	r3, [r7, #4]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <MbRtu_WriteHoldingRegCallback+0x128>)
 800091a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
      id = CONF_COM_MB_BAUD_RATE;
 800091e:	4b22      	ldr	r3, [pc, #136]	@ (80009a8 <MbRtu_WriteHoldingRegCallback+0x12c>)
 8000920:	60bb      	str	r3, [r7, #8]
      break;
 8000922:	e02e      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_PARITY:
      conf.com.mb_parity = (com_mb_parity_t)value;
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <MbRtu_WriteHoldingRegCallback+0x128>)
 800092a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
      id = CONF_COM_MB_PARITY;
 800092e:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <MbRtu_WriteHoldingRegCallback+0x130>)
 8000930:	60bb      	str	r3, [r7, #8]
      break;
 8000932:	e026      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_STOP_BITS:
      conf.com.mb_stop_bits = (com_mb_stop_bits_t)value;
 8000934:	88bb      	ldrh	r3, [r7, #4]
 8000936:	b2da      	uxtb	r2, r3
 8000938:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <MbRtu_WriteHoldingRegCallback+0x128>)
 800093a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      id = CONF_COM_MB_STOP_BITS;
 800093e:	4b1c      	ldr	r3, [pc, #112]	@ (80009b0 <MbRtu_WriteHoldingRegCallback+0x134>)
 8000940:	60bb      	str	r3, [r7, #8]
      break;
 8000942:	e01e      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_APPLY:
      conf.com.mb_apply = value;
 8000944:	4a17      	ldr	r2, [pc, #92]	@ (80009a4 <MbRtu_WriteHoldingRegCallback+0x128>)
 8000946:	88bb      	ldrh	r3, [r7, #4]
 8000948:	87d3      	strh	r3, [r2, #62]	@ 0x3e
      id = CONF_COM_MB_APPLY;
 800094a:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MbRtu_WriteHoldingRegCallback+0x138>)
 800094c:	60bb      	str	r3, [r7, #8]
      break;
 800094e:	e018      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_COM_MB_TIMEOUT:
      conf.com.mb_timeout = value;
 8000950:	4a14      	ldr	r2, [pc, #80]	@ (80009a4 <MbRtu_WriteHoldingRegCallback+0x128>)
 8000952:	88bb      	ldrh	r3, [r7, #4]
 8000954:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
      id = CONF_COM_MB_TIMEOUT;
 8000958:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MbRtu_WriteHoldingRegCallback+0x13c>)
 800095a:	60bb      	str	r3, [r7, #8]
      break;
 800095c:	e011      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_STPMEAS_MODE:
      conf.stpmeas.mode = (stpmeas_mode_t)value;
 800095e:	88bb      	ldrh	r3, [r7, #4]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <MbRtu_WriteHoldingRegCallback+0x128>)
 8000964:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
      id = CONF_STPMEAS_MODE;
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <MbRtu_WriteHoldingRegCallback+0x140>)
 800096a:	60bb      	str	r3, [r7, #8]
      break;
 800096c:	e009      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>
    case MB_HOLD_STPMEAS_NTC_BETA:
      conf.stpmeas.ntc_beta = value;
 800096e:	4a0d      	ldr	r2, [pc, #52]	@ (80009a4 <MbRtu_WriteHoldingRegCallback+0x128>)
 8000970:	88bb      	ldrh	r3, [r7, #4]
 8000972:	f8a2 304a 	strh.w	r3, [r2, #74]	@ 0x4a
      id = CONF_STPMEAS_NTC_BETA;
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <MbRtu_WriteHoldingRegCallback+0x144>)
 8000978:	60bb      	str	r3, [r7, #8]
      break;
 800097a:	e002      	b.n	8000982 <MbRtu_WriteHoldingRegCallback+0x106>


    default:
      ret = STATUS_ERROR;
 800097c:	2301      	movs	r3, #1
 800097e:	81fb      	strh	r3, [r7, #14]
      break;
 8000980:	bf00      	nop
  }

  if (id != 0)
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d002      	beq.n	800098e <MbRtu_WriteHoldingRegCallback+0x112>
  {
    Config_ApplyConfig(id);
 8000988:	68b8      	ldr	r0, [r7, #8]
 800098a:	f7ff fdc5 	bl	8000518 <Config_ApplyConfig>
  }

  return ret;
 800098e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	08005948 	.word	0x08005948
 80009a0:	00010152 	.word	0x00010152
 80009a4:	20000030 	.word	0x20000030
 80009a8:	03000570 	.word	0x03000570
 80009ac:	03001570 	.word	0x03001570
 80009b0:	03002570 	.word	0x03002570
 80009b4:	03006151 	.word	0x03006151
 80009b8:	03008171 	.word	0x03008171
 80009bc:	05000550 	.word	0x05000550
 80009c0:	05002151 	.word	0x05002151

080009c4 <MbUpgr_Init>:
/* Public variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions -----------------------------------------------------------------*/

Status_t MbUpgr_Init(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 80009ca:	2300      	movs	r3, #0
 80009cc:	80fb      	strh	r3, [r7, #6]

  /* Set status ready */
  mbu.status = MB_UPGR_STATUS_BUSY;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MbUpgr_Init+0x2c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  mbu.writeDone = 0;
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MbUpgr_Init+0x2c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return ret;
 80009de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	200000cc 	.word	0x200000cc

080009f4 <MbUpgr_Handle>:


Status_t MbUpgr_Handle(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
  Status_t ret = STATUS_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	80fb      	strh	r3, [r7, #6]

  /* First 4 registers were written? */
  if (mbu.startClb != 0)
 80009fe:	4b35      	ldr	r3, [pc, #212]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a00:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d020      	beq.n	8000a4a <MbUpgr_Handle+0x56>
  {
    mbu.startClb = 0;
 8000a08:	4b32      	ldr	r3, [pc, #200]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    /* Start of programming procedure */
    ret = MbUpgr_HeaderClb(mbu.type, mbu.mode, mbu.size);
 8000a10:	4b30      	ldr	r3, [pc, #192]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	4a2f      	ldr	r2, [pc, #188]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a16:	8851      	ldrh	r1, [r2, #2]
 8000a18:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a1a:	6852      	ldr	r2, [r2, #4]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f000 f8e1 	bl	8000be4 <MbUpgr_HeaderClb>
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
    if (mbu.writeDone == 0)
 8000a26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d10c      	bne.n	8000a4a <MbUpgr_Handle+0x56>
    {
      if (ret == STATUS_OK)
 8000a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d104      	bne.n	8000a42 <MbUpgr_Handle+0x4e>
      {
        mbu.status = MB_UPGR_STATUS_READY;
 8000a38:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8000a40:	e003      	b.n	8000a4a <MbUpgr_Handle+0x56>
      }
      else
      {
        mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 8000a42:	4b24      	ldr	r3, [pc, #144]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a44:	2203      	movs	r2, #3
 8000a46:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      }
    }
  }
  /* Write done flag is set */
  if (mbu.writeDone != 0)
 8000a4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d039      	beq.n	8000ac8 <MbUpgr_Handle+0xd4>
  {
    /* Call function that writes data into flash */
    ret = MbUpgr_WritePageClb(mbu.offset, mbu.data, mbu.page_size);
 8000a54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a56:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a5c:	8912      	ldrh	r2, [r2, #8]
 8000a5e:	491e      	ldr	r1, [pc, #120]	@ (8000ad8 <MbUpgr_Handle+0xe4>)
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f8da 	bl	8000c1a <MbUpgr_WritePageClb>
 8000a66:	4603      	mov	r3, r0
 8000a68:	80fb      	strh	r3, [r7, #6]
    if (ret == STATUS_OK)
 8000a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d104      	bne.n	8000a7c <MbUpgr_Handle+0x88>
    {
      mbu.status = MB_UPGR_STATUS_READY;
 8000a72:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8000a7a:	e003      	b.n	8000a84 <MbUpgr_Handle+0x90>
    }
    else
    {
      mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a7e:	2203      	movs	r2, #3
 8000a80:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    }
    /* Did we receive all data? */
    if (mbu.size - mbu.offset <= mbu.page_size)
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	4b12      	ldr	r3, [pc, #72]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a8a:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	4a10      	ldr	r2, [pc, #64]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a92:	8912      	ldrh	r2, [r2, #8]
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d813      	bhi.n	8000ac0 <MbUpgr_Handle+0xcc>
    {
      /* The whole binary has been received, callback */
      ret = MbUpgr_WriteDoneClb(mbu.size);
 8000a98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f8cd 	bl	8000c3c <MbUpgr_WriteDoneClb>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	80fb      	strh	r3, [r7, #6]
      if (ret == STATUS_OK)
 8000aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d104      	bne.n	8000ab8 <MbUpgr_Handle+0xc4>
      {
        mbu.status = MB_UPGR_STATUS_DONE_OK;
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8000ab6:	e003      	b.n	8000ac0 <MbUpgr_Handle+0xcc>
      }
      else
      {
        mbu.status = MB_UPGR_STATUS_DONE_ERROR;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000aba:	2203      	movs	r2, #3
 8000abc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      }
    }
    /* Reset flags */
    mbu.writeDone = 0;
 8000ac0:	4b04      	ldr	r3, [pc, #16]	@ (8000ad4 <MbUpgr_Handle+0xe0>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
  }

  return ret;
 8000ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000cc 	.word	0x200000cc
 8000ad8:	200000da 	.word	0x200000da

08000adc <MbUpgr_WriteRegisters>:


Status_t MbUpgr_WriteRegisters(uint16_t offset, uint16_t length, uint8_t* data)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	603a      	str	r2, [r7, #0]
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 8000aec:	2300      	movs	r3, #0
 8000aee:	827b      	strh	r3, [r7, #18]
  uint8_t *storage = (uint8_t*)&mbu + (offset - MB_UPGR_BASE_ADDRESS) * 2;
 8000af0:	88fb      	ldrh	r3, [r7, #6]
 8000af2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <MbUpgr_WriteRegisters+0x88>)
 8000afc:	4413      	add	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]

  /* Copy and byte reverse */
  for (int i = 0; i < length; i++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e01a      	b.n	8000b3c <MbUpgr_WriteRegisters+0x60>
  {
    storage[i * 2 + 1] = data[i * 2 + 0];
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	441a      	add	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	3301      	adds	r3, #1
 8000b16:	68f9      	ldr	r1, [r7, #12]
 8000b18:	440b      	add	r3, r1
 8000b1a:	7812      	ldrb	r2, [r2, #0]
 8000b1c:	701a      	strb	r2, [r3, #0]
    storage[i * 2 + 0] = data[i * 2 + 1];
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	3301      	adds	r3, #1
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	441a      	add	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	440b      	add	r3, r1
 8000b32:	7812      	ldrb	r2, [r2, #0]
 8000b34:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	dbe0      	blt.n	8000b06 <MbUpgr_WriteRegisters+0x2a>
  }

  /* Write into starting registers */
  if ((offset - MB_UPGR_BASE_ADDRESS) < 4)
 8000b44:	88fb      	ldrh	r3, [r7, #6]
 8000b46:	f5b3 7f7b 	cmp.w	r3, #1004	@ 0x3ec
 8000b4a:	d203      	bcs.n	8000b54 <MbUpgr_WriteRegisters+0x78>
  {
    mbu.startClb = 1;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <MbUpgr_WriteRegisters+0x88>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
  }

  return ret;
 8000b54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	200000cc 	.word	0x200000cc

08000b68 <MbUpgr_ReadRegisters>:


Status_t MbUpgr_ReadRegisters(uint16_t offset, uint16_t length, uint8_t* data)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	603a      	str	r2, [r7, #0]
 8000b72:	80fb      	strh	r3, [r7, #6]
 8000b74:	460b      	mov	r3, r1
 8000b76:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	827b      	strh	r3, [r7, #18]
  uint8_t *storage = (uint8_t*)&mbu + (offset - MB_UPGR_BASE_ADDRESS) * 2;
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MbUpgr_ReadRegisters+0x78>)
 8000b88:	4413      	add	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]

  /* Copy and byte reverse */
  for (int i = 0; i < length; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	e01a      	b.n	8000bc8 <MbUpgr_ReadRegisters+0x60>
  {
    data[i * 2 + 1] = storage[i * 2 + 0];
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	441a      	add	r2, r3
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	440b      	add	r3, r1
 8000ba6:	7812      	ldrb	r2, [r2, #0]
 8000ba8:	701a      	strb	r2, [r3, #0]
    data[i * 2 + 0] = storage[i * 2 + 1];
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	3301      	adds	r3, #1
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	441a      	add	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	440b      	add	r3, r1
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < length; i++)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	88bb      	ldrh	r3, [r7, #4]
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	dbe0      	blt.n	8000b92 <MbUpgr_ReadRegisters+0x2a>
  }

  return ret;
 8000bd0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	371c      	adds	r7, #28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	200000cc 	.word	0x200000cc

08000be4 <MbUpgr_HeaderClb>:
}

/* Private Functions ---------------------------------------------------------*/

__weak Status_t MbUpgr_HeaderClb(uint16_t type, uint16_t mode, uint32_t size)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	603a      	str	r2, [r7, #0]
 8000bee:	80fb      	strh	r3, [r7, #6]
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	80bb      	strh	r3, [r7, #4]
  Status_t ret = STATUS_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	81fb      	strh	r3, [r7, #14]

  switch (mode)
 8000bf8:	88bb      	ldrh	r3, [r7, #4]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d002      	beq.n	8000c04 <MbUpgr_HeaderClb+0x20>
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d002      	beq.n	8000c08 <MbUpgr_HeaderClb+0x24>
      break;
    case MB_UPGR_MODE_APPLY:
//      EventMngr_Event(ATT_SYS_RESTART_REQ, NULL);
      break;
    default:
      break;
 8000c02:	e002      	b.n	8000c0a <MbUpgr_HeaderClb+0x26>
      break;
 8000c04:	bf00      	nop
 8000c06:	e000      	b.n	8000c0a <MbUpgr_HeaderClb+0x26>
      break;
 8000c08:	bf00      	nop
  }

  return ret;
 8000c0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <MbUpgr_WritePageClb>:


__weak Status_t MbUpgr_WritePageClb(uint32_t offset, uint8_t *data, uint16_t length)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b087      	sub	sp, #28
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	60f8      	str	r0, [r7, #12]
 8000c22:	60b9      	str	r1, [r7, #8]
 8000c24:	4613      	mov	r3, r2
 8000c26:	80fb      	strh	r3, [r7, #6]
  Status_t ret = STATUS_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	82fb      	strh	r3, [r7, #22]

//  ret = System_FlashProgram((uint32_t)CONF_C_APP_BUFFER_OFFSET + offset, data, length);

  return ret;
 8000c2c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	371c      	adds	r7, #28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <MbUpgr_WriteDoneClb>:

__weak Status_t MbUpgr_WriteDoneClb(uint32_t length)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  Status_t ret = STATUS_OK;
 8000c44:	2300      	movs	r3, #0
 8000c46:	81fb      	strh	r3, [r7, #14]

  /* The very last packet, verify image */
//  ret = System_VerifyImage((uint32_t*) CONF_C_APP_BUFFER_OFFSET);

  return ret;
 8000c48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <MbSlave_Init>:

static void MbSlave_Rs485DirReceive(void);

/* Functions -----------------------------------------------------------------*/

Status_t MbSlave_Init(void) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	83fb      	strh	r3, [r7, #30]
	GPIO_InitTypeDef GPIO_InitStruct;

	MODBUS_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <MbSlave_Init+0x94>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a20      	ldr	r2, [pc, #128]	@ (8000cec <MbSlave_Init+0x94>)
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b1e      	ldr	r3, [pc, #120]	@ (8000cec <MbSlave_Init+0x94>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
	outFram = 1;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MbSlave_Init+0x98>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]

	MbSlave_Rs485DirReceive();
 8000c84:	f000 fcb6 	bl	80015f4 <MbSlave_Rs485DirReceive>

	/* MODBUS USART DE */
	GPIO_InitStruct.Pin = MODBUS_UART_DE_PIN;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c94:	2302      	movs	r3, #2
 8000c96:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(MODBUS_UART_DE_PORT, &GPIO_InitStruct);
 8000c98:	f107 0308 	add.w	r3, r7, #8
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4815      	ldr	r0, [pc, #84]	@ (8000cf4 <MbSlave_Init+0x9c>)
 8000ca0:	f001 ff62 	bl	8002b68 <HAL_GPIO_Init>

	/* MODBUS USART RX */
	GPIO_InitStruct.Pin = MODBUS_UART_RX_PIN;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	617b      	str	r3, [r7, #20]
	//GPIO_InitStruct.Alternate = MODBUS_UART_ALTERNATE;
	HAL_GPIO_Init(MODBUS_UART_RX_PORT, &GPIO_InitStruct);
 8000cb4:	f107 0308 	add.w	r3, r7, #8
 8000cb8:	4619      	mov	r1, r3
 8000cba:	480e      	ldr	r0, [pc, #56]	@ (8000cf4 <MbSlave_Init+0x9c>)
 8000cbc:	f001 ff54 	bl	8002b68 <HAL_GPIO_Init>

	/* MODBUS USART TX */
	GPIO_InitStruct.Pin = MODBUS_UART_TX_PIN;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	617b      	str	r3, [r7, #20]
	//GPIO_InitStruct.Alternate = MODBUS_UART_ALTERNATE;
	HAL_GPIO_Init(MODBUS_UART_TX_PORT, &GPIO_InitStruct);
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4807      	ldr	r0, [pc, #28]	@ (8000cf4 <MbSlave_Init+0x9c>)
 8000cd8:	f001 ff46 	bl	8002b68 <HAL_GPIO_Init>

	/* Initial UART settings */
	MbSlave_SettingsChanged();
 8000cdc:	f000 f80c 	bl	8000cf8 <MbSlave_SettingsChanged>

	return ret;
 8000ce0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	200002ba 	.word	0x200002ba
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <MbSlave_SettingsChanged>:

Status_t MbSlave_SettingsChanged(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	80fb      	strh	r3, [r7, #6]

	/* Disable interrupt */
	HAL_NVIC_DisableIRQ(MODBUS_UART_IRQ_NUMBER);
 8000d02:	2025      	movs	r0, #37	@ 0x25
 8000d04:	f001 fe59 	bl	80029ba <HAL_NVIC_DisableIRQ>

	/* Set stop bits, parity, word length from configuration register */
	if (conf.com.mb_baud_rate < sizeof(tableSpeed) / sizeof(uint32_t)) {
 8000d08:	4b53      	ldr	r3, [pc, #332]	@ (8000e58 <MbSlave_SettingsChanged+0x160>)
 8000d0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	d809      	bhi.n	8000d26 <MbSlave_SettingsChanged+0x2e>
		mod.huart.Init.BaudRate = tableSpeed[conf.com.mb_baud_rate];
 8000d12:	4b51      	ldr	r3, [pc, #324]	@ (8000e58 <MbSlave_SettingsChanged+0x160>)
 8000d14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b50      	ldr	r3, [pc, #320]	@ (8000e5c <MbSlave_SettingsChanged+0x164>)
 8000d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d20:	4a4f      	ldr	r2, [pc, #316]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000d22:	6053      	str	r3, [r2, #4]
 8000d24:	e005      	b.n	8000d32 <MbSlave_SettingsChanged+0x3a>
	} else {
		mod.huart.Init.BaudRate = conf.com.mb_baud_rate;
 8000d26:	4b4c      	ldr	r3, [pc, #304]	@ (8000e58 <MbSlave_SettingsChanged+0x160>)
 8000d28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000d30:	605a      	str	r2, [r3, #4]
	}
	mod.huart.Init.StopBits = tableStopBits[conf.com.mb_stop_bits];
 8000d32:	4b49      	ldr	r3, [pc, #292]	@ (8000e58 <MbSlave_SettingsChanged+0x160>)
 8000d34:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000e64 <MbSlave_SettingsChanged+0x16c>)
 8000d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d40:	4a47      	ldr	r2, [pc, #284]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000d42:	60d3      	str	r3, [r2, #12]
	mod.huart.Init.Parity = tableParity[conf.com.mb_parity];
 8000d44:	4b44      	ldr	r3, [pc, #272]	@ (8000e58 <MbSlave_SettingsChanged+0x160>)
 8000d46:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	4b46      	ldr	r3, [pc, #280]	@ (8000e68 <MbSlave_SettingsChanged+0x170>)
 8000d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d52:	4a43      	ldr	r2, [pc, #268]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000d54:	6113      	str	r3, [r2, #16]
	mod.huart.Init.WordLength = tableLength[conf.com.mb_parity];
 8000d56:	4b40      	ldr	r3, [pc, #256]	@ (8000e58 <MbSlave_SettingsChanged+0x160>)
 8000d58:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b43      	ldr	r3, [pc, #268]	@ (8000e6c <MbSlave_SettingsChanged+0x174>)
 8000d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d64:	4a3e      	ldr	r2, [pc, #248]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000d66:	6093      	str	r3, [r2, #8]

	/* MODBUS USART init */
	mod.huart.Instance = MODBUS_UART_INSTANCE;
 8000d68:	4b3d      	ldr	r3, [pc, #244]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000d6a:	4a41      	ldr	r2, [pc, #260]	@ (8000e70 <MbSlave_SettingsChanged+0x178>)
 8000d6c:	601a      	str	r2, [r3, #0]
	mod.huart.Init.Mode = UART_MODE_TX_RX;
 8000d6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000d70:	220c      	movs	r2, #12
 8000d72:	615a      	str	r2, [r3, #20]
	mod.huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d74:	4b3a      	ldr	r3, [pc, #232]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
	mod.huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7a:	4b39      	ldr	r3, [pc, #228]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
	//mod.huart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	//mod.huart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;

	HAL_UART_Init(&mod.huart);
 8000d80:	4837      	ldr	r0, [pc, #220]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000d82:	f003 fb8f 	bl	80044a4 <HAL_UART_Init>

	MODBUS_TIM_CLK_ENABLE()
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <MbSlave_SettingsChanged+0x17c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8e:	4a39      	ldr	r2, [pc, #228]	@ (8000e74 <MbSlave_SettingsChanged+0x17c>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d96:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <MbSlave_SettingsChanged+0x17c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
	;

	/* MODBUS TIM Init */
	mod.htim.Instance = MODBUS_TIM_INSTANCE;
 8000da2:	4b2f      	ldr	r3, [pc, #188]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000da4:	4a34      	ldr	r2, [pc, #208]	@ (8000e78 <MbSlave_SettingsChanged+0x180>)
 8000da6:	649a      	str	r2, [r3, #72]	@ 0x48
	mod.htim.Init.Period = 9 * (8 + 2 + 1) * 100000 / 2
			/ mod.huart.Init.BaudRate; /* Timer period in 10 us, considering 8 data, 1 start, 2 stop bits */
 8000da8:	4b2d      	ldr	r3, [pc, #180]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a33      	ldr	r2, [pc, #204]	@ (8000e7c <MbSlave_SettingsChanged+0x184>)
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
	mod.htim.Init.Period = 9 * (8 + 2 + 1) * 100000 / 2
 8000db2:	4a2b      	ldr	r2, [pc, #172]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000db4:	6553      	str	r3, [r2, #84]	@ 0x54
	SAT_DOWN(mod.htim.Init.Period, 175);
 8000db6:	4b2a      	ldr	r3, [pc, #168]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dba:	2baf      	cmp	r3, #175	@ 0xaf
 8000dbc:	bf38      	it	cc
 8000dbe:	23af      	movcc	r3, #175	@ 0xaf
 8000dc0:	4a27      	ldr	r2, [pc, #156]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000dc2:	6553      	str	r3, [r2, #84]	@ 0x54
	mod.htim.Init.Prescaler = (uint32_t) ((HAL_RCC_GetPCLK1Freq()) / 100000)
 8000dc4:	f002 fb12 	bl	80033ec <HAL_RCC_GetPCLK1Freq>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8000e80 <MbSlave_SettingsChanged+0x188>)
 8000dce:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd2:	09db      	lsrs	r3, r3, #7
			- 1; /* Timer step 10 us */
 8000dd4:	3b01      	subs	r3, #1
	mod.htim.Init.Prescaler = (uint32_t) ((HAL_RCC_GetPCLK1Freq()) / 100000)
 8000dd6:	4a22      	ldr	r2, [pc, #136]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
	mod.htim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dda:	4b21      	ldr	r3, [pc, #132]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	651a      	str	r2, [r3, #80]	@ 0x50
	mod.htim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	659a      	str	r2, [r3, #88]	@ 0x58
	HAL_TIM_Base_Init(&mod.htim);
 8000de6:	4827      	ldr	r0, [pc, #156]	@ (8000e84 <MbSlave_SettingsChanged+0x18c>)
 8000de8:	f002 fff9 	bl	8003dde <HAL_TIM_Base_Init>

	/* MODBUS USART interrupt Init */
	HAL_NVIC_SetPriority(MODBUS_UART_IRQ_NUMBER, PRIO_IRQ_MODBUS, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2103      	movs	r1, #3
 8000df0:	2025      	movs	r0, #37	@ 0x25
 8000df2:	f001 fdb8 	bl	8002966 <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(MODBUS_UART_IRQ_NUMBER);
 8000df6:	2025      	movs	r0, #37	@ 0x25
 8000df8:	f001 fdf9 	bl	80029ee <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(MODBUS_UART_IRQ_NUMBER);
 8000dfc:	2025      	movs	r0, #37	@ 0x25
 8000dfe:	f001 fdce 	bl	800299e <HAL_NVIC_EnableIRQ>

	/* MODBUS Timer interrupt Init */
	HAL_NVIC_SetPriority(MODBUS_TIM_IRQ_NUMBER, PRIO_IRQ_MODBUS, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2103      	movs	r1, #3
 8000e06:	201d      	movs	r0, #29
 8000e08:	f001 fdad 	bl	8002966 <HAL_NVIC_SetPriority>
	HAL_NVIC_ClearPendingIRQ(MODBUS_TIM_IRQ_NUMBER);
 8000e0c:	201d      	movs	r0, #29
 8000e0e:	f001 fdee 	bl	80029ee <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(MODBUS_TIM_IRQ_NUMBER);
 8000e12:	201d      	movs	r0, #29
 8000e14:	f001 fdc3 	bl	800299e <HAL_NVIC_EnableIRQ>

	MbSlave_UpdateSlaveAddress();
 8000e18:	f000 f8cc 	bl	8000fb4 <MbSlave_UpdateSlaveAddress>

	/* default values */
	mod.frameOk = 0;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

	/* reset bus and wait for first packet */
	MbSlave_BusReset();
 8000e24:	f000 f8f0 	bl	8001008 <MbSlave_BusReset>

	/* Set initial timeout */
	mod.tick = HAL_GetTick() + conf.com.mb_timeout * 1000;
 8000e28:	f001 f9de 	bl	80021e8 <HAL_GetTick>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <MbSlave_SettingsChanged+0x160>)
 8000e30:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 8000e34:	4611      	mov	r1, r2
 8000e36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e3a:	fb01 f202 	mul.w	r2, r1, r2
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a07      	ldr	r2, [pc, #28]	@ (8000e60 <MbSlave_SettingsChanged+0x168>)
 8000e42:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

#ifdef MODBUS_UPGRADE
	MbUpgr_Init();
 8000e46:	f7ff fdbd 	bl	80009c4 <MbUpgr_Init>
#endif

	return ret;
 8000e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000030 	.word	0x20000030
 8000e5c:	08005ab0 	.word	0x08005ab0
 8000e60:	20000120 	.word	0x20000120
 8000e64:	08005adc 	.word	0x08005adc
 8000e68:	08005ac4 	.word	0x08005ac4
 8000e6c:	08005ad0 	.word	0x08005ad0
 8000e70:	40011000 	.word	0x40011000
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40000400 	.word	0x40000400
 8000e7c:	004b87f0 	.word	0x004b87f0
 8000e80:	0a7c5ac5 	.word	0x0a7c5ac5
 8000e84:	20000168 	.word	0x20000168

08000e88 <MbSlave_Handle>:

Status_t MbSlave_Handle(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	80fb      	strh	r3, [r7, #6]

	if (mod.frameOk) {
 8000e92:	4b44      	ldr	r3, [pc, #272]	@ (8000fa4 <MbSlave_Handle+0x11c>)
 8000e94:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d050      	beq.n	8000f3e <MbSlave_Handle+0xb6>
		mod.frameOk = 0;
 8000e9c:	4b41      	ldr	r3, [pc, #260]	@ (8000fa4 <MbSlave_Handle+0x11c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

		/* Process frame */
		MbSlave_ProcessFrame();
 8000ea4:	f000 f9ca 	bl	800123c <MbSlave_ProcessFrame>

		/* Handle timeout */
		mod.tick = HAL_GetTick() + conf.com.mb_timeout * 1000;
 8000ea8:	f001 f99e 	bl	80021e8 <HAL_GetTick>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4a3e      	ldr	r2, [pc, #248]	@ (8000fa8 <MbSlave_Handle+0x120>)
 8000eb0:	f8b2 2040 	ldrh.w	r2, [r2, #64]	@ 0x40
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eba:	fb01 f202 	mul.w	r2, r1, r2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a38      	ldr	r2, [pc, #224]	@ (8000fa4 <MbSlave_Handle+0x11c>)
 8000ec2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
		CLEAR_BIT(conf.sys.status, STAT_BIT_MB_TIMEOUT);
 8000ec6:	4b38      	ldr	r3, [pc, #224]	@ (8000fa8 <MbSlave_Handle+0x120>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f023 0308 	bic.w	r3, r3, #8
 8000ece:	4a36      	ldr	r2, [pc, #216]	@ (8000fa8 <MbSlave_Handle+0x120>)
 8000ed0:	6093      	str	r3, [r2, #8]

		/* Prepare and send response for unicast messages */
		if (inFrame.slaveAddr == mod.myAddress) {
 8000ed2:	4b36      	ldr	r3, [pc, #216]	@ (8000fac <MbSlave_Handle+0x124>)
 8000ed4:	781a      	ldrb	r2, [r3, #0]
 8000ed6:	4b33      	ldr	r3, [pc, #204]	@ (8000fa4 <MbSlave_Handle+0x11c>)
 8000ed8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d12c      	bne.n	8000f3a <MbSlave_Handle+0xb2>
			/* Compose response and send it */
			outFrame.slaveAddr = mod.myAddress;
 8000ee0:	4b30      	ldr	r3, [pc, #192]	@ (8000fa4 <MbSlave_Handle+0x11c>)
 8000ee2:	f893 2091 	ldrb.w	r2, [r3, #145]	@ 0x91
 8000ee6:	4b32      	ldr	r3, [pc, #200]	@ (8000fb0 <MbSlave_Handle+0x128>)
 8000ee8:	701a      	strb	r2, [r3, #0]
			MbSlave_CRC16(&outFrame);
 8000eea:	4831      	ldr	r0, [pc, #196]	@ (8000fb0 <MbSlave_Handle+0x128>)
 8000eec:	f000 fb08 	bl	8001500 <MbSlave_CRC16>
			outFrame.data[outFrame.size] = outFrame.crc[0];
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb0 <MbSlave_Handle+0x128>)
 8000ef2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <MbSlave_Handle+0x128>)
 8000efa:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 8000efe:	4b2c      	ldr	r3, [pc, #176]	@ (8000fb0 <MbSlave_Handle+0x128>)
 8000f00:	440b      	add	r3, r1
 8000f02:	709a      	strb	r2, [r3, #2]
			outFrame.data[outFrame.size + 1] = outFrame.crc[1];
 8000f04:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <MbSlave_Handle+0x128>)
 8000f06:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4a28      	ldr	r2, [pc, #160]	@ (8000fb0 <MbSlave_Handle+0x128>)
 8000f0e:	f892 10ff 	ldrb.w	r1, [r2, #255]	@ 0xff
 8000f12:	4a27      	ldr	r2, [pc, #156]	@ (8000fb0 <MbSlave_Handle+0x128>)
 8000f14:	4413      	add	r3, r2
 8000f16:	460a      	mov	r2, r1
 8000f18:	709a      	strb	r2, [r3, #2]

			/* send packet response */
			HAL_UART_AbortReceive_IT(&mod.huart);
 8000f1a:	4822      	ldr	r0, [pc, #136]	@ (8000fa4 <MbSlave_Handle+0x11c>)
 8000f1c:	f003 fc82 	bl	8004824 <HAL_UART_AbortReceive_IT>
			MbSlave_Rs485DirTransmit();
 8000f20:	f000 fb5c 	bl	80015dc <MbSlave_Rs485DirTransmit>
			HAL_UART_Transmit_IT(&mod.huart, (uint8_t*) &outFrame,
					outFrame.size + MODBUS_CRC_LENGTH + MODBUS_HEADER_LENGTH);
 8000f24:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <MbSlave_Handle+0x128>)
 8000f26:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
			HAL_UART_Transmit_IT(&mod.huart, (uint8_t*) &outFrame,
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	491f      	ldr	r1, [pc, #124]	@ (8000fb0 <MbSlave_Handle+0x128>)
 8000f32:	481c      	ldr	r0, [pc, #112]	@ (8000fa4 <MbSlave_Handle+0x11c>)
 8000f34:	f003 fb06 	bl	8004544 <HAL_UART_Transmit_IT>
 8000f38:	e001      	b.n	8000f3e <MbSlave_Handle+0xb6>
		} else {
			/* Prepare for next reception */
			MbSlave_BusReset();
 8000f3a:	f000 f865 	bl	8001008 <MbSlave_BusReset>
		}
	}
	/* If apply was set and transmit state is ready, apply settings */
	if (conf.com.mb_apply != 0 && mod.huart.gState == HAL_UART_STATE_READY) {
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MbSlave_Handle+0x120>)
 8000f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00a      	beq.n	8000f5c <MbSlave_Handle+0xd4>
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <MbSlave_Handle+0x11c>)
 8000f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	2b20      	cmp	r3, #32
 8000f50:	d104      	bne.n	8000f5c <MbSlave_Handle+0xd4>
		conf.com.mb_apply = 0;
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <MbSlave_Handle+0x120>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	87da      	strh	r2, [r3, #62]	@ 0x3e
		MbSlave_SettingsChanged();
 8000f58:	f7ff fece 	bl	8000cf8 <MbSlave_SettingsChanged>
	}
	/* Timeout management */
	if (conf.com.mb_timeout != 0) {
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <MbSlave_Handle+0x120>)
 8000f5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d010      	beq.n	8000f88 <MbSlave_Handle+0x100>
		/* Tick expired */
		if (TICK_EXPIRED(mod.tick)) {
 8000f66:	f001 f93f 	bl	80021e8 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <MbSlave_Handle+0x11c>)
 8000f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d205      	bcs.n	8000f88 <MbSlave_Handle+0x100>
			SET_BIT(conf.sys.status, STAT_BIT_MB_TIMEOUT);
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <MbSlave_Handle+0x120>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f043 0308 	orr.w	r3, r3, #8
 8000f84:	4a08      	ldr	r2, [pc, #32]	@ (8000fa8 <MbSlave_Handle+0x120>)
 8000f86:	6093      	str	r3, [r2, #8]
		}
	}

#ifdef MODBUS_UPGRADE
	if (mod.huart.gState == HAL_UART_STATE_READY) {
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <MbSlave_Handle+0x11c>)
 8000f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b20      	cmp	r3, #32
 8000f92:	d101      	bne.n	8000f98 <MbSlave_Handle+0x110>
		MbUpgr_Handle();
 8000f94:	f7ff fd2e 	bl	80009f4 <MbUpgr_Handle>
	}
#endif

	return ret;
 8000f98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000120 	.word	0x20000120
 8000fa8:	20000030 	.word	0x20000030
 8000fac:	200001b8 	.word	0x200001b8
 8000fb0:	200002bc 	.word	0x200002bc

08000fb4 <MbSlave_UpdateSlaveAddress>:
	if (huart->Instance == MODBUS_UART_INSTANCE) {
		MbSlave_BusReset();
	}
}

Status_t MbSlave_UpdateSlaveAddress(void) {
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	80fb      	strh	r3, [r7, #6]

	mod.myAddress = 151;//conf.com.mb_address;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	@ (8001004 <MbSlave_UpdateSlaveAddress+0x50>)
 8000fc0:	2297      	movs	r2, #151	@ 0x97
 8000fc2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
	SAT_DOWN(mod.myAddress, MODBUS_MIN_SLAVE_ADDR);
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001004 <MbSlave_UpdateSlaveAddress+0x50>)
 8000fc8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <MbSlave_UpdateSlaveAddress+0x24>
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <MbSlave_UpdateSlaveAddress+0x50>)
 8000fd2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8000fd6:	e000      	b.n	8000fda <MbSlave_UpdateSlaveAddress+0x26>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <MbSlave_UpdateSlaveAddress+0x50>)
 8000fdc:	f882 3091 	strb.w	r3, [r2, #145]	@ 0x91
	SAT_UP(mod.myAddress, MODBUS_MAX_SLAVE_ADDR);
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <MbSlave_UpdateSlaveAddress+0x50>)
 8000fe2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8000fe6:	2bf7      	cmp	r3, #247	@ 0xf7
 8000fe8:	bf28      	it	cs
 8000fea:	23f7      	movcs	r3, #247	@ 0xf7
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <MbSlave_UpdateSlaveAddress+0x50>)
 8000ff0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	return ret;
 8000ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	20000120 	.word	0x20000120

08001008 <MbSlave_BusReset>:

Status_t MbSlave_BusReset(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	80fb      	strh	r3, [r7, #6]
	volatile uint16_t outFram;

	/* Stop current transfer */
	HAL_UART_Abort_IT(&mod.huart);
 8001012:	480c      	ldr	r0, [pc, #48]	@ (8001044 <MbSlave_BusReset+0x3c>)
 8001014:	f003 faf2 	bl	80045fc <HAL_UART_Abort_IT>
	/* Read out data register for safety reasons */
	// změna outFram = mod.huart.Instance->RDR;
	outFram = mod.huart.Instance->DR;
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <MbSlave_BusReset+0x3c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	b29b      	uxth	r3, r3
 8001020:	80bb      	strh	r3, [r7, #4]

	UNUSED(outFram);
 8001022:	88bb      	ldrh	r3, [r7, #4]

	/* wait for next packet */
	MbSlave_Rs485DirReceive();
 8001024:	f000 fae6 	bl	80015f4 <MbSlave_Rs485DirReceive>
	ret = HAL_UART_Receive_IT(&mod.huart, (uint8_t*) &inFrame,
 8001028:	22fe      	movs	r2, #254	@ 0xfe
 800102a:	4907      	ldr	r1, [pc, #28]	@ (8001048 <MbSlave_BusReset+0x40>)
 800102c:	4805      	ldr	r0, [pc, #20]	@ (8001044 <MbSlave_BusReset+0x3c>)
 800102e:	f003 fabf 	bl	80045b0 <HAL_UART_Receive_IT>
 8001032:	4603      	mov	r3, r0
 8001034:	80fb      	strh	r3, [r7, #6]
	MODBUS_HEADER_LENGTH + MODBUS_DATA_LENGTH);

	return ret;
 8001036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000120 	.word	0x20000120
 8001048:	200001b8 	.word	0x200001b8

0800104c <USART1_IRQHandler>:

void MODBUS_UART_IRQ_HANDLER(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	/* If we received byte, restart receive timer */
	if (((mod.huart.Instance->SR & USART_SR_RXNE) != RESET)
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <USART1_IRQHandler+0x44>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	2b00      	cmp	r3, #0
 800105c:	d012      	beq.n	8001084 <USART1_IRQHandler+0x38>
			&& ((mod.huart.Instance->CR1 & USART_CR1_RXNEIE) != RESET)) {
 800105e:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <USART1_IRQHandler+0x44>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f003 0320 	and.w	r3, r3, #32
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00b      	beq.n	8001084 <USART1_IRQHandler+0x38>
		/* clear timer */
		mod.htim.Instance->CNT = 0;
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <USART1_IRQHandler+0x44>)
 800106e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001070:	2200      	movs	r2, #0
 8001072:	625a      	str	r2, [r3, #36]	@ 0x24
		__HAL_TIM_CLEAR_IT(&mod.htim, TIM_IT_UPDATE);
 8001074:	4b06      	ldr	r3, [pc, #24]	@ (8001090 <USART1_IRQHandler+0x44>)
 8001076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001078:	f06f 0201 	mvn.w	r2, #1
 800107c:	611a      	str	r2, [r3, #16]
		/* start timer */
		HAL_TIM_Base_Start_IT(&mod.htim);
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <USART1_IRQHandler+0x48>)
 8001080:	f002 fefc 	bl	8003e7c <HAL_TIM_Base_Start_IT>
	}
	HAL_UART_IRQHandler(&mod.huart);
 8001084:	4802      	ldr	r0, [pc, #8]	@ (8001090 <USART1_IRQHandler+0x44>)
 8001086:	f003 fc7f 	bl	8004988 <HAL_UART_IRQHandler>
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000120 	.word	0x20000120
 8001094:	20000168 	.word	0x20000168

08001098 <TIM3_IRQHandler>:

void MODBUS_TIM_IRQ_HANDLER(void) {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	if (__HAL_TIM_GET_FLAG(&mod.htim, TIM_FLAG_UPDATE) != RESET) {
 800109c:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <TIM3_IRQHandler+0x48>)
 800109e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a0:	691b      	ldr	r3, [r3, #16]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d117      	bne.n	80010da <TIM3_IRQHandler+0x42>
		if (__HAL_TIM_GET_IT_SOURCE(&mod.htim, TIM_IT_UPDATE) != RESET) {
 80010aa:	4b0d      	ldr	r3, [pc, #52]	@ (80010e0 <TIM3_IRQHandler+0x48>)
 80010ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d110      	bne.n	80010da <TIM3_IRQHandler+0x42>
			/* Update event */
			__HAL_TIM_CLEAR_IT(&mod.htim, TIM_IT_UPDATE);
 80010b8:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <TIM3_IRQHandler+0x48>)
 80010ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010bc:	f06f 0201 	mvn.w	r2, #1
 80010c0:	611a      	str	r2, [r3, #16]
			/* Stop timer */
			HAL_TIM_Base_Stop_IT(&mod.htim);
 80010c2:	4808      	ldr	r0, [pc, #32]	@ (80010e4 <TIM3_IRQHandler+0x4c>)
 80010c4:	f002 ff4a 	bl	8003f5c <HAL_TIM_Base_Stop_IT>
			/* Check the frame that we need to process it */
			MbSlave_CheckFrame();
 80010c8:	f000 f80e 	bl	80010e8 <MbSlave_CheckFrame>
			if (mod.frameOk == 1) {
 80010cc:	4b04      	ldr	r3, [pc, #16]	@ (80010e0 <TIM3_IRQHandler+0x48>)
 80010ce:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d001      	beq.n	80010da <TIM3_IRQHandler+0x42>
				/* Notify the waiting task */
			} else {
				MbSlave_BusReset();
 80010d6:	f7ff ff97 	bl	8001008 <MbSlave_BusReset>
			}
		}
	}
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000120 	.word	0x20000120
 80010e4:	20000168 	.word	0x20000168

080010e8 <MbSlave_CheckFrame>:

static Status_t MbSlave_CheckFrame(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 80010ee:	2300      	movs	r3, #0
 80010f0:	80bb      	strh	r3, [r7, #4]
	uint8_t command;
	uint8_t supported = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]

	/* Check address */
	if (inFrame.slaveAddr
 80010f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80010f8:	781a      	ldrb	r2, [r3, #0]
			== mod.myAddress|| inFrame.slaveAddr == MODBUS_BROADCAST) {
 80010fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001238 <MbSlave_CheckFrame+0x150>)
 80010fc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
	if (inFrame.slaveAddr
 8001100:	429a      	cmp	r2, r3
 8001102:	d004      	beq.n	800110e <MbSlave_CheckFrame+0x26>
			== mod.myAddress|| inFrame.slaveAddr == MODBUS_BROADCAST) {
 8001104:	4b4b      	ldr	r3, [pc, #300]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	f040 808d 	bne.w	8001228 <MbSlave_CheckFrame+0x140>
		command = inFrame.funcCode;
 800110e:	4b49      	ldr	r3, [pc, #292]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	70fb      	strb	r3, [r7, #3]
		/* Calculate size of data and check supported operation codes */
		if (command >= MB_READ_COILS && command <= MB_WRITE_SINGLE_REG) {
 8001114:	78fb      	ldrb	r3, [r7, #3]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d009      	beq.n	800112e <MbSlave_CheckFrame+0x46>
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2b06      	cmp	r3, #6
 800111e:	d806      	bhi.n	800112e <MbSlave_CheckFrame+0x46>
			inFrame.size = 0;
 8001120:	4b44      	ldr	r3, [pc, #272]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001122:	2200      	movs	r2, #0
 8001124:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			supported = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	71fb      	strb	r3, [r7, #7]
 800112c:	e04d      	b.n	80011ca <MbSlave_CheckFrame+0xe2>
		} else if (command == MB_WRITE_MULTIPLE_REGS
 800112e:	78fb      	ldrb	r3, [r7, #3]
 8001130:	2b10      	cmp	r3, #16
 8001132:	d002      	beq.n	800113a <MbSlave_CheckFrame+0x52>
				|| command == MB_WRITE_MULTIPLE_COILS) {
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	2b0f      	cmp	r3, #15
 8001138:	d147      	bne.n	80011ca <MbSlave_CheckFrame+0xe2>
			inFrame.size = inFrame.data[2];
 800113a:	4b3e      	ldr	r3, [pc, #248]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	461a      	mov	r2, r3
 8001140:	4b3c      	ldr	r3, [pc, #240]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001142:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			inFrame.size <<= 8;
 8001146:	4b3b      	ldr	r3, [pc, #236]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001148:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b38      	ldr	r3, [pc, #224]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001152:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			inFrame.size |= inFrame.data[3];
 8001156:	4b37      	ldr	r3, [pc, #220]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001158:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800115c:	4a35      	ldr	r2, [pc, #212]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 800115e:	7952      	ldrb	r2, [r2, #5]
 8001160:	4313      	orrs	r3, r2
 8001162:	b29a      	uxth	r2, r3
 8001164:	4b33      	ldr	r3, [pc, #204]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001166:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100

			if (command == MB_WRITE_MULTIPLE_COILS) {
 800116a:	78fb      	ldrb	r3, [r7, #3]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d11d      	bne.n	80011ac <MbSlave_CheckFrame+0xc4>
				if (inFrame.size % 8) {
 8001170:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001172:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	b29b      	uxth	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00a      	beq.n	8001196 <MbSlave_CheckFrame+0xae>
					inFrame.size = (inFrame.size / 8) + 2; /* 1 extra byte is for unaligned data, 1 byte for size */
 8001180:	4b2c      	ldr	r3, [pc, #176]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001182:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001186:	08db      	lsrs	r3, r3, #3
 8001188:	b29b      	uxth	r3, r3
 800118a:	3302      	adds	r3, #2
 800118c:	b29a      	uxth	r2, r3
 800118e:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001190:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 8001194:	e017      	b.n	80011c6 <MbSlave_CheckFrame+0xde>
				} else {
					inFrame.size = (inFrame.size / 8) + 1; /* 1 byte for size */
 8001196:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001198:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800119c:	08db      	lsrs	r3, r3, #3
 800119e:	b29b      	uxth	r3, r3
 80011a0:	3301      	adds	r3, #1
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80011a6:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
 80011aa:	e00c      	b.n	80011c6 <MbSlave_CheckFrame+0xde>
				}
			} else if (command == MB_WRITE_MULTIPLE_REGS) {
 80011ac:	78fb      	ldrb	r3, [r7, #3]
 80011ae:	2b10      	cmp	r3, #16
 80011b0:	d109      	bne.n	80011c6 <MbSlave_CheckFrame+0xde>
				inFrame.size = (inFrame.size * 2) + 1; /* registers are 16b, 1 byte for size */
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80011b4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	3301      	adds	r3, #1
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80011c2:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			}
			supported = 1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	71fb      	strb	r3, [r7, #7]
		}

		/* Add header of command to size variable */
		inFrame.size += MODBUS_MIN_PAYLOAD_LENGTH;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80011cc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80011d0:	3304      	adds	r3, #4
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	4b17      	ldr	r3, [pc, #92]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80011d6:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
		/* Check maximal length of modbus frame */
		if (inFrame.size < MODBUS_DATA_LENGTH - 2) // CRC must fit into received data
 80011da:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80011dc:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80011e0:	2bf9      	cmp	r3, #249	@ 0xf9
 80011e2:	d821      	bhi.n	8001228 <MbSlave_CheckFrame+0x140>
				{
			/* compute CRC16 from received packet */
			MbSlave_CRC16(&inFrame);
 80011e4:	4813      	ldr	r0, [pc, #76]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80011e6:	f000 f98b 	bl	8001500 <MbSlave_CRC16>
			/* we have original CRC16 in received data */
			if (inFrame.crc[0] == inFrame.data[inFrame.size]
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80011ec:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 80011f0:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80011f2:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80011f6:	4619      	mov	r1, r3
 80011f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 80011fa:	440b      	add	r3, r1
 80011fc:	789b      	ldrb	r3, [r3, #2]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d112      	bne.n	8001228 <MbSlave_CheckFrame+0x140>
					&& inFrame.crc[1] == inFrame.data[inFrame.size + 1]
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001204:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 800120a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800120e:	3301      	adds	r3, #1
 8001210:	4908      	ldr	r1, [pc, #32]	@ (8001234 <MbSlave_CheckFrame+0x14c>)
 8001212:	440b      	add	r3, r1
 8001214:	789b      	ldrb	r3, [r3, #2]
 8001216:	429a      	cmp	r2, r3
 8001218:	d106      	bne.n	8001228 <MbSlave_CheckFrame+0x140>
					&& supported) {
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <MbSlave_CheckFrame+0x140>
				/* move to next step */
				mod.frameOk = 1;
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <MbSlave_CheckFrame+0x150>)
 8001222:	2201      	movs	r2, #1
 8001224:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
			}
		}
	}

	return ret;
 8001228:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200001b8 	.word	0x200001b8
 8001238:	20000120 	.word	0x20000120

0800123c <MbSlave_ProcessFrame>:

static Status_t MbSlave_ProcessFrame(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
	Status_t ret = STATUS_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	82fb      	strh	r3, [r7, #22]
	uint32_t i;
	uint16_t addr;
	uint16_t count;
	uint16_t size;
	uint16_t offset = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	833b      	strh	r3, [r7, #24]
	uint16_t val;

	/* prepare address for outframe */
	outFrame.funcCode = inFrame.funcCode;
 800124a:	4b85      	ldr	r3, [pc, #532]	@ (8001460 <MbSlave_ProcessFrame+0x224>)
 800124c:	785a      	ldrb	r2, [r3, #1]
 800124e:	4b85      	ldr	r3, [pc, #532]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 8001250:	705a      	strb	r2, [r3, #1]
	/* default size for error */
	outFrame.size = 1;
 8001252:	4b84      	ldr	r3, [pc, #528]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 8001254:	2201      	movs	r2, #1
 8001256:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
	/* parse start address and count */
	addr = inFrame.data[0];
 800125a:	4b81      	ldr	r3, [pc, #516]	@ (8001460 <MbSlave_ProcessFrame+0x224>)
 800125c:	789b      	ldrb	r3, [r3, #2]
 800125e:	82bb      	strh	r3, [r7, #20]
	addr <<= 8;
 8001260:	8abb      	ldrh	r3, [r7, #20]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	82bb      	strh	r3, [r7, #20]
	addr |= inFrame.data[1];
 8001266:	4b7e      	ldr	r3, [pc, #504]	@ (8001460 <MbSlave_ProcessFrame+0x224>)
 8001268:	78db      	ldrb	r3, [r3, #3]
 800126a:	461a      	mov	r2, r3
 800126c:	8abb      	ldrh	r3, [r7, #20]
 800126e:	4313      	orrs	r3, r2
 8001270:	82bb      	strh	r3, [r7, #20]
	count = inFrame.data[2];
 8001272:	4b7b      	ldr	r3, [pc, #492]	@ (8001460 <MbSlave_ProcessFrame+0x224>)
 8001274:	791b      	ldrb	r3, [r3, #4]
 8001276:	827b      	strh	r3, [r7, #18]
	count <<= 8;
 8001278:	8a7b      	ldrh	r3, [r7, #18]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	827b      	strh	r3, [r7, #18]
	count |= inFrame.data[3];
 800127e:	4b78      	ldr	r3, [pc, #480]	@ (8001460 <MbSlave_ProcessFrame+0x224>)
 8001280:	795b      	ldrb	r3, [r3, #5]
 8001282:	461a      	mov	r2, r3
 8001284:	8a7b      	ldrh	r3, [r7, #18]
 8001286:	4313      	orrs	r3, r2
 8001288:	827b      	strh	r3, [r7, #18]

	switch (inFrame.funcCode) {
 800128a:	4b75      	ldr	r3, [pc, #468]	@ (8001460 <MbSlave_ProcessFrame+0x224>)
 800128c:	785b      	ldrb	r3, [r3, #1]
 800128e:	2b10      	cmp	r3, #16
 8001290:	d010      	beq.n	80012b4 <MbSlave_ProcessFrame+0x78>
 8001292:	2b10      	cmp	r3, #16
 8001294:	dc13      	bgt.n	80012be <MbSlave_ProcessFrame+0x82>
 8001296:	2b03      	cmp	r3, #3
 8001298:	d002      	beq.n	80012a0 <MbSlave_ProcessFrame+0x64>
 800129a:	2b04      	cmp	r3, #4
 800129c:	d005      	beq.n	80012aa <MbSlave_ProcessFrame+0x6e>
 800129e:	e00e      	b.n	80012be <MbSlave_ProcessFrame+0x82>
	case MB_READ_HOLDING_REGS:
		offset = MODBUS_OFFSET_HOLDING;
 80012a0:	2300      	movs	r3, #0
 80012a2:	833b      	strh	r3, [r7, #24]
		size = MB_HOLD_LAST;
 80012a4:	2365      	movs	r3, #101	@ 0x65
 80012a6:	837b      	strh	r3, [r7, #26]
		break;
 80012a8:	e015      	b.n	80012d6 <MbSlave_ProcessFrame+0x9a>
	case MB_READ_INPUT_REGS:
		offset = MODBUS_OFFSET_INPUT;
 80012aa:	2300      	movs	r3, #0
 80012ac:	833b      	strh	r3, [r7, #24]
		size = MB_INPUT_LAST;
 80012ae:	2318      	movs	r3, #24
 80012b0:	837b      	strh	r3, [r7, #26]
		break;
 80012b2:	e010      	b.n	80012d6 <MbSlave_ProcessFrame+0x9a>
	case MB_WRITE_MULTIPLE_REGS:
		offset = MODBUS_OFFSET_HOLDING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	833b      	strh	r3, [r7, #24]
		size = MB_HOLD_LAST;
 80012b8:	2365      	movs	r3, #101	@ 0x65
 80012ba:	837b      	strh	r3, [r7, #26]
		break;
 80012bc:	e00b      	b.n	80012d6 <MbSlave_ProcessFrame+0x9a>
	default:
		/* prepare exception */
		size = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	837b      	strh	r3, [r7, #26]
		outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 80012c2:	4b67      	ldr	r3, [pc, #412]	@ (8001460 <MbSlave_ProcessFrame+0x224>)
 80012c4:	785b      	ldrb	r3, [r3, #1]
 80012c6:	3b80      	subs	r3, #128	@ 0x80
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4b66      	ldr	r3, [pc, #408]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 80012cc:	705a      	strb	r2, [r3, #1]
		outFrame.data[0] = MODBUS_EXCEPT_INVALID_COMMAND; /* invalid function code */
 80012ce:	4b65      	ldr	r3, [pc, #404]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	709a      	strb	r2, [r3, #2]
		break;
 80012d4:	bf00      	nop
	}

	/* some value checking */
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK
 80012d6:	4b63      	ldr	r3, [pc, #396]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 80012d8:	785b      	ldrb	r3, [r3, #1]
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0e      	blt.n	80012fe <MbSlave_ProcessFrame+0xc2>
			&& (count < 1 || count > 0x7b)) {
 80012e0:	8a7b      	ldrh	r3, [r7, #18]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <MbSlave_ProcessFrame+0xb0>
 80012e6:	8a7b      	ldrh	r3, [r7, #18]
 80012e8:	2b7b      	cmp	r3, #123	@ 0x7b
 80012ea:	d908      	bls.n	80012fe <MbSlave_ProcessFrame+0xc2>
		outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 80012ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001460 <MbSlave_ProcessFrame+0x224>)
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	3b80      	subs	r3, #128	@ 0x80
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 80012f6:	705a      	strb	r2, [r3, #1]
		outFrame.data[0] = MODBUS_EXCEPT_INVALID_SIZE; /* invalid size/value */
 80012f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 80012fa:	2203      	movs	r2, #3
 80012fc:	709a      	strb	r2, [r3, #2]
	}

	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK
 80012fe:	4b59      	ldr	r3, [pc, #356]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	b25b      	sxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	db26      	blt.n	8001356 <MbSlave_ProcessFrame+0x11a>
			&& (addr > (offset + size) || (addr) < offset
 8001308:	8aba      	ldrh	r2, [r7, #20]
 800130a:	8b39      	ldrh	r1, [r7, #24]
 800130c:	8b7b      	ldrh	r3, [r7, #26]
 800130e:	440b      	add	r3, r1
 8001310:	429a      	cmp	r2, r3
 8001312:	dc0c      	bgt.n	800132e <MbSlave_ProcessFrame+0xf2>
 8001314:	8aba      	ldrh	r2, [r7, #20]
 8001316:	8b3b      	ldrh	r3, [r7, #24]
 8001318:	429a      	cmp	r2, r3
 800131a:	d308      	bcc.n	800132e <MbSlave_ProcessFrame+0xf2>
					|| (addr + count) > (offset + size + 1))) {
 800131c:	8aba      	ldrh	r2, [r7, #20]
 800131e:	8a7b      	ldrh	r3, [r7, #18]
 8001320:	441a      	add	r2, r3
 8001322:	8b39      	ldrh	r1, [r7, #24]
 8001324:	8b7b      	ldrh	r3, [r7, #26]
 8001326:	440b      	add	r3, r1
 8001328:	3301      	adds	r3, #1
 800132a:	429a      	cmp	r2, r3
 800132c:	dd13      	ble.n	8001356 <MbSlave_ProcessFrame+0x11a>
#ifdef MODBUS_UPGRADE
		if (addr < MB_UPGR_BASE_ADDRESS
 800132e:	8abb      	ldrh	r3, [r7, #20]
 8001330:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001334:	d306      	bcc.n	8001344 <MbSlave_ProcessFrame+0x108>
				|| addr + count > MB_UPGR_END_ADDRESS + 1)
 8001336:	8aba      	ldrh	r2, [r7, #20]
 8001338:	8a7b      	ldrh	r3, [r7, #18]
 800133a:	4413      	add	r3, r2
 800133c:	f240 4212 	movw	r2, #1042	@ 0x412
 8001340:	4293      	cmp	r3, r2
 8001342:	dd08      	ble.n	8001356 <MbSlave_ProcessFrame+0x11a>
#endif
						{
			outFrame.funcCode = inFrame.funcCode + MODBUS_EXCEPTION_MASK;
 8001344:	4b46      	ldr	r3, [pc, #280]	@ (8001460 <MbSlave_ProcessFrame+0x224>)
 8001346:	785b      	ldrb	r3, [r3, #1]
 8001348:	3b80      	subs	r3, #128	@ 0x80
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 800134e:	705a      	strb	r2, [r3, #1]
			outFrame.data[0] = MODBUS_EXCEPT_INVALID_ADDRESS; /* invalid address */
 8001350:	4b44      	ldr	r3, [pc, #272]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 8001352:	2202      	movs	r2, #2
 8001354:	709a      	strb	r2, [r3, #2]
		}
	}

	/* it looks ok so far */
	if (outFrame.funcCode < MODBUS_EXCEPTION_MASK) {
 8001356:	4b43      	ldr	r3, [pc, #268]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 8001358:	785b      	ldrb	r3, [r3, #1]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	f2c0 80c5 	blt.w	80014ec <MbSlave_ProcessFrame+0x2b0>
		/* Subtract offset from address */
		addr -= offset;
 8001362:	8aba      	ldrh	r2, [r7, #20]
 8001364:	8b3b      	ldrh	r3, [r7, #24]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	82bb      	strh	r3, [r7, #20]

		/* do the register stuff */
		switch (inFrame.funcCode) {
 800136a:	4b3d      	ldr	r3, [pc, #244]	@ (8001460 <MbSlave_ProcessFrame+0x224>)
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	2b10      	cmp	r3, #16
 8001370:	d064      	beq.n	800143c <MbSlave_ProcessFrame+0x200>
 8001372:	2b10      	cmp	r3, #16
 8001374:	f300 80ba 	bgt.w	80014ec <MbSlave_ProcessFrame+0x2b0>
 8001378:	2b03      	cmp	r3, #3
 800137a:	d002      	beq.n	8001382 <MbSlave_ProcessFrame+0x146>
 800137c:	2b04      	cmp	r3, #4
 800137e:	d034      	beq.n	80013ea <MbSlave_ProcessFrame+0x1ae>
 8001380:	e0b4      	b.n	80014ec <MbSlave_ProcessFrame+0x2b0>
		case MB_READ_HOLDING_REGS:
			outFrame.data[0] = count * 2;
 8001382:	8a7b      	ldrh	r3, [r7, #18]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b36      	ldr	r3, [pc, #216]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 800138c:	709a      	strb	r2, [r3, #2]
			outFrame.size = outFrame.data[0] + 1;
 800138e:	4b35      	ldr	r3, [pc, #212]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 8001390:	789b      	ldrb	r3, [r3, #2]
 8001392:	3301      	adds	r3, #1
 8001394:	b29a      	uxth	r2, r3
 8001396:	4b33      	ldr	r3, [pc, #204]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 8001398:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
#ifdef MODBUS_UPGRADE
			if (addr >= MB_UPGR_BASE_ADDRESS) {
 800139c:	8abb      	ldrh	r3, [r7, #20]
 800139e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013a2:	d306      	bcc.n	80013b2 <MbSlave_ProcessFrame+0x176>
				MbUpgr_ReadRegisters(addr, count, outFrame.data + 1);
 80013a4:	4a30      	ldr	r2, [pc, #192]	@ (8001468 <MbSlave_ProcessFrame+0x22c>)
 80013a6:	8a79      	ldrh	r1, [r7, #18]
 80013a8:	8abb      	ldrh	r3, [r7, #20]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fbdc 	bl	8000b68 <MbUpgr_ReadRegisters>
				for (i = 0; i < count; i++) {
					MbRtu_ReadHoldingRegCallback(addr + i, &val);
					memcpy((outFrame.data + i * 2 + 1), &val, 2);
				}
			}
			break;
 80013b0:	e09c      	b.n	80014ec <MbSlave_ProcessFrame+0x2b0>
				for (i = 0; i < count; i++) {
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	e013      	b.n	80013e0 <MbSlave_ProcessFrame+0x1a4>
					MbRtu_ReadHoldingRegCallback(addr + i, &val);
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	8abb      	ldrh	r3, [r7, #20]
 80013be:	4413      	add	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	1dba      	adds	r2, r7, #6
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f9ca 	bl	8000760 <MbRtu_ReadHoldingRegCallback>
					memcpy((outFrame.data + i * 2 + 1), &val, 2);
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	3301      	adds	r3, #1
 80013d2:	4a26      	ldr	r2, [pc, #152]	@ (800146c <MbSlave_ProcessFrame+0x230>)
 80013d4:	4413      	add	r3, r2
 80013d6:	88fa      	ldrh	r2, [r7, #6]
 80013d8:	801a      	strh	r2, [r3, #0]
				for (i = 0; i < count; i++) {
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3301      	adds	r3, #1
 80013de:	61fb      	str	r3, [r7, #28]
 80013e0:	8a7b      	ldrh	r3, [r7, #18]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d3e7      	bcc.n	80013b8 <MbSlave_ProcessFrame+0x17c>
			break;
 80013e8:	e080      	b.n	80014ec <MbSlave_ProcessFrame+0x2b0>

		case MB_READ_INPUT_REGS:
			outFrame.data[0] = count * 2;
 80013ea:	8a7b      	ldrh	r3, [r7, #18]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 80013f4:	709a      	strb	r2, [r3, #2]
			outFrame.size = outFrame.data[0] + 1;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 80013f8:	789b      	ldrb	r3, [r3, #2]
 80013fa:	3301      	adds	r3, #1
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <MbSlave_ProcessFrame+0x228>)
 8001400:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			for (i = 0; i < count; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	e013      	b.n	8001432 <MbSlave_ProcessFrame+0x1f6>
				MbRtu_ReadInputRegCallback(addr + i, &val);
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	b29a      	uxth	r2, r3
 800140e:	8abb      	ldrh	r3, [r7, #20]
 8001410:	4413      	add	r3, r2
 8001412:	b29b      	uxth	r3, r3
 8001414:	1dba      	adds	r2, r7, #6
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f8ad 	bl	8000578 <MbRtu_ReadInputRegCallback>
				memcpy((outFrame.data + i * 2 + 1), &val, 2);
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	3301      	adds	r3, #1
 8001424:	4a11      	ldr	r2, [pc, #68]	@ (800146c <MbSlave_ProcessFrame+0x230>)
 8001426:	4413      	add	r3, r2
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	801a      	strh	r2, [r3, #0]
			for (i = 0; i < count; i++) {
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3301      	adds	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	8a7b      	ldrh	r3, [r7, #18]
 8001434:	69fa      	ldr	r2, [r7, #28]
 8001436:	429a      	cmp	r2, r3
 8001438:	d3e7      	bcc.n	800140a <MbSlave_ProcessFrame+0x1ce>
			}

			break;
 800143a:	e057      	b.n	80014ec <MbSlave_ProcessFrame+0x2b0>

		case MB_WRITE_MULTIPLE_REGS:
			size = addr + count;
 800143c:	8aba      	ldrh	r2, [r7, #20]
 800143e:	8a7b      	ldrh	r3, [r7, #18]
 8001440:	4413      	add	r3, r2
 8001442:	837b      	strh	r3, [r7, #26]
#ifdef MODBUS_UPGRADE
			if (addr >= MB_UPGR_BASE_ADDRESS) {
 8001444:	8abb      	ldrh	r3, [r7, #20]
 8001446:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800144a:	d306      	bcc.n	800145a <MbSlave_ProcessFrame+0x21e>
				MbUpgr_WriteRegisters(addr, count, inFrame.data + 5);
 800144c:	4a08      	ldr	r2, [pc, #32]	@ (8001470 <MbSlave_ProcessFrame+0x234>)
 800144e:	8a79      	ldrh	r1, [r7, #18]
 8001450:	8abb      	ldrh	r3, [r7, #20]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fb42 	bl	8000adc <MbUpgr_WriteRegisters>
 8001458:	e02b      	b.n	80014b2 <MbSlave_ProcessFrame+0x276>
			} else
#endif
			{
				for (i = 0; i < count; i++) {
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	e024      	b.n	80014aa <MbSlave_ProcessFrame+0x26e>
 8001460:	200001b8 	.word	0x200001b8
 8001464:	200002bc 	.word	0x200002bc
 8001468:	200002bf 	.word	0x200002bf
 800146c:	200002be 	.word	0x200002be
 8001470:	200001bf 	.word	0x200001bf
					memcpy(&val,
							(inFrame.data + i * 2 + 1
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
									+ MODBUS_MIN_PAYLOAD_LENGTH), 2);
 8001478:	3305      	adds	r3, #5
					memcpy(&val,
 800147a:	4a1f      	ldr	r2, [pc, #124]	@ (80014f8 <MbSlave_ProcessFrame+0x2bc>)
 800147c:	4413      	add	r3, r2
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	80fb      	strh	r3, [r7, #6]
					MbRtu_WriteHoldingRegCallback(addr + i, __REV16(val));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	b29a      	uxth	r2, r3
 8001488:	8abb      	ldrh	r3, [r7, #20]
 800148a:	4413      	add	r3, r2
 800148c:	b29a      	uxth	r2, r3
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	60fb      	str	r3, [r7, #12]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	ba5b      	rev16	r3, r3
 8001496:	60bb      	str	r3, [r7, #8]
  return result;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	b29b      	uxth	r3, r3
 800149c:	4619      	mov	r1, r3
 800149e:	4610      	mov	r0, r2
 80014a0:	f7ff f9ec 	bl	800087c <MbRtu_WriteHoldingRegCallback>
				for (i = 0; i < count; i++) {
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	3301      	adds	r3, #1
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	8a7b      	ldrh	r3, [r7, #18]
 80014ac:	69fa      	ldr	r2, [r7, #28]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d3e0      	bcc.n	8001474 <MbSlave_ProcessFrame+0x238>
				}
			}

			addr += offset;
 80014b2:	8aba      	ldrh	r2, [r7, #20]
 80014b4:	8b3b      	ldrh	r3, [r7, #24]
 80014b6:	4413      	add	r3, r2
 80014b8:	82bb      	strh	r3, [r7, #20]
			outFrame.data[0] = (addr >> 8) & 0xff;
 80014ba:	8abb      	ldrh	r3, [r7, #20]
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <MbSlave_ProcessFrame+0x2c0>)
 80014c4:	709a      	strb	r2, [r3, #2]
			outFrame.data[1] = addr & 0xff;
 80014c6:	8abb      	ldrh	r3, [r7, #20]
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <MbSlave_ProcessFrame+0x2c0>)
 80014cc:	70da      	strb	r2, [r3, #3]
			outFrame.data[2] = (count >> 8) & 0xff;
 80014ce:	8a7b      	ldrh	r3, [r7, #18]
 80014d0:	0a1b      	lsrs	r3, r3, #8
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <MbSlave_ProcessFrame+0x2c0>)
 80014d8:	711a      	strb	r2, [r3, #4]
			outFrame.data[3] = count & 0xff;
 80014da:	8a7b      	ldrh	r3, [r7, #18]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <MbSlave_ProcessFrame+0x2c0>)
 80014e0:	715a      	strb	r2, [r3, #5]
			outFrame.size = 4;
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <MbSlave_ProcessFrame+0x2c0>)
 80014e4:	2204      	movs	r2, #4
 80014e6:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
			break;
 80014ea:	bf00      	nop
		}
	}

	return ret;
 80014ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200001ba 	.word	0x200001ba
 80014fc:	200002bc 	.word	0x200002bc

08001500 <MbSlave_CRC16>:
 * Computation of CRC16 using pre-computed tables.
 *
 * @param frame - data frame
 * @return Status - standard status code (0 - OK)
 */
static Status_t MbSlave_CRC16(MbSlave_Frame_t *frame) {
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	uint8_t index;
	frame->crc[0] = 0xFF;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	22ff      	movs	r2, #255	@ 0xff
 800150c:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	frame->crc[1] = 0xFF;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	22ff      	movs	r2, #255	@ 0xff
 8001514:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	uint16_t i;

	/* calculate the CRC */
	index = frame->crc[0] ^ frame->slaveAddr;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	4053      	eors	r3, r2
 8001524:	737b      	strb	r3, [r7, #13]
	frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 800152c:	7b7b      	ldrb	r3, [r7, #13]
 800152e:	4929      	ldr	r1, [pc, #164]	@ (80015d4 <MbSlave_CRC16+0xd4>)
 8001530:	5ccb      	ldrb	r3, [r1, r3]
 8001532:	4053      	eors	r3, r2
 8001534:	b2da      	uxtb	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	frame->crc[1] = tableCrcLo[index];
 800153c:	7b7b      	ldrb	r3, [r7, #13]
 800153e:	4a26      	ldr	r2, [pc, #152]	@ (80015d8 <MbSlave_CRC16+0xd8>)
 8001540:	5cd2      	ldrb	r2, [r2, r3]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	index = frame->crc[0] ^ frame->funcCode;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	785b      	ldrb	r3, [r3, #1]
 8001552:	4053      	eors	r3, r2
 8001554:	737b      	strb	r3, [r7, #13]
	frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 800155c:	7b7b      	ldrb	r3, [r7, #13]
 800155e:	491d      	ldr	r1, [pc, #116]	@ (80015d4 <MbSlave_CRC16+0xd4>)
 8001560:	5ccb      	ldrb	r3, [r1, r3]
 8001562:	4053      	eors	r3, r2
 8001564:	b2da      	uxtb	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
	frame->crc[1] = tableCrcLo[index];
 800156c:	7b7b      	ldrb	r3, [r7, #13]
 800156e:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <MbSlave_CRC16+0xd8>)
 8001570:	5cd2      	ldrb	r2, [r2, r3]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff

	for (i = 0; i < frame->size; i++) {
 8001578:	2300      	movs	r3, #0
 800157a:	81fb      	strh	r3, [r7, #14]
 800157c:	e01c      	b.n	80015b8 <MbSlave_CRC16+0xb8>
		index = frame->crc[0] ^ frame->data[i];
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 20fe 	ldrb.w	r2, [r3, #254]	@ 0xfe
 8001584:	89fb      	ldrh	r3, [r7, #14]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	440b      	add	r3, r1
 800158a:	789b      	ldrb	r3, [r3, #2]
 800158c:	4053      	eors	r3, r2
 800158e:	737b      	strb	r3, [r7, #13]
		frame->crc[0] = frame->crc[1] ^ tableCrcHi[index];
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 20ff 	ldrb.w	r2, [r3, #255]	@ 0xff
 8001596:	7b7b      	ldrb	r3, [r7, #13]
 8001598:	490e      	ldr	r1, [pc, #56]	@ (80015d4 <MbSlave_CRC16+0xd4>)
 800159a:	5ccb      	ldrb	r3, [r1, r3]
 800159c:	4053      	eors	r3, r2
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f883 20fe 	strb.w	r2, [r3, #254]	@ 0xfe
		frame->crc[1] = tableCrcLo[index];
 80015a6:	7b7b      	ldrb	r3, [r7, #13]
 80015a8:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <MbSlave_CRC16+0xd8>)
 80015aa:	5cd2      	ldrb	r2, [r2, r3]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f883 20ff 	strb.w	r2, [r3, #255]	@ 0xff
	for (i = 0; i < frame->size; i++) {
 80015b2:	89fb      	ldrh	r3, [r7, #14]
 80015b4:	3301      	adds	r3, #1
 80015b6:	81fb      	strh	r3, [r7, #14]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 80015be:	89fa      	ldrh	r2, [r7, #14]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d3dc      	bcc.n	800157e <MbSlave_CRC16+0x7e>
	}

	return STATUS_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	08005afc 	.word	0x08005afc
 80015d8:	080059b0 	.word	0x080059b0

080015dc <MbSlave_Rs485DirTransmit>:

static void MbSlave_Rs485DirTransmit(void) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MODBUS_UART_DE_PORT, MODBUS_UART_DE_PIN, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2102      	movs	r1, #2
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <MbSlave_Rs485DirTransmit+0x14>)
 80015e6:	f001 fc53 	bl	8002e90 <HAL_GPIO_WritePin>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40020000 	.word	0x40020000

080015f4 <MbSlave_Rs485DirReceive>:

static void MbSlave_Rs485DirReceive(void) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MODBUS_UART_DE_PORT, MODBUS_UART_DE_PIN, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2102      	movs	r1, #2
 80015fc:	4802      	ldr	r0, [pc, #8]	@ (8001608 <MbSlave_Rs485DirReceive+0x14>)
 80015fe:	f001 fc47 	bl	8002e90 <HAL_GPIO_WritePin>
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40020000 	.word	0x40020000

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001612:	f000 fd83 	bl	800211c <HAL_Init>

  /* USER CODE BEGIN Init */
	HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8001616:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800161a:	4819      	ldr	r0, [pc, #100]	@ (8001680 <main+0x74>)
 800161c:	f001 fc51 	bl	8002ec2 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 8001620:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001624:	f000 fdec 	bl	8002200 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001628:	f000 f82c 	bl	8001684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800162c:	f000 fa12 	bl	8001a54 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001630:	f000 f888 	bl	8001744 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001634:	f000 f9e4 	bl	8001a00 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001638:	f000 f8ea 	bl	8001810 <MX_I2C1_Init>
  MX_SPI2_Init();
 800163c:	f000 f930 	bl	80018a0 <MX_SPI2_Init>
  MX_UART5_Init();
 8001640:	f000 f9b4 	bl	80019ac <MX_UART5_Init>
  MX_CRC_Init();
 8001644:	f000 f8d0 	bl	80017e8 <MX_CRC_Init>
  MX_IWDG_Init();
 8001648:	f000 f910 	bl	800186c <MX_IWDG_Init>
  MX_TIM3_Init();
 800164c:	f000 f95e 	bl	800190c <MX_TIM3_Init>

	//System_InitWdg();
	  //System_CrcInit();
	  //Config_Init();
	  //FlashApp_Init();
	  MbSlave_Init();
 8001650:	f7ff fb02 	bl	8000c58 <MbSlave_Init>
	  uint32_t lastToggleTime = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		MbSlave_Handle();
 8001658:	f7ff fc16 	bl	8000e88 <MbSlave_Handle>

		if (HAL_GetTick() - lastToggleTime >= 500)
 800165c:	f000 fdc4 	bl	80021e8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800166a:	d3f5      	bcc.n	8001658 <main+0x4c>
		    {
		        HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 800166c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001670:	4803      	ldr	r0, [pc, #12]	@ (8001680 <main+0x74>)
 8001672:	f001 fc26 	bl	8002ec2 <HAL_GPIO_TogglePin>
		        lastToggleTime = HAL_GetTick();
 8001676:	f000 fdb7 	bl	80021e8 <HAL_GetTick>
 800167a:	6078      	str	r0, [r7, #4]
		MbSlave_Handle();
 800167c:	e7ec      	b.n	8001658 <main+0x4c>
 800167e:	bf00      	nop
 8001680:	40020400 	.word	0x40020400

08001684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b094      	sub	sp, #80	@ 0x50
 8001688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168a:	f107 031c 	add.w	r3, r7, #28
 800168e:	2234      	movs	r2, #52	@ 0x34
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f004 f920 	bl	80058d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	4b23      	ldr	r3, [pc, #140]	@ (800173c <SystemClock_Config+0xb8>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	4a22      	ldr	r2, [pc, #136]	@ (800173c <SystemClock_Config+0xb8>)
 80016b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b8:	4b20      	ldr	r3, [pc, #128]	@ (800173c <SystemClock_Config+0xb8>)
 80016ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c0:	607b      	str	r3, [r7, #4]
 80016c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016c4:	2300      	movs	r3, #0
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <SystemClock_Config+0xbc>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001740 <SystemClock_Config+0xbc>)
 80016d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <SystemClock_Config+0xbc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016e0:	603b      	str	r3, [r7, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80016e4:	2309      	movs	r3, #9
 80016e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016ee:	2301      	movs	r3, #1
 80016f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f6:	f107 031c 	add.w	r3, r7, #28
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 f848 	bl	8003790 <HAL_RCC_OscConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001706:	f000 fa51 	bl	8001bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170a:	230f      	movs	r3, #15
 800170c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800170e:	2301      	movs	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800171e:	f107 0308 	add.w	r3, r7, #8
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fd6f 	bl	8003208 <HAL_RCC_ClockConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001730:	f000 fa3c 	bl	8001bac <Error_Handler>
  }
}
 8001734:	bf00      	nop
 8001736:	3750      	adds	r7, #80	@ 0x50
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	40007000 	.word	0x40007000

08001744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001756:	4b21      	ldr	r3, [pc, #132]	@ (80017dc <MX_ADC1_Init+0x98>)
 8001758:	4a21      	ldr	r2, [pc, #132]	@ (80017e0 <MX_ADC1_Init+0x9c>)
 800175a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800175c:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <MX_ADC1_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001762:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <MX_ADC1_Init+0x98>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001768:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <MX_ADC1_Init+0x98>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800176e:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <MX_ADC1_Init+0x98>)
 8001770:	2200      	movs	r2, #0
 8001772:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <MX_ADC1_Init+0x98>)
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800177c:	4b17      	ldr	r3, [pc, #92]	@ (80017dc <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001782:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <MX_ADC1_Init+0x98>)
 8001784:	4a17      	ldr	r2, [pc, #92]	@ (80017e4 <MX_ADC1_Init+0xa0>)
 8001786:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001788:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800178e:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <MX_ADC1_Init+0x98>)
 8001790:	2201      	movs	r2, #1
 8001792:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001794:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <MX_ADC1_Init+0x98>)
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800179c:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <MX_ADC1_Init+0x98>)
 800179e:	2201      	movs	r2, #1
 80017a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017a2:	480e      	ldr	r0, [pc, #56]	@ (80017dc <MX_ADC1_Init+0x98>)
 80017a4:	f000 fd50 	bl	8002248 <HAL_ADC_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80017ae:	f000 f9fd 	bl	8001bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017be:	463b      	mov	r3, r7
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	@ (80017dc <MX_ADC1_Init+0x98>)
 80017c4:	f000 fd84 	bl	80022d0 <HAL_ADC_ConfigChannel>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80017ce:	f000 f9ed 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	200003d4 	.word	0x200003d4
 80017e0:	40012000 	.word	0x40012000
 80017e4:	0f000001 	.word	0x0f000001

080017e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <MX_CRC_Init+0x20>)
 80017ee:	4a07      	ldr	r2, [pc, #28]	@ (800180c <MX_CRC_Init+0x24>)
 80017f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	@ (8001808 <MX_CRC_Init+0x20>)
 80017f4:	f001 f909 	bl	8002a0a <HAL_CRC_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80017fe:	f000 f9d5 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200003c0 	.word	0x200003c0
 800180c:	40023000 	.word	0x40023000

08001810 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001814:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001816:	4a13      	ldr	r2, [pc, #76]	@ (8001864 <MX_I2C1_Init+0x54>)
 8001818:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_I2C1_Init+0x50>)
 800181c:	4a12      	ldr	r2, [pc, #72]	@ (8001868 <MX_I2C1_Init+0x58>)
 800181e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001820:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_I2C1_Init+0x50>)
 800182e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001832:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001834:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800183a:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_I2C1_Init+0x50>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001840:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800184c:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_I2C1_Init+0x50>)
 800184e:	f001 fb53 	bl	8002ef8 <HAL_I2C_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001858:	f000 f9a8 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000041c 	.word	0x2000041c
 8001864:	40005400 	.word	0x40005400
 8001868:	000186a0 	.word	0x000186a0

0800186c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <MX_IWDG_Init+0x2c>)
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <MX_IWDG_Init+0x30>)
 8001874:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8001876:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <MX_IWDG_Init+0x2c>)
 8001878:	2205      	movs	r2, #5
 800187a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2500-1;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <MX_IWDG_Init+0x2c>)
 800187e:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001882:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001884:	4804      	ldr	r0, [pc, #16]	@ (8001898 <MX_IWDG_Init+0x2c>)
 8001886:	f001 fc7b 	bl	8003180 <HAL_IWDG_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001890:	f000 f98c 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001894:	bf00      	nop
 8001896:	bd80      	pop	{r7, pc}
 8001898:	200003c8 	.word	0x200003c8
 800189c:	40003000 	.word	0x40003000

080018a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018a4:	4b17      	ldr	r3, [pc, #92]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018a6:	4a18      	ldr	r2, [pc, #96]	@ (8001908 <MX_SPI2_Init+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018aa:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018b2:	4b14      	ldr	r3, [pc, #80]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b8:	4b12      	ldr	r3, [pc, #72]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018be:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e4:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018ec:	220a      	movs	r2, #10
 80018ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	@ (8001904 <MX_SPI2_Init+0x64>)
 80018f2:	f002 f9eb 	bl	8003ccc <HAL_SPI_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018fc:	f000 f956 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000470 	.word	0x20000470
 8001908:	40003800 	.word	0x40003800

0800190c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001922:	1d3b      	adds	r3, r7, #4
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800192a:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <MX_TIM3_Init+0x98>)
 800192c:	4a1e      	ldr	r2, [pc, #120]	@ (80019a8 <MX_TIM3_Init+0x9c>)
 800192e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <MX_TIM3_Init+0x98>)
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <MX_TIM3_Init+0x98>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800193c:	4b19      	ldr	r3, [pc, #100]	@ (80019a4 <MX_TIM3_Init+0x98>)
 800193e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001942:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001944:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <MX_TIM3_Init+0x98>)
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194a:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <MX_TIM3_Init+0x98>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001950:	4814      	ldr	r0, [pc, #80]	@ (80019a4 <MX_TIM3_Init+0x98>)
 8001952:	f002 fa44 	bl	8003dde <HAL_TIM_Base_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800195c:	f000 f926 	bl	8001bac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001964:	2300      	movs	r3, #0
 8001966:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	4619      	mov	r1, r3
 800196e:	480d      	ldr	r0, [pc, #52]	@ (80019a4 <MX_TIM3_Init+0x98>)
 8001970:	f002 fb23 	bl	8003fba <HAL_TIM_SlaveConfigSynchro>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800197a:	f000 f917 	bl	8001bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	@ (80019a4 <MX_TIM3_Init+0x98>)
 800198c:	f002 fd0e 	bl	80043ac <HAL_TIMEx_MasterConfigSynchronization>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001996:	f000 f909 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3720      	adds	r7, #32
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200004c8 	.word	0x200004c8
 80019a8:	40000400 	.word	0x40000400

080019ac <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_UART5_Init+0x4c>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <MX_UART5_Init+0x50>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <MX_UART5_Init+0x4c>)
 80019b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019bc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_UART5_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_UART5_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <MX_UART5_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_UART5_Init+0x4c>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <MX_UART5_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_UART5_Init+0x4c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <MX_UART5_Init+0x4c>)
 80019e4:	f002 fd5e 	bl	80044a4 <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80019ee:	f000 f8dd 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000510 	.word	0x20000510
 80019fc:	40005000 	.word	0x40005000

08001a00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a04:	4b11      	ldr	r3, [pc, #68]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	@ (8001a50 <MX_USART1_UART_Init+0x50>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a30:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a32:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a38:	4804      	ldr	r0, [pc, #16]	@ (8001a4c <MX_USART1_UART_Init+0x4c>)
 8001a3a:	f002 fd33 	bl	80044a4 <HAL_UART_Init>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001a44:	f000 f8b2 	bl	8001bac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000558 	.word	0x20000558
 8001a50:	40011000 	.word	0x40011000

08001a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a7a:	4b49      	ldr	r3, [pc, #292]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b45      	ldr	r3, [pc, #276]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8e:	4a44      	ldr	r2, [pc, #272]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a96:	4b42      	ldr	r3, [pc, #264]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	4a3d      	ldr	r2, [pc, #244]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	4b37      	ldr	r3, [pc, #220]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	4a36      	ldr	r2, [pc, #216]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ace:	4b34      	ldr	r3, [pc, #208]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4b30      	ldr	r3, [pc, #192]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001ae4:	f043 0308 	orr.w	r3, r3, #8
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b2d      	ldr	r3, [pc, #180]	@ (8001ba0 <MX_GPIO_Init+0x14c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	603b      	str	r3, [r7, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001afc:	4829      	ldr	r0, [pc, #164]	@ (8001ba4 <MX_GPIO_Init+0x150>)
 8001afe:	f001 f9c7 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b08:	4827      	ldr	r0, [pc, #156]	@ (8001ba8 <MX_GPIO_Init+0x154>)
 8001b0a:	f001 f9c1 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b0e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	481f      	ldr	r0, [pc, #124]	@ (8001ba4 <MX_GPIO_Init+0x150>)
 8001b28:	f001 f81e 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 8001b2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4818      	ldr	r0, [pc, #96]	@ (8001ba8 <MX_GPIO_Init+0x154>)
 8001b46:	f001 f80f 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8001b4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4812      	ldr	r0, [pc, #72]	@ (8001ba8 <MX_GPIO_Init+0x154>)
 8001b60:	f001 f802 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b64:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	480b      	ldr	r0, [pc, #44]	@ (8001ba8 <MX_GPIO_Init+0x154>)
 8001b7a:	f000 fff5 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001b7e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4804      	ldr	r0, [pc, #16]	@ (8001ba4 <MX_GPIO_Init+0x150>)
 8001b94:	f000 ffe8 	bl	8002b68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	@ 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40020800 	.word	0x40020800
 8001ba8:	40020400 	.word	0x40020400

08001bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb0:	b672      	cpsid	i
}
 8001bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <Error_Handler+0x8>

08001bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <HAL_MspInit+0x4c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c04 <HAL_MspInit+0x4c>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bce:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <HAL_MspInit+0x4c>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bd6:	607b      	str	r3, [r7, #4]
 8001bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <HAL_MspInit+0x4c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	4a08      	ldr	r2, [pc, #32]	@ (8001c04 <HAL_MspInit+0x4c>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bea:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <HAL_MspInit+0x4c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf2:	603b      	str	r3, [r7, #0]
 8001bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800

08001c08 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	@ 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a24      	ldr	r2, [pc, #144]	@ (8001cb8 <HAL_ADC_MspInit+0xb0>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d141      	bne.n	8001cae <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	4b23      	ldr	r3, [pc, #140]	@ (8001cbc <HAL_ADC_MspInit+0xb4>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a22      	ldr	r2, [pc, #136]	@ (8001cbc <HAL_ADC_MspInit+0xb4>)
 8001c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b20      	ldr	r3, [pc, #128]	@ (8001cbc <HAL_ADC_MspInit+0xb4>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c42:	613b      	str	r3, [r7, #16]
 8001c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cbc <HAL_ADC_MspInit+0xb4>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cbc <HAL_ADC_MspInit+0xb4>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c56:	4b19      	ldr	r3, [pc, #100]	@ (8001cbc <HAL_ADC_MspInit+0xb4>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	4b15      	ldr	r3, [pc, #84]	@ (8001cbc <HAL_ADC_MspInit+0xb4>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6a:	4a14      	ldr	r2, [pc, #80]	@ (8001cbc <HAL_ADC_MspInit+0xb4>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c72:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <HAL_ADC_MspInit+0xb4>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001c7e:	23fe      	movs	r3, #254	@ 0xfe
 8001c80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c82:	2303      	movs	r3, #3
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480b      	ldr	r0, [pc, #44]	@ (8001cc0 <HAL_ADC_MspInit+0xb8>)
 8001c92:	f000 ff69 	bl	8002b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca2:	f107 0314 	add.w	r3, r7, #20
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4806      	ldr	r0, [pc, #24]	@ (8001cc4 <HAL_ADC_MspInit+0xbc>)
 8001caa:	f000 ff5d 	bl	8002b68 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001cae:	bf00      	nop
 8001cb0:	3728      	adds	r7, #40	@ 0x28
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40012000 	.word	0x40012000
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40020400 	.word	0x40020400

08001cc8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001d04 <HAL_CRC_MspInit+0x3c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	4b0a      	ldr	r3, [pc, #40]	@ (8001d08 <HAL_CRC_MspInit+0x40>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	4a09      	ldr	r2, [pc, #36]	@ (8001d08 <HAL_CRC_MspInit+0x40>)
 8001ce4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cea:	4b07      	ldr	r3, [pc, #28]	@ (8001d08 <HAL_CRC_MspInit+0x40>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40023000 	.word	0x40023000
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_I2C_MspInit+0x84>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d12b      	bne.n	8001d86 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d36:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d4a:	23c0      	movs	r3, #192	@ 0xc0
 8001d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d4e:	2312      	movs	r3, #18
 8001d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4619      	mov	r1, r3
 8001d64:	480c      	ldr	r0, [pc, #48]	@ (8001d98 <HAL_I2C_MspInit+0x8c>)
 8001d66:	f000 feff 	bl	8002b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	4a08      	ldr	r2, [pc, #32]	@ (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_I2C_MspInit+0x88>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	@ 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40005400 	.word	0x40005400
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020400 	.word	0x40020400

08001d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a30      	ldr	r2, [pc, #192]	@ (8001e7c <HAL_SPI_MspInit+0xe0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d15a      	bne.n	8001e74 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e80 <HAL_SPI_MspInit+0xe4>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	4a2e      	ldr	r2, [pc, #184]	@ (8001e80 <HAL_SPI_MspInit+0xe4>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dce:	4b2c      	ldr	r3, [pc, #176]	@ (8001e80 <HAL_SPI_MspInit+0xe4>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b28      	ldr	r3, [pc, #160]	@ (8001e80 <HAL_SPI_MspInit+0xe4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a27      	ldr	r2, [pc, #156]	@ (8001e80 <HAL_SPI_MspInit+0xe4>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b25      	ldr	r3, [pc, #148]	@ (8001e80 <HAL_SPI_MspInit+0xe4>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	4b21      	ldr	r3, [pc, #132]	@ (8001e80 <HAL_SPI_MspInit+0xe4>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a20      	ldr	r2, [pc, #128]	@ (8001e80 <HAL_SPI_MspInit+0xe4>)
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <HAL_SPI_MspInit+0xe4>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e12:	2302      	movs	r3, #2
 8001e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001e22:	2307      	movs	r3, #7
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e26:	f107 0314 	add.w	r3, r7, #20
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4815      	ldr	r0, [pc, #84]	@ (8001e84 <HAL_SPI_MspInit+0xe8>)
 8001e2e:	f000 fe9b 	bl	8002b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e32:	2304      	movs	r3, #4
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e42:	2305      	movs	r3, #5
 8001e44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480d      	ldr	r0, [pc, #52]	@ (8001e84 <HAL_SPI_MspInit+0xe8>)
 8001e4e:	f000 fe8b 	bl	8002b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e64:	2305      	movs	r3, #5
 8001e66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	@ (8001e88 <HAL_SPI_MspInit+0xec>)
 8001e70:	f000 fe7a 	bl	8002b68 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001e74:	bf00      	nop
 8001e76:	3728      	adds	r7, #40	@ 0x28
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40003800 	.word	0x40003800
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020400 	.word	0x40020400

08001e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0b      	ldr	r2, [pc, #44]	@ (8001ec8 <HAL_TIM_Base_MspInit+0x3c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d10d      	bne.n	8001eba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <HAL_TIM_Base_MspInit+0x40>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea6:	4a09      	ldr	r2, [pc, #36]	@ (8001ecc <HAL_TIM_Base_MspInit+0x40>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eae:	4b07      	ldr	r3, [pc, #28]	@ (8001ecc <HAL_TIM_Base_MspInit+0x40>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001eba:	bf00      	nop
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	@ 0x30
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a4a      	ldr	r2, [pc, #296]	@ (8002018 <HAL_UART_MspInit+0x148>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d153      	bne.n	8001f9a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
 8001ef6:	4b49      	ldr	r3, [pc, #292]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	4a48      	ldr	r2, [pc, #288]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001efc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f02:	4b46      	ldr	r3, [pc, #280]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f0a:	61bb      	str	r3, [r7, #24]
 8001f0c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	4b42      	ldr	r3, [pc, #264]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a41      	ldr	r2, [pc, #260]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0304 	and.w	r3, r3, #4
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a3a      	ldr	r2, [pc, #232]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b38      	ldr	r3, [pc, #224]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5c:	f107 031c 	add.w	r3, r7, #28
 8001f60:	4619      	mov	r1, r3
 8001f62:	482f      	ldr	r0, [pc, #188]	@ (8002020 <HAL_UART_MspInit+0x150>)
 8001f64:	f000 fe00 	bl	8002b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	4828      	ldr	r0, [pc, #160]	@ (8002024 <HAL_UART_MspInit+0x154>)
 8001f84:	f000 fdf0 	bl	8002b68 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2035      	movs	r0, #53	@ 0x35
 8001f8e:	f000 fcea 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001f92:	2035      	movs	r0, #53	@ 0x35
 8001f94:	f000 fd03 	bl	800299e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f98:	e039      	b.n	800200e <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a22      	ldr	r2, [pc, #136]	@ (8002028 <HAL_UART_MspInit+0x158>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d134      	bne.n	800200e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	4b1c      	ldr	r3, [pc, #112]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fac:	4a1b      	ldr	r2, [pc, #108]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001fae:	f043 0310 	orr.w	r3, r3, #16
 8001fb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb4:	4b19      	ldr	r3, [pc, #100]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	4b15      	ldr	r3, [pc, #84]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc8:	4a14      	ldr	r2, [pc, #80]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001fca:	f043 0301 	orr.w	r3, r3, #1
 8001fce:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <HAL_UART_MspInit+0x14c>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001fdc:	f44f 53b0 	mov.w	r3, #5632	@ 0x1600
 8001fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fee:	2307      	movs	r3, #7
 8001ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480c      	ldr	r0, [pc, #48]	@ (800202c <HAL_UART_MspInit+0x15c>)
 8001ffa:	f000 fdb5 	bl	8002b68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2025      	movs	r0, #37	@ 0x25
 8002004:	f000 fcaf 	bl	8002966 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002008:	2025      	movs	r0, #37	@ 0x25
 800200a:	f000 fcc8 	bl	800299e <HAL_NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3730      	adds	r7, #48	@ 0x30
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40005000 	.word	0x40005000
 800201c:	40023800 	.word	0x40023800
 8002020:	40020800 	.word	0x40020800
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40011000 	.word	0x40011000
 800202c:	40020000 	.word	0x40020000

08002030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <NMI_Handler+0x4>

08002038 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <HardFault_Handler+0x4>

08002040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <MemManage_Handler+0x4>

08002048 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204c:	bf00      	nop
 800204e:	e7fd      	b.n	800204c <BusFault_Handler+0x4>

08002050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002054:	bf00      	nop
 8002056:	e7fd      	b.n	8002054 <UsageFault_Handler+0x4>

08002058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002086:	f000 f89b 	bl	80021c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <UART5_IRQHandler+0x10>)
 8002096:	f002 fc77 	bl	8004988 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000510 	.word	0x20000510

080020a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002100 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020cc:	f7ff ffea 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020d2:	490d      	ldr	r1, [pc, #52]	@ (8002108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d4:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020f6:	f003 fbf7 	bl	80058e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fa:	f7ff fa87 	bl	800160c <main>
  bx  lr    
 80020fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002100:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800210c:	08005c0c 	.word	0x08005c0c
  ldr r2, =_sbss
 8002110:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002114:	200005a4 	.word	0x200005a4

08002118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC_IRQHandler>
	...

0800211c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002120:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0d      	ldr	r2, [pc, #52]	@ (800215c <HAL_Init+0x40>)
 8002126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_Init+0x40>)
 8002132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a07      	ldr	r2, [pc, #28]	@ (800215c <HAL_Init+0x40>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002144:	2003      	movs	r0, #3
 8002146:	f000 fc03 	bl	8002950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214a:	200f      	movs	r0, #15
 800214c:	f000 f808 	bl	8002160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002150:	f7ff fd32 	bl	8001bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023c00 	.word	0x40023c00

08002160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_InitTick+0x54>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_InitTick+0x58>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002176:	fbb3 f3f1 	udiv	r3, r3, r1
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fc29 	bl	80029d6 <HAL_SYSTICK_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e00e      	b.n	80021ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b0f      	cmp	r3, #15
 8002192:	d80a      	bhi.n	80021aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002194:	2200      	movs	r2, #0
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f000 fbe3 	bl	8002966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a0:	4a06      	ldr	r2, [pc, #24]	@ (80021bc <HAL_InitTick+0x5c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000000 	.word	0x20000000
 80021b8:	20000008 	.word	0x20000008
 80021bc:	20000004 	.word	0x20000004

080021c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_IncTick+0x20>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_IncTick+0x24>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <HAL_IncTick+0x24>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000008 	.word	0x20000008
 80021e4:	200005a0 	.word	0x200005a0

080021e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	200005a0 	.word	0x200005a0

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff ffee 	bl	80021e8 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d005      	beq.n	8002226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_Delay+0x44>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002226:	bf00      	nop
 8002228:	f7ff ffde 	bl	80021e8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	d8f7      	bhi.n	8002228 <HAL_Delay+0x28>
  {
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000008 	.word	0x20000008

08002248 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e033      	b.n	80022c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fcce 	bl	8001c08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d118      	bne.n	80022b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800228e:	f023 0302 	bic.w	r3, r3, #2
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f94a 	bl	8002534 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80022b6:	e001      	b.n	80022bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x1c>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e113      	b.n	8002514 <HAL_ADC_ConfigChannel+0x244>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b09      	cmp	r3, #9
 80022fa:	d925      	bls.n	8002348 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68d9      	ldr	r1, [r3, #12]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	b29b      	uxth	r3, r3
 8002308:	461a      	mov	r2, r3
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	3b1e      	subs	r3, #30
 8002312:	2207      	movs	r2, #7
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43da      	mvns	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	400a      	ands	r2, r1
 8002320:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68d9      	ldr	r1, [r3, #12]
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	b29b      	uxth	r3, r3
 8002332:	4618      	mov	r0, r3
 8002334:	4603      	mov	r3, r0
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4403      	add	r3, r0
 800233a:	3b1e      	subs	r3, #30
 800233c:	409a      	lsls	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	60da      	str	r2, [r3, #12]
 8002346:	e022      	b.n	800238e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6919      	ldr	r1, [r3, #16]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	461a      	mov	r2, r3
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	2207      	movs	r2, #7
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43da      	mvns	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	400a      	ands	r2, r1
 800236a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6919      	ldr	r1, [r3, #16]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	b29b      	uxth	r3, r3
 800237c:	4618      	mov	r0, r3
 800237e:	4603      	mov	r3, r0
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4403      	add	r3, r0
 8002384:	409a      	lsls	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	2b06      	cmp	r3, #6
 8002394:	d824      	bhi.n	80023e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	3b05      	subs	r3, #5
 80023a8:	221f      	movs	r2, #31
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	400a      	ands	r2, r1
 80023b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	3b05      	subs	r3, #5
 80023d2:	fa00 f203 	lsl.w	r2, r0, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80023de:	e04c      	b.n	800247a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	2b0c      	cmp	r3, #12
 80023e6:	d824      	bhi.n	8002432 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	3b23      	subs	r3, #35	@ 0x23
 80023fa:	221f      	movs	r2, #31
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43da      	mvns	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	400a      	ands	r2, r1
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	4618      	mov	r0, r3
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	3b23      	subs	r3, #35	@ 0x23
 8002424:	fa00 f203 	lsl.w	r2, r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002430:	e023      	b.n	800247a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	4413      	add	r3, r2
 8002442:	3b41      	subs	r3, #65	@ 0x41
 8002444:	221f      	movs	r2, #31
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43da      	mvns	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	400a      	ands	r2, r1
 8002452:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	4618      	mov	r0, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	3b41      	subs	r3, #65	@ 0x41
 800246e:	fa00 f203 	lsl.w	r2, r0, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800247a:	4b29      	ldr	r3, [pc, #164]	@ (8002520 <HAL_ADC_ConfigChannel+0x250>)
 800247c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a28      	ldr	r2, [pc, #160]	@ (8002524 <HAL_ADC_ConfigChannel+0x254>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d10f      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1d8>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b12      	cmp	r3, #18
 800248e:	d10b      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002524 <HAL_ADC_ConfigChannel+0x254>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12b      	bne.n	800250a <HAL_ADC_ConfigChannel+0x23a>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002528 <HAL_ADC_ConfigChannel+0x258>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d003      	beq.n	80024c4 <HAL_ADC_ConfigChannel+0x1f4>
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b11      	cmp	r3, #17
 80024c2:	d122      	bne.n	800250a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a11      	ldr	r2, [pc, #68]	@ (8002528 <HAL_ADC_ConfigChannel+0x258>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d111      	bne.n	800250a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024e6:	4b11      	ldr	r3, [pc, #68]	@ (800252c <HAL_ADC_ConfigChannel+0x25c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a11      	ldr	r2, [pc, #68]	@ (8002530 <HAL_ADC_ConfigChannel+0x260>)
 80024ec:	fba2 2303 	umull	r2, r3, r2, r3
 80024f0:	0c9a      	lsrs	r2, r3, #18
 80024f2:	4613      	mov	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80024fc:	e002      	b.n	8002504 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	3b01      	subs	r3, #1
 8002502:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f9      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40012300 	.word	0x40012300
 8002524:	40012000 	.word	0x40012000
 8002528:	10000012 	.word	0x10000012
 800252c:	20000000 	.word	0x20000000
 8002530:	431bde83 	.word	0x431bde83

08002534 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253c:	4b79      	ldr	r3, [pc, #484]	@ (8002724 <ADC_Init+0x1f0>)
 800253e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	431a      	orrs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	021a      	lsls	r2, r3, #8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800258c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6859      	ldr	r1, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6899      	ldr	r1, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c6:	4a58      	ldr	r2, [pc, #352]	@ (8002728 <ADC_Init+0x1f4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d022      	beq.n	8002612 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80025da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6899      	ldr	r1, [r3, #8]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	e00f      	b.n	8002632 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002630:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0202 	bic.w	r2, r2, #2
 8002640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6899      	ldr	r1, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7e1b      	ldrb	r3, [r3, #24]
 800264c:	005a      	lsls	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01b      	beq.n	8002698 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800266e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800267e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268a:	3b01      	subs	r3, #1
 800268c:	035a      	lsls	r2, r3, #13
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	e007      	b.n	80026a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80026b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	051a      	lsls	r2, r3, #20
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80026dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6899      	ldr	r1, [r3, #8]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80026ea:	025a      	lsls	r2, r3, #9
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	430a      	orrs	r2, r1
 80026f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6899      	ldr	r1, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	029a      	lsls	r2, r3, #10
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	609a      	str	r2, [r3, #8]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	40012300 	.word	0x40012300
 8002728:	0f000001 	.word	0x0f000001

0800272c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800273c:	4b0c      	ldr	r3, [pc, #48]	@ (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002748:	4013      	ands	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800275c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800275e:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <__NVIC_SetPriorityGrouping+0x44>)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	60d3      	str	r3, [r2, #12]
}
 8002764:	bf00      	nop
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <__NVIC_GetPriorityGrouping+0x18>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	0a1b      	lsrs	r3, r3, #8
 800277e:	f003 0307 	and.w	r3, r3, #7
}
 8002782:	4618      	mov	r0, r3
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	db0b      	blt.n	80027ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	f003 021f 	and.w	r2, r3, #31
 80027a8:	4907      	ldr	r1, [pc, #28]	@ (80027c8 <__NVIC_EnableIRQ+0x38>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	2001      	movs	r0, #1
 80027b2:	fa00 f202 	lsl.w	r2, r0, r2
 80027b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000e100 	.word	0xe000e100

080027cc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db12      	blt.n	8002804 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	490a      	ldr	r1, [pc, #40]	@ (8002810 <__NVIC_DisableIRQ+0x44>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2001      	movs	r0, #1
 80027ee:	fa00 f202 	lsl.w	r2, r0, r2
 80027f2:	3320      	adds	r3, #32
 80027f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80027f8:	f3bf 8f4f 	dsb	sy
}
 80027fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80027fe:	f3bf 8f6f 	isb	sy
}
 8002802:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100

08002814 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	2b00      	cmp	r3, #0
 8002824:	db0c      	blt.n	8002840 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	f003 021f 	and.w	r2, r3, #31
 800282c:	4907      	ldr	r1, [pc, #28]	@ (800284c <__NVIC_ClearPendingIRQ+0x38>)
 800282e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002832:	095b      	lsrs	r3, r3, #5
 8002834:	2001      	movs	r0, #1
 8002836:	fa00 f202 	lsl.w	r2, r0, r2
 800283a:	3360      	adds	r3, #96	@ 0x60
 800283c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100

08002850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	4603      	mov	r3, r0
 8002858:	6039      	str	r1, [r7, #0]
 800285a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002860:	2b00      	cmp	r3, #0
 8002862:	db0a      	blt.n	800287a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	b2da      	uxtb	r2, r3
 8002868:	490c      	ldr	r1, [pc, #48]	@ (800289c <__NVIC_SetPriority+0x4c>)
 800286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286e:	0112      	lsls	r2, r2, #4
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	440b      	add	r3, r1
 8002874:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002878:	e00a      	b.n	8002890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	b2da      	uxtb	r2, r3
 800287e:	4908      	ldr	r1, [pc, #32]	@ (80028a0 <__NVIC_SetPriority+0x50>)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	3b04      	subs	r3, #4
 8002888:	0112      	lsls	r2, r2, #4
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	440b      	add	r3, r1
 800288e:	761a      	strb	r2, [r3, #24]
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000e100 	.word	0xe000e100
 80028a0:	e000ed00 	.word	0xe000ed00

080028a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	@ 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f1c3 0307 	rsb	r3, r3, #7
 80028be:	2b04      	cmp	r3, #4
 80028c0:	bf28      	it	cs
 80028c2:	2304      	movcs	r3, #4
 80028c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3304      	adds	r3, #4
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <NVIC_EncodePriority+0x30>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3b03      	subs	r3, #3
 80028d2:	e000      	b.n	80028d6 <NVIC_EncodePriority+0x32>
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 32ff 	mov.w	r2, #4294967295
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	401a      	ands	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ec:	f04f 31ff 	mov.w	r1, #4294967295
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	fa01 f303 	lsl.w	r3, r1, r3
 80028f6:	43d9      	mvns	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028fc:	4313      	orrs	r3, r2
         );
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3724      	adds	r7, #36	@ 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800291c:	d301      	bcc.n	8002922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800291e:	2301      	movs	r3, #1
 8002920:	e00f      	b.n	8002942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002922:	4a0a      	ldr	r2, [pc, #40]	@ (800294c <SysTick_Config+0x40>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3b01      	subs	r3, #1
 8002928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800292a:	210f      	movs	r1, #15
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f7ff ff8e 	bl	8002850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002934:	4b05      	ldr	r3, [pc, #20]	@ (800294c <SysTick_Config+0x40>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293a:	4b04      	ldr	r3, [pc, #16]	@ (800294c <SysTick_Config+0x40>)
 800293c:	2207      	movs	r2, #7
 800293e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	e000e010 	.word	0xe000e010

08002950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff fee7 	bl	800272c <__NVIC_SetPriorityGrouping>
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
 8002972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002978:	f7ff fefc 	bl	8002774 <__NVIC_GetPriorityGrouping>
 800297c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	68b9      	ldr	r1, [r7, #8]
 8002982:	6978      	ldr	r0, [r7, #20]
 8002984:	f7ff ff8e 	bl	80028a4 <NVIC_EncodePriority>
 8002988:	4602      	mov	r2, r0
 800298a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298e:	4611      	mov	r1, r2
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff ff5d 	bl	8002850 <__NVIC_SetPriority>
}
 8002996:	bf00      	nop
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff feef 	bl	8002790 <__NVIC_EnableIRQ>
}
 80029b2:	bf00      	nop
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	4603      	mov	r3, r0
 80029c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80029c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff feff 	bl	80027cc <__NVIC_DisableIRQ>
}
 80029ce:	bf00      	nop
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7ff ff94 	bl	800290c <SysTick_Config>
 80029e4:	4603      	mov	r3, r0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff ff09 	bl	8002814 <__NVIC_ClearPendingIRQ>
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e00e      	b.n	8002a3a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	795b      	ldrb	r3, [r3, #5]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d105      	bne.n	8002a32 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff f94b 	bl	8001cc8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff fbca 	bl	80021e8 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d008      	beq.n	8002a74 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2280      	movs	r2, #128	@ 0x80
 8002a66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e052      	b.n	8002b1a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 0216 	bic.w	r2, r2, #22
 8002a82:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	695a      	ldr	r2, [r3, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a92:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d103      	bne.n	8002aa4 <HAL_DMA_Abort+0x62>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d007      	beq.n	8002ab4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0208 	bic.w	r2, r2, #8
 8002ab2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ac4:	e013      	b.n	8002aee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ac6:	f7ff fb8f 	bl	80021e8 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d90c      	bls.n	8002aee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2203      	movs	r2, #3
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e015      	b.n	8002b1a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1e4      	bne.n	8002ac6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b00:	223f      	movs	r2, #63	@ 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b083      	sub	sp, #12
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d004      	beq.n	8002b40 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2280      	movs	r2, #128	@ 0x80
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e00c      	b.n	8002b5a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2205      	movs	r2, #5
 8002b44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0201 	bic.w	r2, r2, #1
 8002b56:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	@ 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	e165      	b.n	8002e50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b84:	2201      	movs	r2, #1
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	f040 8154 	bne.w	8002e4a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d005      	beq.n	8002bba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d130      	bne.n	8002c1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	68da      	ldr	r2, [r3, #12]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 0201 	and.w	r2, r3, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0303 	and.w	r3, r3, #3
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d017      	beq.n	8002c58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	69ba      	ldr	r2, [r7, #24]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d123      	bne.n	8002cac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	08da      	lsrs	r2, r3, #3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3208      	adds	r2, #8
 8002c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	220f      	movs	r2, #15
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	08da      	lsrs	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	3208      	adds	r2, #8
 8002ca6:	69b9      	ldr	r1, [r7, #24]
 8002ca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	2203      	movs	r2, #3
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0203 	and.w	r2, r3, #3
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80ae 	beq.w	8002e4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e68 <HAL_GPIO_Init+0x300>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e68 <HAL_GPIO_Init+0x300>)
 8002cf8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8002e68 <HAL_GPIO_Init+0x300>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d0a:	4a58      	ldr	r2, [pc, #352]	@ (8002e6c <HAL_GPIO_Init+0x304>)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	089b      	lsrs	r3, r3, #2
 8002d10:	3302      	adds	r3, #2
 8002d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	220f      	movs	r2, #15
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a4f      	ldr	r2, [pc, #316]	@ (8002e70 <HAL_GPIO_Init+0x308>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d025      	beq.n	8002d82 <HAL_GPIO_Init+0x21a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a4e      	ldr	r2, [pc, #312]	@ (8002e74 <HAL_GPIO_Init+0x30c>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d01f      	beq.n	8002d7e <HAL_GPIO_Init+0x216>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a4d      	ldr	r2, [pc, #308]	@ (8002e78 <HAL_GPIO_Init+0x310>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x212>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4c      	ldr	r2, [pc, #304]	@ (8002e7c <HAL_GPIO_Init+0x314>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x20e>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4b      	ldr	r2, [pc, #300]	@ (8002e80 <HAL_GPIO_Init+0x318>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x20a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4a      	ldr	r2, [pc, #296]	@ (8002e84 <HAL_GPIO_Init+0x31c>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x206>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a49      	ldr	r2, [pc, #292]	@ (8002e88 <HAL_GPIO_Init+0x320>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x202>
 8002d66:	2306      	movs	r3, #6
 8002d68:	e00c      	b.n	8002d84 <HAL_GPIO_Init+0x21c>
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	e00a      	b.n	8002d84 <HAL_GPIO_Init+0x21c>
 8002d6e:	2305      	movs	r3, #5
 8002d70:	e008      	b.n	8002d84 <HAL_GPIO_Init+0x21c>
 8002d72:	2304      	movs	r3, #4
 8002d74:	e006      	b.n	8002d84 <HAL_GPIO_Init+0x21c>
 8002d76:	2303      	movs	r3, #3
 8002d78:	e004      	b.n	8002d84 <HAL_GPIO_Init+0x21c>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e002      	b.n	8002d84 <HAL_GPIO_Init+0x21c>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e000      	b.n	8002d84 <HAL_GPIO_Init+0x21c>
 8002d82:	2300      	movs	r3, #0
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	f002 0203 	and.w	r2, r2, #3
 8002d8a:	0092      	lsls	r2, r2, #2
 8002d8c:	4093      	lsls	r3, r2
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d94:	4935      	ldr	r1, [pc, #212]	@ (8002e6c <HAL_GPIO_Init+0x304>)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	089b      	lsrs	r3, r3, #2
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002da2:	4b3a      	ldr	r3, [pc, #232]	@ (8002e8c <HAL_GPIO_Init+0x324>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dc6:	4a31      	ldr	r2, [pc, #196]	@ (8002e8c <HAL_GPIO_Init+0x324>)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8002e8c <HAL_GPIO_Init+0x324>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002df0:	4a26      	ldr	r2, [pc, #152]	@ (8002e8c <HAL_GPIO_Init+0x324>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002df6:	4b25      	ldr	r3, [pc, #148]	@ (8002e8c <HAL_GPIO_Init+0x324>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <HAL_GPIO_Init+0x324>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e20:	4b1a      	ldr	r3, [pc, #104]	@ (8002e8c <HAL_GPIO_Init+0x324>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e44:	4a11      	ldr	r2, [pc, #68]	@ (8002e8c <HAL_GPIO_Init+0x324>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	2b0f      	cmp	r3, #15
 8002e54:	f67f ae96 	bls.w	8002b84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	3724      	adds	r7, #36	@ 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40013800 	.word	0x40013800
 8002e70:	40020000 	.word	0x40020000
 8002e74:	40020400 	.word	0x40020400
 8002e78:	40020800 	.word	0x40020800
 8002e7c:	40020c00 	.word	0x40020c00
 8002e80:	40021000 	.word	0x40021000
 8002e84:	40021400 	.word	0x40021400
 8002e88:	40021800 	.word	0x40021800
 8002e8c:	40013c00 	.word	0x40013c00

08002e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	807b      	strh	r3, [r7, #2]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea0:	787b      	ldrb	r3, [r7, #1]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ea6:	887a      	ldrh	r2, [r7, #2]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002eac:	e003      	b.n	8002eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	041a      	lsls	r2, r3, #16
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	619a      	str	r2, [r3, #24]
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b085      	sub	sp, #20
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ed4:	887a      	ldrh	r2, [r7, #2]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	041a      	lsls	r2, r3, #16
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	43d9      	mvns	r1, r3
 8002ee0:	887b      	ldrh	r3, [r7, #2]
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	619a      	str	r2, [r3, #24]
}
 8002eea:	bf00      	nop
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e12b      	b.n	8003162 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f7fe fef4 	bl	8001d0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2224      	movs	r2, #36	@ 0x24
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0201 	bic.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f000 fa46 	bl	80033ec <HAL_RCC_GetPCLK1Freq>
 8002f60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4a81      	ldr	r2, [pc, #516]	@ (800316c <HAL_I2C_Init+0x274>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d807      	bhi.n	8002f7c <HAL_I2C_Init+0x84>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a80      	ldr	r2, [pc, #512]	@ (8003170 <HAL_I2C_Init+0x278>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	bf94      	ite	ls
 8002f74:	2301      	movls	r3, #1
 8002f76:	2300      	movhi	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	e006      	b.n	8002f8a <HAL_I2C_Init+0x92>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4a7d      	ldr	r2, [pc, #500]	@ (8003174 <HAL_I2C_Init+0x27c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0e7      	b.n	8003162 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4a78      	ldr	r2, [pc, #480]	@ (8003178 <HAL_I2C_Init+0x280>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	0c9b      	lsrs	r3, r3, #18
 8002f9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a6a      	ldr	r2, [pc, #424]	@ (800316c <HAL_I2C_Init+0x274>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d802      	bhi.n	8002fcc <HAL_I2C_Init+0xd4>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	e009      	b.n	8002fe0 <HAL_I2C_Init+0xe8>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002fd2:	fb02 f303 	mul.w	r3, r2, r3
 8002fd6:	4a69      	ldr	r2, [pc, #420]	@ (800317c <HAL_I2C_Init+0x284>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	099b      	lsrs	r3, r3, #6
 8002fde:	3301      	adds	r3, #1
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ff2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	495c      	ldr	r1, [pc, #368]	@ (800316c <HAL_I2C_Init+0x274>)
 8002ffc:	428b      	cmp	r3, r1
 8002ffe:	d819      	bhi.n	8003034 <HAL_I2C_Init+0x13c>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	1e59      	subs	r1, r3, #1
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	fbb1 f3f3 	udiv	r3, r1, r3
 800300e:	1c59      	adds	r1, r3, #1
 8003010:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003014:	400b      	ands	r3, r1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_I2C_Init+0x138>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e59      	subs	r1, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fbb1 f3f3 	udiv	r3, r1, r3
 8003028:	3301      	adds	r3, #1
 800302a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800302e:	e051      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 8003030:	2304      	movs	r3, #4
 8003032:	e04f      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d111      	bne.n	8003060 <HAL_I2C_Init+0x168>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	1e58      	subs	r0, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf0c      	ite	eq
 8003058:	2301      	moveq	r3, #1
 800305a:	2300      	movne	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e012      	b.n	8003086 <HAL_I2C_Init+0x18e>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	1e58      	subs	r0, r3, #1
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6859      	ldr	r1, [r3, #4]
 8003068:	460b      	mov	r3, r1
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	0099      	lsls	r1, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	fbb0 f3f3 	udiv	r3, r0, r3
 8003076:	3301      	adds	r3, #1
 8003078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800307c:	2b00      	cmp	r3, #0
 800307e:	bf0c      	ite	eq
 8003080:	2301      	moveq	r3, #1
 8003082:	2300      	movne	r3, #0
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_I2C_Init+0x196>
 800308a:	2301      	movs	r3, #1
 800308c:	e022      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10e      	bne.n	80030b4 <HAL_I2C_Init+0x1bc>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	1e58      	subs	r0, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	440b      	add	r3, r1
 80030a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030b2:	e00f      	b.n	80030d4 <HAL_I2C_Init+0x1dc>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1e58      	subs	r0, r3, #1
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6859      	ldr	r1, [r3, #4]
 80030bc:	460b      	mov	r3, r1
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	0099      	lsls	r1, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ca:	3301      	adds	r3, #1
 80030cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	6809      	ldr	r1, [r1, #0]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69da      	ldr	r2, [r3, #28]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003102:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6911      	ldr	r1, [r2, #16]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68d2      	ldr	r2, [r2, #12]
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	430b      	orrs	r3, r1
 8003116:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2220      	movs	r2, #32
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	000186a0 	.word	0x000186a0
 8003170:	001e847f 	.word	0x001e847f
 8003174:	003d08ff 	.word	0x003d08ff
 8003178:	431bde83 	.word	0x431bde83
 800317c:	10624dd3 	.word	0x10624dd3

08003180 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e036      	b.n	8003200 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800319a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f245 5255 	movw	r2, #21845	@ 0x5555
 80031a4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6852      	ldr	r2, [r2, #4]
 80031ae:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6892      	ldr	r2, [r2, #8]
 80031b8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80031ba:	f7ff f815 	bl	80021e8 <HAL_GetTick>
 80031be:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031c0:	e011      	b.n	80031e6 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80031c2:	f7ff f811 	bl	80021e8 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f641 0201 	movw	r2, #6145	@ 0x1801
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d908      	bls.n	80031e6 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e00c      	b.n	8003200 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1e6      	bne.n	80031c2 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80031fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0cc      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b68      	ldr	r3, [pc, #416]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d90c      	bls.n	8003244 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b65      	ldr	r3, [pc, #404]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003232:	4b63      	ldr	r3, [pc, #396]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	429a      	cmp	r2, r3
 800323e:	d001      	beq.n	8003244 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e0b8      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d005      	beq.n	8003268 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800325c:	4b59      	ldr	r3, [pc, #356]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a58      	ldr	r2, [pc, #352]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003266:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003274:	4b53      	ldr	r3, [pc, #332]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	4a52      	ldr	r2, [pc, #328]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800327e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003280:	4b50      	ldr	r3, [pc, #320]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	494d      	ldr	r1, [pc, #308]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	4313      	orrs	r3, r2
 8003290:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d044      	beq.n	8003328 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	4b47      	ldr	r3, [pc, #284]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d119      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e07f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d003      	beq.n	80032c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c6:	4b3f      	ldr	r3, [pc, #252]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d109      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e06f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d6:	4b3b      	ldr	r3, [pc, #236]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e067      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e6:	4b37      	ldr	r3, [pc, #220]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4934      	ldr	r1, [pc, #208]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f8:	f7fe ff76 	bl	80021e8 <HAL_GetTick>
 80032fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fe:	e00a      	b.n	8003316 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003300:	f7fe ff72 	bl	80021e8 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e04f      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	4b2b      	ldr	r3, [pc, #172]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 020c 	and.w	r2, r3, #12
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	429a      	cmp	r2, r3
 8003326:	d1eb      	bne.n	8003300 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003328:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d20c      	bcs.n	8003350 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b22      	ldr	r3, [pc, #136]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b20      	ldr	r3, [pc, #128]	@ (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e032      	b.n	80033b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d008      	beq.n	800336e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800335c:	4b19      	ldr	r3, [pc, #100]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4916      	ldr	r1, [pc, #88]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	4313      	orrs	r3, r2
 800336c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d009      	beq.n	800338e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800337a:	4b12      	ldr	r3, [pc, #72]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	490e      	ldr	r1, [pc, #56]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800338e:	f000 f855 	bl	800343c <HAL_RCC_GetSysClockFreq>
 8003392:	4602      	mov	r2, r0
 8003394:	4b0b      	ldr	r3, [pc, #44]	@ (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	091b      	lsrs	r3, r3, #4
 800339a:	f003 030f 	and.w	r3, r3, #15
 800339e:	490a      	ldr	r1, [pc, #40]	@ (80033c8 <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	5ccb      	ldrb	r3, [r1, r3]
 80033a2:	fa22 f303 	lsr.w	r3, r2, r3
 80033a6:	4a09      	ldr	r2, [pc, #36]	@ (80033cc <HAL_RCC_ClockConfig+0x1c4>)
 80033a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80033aa:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <HAL_RCC_ClockConfig+0x1c8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7fe fed6 	bl	8002160 <HAL_InitTick>

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40023c00 	.word	0x40023c00
 80033c4:	40023800 	.word	0x40023800
 80033c8:	08005ae4 	.word	0x08005ae4
 80033cc:	20000000 	.word	0x20000000
 80033d0:	20000004 	.word	0x20000004

080033d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d8:	4b03      	ldr	r3, [pc, #12]	@ (80033e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033da:	681b      	ldr	r3, [r3, #0]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	20000000 	.word	0x20000000

080033ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f0:	f7ff fff0 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 80033f4:	4602      	mov	r2, r0
 80033f6:	4b05      	ldr	r3, [pc, #20]	@ (800340c <HAL_RCC_GetPCLK1Freq+0x20>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	0a9b      	lsrs	r3, r3, #10
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	4903      	ldr	r1, [pc, #12]	@ (8003410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003402:	5ccb      	ldrb	r3, [r1, r3]
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40023800 	.word	0x40023800
 8003410:	08005af4 	.word	0x08005af4

08003414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003418:	f7ff ffdc 	bl	80033d4 <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b05      	ldr	r3, [pc, #20]	@ (8003434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0b5b      	lsrs	r3, r3, #13
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4903      	ldr	r1, [pc, #12]	@ (8003438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003430:	4618      	mov	r0, r3
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40023800 	.word	0x40023800
 8003438:	08005af4 	.word	0x08005af4

0800343c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800343c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003440:	b0a6      	sub	sp, #152	@ 0x98
 8003442:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003462:	4bc8      	ldr	r3, [pc, #800]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b0c      	cmp	r3, #12
 800346c:	f200 817e 	bhi.w	800376c <HAL_RCC_GetSysClockFreq+0x330>
 8003470:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	080034ad 	.word	0x080034ad
 800347c:	0800376d 	.word	0x0800376d
 8003480:	0800376d 	.word	0x0800376d
 8003484:	0800376d 	.word	0x0800376d
 8003488:	080034b5 	.word	0x080034b5
 800348c:	0800376d 	.word	0x0800376d
 8003490:	0800376d 	.word	0x0800376d
 8003494:	0800376d 	.word	0x0800376d
 8003498:	080034bd 	.word	0x080034bd
 800349c:	0800376d 	.word	0x0800376d
 80034a0:	0800376d 	.word	0x0800376d
 80034a4:	0800376d 	.word	0x0800376d
 80034a8:	08003627 	.word	0x08003627
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034ac:	4bb6      	ldr	r3, [pc, #728]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x34c>)
 80034ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80034b2:	e15f      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034b4:	4bb5      	ldr	r3, [pc, #724]	@ (800378c <HAL_RCC_GetSysClockFreq+0x350>)
 80034b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80034ba:	e15b      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034bc:	4bb1      	ldr	r3, [pc, #708]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034c8:	4bae      	ldr	r3, [pc, #696]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d031      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d4:	4bab      	ldr	r3, [pc, #684]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	2200      	movs	r2, #0
 80034dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80034e8:	2300      	movs	r3, #0
 80034ea:	667b      	str	r3, [r7, #100]	@ 0x64
 80034ec:	4ba7      	ldr	r3, [pc, #668]	@ (800378c <HAL_RCC_GetSysClockFreq+0x350>)
 80034ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80034f2:	462a      	mov	r2, r5
 80034f4:	fb03 f202 	mul.w	r2, r3, r2
 80034f8:	2300      	movs	r3, #0
 80034fa:	4621      	mov	r1, r4
 80034fc:	fb01 f303 	mul.w	r3, r1, r3
 8003500:	4413      	add	r3, r2
 8003502:	4aa2      	ldr	r2, [pc, #648]	@ (800378c <HAL_RCC_GetSysClockFreq+0x350>)
 8003504:	4621      	mov	r1, r4
 8003506:	fba1 1202 	umull	r1, r2, r1, r2
 800350a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800350c:	460a      	mov	r2, r1
 800350e:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003510:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003512:	4413      	add	r3, r2
 8003514:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800351a:	2200      	movs	r2, #0
 800351c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800351e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003520:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003524:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003528:	f7fc fe6c 	bl	8000204 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003536:	e064      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003538:	4b92      	ldr	r3, [pc, #584]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	099b      	lsrs	r3, r3, #6
 800353e:	2200      	movs	r2, #0
 8003540:	653b      	str	r3, [r7, #80]	@ 0x50
 8003542:	657a      	str	r2, [r7, #84]	@ 0x54
 8003544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800354a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800354c:	2300      	movs	r3, #0
 800354e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003550:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003554:	4622      	mov	r2, r4
 8003556:	462b      	mov	r3, r5
 8003558:	f04f 0000 	mov.w	r0, #0
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	0159      	lsls	r1, r3, #5
 8003562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003566:	0150      	lsls	r0, r2, #5
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4621      	mov	r1, r4
 800356e:	1a51      	subs	r1, r2, r1
 8003570:	6139      	str	r1, [r7, #16]
 8003572:	4629      	mov	r1, r5
 8003574:	eb63 0301 	sbc.w	r3, r3, r1
 8003578:	617b      	str	r3, [r7, #20]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003586:	4659      	mov	r1, fp
 8003588:	018b      	lsls	r3, r1, #6
 800358a:	4651      	mov	r1, sl
 800358c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003590:	4651      	mov	r1, sl
 8003592:	018a      	lsls	r2, r1, #6
 8003594:	4651      	mov	r1, sl
 8003596:	ebb2 0801 	subs.w	r8, r2, r1
 800359a:	4659      	mov	r1, fp
 800359c:	eb63 0901 	sbc.w	r9, r3, r1
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035b4:	4690      	mov	r8, r2
 80035b6:	4699      	mov	r9, r3
 80035b8:	4623      	mov	r3, r4
 80035ba:	eb18 0303 	adds.w	r3, r8, r3
 80035be:	60bb      	str	r3, [r7, #8]
 80035c0:	462b      	mov	r3, r5
 80035c2:	eb49 0303 	adc.w	r3, r9, r3
 80035c6:	60fb      	str	r3, [r7, #12]
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035d4:	4629      	mov	r1, r5
 80035d6:	028b      	lsls	r3, r1, #10
 80035d8:	4621      	mov	r1, r4
 80035da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035de:	4621      	mov	r1, r4
 80035e0:	028a      	lsls	r2, r1, #10
 80035e2:	4610      	mov	r0, r2
 80035e4:	4619      	mov	r1, r3
 80035e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ea:	2200      	movs	r2, #0
 80035ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80035ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80035f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035f4:	f7fc fe06 	bl	8000204 <__aeabi_uldivmod>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4613      	mov	r3, r2
 80035fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003602:	4b60      	ldr	r3, [pc, #384]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	0c1b      	lsrs	r3, r3, #16
 8003608:	f003 0303 	and.w	r3, r3, #3
 800360c:	3301      	adds	r3, #1
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003614:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003618:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003624:	e0a6      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003626:	4b57      	ldr	r3, [pc, #348]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800362e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003632:	4b54      	ldr	r3, [pc, #336]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d02a      	beq.n	8003694 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363e:	4b51      	ldr	r3, [pc, #324]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	2200      	movs	r2, #0
 8003646:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003648:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800364a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003650:	2100      	movs	r1, #0
 8003652:	4b4e      	ldr	r3, [pc, #312]	@ (800378c <HAL_RCC_GetSysClockFreq+0x350>)
 8003654:	fb03 f201 	mul.w	r2, r3, r1
 8003658:	2300      	movs	r3, #0
 800365a:	fb00 f303 	mul.w	r3, r0, r3
 800365e:	4413      	add	r3, r2
 8003660:	4a4a      	ldr	r2, [pc, #296]	@ (800378c <HAL_RCC_GetSysClockFreq+0x350>)
 8003662:	fba0 1202 	umull	r1, r2, r0, r2
 8003666:	677a      	str	r2, [r7, #116]	@ 0x74
 8003668:	460a      	mov	r2, r1
 800366a:	673a      	str	r2, [r7, #112]	@ 0x70
 800366c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800366e:	4413      	add	r3, r2
 8003670:	677b      	str	r3, [r7, #116]	@ 0x74
 8003672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003676:	2200      	movs	r2, #0
 8003678:	633b      	str	r3, [r7, #48]	@ 0x30
 800367a:	637a      	str	r2, [r7, #52]	@ 0x34
 800367c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003680:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003684:	f7fc fdbe 	bl	8000204 <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003692:	e05b      	b.n	800374c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003694:	4b3b      	ldr	r3, [pc, #236]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	099b      	lsrs	r3, r3, #6
 800369a:	2200      	movs	r2, #0
 800369c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800369e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a6:	623b      	str	r3, [r7, #32]
 80036a8:	2300      	movs	r3, #0
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036b0:	4642      	mov	r2, r8
 80036b2:	464b      	mov	r3, r9
 80036b4:	f04f 0000 	mov.w	r0, #0
 80036b8:	f04f 0100 	mov.w	r1, #0
 80036bc:	0159      	lsls	r1, r3, #5
 80036be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c2:	0150      	lsls	r0, r2, #5
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	4641      	mov	r1, r8
 80036ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ce:	4649      	mov	r1, r9
 80036d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036e8:	ebb2 040a 	subs.w	r4, r2, sl
 80036ec:	eb63 050b 	sbc.w	r5, r3, fp
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	00eb      	lsls	r3, r5, #3
 80036fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fe:	00e2      	lsls	r2, r4, #3
 8003700:	4614      	mov	r4, r2
 8003702:	461d      	mov	r5, r3
 8003704:	4643      	mov	r3, r8
 8003706:	18e3      	adds	r3, r4, r3
 8003708:	603b      	str	r3, [r7, #0]
 800370a:	464b      	mov	r3, r9
 800370c:	eb45 0303 	adc.w	r3, r5, r3
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	f04f 0200 	mov.w	r2, #0
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800371e:	4629      	mov	r1, r5
 8003720:	028b      	lsls	r3, r1, #10
 8003722:	4621      	mov	r1, r4
 8003724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003728:	4621      	mov	r1, r4
 800372a:	028a      	lsls	r2, r1, #10
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003734:	2200      	movs	r2, #0
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	61fa      	str	r2, [r7, #28]
 800373a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800373e:	f7fc fd61 	bl	8000204 <__aeabi_uldivmod>
 8003742:	4602      	mov	r2, r0
 8003744:	460b      	mov	r3, r1
 8003746:	4613      	mov	r3, r2
 8003748:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800374c:	4b0d      	ldr	r3, [pc, #52]	@ (8003784 <HAL_RCC_GetSysClockFreq+0x348>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	0f1b      	lsrs	r3, r3, #28
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800375a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800375e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003762:	fbb2 f3f3 	udiv	r3, r2, r3
 8003766:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800376a:	e003      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_RCC_GetSysClockFreq+0x34c>)
 800376e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003772:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003774:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003778:	4618      	mov	r0, r3
 800377a:	3798      	adds	r7, #152	@ 0x98
 800377c:	46bd      	mov	sp, r7
 800377e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003782:	bf00      	nop
 8003784:	40023800 	.word	0x40023800
 8003788:	00f42400 	.word	0x00f42400
 800378c:	017d7840 	.word	0x017d7840

08003790 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e28d      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8083 	beq.w	80038b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037b0:	4b94      	ldr	r3, [pc, #592]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 030c 	and.w	r3, r3, #12
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d019      	beq.n	80037f0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037bc:	4b91      	ldr	r3, [pc, #580]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
        || \
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037c8:	4b8e      	ldr	r3, [pc, #568]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037d4:	d00c      	beq.n	80037f0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d112      	bne.n	8003808 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e2:	4b88      	ldr	r3, [pc, #544]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037ee:	d10b      	bne.n	8003808 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	4b84      	ldr	r3, [pc, #528]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d05b      	beq.n	80038b4 <HAL_RCC_OscConfig+0x124>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d157      	bne.n	80038b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e25a      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003810:	d106      	bne.n	8003820 <HAL_RCC_OscConfig+0x90>
 8003812:	4b7c      	ldr	r3, [pc, #496]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a7b      	ldr	r2, [pc, #492]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e01d      	b.n	800385c <HAL_RCC_OscConfig+0xcc>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0xb4>
 800382a:	4b76      	ldr	r3, [pc, #472]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a75      	ldr	r2, [pc, #468]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	4b73      	ldr	r3, [pc, #460]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a72      	ldr	r2, [pc, #456]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 800383c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	e00b      	b.n	800385c <HAL_RCC_OscConfig+0xcc>
 8003844:	4b6f      	ldr	r3, [pc, #444]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a6e      	ldr	r2, [pc, #440]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 800384a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800384e:	6013      	str	r3, [r2, #0]
 8003850:	4b6c      	ldr	r3, [pc, #432]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a6b      	ldr	r2, [pc, #428]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d013      	beq.n	800388c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fe fcc0 	bl	80021e8 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800386c:	f7fe fcbc 	bl	80021e8 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b64      	cmp	r3, #100	@ 0x64
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e21f      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387e:	4b61      	ldr	r3, [pc, #388]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0xdc>
 800388a:	e014      	b.n	80038b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe fcac 	bl	80021e8 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003894:	f7fe fca8 	bl	80021e8 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	@ 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e20b      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a6:	4b57      	ldr	r3, [pc, #348]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x104>
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d06f      	beq.n	80039a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038c2:	4b50      	ldr	r3, [pc, #320]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 030c 	and.w	r3, r3, #12
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d017      	beq.n	80038fe <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038ce:	4b4d      	ldr	r3, [pc, #308]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 030c 	and.w	r3, r3, #12
        || \
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d105      	bne.n	80038e6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038da:	4b4a      	ldr	r3, [pc, #296]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00b      	beq.n	80038fe <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038e6:	4b47      	ldr	r3, [pc, #284]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80038ee:	2b0c      	cmp	r3, #12
 80038f0:	d11c      	bne.n	800392c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f2:	4b44      	ldr	r3, [pc, #272]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d116      	bne.n	800392c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fe:	4b41      	ldr	r3, [pc, #260]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d005      	beq.n	8003916 <HAL_RCC_OscConfig+0x186>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d001      	beq.n	8003916 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e1d3      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003916:	4b3b      	ldr	r3, [pc, #236]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	00db      	lsls	r3, r3, #3
 8003924:	4937      	ldr	r1, [pc, #220]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003926:	4313      	orrs	r3, r2
 8003928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392a:	e03a      	b.n	80039a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003934:	4b34      	ldr	r3, [pc, #208]	@ (8003a08 <HAL_RCC_OscConfig+0x278>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fe fc55 	bl	80021e8 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003942:	f7fe fc51 	bl	80021e8 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e1b4      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003954:	4b2b      	ldr	r3, [pc, #172]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003960:	4b28      	ldr	r3, [pc, #160]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4925      	ldr	r1, [pc, #148]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
 8003974:	e015      	b.n	80039a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003976:	4b24      	ldr	r3, [pc, #144]	@ (8003a08 <HAL_RCC_OscConfig+0x278>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7fe fc34 	bl	80021e8 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003984:	f7fe fc30 	bl	80021e8 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e193      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003996:	4b1b      	ldr	r3, [pc, #108]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d036      	beq.n	8003a1c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d016      	beq.n	80039e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b6:	4b15      	ldr	r3, [pc, #84]	@ (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fe fc14 	bl	80021e8 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c4:	f7fe fc10 	bl	80021e8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e173      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <HAL_RCC_OscConfig+0x274>)
 80039d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0f0      	beq.n	80039c4 <HAL_RCC_OscConfig+0x234>
 80039e2:	e01b      	b.n	8003a1c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e4:	4b09      	ldr	r3, [pc, #36]	@ (8003a0c <HAL_RCC_OscConfig+0x27c>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ea:	f7fe fbfd 	bl	80021e8 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f0:	e00e      	b.n	8003a10 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f2:	f7fe fbf9 	bl	80021e8 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d907      	bls.n	8003a10 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e15c      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
 8003a04:	40023800 	.word	0x40023800
 8003a08:	42470000 	.word	0x42470000
 8003a0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a10:	4b8a      	ldr	r3, [pc, #552]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ea      	bne.n	80039f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8097 	beq.w	8003b58 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2e:	4b83      	ldr	r3, [pc, #524]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10f      	bne.n	8003a5a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	4b7f      	ldr	r3, [pc, #508]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a42:	4a7e      	ldr	r2, [pc, #504]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a4a:	4b7c      	ldr	r3, [pc, #496]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a52:	60bb      	str	r3, [r7, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a56:	2301      	movs	r3, #1
 8003a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5a:	4b79      	ldr	r3, [pc, #484]	@ (8003c40 <HAL_RCC_OscConfig+0x4b0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d118      	bne.n	8003a98 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a66:	4b76      	ldr	r3, [pc, #472]	@ (8003c40 <HAL_RCC_OscConfig+0x4b0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a75      	ldr	r2, [pc, #468]	@ (8003c40 <HAL_RCC_OscConfig+0x4b0>)
 8003a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a72:	f7fe fbb9 	bl	80021e8 <HAL_GetTick>
 8003a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	e008      	b.n	8003a8c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7a:	f7fe fbb5 	bl	80021e8 <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e118      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003c40 <HAL_RCC_OscConfig+0x4b0>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d0f0      	beq.n	8003a7a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d106      	bne.n	8003aae <HAL_RCC_OscConfig+0x31e>
 8003aa0:	4b66      	ldr	r3, [pc, #408]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa4:	4a65      	ldr	r2, [pc, #404]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003aa6:	f043 0301 	orr.w	r3, r3, #1
 8003aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aac:	e01c      	b.n	8003ae8 <HAL_RCC_OscConfig+0x358>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2b05      	cmp	r3, #5
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x340>
 8003ab6:	4b61      	ldr	r3, [pc, #388]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aba:	4a60      	ldr	r2, [pc, #384]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003abc:	f043 0304 	orr.w	r3, r3, #4
 8003ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac2:	4b5e      	ldr	r3, [pc, #376]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac6:	4a5d      	ldr	r2, [pc, #372]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCC_OscConfig+0x358>
 8003ad0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad4:	4a59      	ldr	r2, [pc, #356]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003ad6:	f023 0301 	bic.w	r3, r3, #1
 8003ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8003adc:	4b57      	ldr	r3, [pc, #348]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae0:	4a56      	ldr	r2, [pc, #344]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003ae2:	f023 0304 	bic.w	r3, r3, #4
 8003ae6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d015      	beq.n	8003b1c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af0:	f7fe fb7a 	bl	80021e8 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af6:	e00a      	b.n	8003b0e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003af8:	f7fe fb76 	bl	80021e8 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e0d7      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d0ee      	beq.n	8003af8 <HAL_RCC_OscConfig+0x368>
 8003b1a:	e014      	b.n	8003b46 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1c:	f7fe fb64 	bl	80021e8 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b24:	f7fe fb60 	bl	80021e8 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0c1      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3a:	4b40      	ldr	r3, [pc, #256]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1ee      	bne.n	8003b24 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d105      	bne.n	8003b58 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b50:	4a3a      	ldr	r2, [pc, #232]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003b52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	f000 80ad 	beq.w	8003cbc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b62:	4b36      	ldr	r3, [pc, #216]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d060      	beq.n	8003c30 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d145      	bne.n	8003c02 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b76:	4b33      	ldr	r3, [pc, #204]	@ (8003c44 <HAL_RCC_OscConfig+0x4b4>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fe fb34 	bl	80021e8 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fe fb30 	bl	80021e8 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e093      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b96:	4b29      	ldr	r3, [pc, #164]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	69da      	ldr	r2, [r3, #28]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	019b      	lsls	r3, r3, #6
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	041b      	lsls	r3, r3, #16
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	061b      	lsls	r3, r3, #24
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bcc:	071b      	lsls	r3, r3, #28
 8003bce:	491b      	ldr	r1, [pc, #108]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c44 <HAL_RCC_OscConfig+0x4b4>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fe fb05 	bl	80021e8 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be2:	f7fe fb01 	bl	80021e8 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e064      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf4:	4b11      	ldr	r3, [pc, #68]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x452>
 8003c00:	e05c      	b.n	8003cbc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c02:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <HAL_RCC_OscConfig+0x4b4>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7fe faee 	bl	80021e8 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0e:	e008      	b.n	8003c22 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c10:	f7fe faea 	bl	80021e8 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e04d      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c22:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_RCC_OscConfig+0x4ac>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1f0      	bne.n	8003c10 <HAL_RCC_OscConfig+0x480>
 8003c2e:	e045      	b.n	8003cbc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d107      	bne.n	8003c48 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e040      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40007000 	.word	0x40007000
 8003c44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c48:	4b1f      	ldr	r3, [pc, #124]	@ (8003cc8 <HAL_RCC_OscConfig+0x538>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d030      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d129      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d122      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c78:	4013      	ands	r3, r2
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d119      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8e:	085b      	lsrs	r3, r3, #1
 8003c90:	3b01      	subs	r3, #1
 8003c92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d10f      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ca2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d107      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40023800 	.word	0x40023800

08003ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07b      	b.n	8003dd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d108      	bne.n	8003cf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cee:	d009      	beq.n	8003d04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]
 8003cf6:	e005      	b.n	8003d04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fe f83c 	bl	8001d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d88:	ea42 0103 	orr.w	r1, r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0104 	and.w	r1, r3, #4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	f003 0210 	and.w	r2, r3, #16
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e041      	b.n	8003e74 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fe f841 	bl	8001e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4610      	mov	r0, r2
 8003e1e:	f000 f90f 	bl	8004040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d001      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e04e      	b.n	8003f32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a23      	ldr	r2, [pc, #140]	@ (8003f40 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d022      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebe:	d01d      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f44 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d018      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a1e      	ldr	r2, [pc, #120]	@ (8003f48 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8003f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a19      	ldr	r2, [pc, #100]	@ (8003f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a18      	ldr	r2, [pc, #96]	@ (8003f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d111      	bne.n	8003f20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0307 	and.w	r3, r3, #7
 8003f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d010      	beq.n	8003f30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0201 	orr.w	r2, r2, #1
 8003f1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1e:	e007      	b.n	8003f30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40010000 	.word	0x40010000
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40000c00 	.word	0x40000c00
 8003f50:	40010400 	.word	0x40010400
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40001800 	.word	0x40001800

08003f5c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0201 	bic.w	r2, r2, #1
 8003f72:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6a1a      	ldr	r2, [r3, #32]
 8003f7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10f      	bne.n	8003fa4 <HAL_TIM_Base_Stop_IT+0x48>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6a1a      	ldr	r2, [r3, #32]
 8003f8a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d107      	bne.n	8003fa4 <HAL_TIM_Base_Stop_IT+0x48>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b082      	sub	sp, #8
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e031      	b.n	8004036 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003fe2:	6839      	ldr	r1, [r7, #0]
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 f8d1 	bl	800418c <TIM_SlaveTimer_SetConfig>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e018      	b.n	8004036 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004012:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004022:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a43      	ldr	r2, [pc, #268]	@ (8004160 <TIM_Base_SetConfig+0x120>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d013      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405e:	d00f      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a40      	ldr	r2, [pc, #256]	@ (8004164 <TIM_Base_SetConfig+0x124>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00b      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3f      	ldr	r2, [pc, #252]	@ (8004168 <TIM_Base_SetConfig+0x128>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3e      	ldr	r2, [pc, #248]	@ (800416c <TIM_Base_SetConfig+0x12c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3d      	ldr	r2, [pc, #244]	@ (8004170 <TIM_Base_SetConfig+0x130>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d108      	bne.n	8004092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a32      	ldr	r2, [pc, #200]	@ (8004160 <TIM_Base_SetConfig+0x120>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02b      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a0:	d027      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004164 <TIM_Base_SetConfig+0x124>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d023      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004168 <TIM_Base_SetConfig+0x128>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01f      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a2d      	ldr	r2, [pc, #180]	@ (800416c <TIM_Base_SetConfig+0x12c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01b      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004170 <TIM_Base_SetConfig+0x130>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d017      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004174 <TIM_Base_SetConfig+0x134>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004178 <TIM_Base_SetConfig+0x138>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00f      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a29      	ldr	r2, [pc, #164]	@ (800417c <TIM_Base_SetConfig+0x13c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00b      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a28      	ldr	r2, [pc, #160]	@ (8004180 <TIM_Base_SetConfig+0x140>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a27      	ldr	r2, [pc, #156]	@ (8004184 <TIM_Base_SetConfig+0x144>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d003      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a26      	ldr	r2, [pc, #152]	@ (8004188 <TIM_Base_SetConfig+0x148>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d108      	bne.n	8004104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a0e      	ldr	r2, [pc, #56]	@ (8004160 <TIM_Base_SetConfig+0x120>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_Base_SetConfig+0xf2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a10      	ldr	r2, [pc, #64]	@ (8004170 <TIM_Base_SetConfig+0x130>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d103      	bne.n	800413a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f043 0204 	orr.w	r2, r3, #4
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	601a      	str	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800
 800416c:	40000c00 	.word	0x40000c00
 8004170:	40010400 	.word	0x40010400
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800
 8004180:	40001800 	.word	0x40001800
 8004184:	40001c00 	.word	0x40001c00
 8004188:	40002000 	.word	0x40002000

0800418c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	f023 0307 	bic.w	r3, r3, #7
 80041ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b70      	cmp	r3, #112	@ 0x70
 80041d4:	d01a      	beq.n	800420c <TIM_SlaveTimer_SetConfig+0x80>
 80041d6:	2b70      	cmp	r3, #112	@ 0x70
 80041d8:	d860      	bhi.n	800429c <TIM_SlaveTimer_SetConfig+0x110>
 80041da:	2b60      	cmp	r3, #96	@ 0x60
 80041dc:	d054      	beq.n	8004288 <TIM_SlaveTimer_SetConfig+0xfc>
 80041de:	2b60      	cmp	r3, #96	@ 0x60
 80041e0:	d85c      	bhi.n	800429c <TIM_SlaveTimer_SetConfig+0x110>
 80041e2:	2b50      	cmp	r3, #80	@ 0x50
 80041e4:	d046      	beq.n	8004274 <TIM_SlaveTimer_SetConfig+0xe8>
 80041e6:	2b50      	cmp	r3, #80	@ 0x50
 80041e8:	d858      	bhi.n	800429c <TIM_SlaveTimer_SetConfig+0x110>
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d019      	beq.n	8004222 <TIM_SlaveTimer_SetConfig+0x96>
 80041ee:	2b40      	cmp	r3, #64	@ 0x40
 80041f0:	d854      	bhi.n	800429c <TIM_SlaveTimer_SetConfig+0x110>
 80041f2:	2b30      	cmp	r3, #48	@ 0x30
 80041f4:	d055      	beq.n	80042a2 <TIM_SlaveTimer_SetConfig+0x116>
 80041f6:	2b30      	cmp	r3, #48	@ 0x30
 80041f8:	d850      	bhi.n	800429c <TIM_SlaveTimer_SetConfig+0x110>
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d051      	beq.n	80042a2 <TIM_SlaveTimer_SetConfig+0x116>
 80041fe:	2b20      	cmp	r3, #32
 8004200:	d84c      	bhi.n	800429c <TIM_SlaveTimer_SetConfig+0x110>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d04d      	beq.n	80042a2 <TIM_SlaveTimer_SetConfig+0x116>
 8004206:	2b10      	cmp	r3, #16
 8004208:	d04b      	beq.n	80042a2 <TIM_SlaveTimer_SetConfig+0x116>
 800420a:	e047      	b.n	800429c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800421c:	f000 f8a6 	bl	800436c <TIM_ETR_SetConfig>
      break;
 8004220:	e040      	b.n	80042a4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b05      	cmp	r3, #5
 8004228:	d101      	bne.n	800422e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e03b      	b.n	80042a6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6a1a      	ldr	r2, [r3, #32]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699b      	ldr	r3, [r3, #24]
 800424c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004254:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	4313      	orrs	r3, r2
 8004260:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	621a      	str	r2, [r3, #32]
      break;
 8004272:	e017      	b.n	80042a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004280:	461a      	mov	r2, r3
 8004282:	f000 f814 	bl	80042ae <TIM_TI1_ConfigInputStage>
      break;
 8004286:	e00d      	b.n	80042a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004294:	461a      	mov	r2, r3
 8004296:	f000 f839 	bl	800430c <TIM_TI2_ConfigInputStage>
      break;
 800429a:	e003      	b.n	80042a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
      break;
 80042a0:	e000      	b.n	80042a4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80042a2:	bf00      	nop
  }

  return status;
 80042a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b087      	sub	sp, #28
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	f023 0201 	bic.w	r2, r3, #1
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f023 030a 	bic.w	r3, r3, #10
 80042ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	621a      	str	r2, [r3, #32]
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f023 0210 	bic.w	r2, r3, #16
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	031b      	lsls	r3, r3, #12
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	697a      	ldr	r2, [r7, #20]
 8004350:	4313      	orrs	r3, r2
 8004352:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	621a      	str	r2, [r3, #32]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004386:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	021a      	lsls	r2, r3, #8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	431a      	orrs	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	4313      	orrs	r3, r2
 8004398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	609a      	str	r2, [r3, #8]
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e05a      	b.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a21      	ldr	r2, [pc, #132]	@ (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d022      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004410:	d01d      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1d      	ldr	r2, [pc, #116]	@ (800448c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d018      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1b      	ldr	r2, [pc, #108]	@ (8004490 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1a      	ldr	r2, [pc, #104]	@ (8004494 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00e      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a18      	ldr	r2, [pc, #96]	@ (8004498 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d009      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a17      	ldr	r2, [pc, #92]	@ (800449c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a15      	ldr	r2, [pc, #84]	@ (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10c      	bne.n	8004468 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4313      	orrs	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40010000 	.word	0x40010000
 800448c:	40000400 	.word	0x40000400
 8004490:	40000800 	.word	0x40000800
 8004494:	40000c00 	.word	0x40000c00
 8004498:	40010400 	.word	0x40010400
 800449c:	40014000 	.word	0x40014000
 80044a0:	40001800 	.word	0x40001800

080044a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e042      	b.n	800453c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d106      	bne.n	80044d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7fd fd00 	bl	8001ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2224      	movs	r2, #36	@ 0x24
 80044d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 ff81 	bl	80053f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695a      	ldr	r2, [r3, #20]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800450c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800451c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2220      	movs	r2, #32
 8004528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3708      	adds	r7, #8
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	4613      	mov	r3, r2
 8004550:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004558:	b2db      	uxtb	r3, r3
 800455a:	2b20      	cmp	r3, #32
 800455c:	d121      	bne.n	80045a2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_UART_Transmit_IT+0x26>
 8004564:	88fb      	ldrh	r3, [r7, #6]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e01a      	b.n	80045a4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	88fa      	ldrh	r2, [r7, #6]
 800457e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2221      	movs	r2, #33	@ 0x21
 800458a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800459c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e000      	b.n	80045a4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
  }
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d112      	bne.n	80045f0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_UART_Receive_IT+0x26>
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e00b      	b.n	80045f2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045e0:	88fb      	ldrh	r3, [r7, #6]
 80045e2:	461a      	mov	r2, r3
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 fcb6 	bl	8004f58 <UART_Start_Receive_IT>
 80045ec:	4603      	mov	r3, r0
 80045ee:	e000      	b.n	80045f2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80045f0:	2302      	movs	r3, #2
  }
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b0a2      	sub	sp, #136	@ 0x88
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 8004604:	2301      	movs	r3, #1
 8004606:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800461a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800461c:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8004620:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800462e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004630:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004632:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004634:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004636:	e841 2300 	strex	r3, r2, [r1]
 800463a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800463c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1e3      	bne.n	800460a <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800464a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800464c:	e853 3f00 	ldrex	r3, [r3]
 8004650:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004654:	f023 0301 	bic.w	r3, r3, #1
 8004658:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	3314      	adds	r3, #20
 8004660:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004662:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004664:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004666:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004668:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800466a:	e841 2300 	strex	r3, r2, [r1]
 800466e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1e5      	bne.n	8004642 <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	2b01      	cmp	r3, #1
 800467c:	d119      	bne.n	80046b2 <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	330c      	adds	r3, #12
 8004684:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800468e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004690:	f023 0310 	bic.w	r3, r3, #16
 8004694:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	330c      	adds	r3, #12
 800469c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800469e:	647a      	str	r2, [r7, #68]	@ 0x44
 80046a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e5      	bne.n	800467e <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00f      	beq.n	80046da <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c4:	2b80      	cmp	r3, #128	@ 0x80
 80046c6:	d104      	bne.n	80046d2 <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046cc:	4a53      	ldr	r2, [pc, #332]	@ (800481c <HAL_UART_Abort_IT+0x220>)
 80046ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80046d0:	e003      	b.n	80046da <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d6:	2200      	movs	r2, #0
 80046d8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00f      	beq.n	8004702 <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ec:	2b40      	cmp	r3, #64	@ 0x40
 80046ee:	d104      	bne.n	80046fa <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004820 <HAL_UART_Abort_IT+0x224>)
 80046f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80046f8:	e003      	b.n	8004702 <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fe:	2200      	movs	r2, #0
 8004700:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470c:	2b80      	cmp	r3, #128	@ 0x80
 800470e:	d12d      	bne.n	800476c <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3314      	adds	r3, #20
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	623b      	str	r3, [r7, #32]
   return(result);
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004726:	677b      	str	r3, [r7, #116]	@ 0x74
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3314      	adds	r3, #20
 800472e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004730:	633a      	str	r2, [r7, #48]	@ 0x30
 8004732:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800473e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e5      	bne.n	8004710 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00f      	beq.n	800476c <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe f9e6 	bl	8002b22 <HAL_DMA_Abort_IT>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	2200      	movs	r2, #0
 8004762:	651a      	str	r2, [r3, #80]	@ 0x50
 8004764:	e002      	b.n	800476c <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004776:	2b40      	cmp	r3, #64	@ 0x40
 8004778:	d130      	bne.n	80047dc <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3314      	adds	r3, #20
 8004780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	e853 3f00 	ldrex	r3, [r3]
 8004788:	60fb      	str	r3, [r7, #12]
   return(result);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004790:	673b      	str	r3, [r7, #112]	@ 0x70
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3314      	adds	r3, #20
 8004798:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800479a:	61fa      	str	r2, [r7, #28]
 800479c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800479e:	69b9      	ldr	r1, [r7, #24]
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	e841 2300 	strex	r3, r2, [r1]
 80047a6:	617b      	str	r3, [r7, #20]
   return(result);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1e5      	bne.n	800477a <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx stream : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d012      	beq.n	80047dc <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe f9b1 	bl	8002b22 <HAL_DMA_Abort_IT>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ca:	2200      	movs	r2, #0
 80047cc:	651a      	str	r2, [r3, #80]	@ 0x50
        AbortCplt = 0x01U;
 80047ce:	2301      	movs	r3, #1
 80047d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047d4:	e002      	b.n	80047dc <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80047dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d116      	bne.n	8004812 <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	84da      	strh	r2, [r3, #38]	@ 0x26
    huart->RxXferCount = 0x00U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 fb83 	bl	8004f18 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3788      	adds	r7, #136	@ 0x88
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	080050b5 	.word	0x080050b5
 8004820:	08005115 	.word	0x08005115

08004824 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b09a      	sub	sp, #104	@ 0x68
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800483c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004842:	667b      	str	r3, [r7, #100]	@ 0x64
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800484c:	657a      	str	r2, [r7, #84]	@ 0x54
 800484e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004852:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800485a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e5      	bne.n	800482c <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3314      	adds	r3, #20
 8004866:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	663b      	str	r3, [r7, #96]	@ 0x60
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3314      	adds	r3, #20
 800487e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004880:	643a      	str	r2, [r7, #64]	@ 0x40
 8004882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800488e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e5      	bne.n	8004860 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	d119      	bne.n	80048d0 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f023 0310 	bic.w	r3, r3, #16
 80048b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80048bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e5      	bne.n	800489c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048da:	2b40      	cmp	r3, #64	@ 0x40
 80048dc:	d13f      	bne.n	800495e <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	3314      	adds	r3, #20
 80048e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	e853 3f00 	ldrex	r3, [r3]
 80048ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3314      	adds	r3, #20
 80048fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048fe:	61ba      	str	r2, [r7, #24]
 8004900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004902:	6979      	ldr	r1, [r7, #20]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	e841 2300 	strex	r3, r2, [r1]
 800490a:	613b      	str	r3, [r7, #16]
   return(result);
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1e5      	bne.n	80048de <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d013      	beq.n	8004942 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800491e:	4a19      	ldr	r2, [pc, #100]	@ (8004984 <HAL_UART_AbortReceive_IT+0x160>)
 8004920:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004926:	4618      	mov	r0, r3
 8004928:	f7fe f8fb 	bl	8002b22 <HAL_DMA_Abort_IT>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d022      	beq.n	8004978 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800493c:	4610      	mov	r0, r2
 800493e:	4798      	blx	r3
 8004940:	e01a      	b.n	8004978 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fae8 	bl	8004f2c <HAL_UART_AbortReceiveCpltCallback>
 800495c:	e00c      	b.n	8004978 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fada 	bl	8004f2c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3768      	adds	r7, #104	@ 0x68
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	08005175 	.word	0x08005175

08004988 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b0ba      	sub	sp, #232	@ 0xe8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80049b4:	2300      	movs	r3, #0
 80049b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80049ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80049c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10f      	bne.n	80049ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_UART_IRQHandler+0x66>
 80049da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049de:	f003 0320 	and.w	r3, r3, #32
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fc44 	bl	8005274 <UART_Receive_IT>
      return;
 80049ec:	e273      	b.n	8004ed6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 80de 	beq.w	8004bb4 <HAL_UART_IRQHandler+0x22c>
 80049f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f000 80d1 	beq.w	8004bb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_UART_IRQHandler+0xae>
 8004a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2e:	f043 0201 	orr.w	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <HAL_UART_IRQHandler+0xd2>
 8004a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a52:	f043 0202 	orr.w	r2, r3, #2
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00b      	beq.n	8004a7e <HAL_UART_IRQHandler+0xf6>
 8004a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a76:	f043 0204 	orr.w	r2, r3, #4
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d011      	beq.n	8004aae <HAL_UART_IRQHandler+0x126>
 8004a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d105      	bne.n	8004aa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aa6:	f043 0208 	orr.w	r2, r3, #8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 820a 	beq.w	8004ecc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004abc:	f003 0320 	and.w	r3, r3, #32
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d008      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x14e>
 8004ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac8:	f003 0320 	and.w	r3, r3, #32
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fbcf 	bl	8005274 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae0:	2b40      	cmp	r3, #64	@ 0x40
 8004ae2:	bf0c      	ite	eq
 8004ae4:	2301      	moveq	r3, #1
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <HAL_UART_IRQHandler+0x17a>
 8004afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d04f      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fa62 	bl	8004fcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b12:	2b40      	cmp	r3, #64	@ 0x40
 8004b14:	d141      	bne.n	8004b9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3314      	adds	r3, #20
 8004b1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	3314      	adds	r3, #20
 8004b3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d1d9      	bne.n	8004b16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d013      	beq.n	8004b92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6e:	4a8a      	ldr	r2, [pc, #552]	@ (8004d98 <HAL_UART_IRQHandler+0x410>)
 8004b70:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd ffd3 	bl	8002b22 <HAL_DMA_Abort_IT>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d016      	beq.n	8004bb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b8c:	4610      	mov	r0, r2
 8004b8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b90:	e00e      	b.n	8004bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9b6 	bl	8004f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b98:	e00a      	b.n	8004bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9b2 	bl	8004f04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ba0:	e006      	b.n	8004bb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 f9ae 	bl	8004f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004bae:	e18d      	b.n	8004ecc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bb0:	bf00      	nop
    return;
 8004bb2:	e18b      	b.n	8004ecc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	f040 8167 	bne.w	8004e8c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004bbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc2:	f003 0310 	and.w	r3, r3, #16
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 8160 	beq.w	8004e8c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bd0:	f003 0310 	and.w	r3, r3, #16
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8159 	beq.w	8004e8c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bfa:	2b40      	cmp	r3, #64	@ 0x40
 8004bfc:	f040 80ce 	bne.w	8004d9c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80a9 	beq.w	8004d68 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	f080 80a2 	bcs.w	8004d68 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c36:	f000 8088 	beq.w	8004d4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	330c      	adds	r3, #12
 8004c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	330c      	adds	r3, #12
 8004c62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1d9      	bne.n	8004c3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	3314      	adds	r3, #20
 8004c8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c90:	e853 3f00 	ldrex	r3, [r3]
 8004c94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3314      	adds	r3, #20
 8004ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004caa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e1      	bne.n	8004c86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3314      	adds	r3, #20
 8004cc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ccc:	e853 3f00 	ldrex	r3, [r3]
 8004cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	3314      	adds	r3, #20
 8004ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ce6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e3      	bne.n	8004cc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	330c      	adds	r3, #12
 8004d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d1a:	f023 0310 	bic.w	r3, r3, #16
 8004d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	330c      	adds	r3, #12
 8004d28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e3      	bne.n	8004d08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fd fe7c 	bl	8002a42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	4619      	mov	r1, r3
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f8ed 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004d66:	e0b3      	b.n	8004ed0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d70:	429a      	cmp	r2, r3
 8004d72:	f040 80ad 	bne.w	8004ed0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d80:	f040 80a6 	bne.w	8004ed0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d8e:	4619      	mov	r1, r3
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f8d5 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
      return;
 8004d96:	e09b      	b.n	8004ed0 <HAL_UART_IRQHandler+0x548>
 8004d98:	08005093 	.word	0x08005093
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 808e 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004db8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8089 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	330c      	adds	r3, #12
 8004dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dcc:	e853 3f00 	ldrex	r3, [r3]
 8004dd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004de6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004de8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e3      	bne.n	8004dc2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	3314      	adds	r3, #20
 8004e00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	623b      	str	r3, [r7, #32]
   return(result);
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f023 0301 	bic.w	r3, r3, #1
 8004e10:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3314      	adds	r3, #20
 8004e1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e1e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e3      	bne.n	8004dfa <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	e853 3f00 	ldrex	r3, [r3]
 8004e4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f023 0310 	bic.w	r3, r3, #16
 8004e56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e64:	61fa      	str	r2, [r7, #28]
 8004e66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	69fa      	ldr	r2, [r7, #28]
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	617b      	str	r3, [r7, #20]
   return(result);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e3      	bne.n	8004e40 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e82:	4619      	mov	r1, r3
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f85b 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e8a:	e023      	b.n	8004ed4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <HAL_UART_IRQHandler+0x524>
 8004e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d003      	beq.n	8004eac <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f97d 	bl	80051a4 <UART_Transmit_IT>
    return;
 8004eaa:	e014      	b.n	8004ed6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x54e>
 8004eb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d008      	beq.n	8004ed6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f9bd 	bl	8005244 <UART_EndTransmit_IT>
    return;
 8004eca:	e004      	b.n	8004ed6 <HAL_UART_IRQHandler+0x54e>
    return;
 8004ecc:	bf00      	nop
 8004ece:	e002      	b.n	8004ed6 <HAL_UART_IRQHandler+0x54e>
      return;
 8004ed0:	bf00      	nop
 8004ed2:	e000      	b.n	8004ed6 <HAL_UART_IRQHandler+0x54e>
      return;
 8004ed4:	bf00      	nop
  }
}
 8004ed6:	37e8      	adds	r7, #232	@ 0xe8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	4613      	mov	r3, r2
 8004f64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	88fa      	ldrh	r2, [r7, #6]
 8004f70:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	88fa      	ldrh	r2, [r7, #6]
 8004f76:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2222      	movs	r2, #34	@ 0x22
 8004f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d007      	beq.n	8004f9e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695a      	ldr	r2, [r3, #20]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f042 0201 	orr.w	r2, r2, #1
 8004fac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0220 	orr.w	r2, r2, #32
 8004fbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b095      	sub	sp, #84	@ 0x54
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	330c      	adds	r3, #12
 8004fda:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fde:	e853 3f00 	ldrex	r3, [r3]
 8004fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ff4:	643a      	str	r2, [r7, #64]	@ 0x40
 8004ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e5      	bne.n	8004fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3314      	adds	r3, #20
 800500e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	e853 3f00 	ldrex	r3, [r3]
 8005016:	61fb      	str	r3, [r7, #28]
   return(result);
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f023 0301 	bic.w	r3, r3, #1
 800501e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3314      	adds	r3, #20
 8005026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005028:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800502a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800502e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005030:	e841 2300 	strex	r3, r2, [r1]
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1e5      	bne.n	8005008 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005040:	2b01      	cmp	r3, #1
 8005042:	d119      	bne.n	8005078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	330c      	adds	r3, #12
 800504a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	60bb      	str	r3, [r7, #8]
   return(result);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f023 0310 	bic.w	r3, r3, #16
 800505a:	647b      	str	r3, [r7, #68]	@ 0x44
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	330c      	adds	r3, #12
 8005062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005064:	61ba      	str	r2, [r7, #24]
 8005066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6979      	ldr	r1, [r7, #20]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	613b      	str	r3, [r7, #16]
   return(result);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e5      	bne.n	8005044 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005086:	bf00      	nop
 8005088:	3754      	adds	r7, #84	@ 0x54
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005092:	b580      	push	{r7, lr}
 8005094:	b084      	sub	sp, #16
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff ff2c 	bl	8004f04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c0:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	2200      	movs	r2, #0
 80050c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d004      	beq.n	80050dc <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d117      	bne.n	800510c <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff ff07 	bl	8004f18 <HAL_UART_AbortCpltCallback>
 800510a:	e000      	b.n	800510e <UART_DMATxAbortCallback+0x5a>
      return;
 800510c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005120:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005126:	2200      	movs	r2, #0
 8005128:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512e:	2b00      	cmp	r3, #0
 8005130:	d004      	beq.n	800513c <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005138:	2b00      	cmp	r3, #0
 800513a:	d117      	bne.n	800516c <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2220      	movs	r2, #32
 8005152:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff fed7 	bl	8004f18 <HAL_UART_AbortCpltCallback>
 800516a:	e000      	b.n	800516e <UART_DMARxAbortCallback+0x5a>
      return;
 800516c:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7ff fec8 	bl	8004f2c <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b21      	cmp	r3, #33	@ 0x21
 80051b6:	d13e      	bne.n	8005236 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c0:	d114      	bne.n	80051ec <UART_Transmit_IT+0x48>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d110      	bne.n	80051ec <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	881b      	ldrh	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	1c9a      	adds	r2, r3, #2
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	621a      	str	r2, [r3, #32]
 80051ea:	e008      	b.n	80051fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	1c59      	adds	r1, r3, #1
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	6211      	str	r1, [r2, #32]
 80051f6:	781a      	ldrb	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005202:	b29b      	uxth	r3, r3
 8005204:	3b01      	subs	r3, #1
 8005206:	b29b      	uxth	r3, r3
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	4619      	mov	r1, r3
 800520c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10f      	bne.n	8005232 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005220:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005230:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68da      	ldr	r2, [r3, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800525a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fe39 	bl	8004edc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08c      	sub	sp, #48	@ 0x30
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800527c:	2300      	movs	r3, #0
 800527e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b22      	cmp	r3, #34	@ 0x22
 800528e:	f040 80aa 	bne.w	80053e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800529a:	d115      	bne.n	80052c8 <UART_Receive_IT+0x54>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d111      	bne.n	80052c8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ba:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	1c9a      	adds	r2, r3, #2
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80052c6:	e024      	b.n	8005312 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052d6:	d007      	beq.n	80052e8 <UART_Receive_IT+0x74>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <UART_Receive_IT+0x82>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e008      	b.n	8005308 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005302:	b2da      	uxtb	r2, r3
 8005304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005306:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005316:	b29b      	uxth	r3, r3
 8005318:	3b01      	subs	r3, #1
 800531a:	b29b      	uxth	r3, r3
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	4619      	mov	r1, r3
 8005320:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005322:	2b00      	cmp	r3, #0
 8005324:	d15d      	bne.n	80053e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0220 	bic.w	r2, r2, #32
 8005334:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005344:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0201 	bic.w	r2, r2, #1
 8005354:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	2b01      	cmp	r3, #1
 800536a:	d135      	bne.n	80053d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	e853 3f00 	ldrex	r3, [r3]
 8005380:	613b      	str	r3, [r7, #16]
   return(result);
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f023 0310 	bic.w	r3, r3, #16
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	330c      	adds	r3, #12
 8005390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005392:	623a      	str	r2, [r7, #32]
 8005394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005396:	69f9      	ldr	r1, [r7, #28]
 8005398:	6a3a      	ldr	r2, [r7, #32]
 800539a:	e841 2300 	strex	r3, r2, [r1]
 800539e:	61bb      	str	r3, [r7, #24]
   return(result);
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1e5      	bne.n	8005372 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0310 	and.w	r3, r3, #16
 80053b0:	2b10      	cmp	r3, #16
 80053b2:	d10a      	bne.n	80053ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	60fb      	str	r3, [r7, #12]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fdb5 	bl	8004f40 <HAL_UARTEx_RxEventCallback>
 80053d6:	e002      	b.n	80053de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff fd89 	bl	8004ef0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	e002      	b.n	80053e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	e000      	b.n	80053e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053e6:	2302      	movs	r3, #2
  }
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3730      	adds	r7, #48	@ 0x30
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053f4:	b0c0      	sub	sp, #256	@ 0x100
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540c:	68d9      	ldr	r1, [r3, #12]
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	ea40 0301 	orr.w	r3, r0, r1
 8005418:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800541a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800541e:	689a      	ldr	r2, [r3, #8]
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	431a      	orrs	r2, r3
 8005428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	431a      	orrs	r2, r3
 8005430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005448:	f021 010c 	bic.w	r1, r1, #12
 800544c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005456:	430b      	orrs	r3, r1
 8005458:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546a:	6999      	ldr	r1, [r3, #24]
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	ea40 0301 	orr.w	r3, r0, r1
 8005476:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b8f      	ldr	r3, [pc, #572]	@ (80056bc <UART_SetConfig+0x2cc>)
 8005480:	429a      	cmp	r2, r3
 8005482:	d005      	beq.n	8005490 <UART_SetConfig+0xa0>
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b8d      	ldr	r3, [pc, #564]	@ (80056c0 <UART_SetConfig+0x2d0>)
 800548c:	429a      	cmp	r2, r3
 800548e:	d104      	bne.n	800549a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005490:	f7fd ffc0 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 8005494:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005498:	e003      	b.n	80054a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800549a:	f7fd ffa7 	bl	80033ec <HAL_RCC_GetPCLK1Freq>
 800549e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ac:	f040 810c 	bne.w	80056c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054b4:	2200      	movs	r2, #0
 80054b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054c2:	4622      	mov	r2, r4
 80054c4:	462b      	mov	r3, r5
 80054c6:	1891      	adds	r1, r2, r2
 80054c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054ca:	415b      	adcs	r3, r3
 80054cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054d2:	4621      	mov	r1, r4
 80054d4:	eb12 0801 	adds.w	r8, r2, r1
 80054d8:	4629      	mov	r1, r5
 80054da:	eb43 0901 	adc.w	r9, r3, r1
 80054de:	f04f 0200 	mov.w	r2, #0
 80054e2:	f04f 0300 	mov.w	r3, #0
 80054e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80054f2:	4690      	mov	r8, r2
 80054f4:	4699      	mov	r9, r3
 80054f6:	4623      	mov	r3, r4
 80054f8:	eb18 0303 	adds.w	r3, r8, r3
 80054fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005500:	462b      	mov	r3, r5
 8005502:	eb49 0303 	adc.w	r3, r9, r3
 8005506:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800550a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005516:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800551a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800551e:	460b      	mov	r3, r1
 8005520:	18db      	adds	r3, r3, r3
 8005522:	653b      	str	r3, [r7, #80]	@ 0x50
 8005524:	4613      	mov	r3, r2
 8005526:	eb42 0303 	adc.w	r3, r2, r3
 800552a:	657b      	str	r3, [r7, #84]	@ 0x54
 800552c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005530:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005534:	f7fa fe66 	bl	8000204 <__aeabi_uldivmod>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4b61      	ldr	r3, [pc, #388]	@ (80056c4 <UART_SetConfig+0x2d4>)
 800553e:	fba3 2302 	umull	r2, r3, r3, r2
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	011c      	lsls	r4, r3, #4
 8005546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800554a:	2200      	movs	r2, #0
 800554c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005550:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005554:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	1891      	adds	r1, r2, r2
 800555e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005560:	415b      	adcs	r3, r3
 8005562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005564:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005568:	4641      	mov	r1, r8
 800556a:	eb12 0a01 	adds.w	sl, r2, r1
 800556e:	4649      	mov	r1, r9
 8005570:	eb43 0b01 	adc.w	fp, r3, r1
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005580:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005584:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005588:	4692      	mov	sl, r2
 800558a:	469b      	mov	fp, r3
 800558c:	4643      	mov	r3, r8
 800558e:	eb1a 0303 	adds.w	r3, sl, r3
 8005592:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005596:	464b      	mov	r3, r9
 8005598:	eb4b 0303 	adc.w	r3, fp, r3
 800559c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055b4:	460b      	mov	r3, r1
 80055b6:	18db      	adds	r3, r3, r3
 80055b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ba:	4613      	mov	r3, r2
 80055bc:	eb42 0303 	adc.w	r3, r2, r3
 80055c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80055c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80055ca:	f7fa fe1b 	bl	8000204 <__aeabi_uldivmod>
 80055ce:	4602      	mov	r2, r0
 80055d0:	460b      	mov	r3, r1
 80055d2:	4611      	mov	r1, r2
 80055d4:	4b3b      	ldr	r3, [pc, #236]	@ (80056c4 <UART_SetConfig+0x2d4>)
 80055d6:	fba3 2301 	umull	r2, r3, r3, r1
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	2264      	movs	r2, #100	@ 0x64
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	1acb      	subs	r3, r1, r3
 80055e4:	00db      	lsls	r3, r3, #3
 80055e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80055ea:	4b36      	ldr	r3, [pc, #216]	@ (80056c4 <UART_SetConfig+0x2d4>)
 80055ec:	fba3 2302 	umull	r2, r3, r3, r2
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80055f8:	441c      	add	r4, r3
 80055fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055fe:	2200      	movs	r2, #0
 8005600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005604:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005608:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800560c:	4642      	mov	r2, r8
 800560e:	464b      	mov	r3, r9
 8005610:	1891      	adds	r1, r2, r2
 8005612:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005614:	415b      	adcs	r3, r3
 8005616:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005618:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800561c:	4641      	mov	r1, r8
 800561e:	1851      	adds	r1, r2, r1
 8005620:	6339      	str	r1, [r7, #48]	@ 0x30
 8005622:	4649      	mov	r1, r9
 8005624:	414b      	adcs	r3, r1
 8005626:	637b      	str	r3, [r7, #52]	@ 0x34
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f04f 0300 	mov.w	r3, #0
 8005630:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005634:	4659      	mov	r1, fp
 8005636:	00cb      	lsls	r3, r1, #3
 8005638:	4651      	mov	r1, sl
 800563a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800563e:	4651      	mov	r1, sl
 8005640:	00ca      	lsls	r2, r1, #3
 8005642:	4610      	mov	r0, r2
 8005644:	4619      	mov	r1, r3
 8005646:	4603      	mov	r3, r0
 8005648:	4642      	mov	r2, r8
 800564a:	189b      	adds	r3, r3, r2
 800564c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005650:	464b      	mov	r3, r9
 8005652:	460a      	mov	r2, r1
 8005654:	eb42 0303 	adc.w	r3, r2, r3
 8005658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800565c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005668:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800566c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005670:	460b      	mov	r3, r1
 8005672:	18db      	adds	r3, r3, r3
 8005674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005676:	4613      	mov	r3, r2
 8005678:	eb42 0303 	adc.w	r3, r2, r3
 800567c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800567e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005682:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005686:	f7fa fdbd 	bl	8000204 <__aeabi_uldivmod>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	4b0d      	ldr	r3, [pc, #52]	@ (80056c4 <UART_SetConfig+0x2d4>)
 8005690:	fba3 1302 	umull	r1, r3, r3, r2
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	2164      	movs	r1, #100	@ 0x64
 8005698:	fb01 f303 	mul.w	r3, r1, r3
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	3332      	adds	r3, #50	@ 0x32
 80056a2:	4a08      	ldr	r2, [pc, #32]	@ (80056c4 <UART_SetConfig+0x2d4>)
 80056a4:	fba2 2303 	umull	r2, r3, r2, r3
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	f003 0207 	and.w	r2, r3, #7
 80056ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4422      	add	r2, r4
 80056b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056b8:	e106      	b.n	80058c8 <UART_SetConfig+0x4d8>
 80056ba:	bf00      	nop
 80056bc:	40011000 	.word	0x40011000
 80056c0:	40011400 	.word	0x40011400
 80056c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80056d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80056da:	4642      	mov	r2, r8
 80056dc:	464b      	mov	r3, r9
 80056de:	1891      	adds	r1, r2, r2
 80056e0:	6239      	str	r1, [r7, #32]
 80056e2:	415b      	adcs	r3, r3
 80056e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056ea:	4641      	mov	r1, r8
 80056ec:	1854      	adds	r4, r2, r1
 80056ee:	4649      	mov	r1, r9
 80056f0:	eb43 0501 	adc.w	r5, r3, r1
 80056f4:	f04f 0200 	mov.w	r2, #0
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	00eb      	lsls	r3, r5, #3
 80056fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005702:	00e2      	lsls	r2, r4, #3
 8005704:	4614      	mov	r4, r2
 8005706:	461d      	mov	r5, r3
 8005708:	4643      	mov	r3, r8
 800570a:	18e3      	adds	r3, r4, r3
 800570c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005710:	464b      	mov	r3, r9
 8005712:	eb45 0303 	adc.w	r3, r5, r3
 8005716:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800571a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005726:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005736:	4629      	mov	r1, r5
 8005738:	008b      	lsls	r3, r1, #2
 800573a:	4621      	mov	r1, r4
 800573c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005740:	4621      	mov	r1, r4
 8005742:	008a      	lsls	r2, r1, #2
 8005744:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005748:	f7fa fd5c 	bl	8000204 <__aeabi_uldivmod>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4b60      	ldr	r3, [pc, #384]	@ (80058d4 <UART_SetConfig+0x4e4>)
 8005752:	fba3 2302 	umull	r2, r3, r3, r2
 8005756:	095b      	lsrs	r3, r3, #5
 8005758:	011c      	lsls	r4, r3, #4
 800575a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800575e:	2200      	movs	r2, #0
 8005760:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005764:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005768:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800576c:	4642      	mov	r2, r8
 800576e:	464b      	mov	r3, r9
 8005770:	1891      	adds	r1, r2, r2
 8005772:	61b9      	str	r1, [r7, #24]
 8005774:	415b      	adcs	r3, r3
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800577c:	4641      	mov	r1, r8
 800577e:	1851      	adds	r1, r2, r1
 8005780:	6139      	str	r1, [r7, #16]
 8005782:	4649      	mov	r1, r9
 8005784:	414b      	adcs	r3, r1
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	f04f 0200 	mov.w	r2, #0
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005794:	4659      	mov	r1, fp
 8005796:	00cb      	lsls	r3, r1, #3
 8005798:	4651      	mov	r1, sl
 800579a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800579e:	4651      	mov	r1, sl
 80057a0:	00ca      	lsls	r2, r1, #3
 80057a2:	4610      	mov	r0, r2
 80057a4:	4619      	mov	r1, r3
 80057a6:	4603      	mov	r3, r0
 80057a8:	4642      	mov	r2, r8
 80057aa:	189b      	adds	r3, r3, r2
 80057ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057b0:	464b      	mov	r3, r9
 80057b2:	460a      	mov	r2, r1
 80057b4:	eb42 0303 	adc.w	r3, r2, r3
 80057b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	f04f 0300 	mov.w	r3, #0
 80057d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80057d4:	4649      	mov	r1, r9
 80057d6:	008b      	lsls	r3, r1, #2
 80057d8:	4641      	mov	r1, r8
 80057da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057de:	4641      	mov	r1, r8
 80057e0:	008a      	lsls	r2, r1, #2
 80057e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80057e6:	f7fa fd0d 	bl	8000204 <__aeabi_uldivmod>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	4611      	mov	r1, r2
 80057f0:	4b38      	ldr	r3, [pc, #224]	@ (80058d4 <UART_SetConfig+0x4e4>)
 80057f2:	fba3 2301 	umull	r2, r3, r3, r1
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	2264      	movs	r2, #100	@ 0x64
 80057fa:	fb02 f303 	mul.w	r3, r2, r3
 80057fe:	1acb      	subs	r3, r1, r3
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	3332      	adds	r3, #50	@ 0x32
 8005804:	4a33      	ldr	r2, [pc, #204]	@ (80058d4 <UART_SetConfig+0x4e4>)
 8005806:	fba2 2303 	umull	r2, r3, r2, r3
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005810:	441c      	add	r4, r3
 8005812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005816:	2200      	movs	r2, #0
 8005818:	673b      	str	r3, [r7, #112]	@ 0x70
 800581a:	677a      	str	r2, [r7, #116]	@ 0x74
 800581c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005820:	4642      	mov	r2, r8
 8005822:	464b      	mov	r3, r9
 8005824:	1891      	adds	r1, r2, r2
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	415b      	adcs	r3, r3
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005830:	4641      	mov	r1, r8
 8005832:	1851      	adds	r1, r2, r1
 8005834:	6039      	str	r1, [r7, #0]
 8005836:	4649      	mov	r1, r9
 8005838:	414b      	adcs	r3, r1
 800583a:	607b      	str	r3, [r7, #4]
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005848:	4659      	mov	r1, fp
 800584a:	00cb      	lsls	r3, r1, #3
 800584c:	4651      	mov	r1, sl
 800584e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005852:	4651      	mov	r1, sl
 8005854:	00ca      	lsls	r2, r1, #3
 8005856:	4610      	mov	r0, r2
 8005858:	4619      	mov	r1, r3
 800585a:	4603      	mov	r3, r0
 800585c:	4642      	mov	r2, r8
 800585e:	189b      	adds	r3, r3, r2
 8005860:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005862:	464b      	mov	r3, r9
 8005864:	460a      	mov	r2, r1
 8005866:	eb42 0303 	adc.w	r3, r2, r3
 800586a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	663b      	str	r3, [r7, #96]	@ 0x60
 8005876:	667a      	str	r2, [r7, #100]	@ 0x64
 8005878:	f04f 0200 	mov.w	r2, #0
 800587c:	f04f 0300 	mov.w	r3, #0
 8005880:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005884:	4649      	mov	r1, r9
 8005886:	008b      	lsls	r3, r1, #2
 8005888:	4641      	mov	r1, r8
 800588a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800588e:	4641      	mov	r1, r8
 8005890:	008a      	lsls	r2, r1, #2
 8005892:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005896:	f7fa fcb5 	bl	8000204 <__aeabi_uldivmod>
 800589a:	4602      	mov	r2, r0
 800589c:	460b      	mov	r3, r1
 800589e:	4b0d      	ldr	r3, [pc, #52]	@ (80058d4 <UART_SetConfig+0x4e4>)
 80058a0:	fba3 1302 	umull	r1, r3, r3, r2
 80058a4:	095b      	lsrs	r3, r3, #5
 80058a6:	2164      	movs	r1, #100	@ 0x64
 80058a8:	fb01 f303 	mul.w	r3, r1, r3
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	011b      	lsls	r3, r3, #4
 80058b0:	3332      	adds	r3, #50	@ 0x32
 80058b2:	4a08      	ldr	r2, [pc, #32]	@ (80058d4 <UART_SetConfig+0x4e4>)
 80058b4:	fba2 2303 	umull	r2, r3, r2, r3
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	f003 020f 	and.w	r2, r3, #15
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4422      	add	r2, r4
 80058c6:	609a      	str	r2, [r3, #8]
}
 80058c8:	bf00      	nop
 80058ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80058ce:	46bd      	mov	sp, r7
 80058d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058d4:	51eb851f 	.word	0x51eb851f

080058d8 <memset>:
 80058d8:	4402      	add	r2, r0
 80058da:	4603      	mov	r3, r0
 80058dc:	4293      	cmp	r3, r2
 80058de:	d100      	bne.n	80058e2 <memset+0xa>
 80058e0:	4770      	bx	lr
 80058e2:	f803 1b01 	strb.w	r1, [r3], #1
 80058e6:	e7f9      	b.n	80058dc <memset+0x4>

080058e8 <__libc_init_array>:
 80058e8:	b570      	push	{r4, r5, r6, lr}
 80058ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005920 <__libc_init_array+0x38>)
 80058ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005924 <__libc_init_array+0x3c>)
 80058ee:	1b64      	subs	r4, r4, r5
 80058f0:	10a4      	asrs	r4, r4, #2
 80058f2:	2600      	movs	r6, #0
 80058f4:	42a6      	cmp	r6, r4
 80058f6:	d109      	bne.n	800590c <__libc_init_array+0x24>
 80058f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005928 <__libc_init_array+0x40>)
 80058fa:	4c0c      	ldr	r4, [pc, #48]	@ (800592c <__libc_init_array+0x44>)
 80058fc:	f000 f818 	bl	8005930 <_init>
 8005900:	1b64      	subs	r4, r4, r5
 8005902:	10a4      	asrs	r4, r4, #2
 8005904:	2600      	movs	r6, #0
 8005906:	42a6      	cmp	r6, r4
 8005908:	d105      	bne.n	8005916 <__libc_init_array+0x2e>
 800590a:	bd70      	pop	{r4, r5, r6, pc}
 800590c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005910:	4798      	blx	r3
 8005912:	3601      	adds	r6, #1
 8005914:	e7ee      	b.n	80058f4 <__libc_init_array+0xc>
 8005916:	f855 3b04 	ldr.w	r3, [r5], #4
 800591a:	4798      	blx	r3
 800591c:	3601      	adds	r6, #1
 800591e:	e7f2      	b.n	8005906 <__libc_init_array+0x1e>
 8005920:	08005c04 	.word	0x08005c04
 8005924:	08005c04 	.word	0x08005c04
 8005928:	08005c04 	.word	0x08005c04
 800592c:	08005c08 	.word	0x08005c08

08005930 <_init>:
 8005930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005932:	bf00      	nop
 8005934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005936:	bc08      	pop	{r3}
 8005938:	469e      	mov	lr, r3
 800593a:	4770      	bx	lr

0800593c <_fini>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr
